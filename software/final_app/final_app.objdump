
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00023340 memsz 0x00023340 flags r-x
    LOAD off    0x00024360 vaddr 0x10023360 paddr 0x1002549c align 2**12
         filesz 0x0000213c memsz 0x0000213c flags rw-
    LOAD off    0x000265d8 vaddr 0x100275d8 paddr 0x100275d8 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000218a0  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001890  10021ad0  10021ad0  00022ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000213c  10023360  1002549c  00024360  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  100275d8  100275d8  000265d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0002649c  2**0
                  CONTENTS
  7 .sdram        00000000  10027748  10027748  0002649c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002649c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001430  00000000  00000000  000264c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034b61  00000000  00000000  000278f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000cf1f  00000000  00000000  0005c451  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011f89  00000000  00000000  00069370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000030d0  00000000  00000000  0007b2fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004c07  00000000  00000000  0007e3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000250a0  00000000  00000000  00082fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000a8074  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002190  00000000  00000000  000a80b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000ae34e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000ae351  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000ae35d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000ae35e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000ae35f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000ae363  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000ae367  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000ae36b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000ae376  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000ae381  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000ae38c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  000ae395  2**0
                  CONTENTS, READONLY
 30 .jdi          00005256  00000000  00000000  000ae3bc  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000773bd  00000000  00000000  000b3612  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10021ad0 l    d  .rodata	00000000 .rodata
10023360 l    d  .rwdata	00000000 .rwdata
100275d8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10027748 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keycall.c
100275d8 l     O .bss	00000002 ctl_reg.3595
100275da l     O .bss	00000002 no_device.3596
100275dc l     O .bss	00000002 ctl_reg.3674
100275de l     O .bss	00000002 no_device.3675
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 main_lab8.c
100275e0 l     O .bss	00000002 ctl_reg.3589
100275e2 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 main_lab9.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
100239a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
10022d5e l     O .rodata	00000010 zeroes.4404
1000c37c l     F .text	000000bc __sbprintf
10022d6e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
10022d86 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
10022ea9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
1000dfe8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000fb40 l     F .text	00000008 __fp_unlock
1000fb54 l     F .text	0000019c __sinit.part.1
1000fcf0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
10023de4 l     O .rwdata	00000020 lc_ctype_charset
10023dc4 l     O .rwdata	00000020 lc_message_charset
10023e04 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10023048 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
100133c8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
10013a34 l     F .text	00000064 sulp
1002317c l     O .rodata	00000014 fpinan.2773
10023190 l     O .rodata	00000014 fpi.2737
100231a4 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
100231cc l     O .rodata	00000010 zeroes.4389
100231dc l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
100181fc l     F .text	000000fc __sprint_r.part.0
100231ec l     O .rodata	00000010 zeroes.4349
10019838 l     F .text	000000bc __sbprintf
100231fc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
10019f44 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1002330c l     O .rodata	00000010 zeroes.4333
1002331c l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 alt_close.c
1001f1fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001f310 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1001f33c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1001f430 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001f518 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1001f604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1001f7e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1002548c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
1001fa54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1001fb38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1001fc74 l     F .text	00000034 alt_dev_reg
100243ec l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1001ff50 l     F .text	0000020c altera_avalon_jtag_uart_irq
1002015c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10020a38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10020e98 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10020ff8 l     F .text	0000003c alt_get_errno
10021034 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1002761c g     O .bss	00000004 alt_instruction_exception_handler
10009e8c g     F .text	00000018 putchar
10012b84 g     F .text	00000074 _mprec_log10
100067dc g     F .text	000000bc charToHex
10012c70 g     F .text	0000008c __any_on
1001aaf0 g     F .text	00000054 _isatty_r
10023054 g     O .rodata	00000028 __mprec_tinytens
1001f71c g     F .text	0000007c alt_main
10009ea4 g     F .text	000000c0 _puts_r
10006900 g     F .text	000000c0 printstate
10027648 g     O .bss	00000100 alt_irq
1001ab44 g     F .text	00000060 _lseek_r
10007814 g     F .text	00000148 decrypt
1002549c g       *ABS*	00000000 __flash_rwdata_start
1001dc14 g     F .text	00000088 .hidden __eqdf2
10027748 g       *ABS*	00000000 __alt_heap_start
10009e48 g     F .text	0000003c printf
10007258 g     F .text	00000030 RotWord
1001c244 g     F .text	0000009c _wcrtomb_r
10007194 g     F .text	000000c4 SubWord
100138f4 g     F .text	0000005c __sseek
1000fea0 g     F .text	00000010 __sinit
100198f4 g     F .text	00000140 __swbuf_r
10010c14 g     F .text	0000007c _setlocale_r
1000fcf8 g     F .text	00000078 __sfmoreglue
100181e4 g     F .text	00000018 ungetc
10006898 g     F .text	00000068 charsToHex
1001f7bc g     F .text	00000024 __malloc_unlock
10013a98 g     F .text	000015e4 _strtod_r
10008df0 g     F .text	00000080 UsbGetRetryCnt
100119c0 g     F .text	0000015c memmove
1000026c g     F .text	00000088 IO_init
1000fe88 g     F .text	00000018 _cleanup
10011c44 g     F .text	000000a8 _Balloc
100069c0 g     F .text	00000078 printbyte
1001dc9c g     F .text	000000dc .hidden __gtdf2
10021420 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
1001fa90 g     F .text	00000078 times
10000020 g       *ABS*	00000000 __flash_exceptions_start
10022880 g     O .rodata	00000100 aes_sbox
10019ee8 g     F .text	0000005c _fstat_r
10027600 g     O .bss	00000004 errno
1000de2c g     F .text	0000001c __svfscanf
10013870 g     F .text	00000008 __seofread
1001aea4 g     F .text	000013a0 ___svfiprintf_internal_r
10027608 g     O .bss	00000004 alt_argv
10023360 g     O .rwdata	00000600 gf_mul
10007430 g     F .text	00000164 ShiftRows
1002d44c g       *ABS*	00000000 _gp
1001fb08 g     F .text	00000030 usleep
1002426c g     O .rwdata	00000180 alt_fd_list
10009e84 g     F .text	00000008 _putchar_r
10021444 g     F .text	00000090 alt_find_dev
1000a07c g     F .text	00000008 _times_r
10009cd0 g     F .text	00000148 memcpy
1001a894 g     F .text	0000025c __hexnan
1000fb48 g     F .text	0000000c _cleanup_r
100098e8 g     F .text	000000dc .hidden __floatsidf
10020f7c g     F .text	0000007c alt_io_redirect
1001dd78 g     F .text	000000f4 .hidden __ltdf2
1000795c g     F .text	00000420 main_lab9
10021ad0 g       *ABS*	00000000 __DTOR_END__
10009f64 g     F .text	00000014 puts
100216a0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10011764 g     F .text	000000d8 mbrtowc
100135b8 g     F .text	00000074 __fpclassifyd
1000de48 g     F .text	0000004c _vfscanf_r
10012ae0 g     F .text	000000a4 __ratio
1001981c g     F .text	0000001c __vfiprintf_internal
10020354 g     F .text	0000021c altera_avalon_jtag_uart_read
10009e18 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10009bc8 g     F .text	00000064 .hidden __udivsi3
1001f46c g     F .text	000000ac isatty
10010be4 g     F .text	00000030 iswspace
100230a4 g     O .rodata	000000c8 __mprec_tens
10010c90 g     F .text	0000000c __locale_charset
1001d2a0 g     F .text	000000c8 .hidden __lesf2
1001c538 g     F .text	00000074 .hidden __fixunsdfsi
100275fc g     O .bss	00000004 __malloc_top_pad
1000847c g     F .text	00000268 UsbGetConfigDesc2
10015984 g     F .text	0000001c strtoul
10025460 g     O .rwdata	00000004 __mb_cur_max
10010cc0 g     F .text	0000000c _localeconv_r
100159a0 g     F .text	00000320 _strtoull_r
10012078 g     F .text	0000003c __i2b
10010594 g     F .text	000004c8 __sfvwrite_r
1001362c g     F .text	00000054 _sbrk_r
1001aba4 g     F .text	00000060 _read_r
10025484 g     O .rwdata	00000004 alt_max_fd
100275e4 g     O .bss	00000004 run_mode
10019bdc g     F .text	000000f0 _fclose_r
10000e64 g     F .text	000001d0 keycall
1000fb10 g     F .text	00000030 fflush
100275f8 g     O .bss	00000004 __malloc_max_sbrked_mem
10006f98 g     F .text	000001fc KeyExpansion
1001d368 g     F .text	000008ac .hidden __adddf3
1001d16c g     F .text	00000078 .hidden __nesf2
10012888 g     F .text	0000010c __b2d
1001cba8 g     F .text	000005c4 .hidden __umoddi3
1001f640 g     F .text	000000dc lseek
10025454 g     O .rwdata	00000004 _global_impure_ptr
10012e64 g     F .text	00000564 _realloc_r
10027748 g       *ABS*	00000000 __bss_end
10020da8 g     F .text	000000f0 alt_iic_isr_register
10021318 g     F .text	00000108 alt_tick
1002320c g     O .rodata	00000100 __hexdig
1001c5ac g     F .text	000005fc .hidden __udivdi3
10019e44 g     F .text	00000024 _fputwc_r
1002307c g     O .rodata	00000028 __mprec_bigtens
10011e5c g     F .text	00000104 __s2b
100099c4 g     F .text	000000a8 .hidden __floatunsidf
100125c8 g     F .text	00000060 __mcmp
10007ecc g     F .text	00000100 UsbSetAddress
1000fec0 g     F .text	00000018 __fp_lock_all
10020d5c g     F .text	0000004c alt_ic_irq_enabled
1002127c g     F .text	0000009c alt_alarm_stop
100153ec g     F .text	0000001c strtol
10027610 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10024244 g     O .rwdata	00000028 alt_dev_null
10020a18 g     F .text	00000020 alt_dcache_flush_all
10011f60 g     F .text	00000068 __hi0bits
100003cc g     F .text	00000a98 keycall_init
10000364 g     F .text	00000068 IO_read
1001efd4 g     F .text	00000080 .hidden __fixdfsi
1001507c g     F .text	00000018 strtod
1002549c g       *ABS*	00000000 __ram_rwdata_end
1002547c g     O .rwdata	00000008 alt_dev_list
1001fb74 g     F .text	00000100 write
10012cfc g     F .text	000000a0 _putc_r
1001d1e4 g     F .text	000000bc .hidden __gtsf2
10023360 g       *ABS*	00000000 __ram_rodata_end
1001f378 g     F .text	000000b8 fstat
1001dd78 g     F .text	000000f4 .hidden __ledf2
10008e70 g     F .text	00000080 UsbPrintMem
10012340 g     F .text	00000140 __pow5mult
10018310 g     F .text	0000150c ___vfiprintf_internal_r
100275f0 g     O .bss	00000004 __nlocale_changed
10009c2c g     F .text	00000058 .hidden __umodsi3
10009fb4 g     F .text	00000030 _scanf_r
10027748 g       *ABS*	00000000 end
1001fe90 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10021ad0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10009a6c g     F .text	00000064 .hidden __clzsi2
10020570 g     F .text	00000224 altera_avalon_jtag_uart_write
1000feb0 g     F .text	00000004 __sfp_lock_acquire
100118dc g     F .text	000000e4 memchr
1000a084 g     F .text	000022dc ___vfprintf_internal_r
10013758 g     F .text	00000058 _sprintf_r
100087e4 g     F .text	00000100 UsbClassRequest
10010284 g     F .text	00000310 _free_r
10010c9c g     F .text	00000010 __locale_mb_cur_max
10007594 g     F .text	00000280 MixColumns
1002191c g     F .text	00000180 __call_exitprocs
10001034 g     F .text	000001c4 getkeys
100275ec g     O .bss	00000004 __mlocale_changed
10025464 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10027614 g     O .bss	00000004 _alt_tick_rate
10015408 g     F .text	00000304 _strtoll_r
10012480 g     F .text	00000148 __lshift
10027618 g     O .bss	00000004 _alt_nticks
1001f81c g     F .text	00000104 read
1001fce0 g     F .text	0000004c alt_sys_init
1001acd4 g     F .text	000001d0 __ssprint_r
10021804 g     F .text	00000118 __register_exitproc
1001ac04 g     F .text	000000d0 strncmp
100120b4 g     F .text	0000028c __multiply
100201fc g     F .text	00000068 altera_avalon_jtag_uart_close
10008ef0 g     F .text	00000028 .hidden __mulsi3
10023360 g       *ABS*	00000000 __ram_rwdata_start
10021ad0 g       *ABS*	00000000 __ram_rodata_start
10027620 g     O .bss	00000028 __malloc_current_mallinfo
1001d16c g     F .text	00000078 .hidden __eqsf2
10012994 g     F .text	0000014c __d2b
10007fcc g     F .text	00000148 UsbGetDeviceDesc1
1001fd2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001570c g     F .text	00000278 _strtoul_r
10022980 g     O .rodata	00000100 aes_invsbox
100215dc g     F .text	000000c4 alt_get_fd
100208c0 g     F .text	00000158 alt_busy_sleep
10019aac g     F .text	00000054 _close_r
10021788 g     F .text	0000007c memcmp
1001fdec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10006da0 g     F .text	000001f8 AES
10027748 g       *ABS*	00000000 __alt_stack_base
1001fe3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000de94 g     F .text	00000154 __swsetup_r
10006ab8 g     F .text	000002e8 encrypt
10008f18 g     F .text	000009d0 .hidden __divdf3
1000fd70 g     F .text	00000118 __sfp
10012bf8 g     F .text	00000078 __copybits
10023e3c g     O .rwdata	00000408 __malloc_av_
1000febc g     F .text	00000004 __sinit_lock_release
1001de6c g     F .text	0000086c .hidden __muldf3
1001381c g     F .text	00000054 __sread
1001012c g     F .text	00000034 fread
10008d6c g     F .text	00000084 UsbWaitTDListDone
100214d4 g     F .text	00000108 alt_find_file
10020a74 g     F .text	000000a4 alt_dev_llist_insert
1001f798 g     F .text	00000024 __malloc_lock
1001f9a4 g     F .text	000000b0 sbrk
1002544c g     O .rwdata	00000004 reg_ptr
10015cc0 g     F .text	000022bc ___svfprintf_internal_r
1000fab4 g     F .text	0000005c _fflush_r
10007370 g     F .text	000000c0 SubBytes
10019b00 g     F .text	000000dc _calloc_r
100275d8 g       *ABS*	00000000 __bss_start
10011b1c g     F .text	00000128 memset
100011f8 g     F .text	000048a0 main
1002760c g     O .bss	00000004 alt_envp
100275f4 g     O .bss	00000004 __malloc_max_total_mem
1001fd8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100086e4 g     F .text	00000100 UsbSetConfig
10019a34 g     F .text	00000018 __swbuf
1001d2a0 g     F .text	000000c8 .hidden __ltsf2
1000fef0 g     F .text	0000023c _fread_r
10013950 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10019ccc g     F .text	00000014 fclose
10015194 g     F .text	00000258 _strtol_r
1001f054 g     F .text	000001a8 .hidden __truncdfsf2
1000e210 g     F .text	00001688 _dtoa_r
10010eac g     F .text	0000080c _malloc_r
1001c3a0 g     F .text	00000030 __ascii_wctomb
10025488 g     O .rwdata	00000004 alt_errno
10017f7c g     F .text	000000d4 __submore
10010a5c g     F .text	000000c4 _fwalk
10011880 g     F .text	0000005c _mbtowc_r
10012d9c g     F .text	000000c8 putc
10009ad0 g     F .text	00000084 .hidden __divsi3
10010160 g     F .text	00000124 _malloc_trim_r
100088e4 g     F .text	00000148 UsbGetHidDesc
10021ad0 g       *ABS*	00000000 __CTOR_END__
10005a98 g     F .text	00000d44 main_lab8
10013958 g     F .text	000000dc strcmp
10021ad0 g       *ABS*	00000000 __flash_rodata_start
10021ad0 g       *ABS*	00000000 __DTOR_LIST__
1001dc14 g     F .text	00000088 .hidden __nedf2
10007dd4 g     F .text	00000044 UsbRead
1001fca8 g     F .text	00000038 alt_irq_init
1001f920 g     F .text	00000084 alt_release_fd
100137b0 g     F .text	0000006c sprintf
10022c11 g     O .rodata	00000100 .hidden __clz_tab
100275e8 g     O .bss	00000004 _PathLocale
10015094 g     F .text	00000100 strtof
1002173c g     F .text	00000014 atexit
1001d1e4 g     F .text	000000bc .hidden __gesf2
10019a4c g     F .text	00000060 _write_r
10010ccc g     F .text	00000018 setlocale
10009f78 g     F .text	0000003c scanf
10013750 g     F .text	00000008 nanf
10025458 g     O .rwdata	00000004 _impure_ptr
10027604 g     O .bss	00000004 alt_argc
1000f898 g     F .text	0000021c __sflush_r
100116b8 g     F .text	000000ac _mbrtowc_r
10020b78 g     F .text	00000060 _do_dtors
10010cb8 g     F .text	00000008 __locale_cjk_lang
100133e4 g     F .text	000001d4 __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
1001183c g     F .text	00000044 __ascii_mbtowc
10012824 g     F .text	00000064 __ulp
1000fed8 g     F .text	00000018 __fp_unlock_all
10025474 g     O .rwdata	00000008 alt_fs_list
10023960 g     O .rwdata	00000040 Rcon
10008a2c g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10010ce4 g     F .text	0000000c localeconv
10020bf8 g     F .text	00000050 alt_ic_isr_register
1002549c g       *ABS*	00000000 _edata
10027748 g       *ABS*	00000000 _end
10007d7c g     F .text	00000058 UsbWrite
10019ce0 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000ddc4 g     F .text	00000068 vfscanf
10020264 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10020cd0 g     F .text	0000008c alt_ic_irq_disable
10013878 g     F .text	0000007c __swrite
10025468 g     O .rwdata	00000004 __malloc_trim_threshold
10010cac g     F .text	0000000c __locale_msgcharset
10021750 g     F .text	00000038 exit
10010b20 g     F .text	000000c4 _fwalk_reent
10012628 g     F .text	000001fc __mdiff
10009b54 g     F .text	00000074 .hidden __modsi3
1002545c g     O .rwdata	00000004 __ctype_ptr__
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000feb4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10013680 g     F .text	000000d0 __sccl
100002f4 g     F .text	00000070 IO_write
10022da8 g     O .rodata	00000101 _ctype_
1002546c g     O .rwdata	00000004 __mbtowc
10021a9c g     F .text	00000034 _exit
10020794 g     F .text	0000012c alt_alarm_start
1001c42c g     F .text	0000010c .hidden __muldi3
10025450 g     O .rwdata	00000004 AES_PTR
10010cf0 g     F .text	000001bc __smakebuf_r
10009fe4 g     F .text	00000098 strlen
10021120 g     F .text	0000015c open
1001dc9c g     F .text	000000dc .hidden __gedf2
1001a044 g     F .text	00000850 __gethex
10009c84 g     F .text	0000004c clock
10025470 g     O .rwdata	00000004 __wctomb
100182f8 g     F .text	00000018 __sprint_r
10020bd8 g     F .text	00000020 alt_icache_flush_all
10025490 g     O .rwdata	00000004 alt_priority_mask
10020c48 g     F .text	00000088 alt_ic_irq_enable
1000c360 g     F .text	0000001c __vfprintf_internal
1001c3d0 g     F .text	0000005c _wctomb_r
1001e6d8 g     F .text	000008fc .hidden __subdf3
10006a38 g     F .text	00000080 printword
10011fc8 g     F .text	000000b0 __lo0bits
100082ec g     F .text	00000190 UsbGetConfigDesc1
1000c438 g     F .text	0000198c __svfscanf_r
10025494 g     O .rwdata	00000008 alt_alarm_list
10018050 g     F .text	00000194 _ungetc_r
10007288 g     F .text	000000e8 AddRoundKey
10020b18 g     F .text	00000060 _do_ctors
10007e18 g     F .text	000000b4 UsbSoftReset
1001c2e0 g     F .text	000000c0 wcrtomb
1001f238 g     F .text	000000d8 close
10008114 g     F .text	000001d8 UsbGetDeviceDesc2
1001f580 g     F .text	00000084 alt_load
10019e68 g     F .text	00000080 fputwc
1000feb8 g     F .text	00000004 __sinit_lock_acquire
10011d14 g     F .text	00000148 __multadd
10011cec g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	109d9204 	addi	r2,r2,30280
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	109d9204 	addi	r2,r2,30280
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a87417 	ldw	r2,-24112(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a87417 	ldw	r2,-24112(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d6b51314 	ori	gp,gp,54348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008400b4 	movhi	r2,4098
    ori r2, r2, %lo(__bss_start)
10000244:	109d7614 	ori	r2,r2,30168

    movhi r3, %hi(__bss_end)
10000248:	00c400b4 	movhi	r3,4098
    ori r3, r3, %lo(__bss_end)
1000024c:	18ddd214 	ori	r3,r3,30536

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	001f5800 	call	1001f580 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	001f71c0 	call	1001f71c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00800c04 	movi	r2,48
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801404 	movi	r2,80
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801004 	movi	r2,64
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00801c04 	movi	r2,112
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801804 	movi	r2,96
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00800c04 	movi	r2,48
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00800c04 	movi	r2,48
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000310:	00801c04 	movi	r2,112
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00801804 	movi	r2,96
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00800c04 	movi	r2,48
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801004 	movi	r2,64
10000334:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000338:	00801004 	movi	r2,64
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00800c04 	movi	r2,48
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)
}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
10000378:	00801c04 	movi	r2,112
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00800c04 	movi	r2,48
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801404 	movi	r2,80
10000390:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10000394:	00801804 	movi	r2,96
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100003a0:	00801404 	movi	r2,80
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00800c04 	movi	r2,48
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)
	return temp;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <keycall_init>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int keycall_init(void)
{
100003cc:	defffb04 	addi	sp,sp,-20
100003d0:	dfc00415 	stw	ra,16(sp)
100003d4:	df000315 	stw	fp,12(sp)
100003d8:	df000304 	addi	fp,sp,12
	IO_init();
100003dc:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003e0:	e03ffe0d 	sth	zero,-8(fp)
	//alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003e4:	010400b4 	movhi	r4,4098
100003e8:	2106b404 	addi	r4,r4,6864
100003ec:	0009f640 	call	10009f64 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003f0:	0007e180 	call	10007e18 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003f4:	000b883a 	mov	r5,zero
100003f8:	01005104 	movi	r4,324
100003fc:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000400:	017fffd4 	movui	r5,65535
10000404:	01302414 	movui	r4,49296
10000408:	0007d7c0 	call	10007d7c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000040c:	01409604 	movi	r5,600
10000410:	01006d04 	movi	r4,436
10000414:	0007d7c0 	call	10007d7c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000418:	00811004 	movi	r2,1088
1000041c:	e0bffd0d 	sth	r2,-12(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000420:	e0bffd0b 	ldhu	r2,-12(fp)
10000424:	100b883a 	mov	r5,r2
10000428:	01005084 	movi	r4,322
1000042c:	0007d7c0 	call	10007d7c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000430:	00808404 	movi	r2,528
10000434:	e0bffe8d 	sth	r2,-6(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000438:	e0bffe8b 	ldhu	r2,-6(fp)
1000043c:	100b883a 	mov	r5,r2
10000440:	01302314 	movui	r4,49292
10000444:	0007d7c0 	call	10007d7c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000448:	000b883a 	mov	r5,zero
1000044c:	01007104 	movi	r4,452
10000450:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000454:	000b883a 	mov	r5,zero
10000458:	01007184 	movi	r4,454
1000045c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000460:	000b883a 	mov	r5,zero
10000464:	01007204 	movi	r4,456
10000468:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000046c:	000b883a 	mov	r5,zero
10000470:	01007284 	movi	r4,458
10000474:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000478:	000b883a 	mov	r5,zero
1000047c:	01007304 	movi	r4,460
10000480:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000484:	000b883a 	mov	r5,zero
10000488:	01007384 	movi	r4,462
1000048c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000490:	000b883a 	mov	r5,zero
10000494:	01007404 	movi	r4,464
10000498:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000049c:	000b883a 	mov	r5,zero
100004a0:	01007484 	movi	r4,466
100004a4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004a8:	000b883a 	mov	r5,zero
100004ac:	01007504 	movi	r4,468
100004b0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004b4:	000b883a 	mov	r5,zero
100004b8:	01007584 	movi	r4,470
100004bc:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004c0:	000b883a 	mov	r5,zero
100004c4:	01007604 	movi	r4,472
100004c8:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004cc:	000b883a 	mov	r5,zero
100004d0:	01007684 	movi	r4,474
100004d4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004d8:	000b883a 	mov	r5,zero
100004dc:	01007704 	movi	r4,476
100004e0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004e4:	000b883a 	mov	r5,zero
100004e8:	01007784 	movi	r4,478
100004ec:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004f0:	01401c84 	movi	r5,114
100004f4:	01007084 	movi	r4,450
100004f8:	0007d7c0 	call	10007d7c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100004fc:	01738054 	movui	r5,52737
10000500:	01000044 	movi	r4,1
10000504:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000508:	0001883a 	nop
1000050c:	010000c4 	movi	r4,3
10000510:	00003640 	call	10000364 <IO_read>
10000514:	10bfffcc 	andi	r2,r2,65535
10000518:	103ffc26 	beq	r2,zero,1000050c <__alt_data_end+0xf800050c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000051c:	00000806 	br	10000540 <keycall_init+0x174>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000520:	01000044 	movi	r4,1
10000524:	00003640 	call	10000364 <IO_read>
10000528:	10bfffcc 	andi	r2,r2,65535
1000052c:	100b883a 	mov	r5,r2
10000530:	010400b4 	movhi	r4,4098
10000534:	2106ba04 	addi	r4,r4,6888
10000538:	0009e480 	call	10009e48 <printf>
		goto USB_HOT_PLUG;
1000053c:	003fac06 	br	100003f0 <__alt_data_end+0xf80003f0>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000540:	01000044 	movi	r4,1
10000544:	00003640 	call	10000364 <IO_read>
10000548:	10bfffcc 	andi	r2,r2,65535
1000054c:	1083fb58 	cmpnei	r2,r2,4077
10000550:	103ff31e 	bne	r2,zero,10000520 <__alt_data_end+0xf8000520>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000554:	010400b4 	movhi	r4,4098
10000558:	2106c304 	addi	r4,r4,6924
1000055c:	0009e480 	call	10009e48 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000560:	01401d04 	movi	r5,116
10000564:	01007084 	movi	r4,450
10000568:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000056c:	01400f04 	movi	r5,60
10000570:	01007104 	movi	r4,452
10000574:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000578:	000b883a 	mov	r5,zero
1000057c:	01007184 	movi	r4,454
10000580:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000584:	000b883a 	mov	r5,zero
10000588:	01007204 	movi	r4,456
1000058c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000590:	000b883a 	mov	r5,zero
10000594:	01007284 	movi	r4,458
10000598:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000059c:	000b883a 	mov	r5,zero
100005a0:	01007304 	movi	r4,460
100005a4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005a8:	000b883a 	mov	r5,zero
100005ac:	01007384 	movi	r4,462
100005b0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005b4:	000b883a 	mov	r5,zero
100005b8:	01007404 	movi	r4,464
100005bc:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005c0:	000b883a 	mov	r5,zero
100005c4:	01007484 	movi	r4,466
100005c8:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005cc:	000b883a 	mov	r5,zero
100005d0:	01007504 	movi	r4,468
100005d4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005d8:	000b883a 	mov	r5,zero
100005dc:	01007584 	movi	r4,470
100005e0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005e4:	000b883a 	mov	r5,zero
100005e8:	01007604 	movi	r4,472
100005ec:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005f0:	000b883a 	mov	r5,zero
100005f4:	01007684 	movi	r4,474
100005f8:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005fc:	000b883a 	mov	r5,zero
10000600:	01007704 	movi	r4,476
10000604:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000608:	000b883a 	mov	r5,zero
1000060c:	01007784 	movi	r4,478
10000610:	0007d7c0 	call	10007d7c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000614:	01738054 	movui	r5,52737
10000618:	01000044 	movi	r4,1
1000061c:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000620:	0001883a 	nop
10000624:	01000044 	movi	r4,1
10000628:	00003640 	call	10000364 <IO_read>
1000062c:	10bfffcc 	andi	r2,r2,65535
10000630:	1083fb58 	cmpnei	r2,r2,4077
10000634:	10000826 	beq	r2,zero,10000658 <keycall_init+0x28c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000638:	01000044 	movi	r4,1
1000063c:	00003640 	call	10000364 <IO_read>
10000640:	10bfffcc 	andi	r2,r2,65535
10000644:	100b883a 	mov	r5,r2
10000648:	010400b4 	movhi	r4,4098
1000064c:	2106ba04 	addi	r4,r4,6888
10000650:	0009e480 	call	10009e48 <printf>
		goto USB_HOT_PLUG;
10000654:	003f6606 	br	100003f0 <__alt_data_end+0xf80003f0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000658:	00b02284 	movi	r2,-16246
1000065c:	d0a8630d 	sth	r2,-24180(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000660:	008c0004 	movi	r2,12288
10000664:	d0a8638d 	sth	r2,-24178(gp)
	fs_device = A_DP_STAT;
10000668:	00880004 	movi	r2,8192
1000066c:	e0bffe0d 	sth	r2,-8(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000670:	d0a8630b 	ldhu	r2,-24180(gp)
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1009883a 	mov	r4,r2
1000067c:	0007dd40 	call	10007dd4 <UsbRead>
10000680:	e0bffd0d 	sth	r2,-12(fp)

	if (!(usb_ctl_val & no_device))
10000684:	d0a8638b 	ldhu	r2,-24178(gp)
10000688:	e0fffd0b 	ldhu	r3,-12(fp)
1000068c:	1884703a 	and	r2,r3,r2
10000690:	10bfffcc 	andi	r2,r2,65535
10000694:	1000351e 	bne	r2,zero,1000076c <keycall_init+0x3a0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000698:	e03ffd85 	stb	zero,-10(fp)
1000069c:	00000f06 	br	100006dc <keycall_init+0x310>
		{
			usleep(5*1000);
100006a0:	0104e204 	movi	r4,5000
100006a4:	001fb080 	call	1001fb08 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006a8:	d0a8630b 	ldhu	r2,-24180(gp)
100006ac:	10bfffcc 	andi	r2,r2,65535
100006b0:	1009883a 	mov	r4,r2
100006b4:	0007dd40 	call	10007dd4 <UsbRead>
100006b8:	e0bffd0d 	sth	r2,-12(fp)
			if(usb_ctl_val & no_device) break;
100006bc:	d0a8638b 	ldhu	r2,-24178(gp)
100006c0:	e0fffd0b 	ldhu	r3,-12(fp)
100006c4:	1884703a 	and	r2,r3,r2
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	1000071e 	bne	r2,zero,100006ec <keycall_init+0x320>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006d0:	e0bffd83 	ldbu	r2,-10(fp)
100006d4:	10800044 	addi	r2,r2,1
100006d8:	e0bffd85 	stb	r2,-10(fp)
100006dc:	e0bffd83 	ldbu	r2,-10(fp)
100006e0:	10800170 	cmpltui	r2,r2,5
100006e4:	103fee1e 	bne	r2,zero,100006a0 <__alt_data_end+0xf80006a0>
100006e8:	00000106 	br	100006f0 <keycall_init+0x324>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100006ec:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100006f0:	d0a8638b 	ldhu	r2,-24178(gp)
100006f4:	e0fffd0b 	ldhu	r3,-12(fp)
100006f8:	1884703a 	and	r2,r3,r2
100006fc:	10bfffcc 	andi	r2,r2,65535
10000700:	1000261e 	bne	r2,zero,1000079c <keycall_init+0x3d0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000704:	010400b4 	movhi	r4,4098
10000708:	2106c704 	addi	r4,r4,6940
1000070c:	0009f640 	call	10009f64 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000710:	010400b4 	movhi	r4,4098
10000714:	2106d104 	addi	r4,r4,6980
10000718:	0009f640 	call	10009f64 <puts>
			while (!(usb_ctl_val & no_device))
1000071c:	00000d06 	br	10000754 <keycall_init+0x388>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000720:	d0a8630b 	ldhu	r2,-24180(gp)
10000724:	10bfffcc 	andi	r2,r2,65535
10000728:	1009883a 	mov	r4,r2
1000072c:	0007dd40 	call	10007dd4 <UsbRead>
10000730:	e0bffd0d 	sth	r2,-12(fp)
				if(usb_ctl_val & no_device)
10000734:	d0a8638b 	ldhu	r2,-24178(gp)
10000738:	e0fffd0b 	ldhu	r3,-12(fp)
1000073c:	1884703a 	and	r2,r3,r2
10000740:	10bfffcc 	andi	r2,r2,65535
10000744:	10000126 	beq	r2,zero,1000074c <keycall_init+0x380>
					goto USB_HOT_PLUG;
10000748:	003f2906 	br	100003f0 <__alt_data_end+0xf80003f0>

				usleep(2000);
1000074c:	0101f404 	movi	r4,2000
10000750:	001fb080 	call	1001fb08 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000754:	d0a8638b 	ldhu	r2,-24178(gp)
10000758:	e0fffd0b 	ldhu	r3,-12(fp)
1000075c:	1884703a 	and	r2,r3,r2
10000760:	10bfffcc 	andi	r2,r2,65535
10000764:	103fee26 	beq	r2,zero,10000720 <__alt_data_end+0xf8000720>
10000768:	00000c06 	br	1000079c <keycall_init+0x3d0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
1000076c:	e0fffd0b 	ldhu	r3,-12(fp)
10000770:	e0bffe0b 	ldhu	r2,-8(fp)
10000774:	1884703a 	and	r2,r3,r2
10000778:	10bfffcc 	andi	r2,r2,65535
1000077c:	10000426 	beq	r2,zero,10000790 <keycall_init+0x3c4>
		{
			printf("[INFO]: full speed device\n");
10000780:	010400b4 	movhi	r4,4098
10000784:	2106dd04 	addi	r4,r4,7028
10000788:	0009f640 	call	10009f64 <puts>
1000078c:	00000306 	br	1000079c <keycall_init+0x3d0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000790:	010400b4 	movhi	r4,4098
10000794:	2106e404 	addi	r4,r4,7056
10000798:	0009f640 	call	10009f64 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
1000079c:	0007ecc0 	call	10007ecc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007a0:	00000306 	br	100007b0 <keycall_init+0x3e4>
	{
		UsbSetAddress();
100007a4:	0007ecc0 	call	10007ecc <UsbSetAddress>
		usleep(10*1000);
100007a8:	0109c404 	movi	r4,10000
100007ac:	001fb080 	call	1001fb08 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b0:	010000c4 	movi	r4,3
100007b4:	00003640 	call	10000364 <IO_read>
100007b8:	10bfffcc 	andi	r2,r2,65535
100007bc:	1080040c 	andi	r2,r2,16
100007c0:	103ff826 	beq	r2,zero,100007a4 <__alt_data_end+0xf80007a4>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007c4:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007c8:	01414184 	movi	r5,1286
100007cc:	01000084 	movi	r4,2
100007d0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007d4:	0009883a 	mov	r4,zero
100007d8:	00003640 	call	10000364 <IO_read>
100007dc:	10bfffcc 	andi	r2,r2,65535
100007e0:	100b883a 	mov	r5,r2
100007e4:	010400b4 	movhi	r4,4098
100007e8:	2106eb04 	addi	r4,r4,7084
100007ec:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007f0:	01414204 	movi	r5,1288
100007f4:	01000084 	movi	r4,2
100007f8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007fc:	0009883a 	mov	r4,zero
10000800:	00003640 	call	10000364 <IO_read>
10000804:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000808:	e0bffd0b 	ldhu	r2,-12(fp)
1000080c:	100b883a 	mov	r5,r2
10000810:	010400b4 	movhi	r4,4098
10000814:	2106f604 	addi	r4,r4,7128
10000818:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
1000081c:	e0bffd0b 	ldhu	r2,-12(fp)
10000820:	108000e0 	cmpeqi	r2,r2,3
10000824:	1000031e 	bne	r2,zero,10000834 <keycall_init+0x468>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000828:	0008df00 	call	10008df0 <UsbGetRetryCnt>
1000082c:	e0bffd0d 	sth	r2,-12(fp)

		goto USB_HOT_PLUG;
10000830:	003eef06 	br	100003f0 <__alt_data_end+0xf80003f0>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000834:	010400b4 	movhi	r4,4098
10000838:	21070204 	addi	r4,r4,7176
1000083c:	0009f640 	call	10009f64 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000840:	0007fcc0 	call	10007fcc <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000844:	00000306 	br	10000854 <keycall_init+0x488>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000848:	0007fcc0 	call	10007fcc <UsbGetDeviceDesc1>
		usleep(10*1000);
1000084c:	0109c404 	movi	r4,10000
10000850:	001fb080 	call	1001fb08 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000854:	010000c4 	movi	r4,3
10000858:	00003640 	call	10000364 <IO_read>
1000085c:	10bfffcc 	andi	r2,r2,65535
10000860:	1080040c 	andi	r2,r2,16
10000864:	103ff826 	beq	r2,zero,10000848 <__alt_data_end+0xf8000848>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000868:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000086c:	01414184 	movi	r5,1286
10000870:	01000084 	movi	r4,2
10000874:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000878:	0009883a 	mov	r4,zero
1000087c:	00003640 	call	10000364 <IO_read>
10000880:	10bfffcc 	andi	r2,r2,65535
10000884:	100b883a 	mov	r5,r2
10000888:	010400b4 	movhi	r4,4098
1000088c:	21071104 	addi	r4,r4,7236
10000890:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000894:	01414204 	movi	r5,1288
10000898:	01000084 	movi	r4,2
1000089c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008a0:	0009883a 	mov	r4,zero
100008a4:	00003640 	call	10000364 <IO_read>
100008a8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008ac:	e0bffd0b 	ldhu	r2,-12(fp)
100008b0:	100b883a 	mov	r5,r2
100008b4:	010400b4 	movhi	r4,4098
100008b8:	21071c04 	addi	r4,r4,7280
100008bc:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
100008c0:	00000206 	br	100008cc <keycall_init+0x500>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008c4:	0008df00 	call	10008df0 <UsbGetRetryCnt>
100008c8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008cc:	e0bffd0b 	ldhu	r2,-12(fp)
100008d0:	108000d8 	cmpnei	r2,r2,3
100008d4:	103ffb1e 	bne	r2,zero,100008c4 <__alt_data_end+0xf80008c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008d8:	010400b4 	movhi	r4,4098
100008dc:	21072804 	addi	r4,r4,7328
100008e0:	0009f640 	call	10009f64 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008e4:	00081140 	call	10008114 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008e8:	00000306 	br	100008f8 <keycall_init+0x52c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100008ec:	00081140 	call	10008114 <UsbGetDeviceDesc2>
		usleep(10*1000);
100008f0:	0109c404 	movi	r4,10000
100008f4:	001fb080 	call	1001fb08 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f8:	010000c4 	movi	r4,3
100008fc:	00003640 	call	10000364 <IO_read>
10000900:	10bfffcc 	andi	r2,r2,65535
10000904:	1080040c 	andi	r2,r2,16
10000908:	103ff826 	beq	r2,zero,100008ec <__alt_data_end+0xf80008ec>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000090c:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000910:	01414184 	movi	r5,1286
10000914:	01000084 	movi	r4,2
10000918:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000091c:	0009883a 	mov	r4,zero
10000920:	00003640 	call	10000364 <IO_read>
10000924:	10bfffcc 	andi	r2,r2,65535
10000928:	100b883a 	mov	r5,r2
1000092c:	010400b4 	movhi	r4,4098
10000930:	21071104 	addi	r4,r4,7236
10000934:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000938:	01414204 	movi	r5,1288
1000093c:	01000084 	movi	r4,2
10000940:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000944:	0009883a 	mov	r4,zero
10000948:	00003640 	call	10000364 <IO_read>
1000094c:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000950:	e0bffd0b 	ldhu	r2,-12(fp)
10000954:	100b883a 	mov	r5,r2
10000958:	010400b4 	movhi	r4,4098
1000095c:	21071c04 	addi	r4,r4,7280
10000960:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000964:	00000206 	br	10000970 <keycall_init+0x5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000968:	0008df00 	call	10008df0 <UsbGetRetryCnt>
1000096c:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000970:	e0bffd0b 	ldhu	r2,-12(fp)
10000974:	108000d8 	cmpnei	r2,r2,3
10000978:	103ffb1e 	bne	r2,zero,10000968 <__alt_data_end+0xf8000968>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
1000097c:	010400b4 	movhi	r4,4098
10000980:	21073c04 	addi	r4,r4,7408
10000984:	0009f640 	call	10009f64 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000988:	00082ec0 	call	100082ec <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000098c:	00000306 	br	1000099c <keycall_init+0x5d0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000990:	00082ec0 	call	100082ec <UsbGetConfigDesc1>
		usleep(10*1000);
10000994:	0109c404 	movi	r4,10000
10000998:	001fb080 	call	1001fb08 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000099c:	010000c4 	movi	r4,3
100009a0:	00003640 	call	10000364 <IO_read>
100009a4:	10bfffcc 	andi	r2,r2,65535
100009a8:	1080040c 	andi	r2,r2,16
100009ac:	103ff826 	beq	r2,zero,10000990 <__alt_data_end+0xf8000990>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009b0:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009b4:	01414184 	movi	r5,1286
100009b8:	01000084 	movi	r4,2
100009bc:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009c0:	0009883a 	mov	r4,zero
100009c4:	00003640 	call	10000364 <IO_read>
100009c8:	10bfffcc 	andi	r2,r2,65535
100009cc:	100b883a 	mov	r5,r2
100009d0:	010400b4 	movhi	r4,4098
100009d4:	21074e04 	addi	r4,r4,7480
100009d8:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
100009dc:	01414204 	movi	r5,1288
100009e0:	01000084 	movi	r4,2
100009e4:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009e8:	0009883a 	mov	r4,zero
100009ec:	00003640 	call	10000364 <IO_read>
100009f0:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100009f4:	e0bffd0b 	ldhu	r2,-12(fp)
100009f8:	100b883a 	mov	r5,r2
100009fc:	010400b4 	movhi	r4,4098
10000a00:	21075904 	addi	r4,r4,7524
10000a04:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000a08:	00000206 	br	10000a14 <keycall_init+0x648>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a0c:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10000a10:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a14:	e0bffd0b 	ldhu	r2,-12(fp)
10000a18:	108000d8 	cmpnei	r2,r2,3
10000a1c:	103ffb1e 	bne	r2,zero,10000a0c <__alt_data_end+0xf8000a0c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a20:	010400b4 	movhi	r4,4098
10000a24:	21076504 	addi	r4,r4,7572
10000a28:	0009f640 	call	10009f64 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a2c:	000847c0 	call	1000847c <UsbGetConfigDesc2>

	usleep(100*1000);
10000a30:	010000b4 	movhi	r4,2
10000a34:	2121a804 	addi	r4,r4,-31072
10000a38:	001fb080 	call	1001fb08 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a3c:	00000306 	br	10000a4c <keycall_init+0x680>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a40:	000847c0 	call	1000847c <UsbGetConfigDesc2>
		usleep(10*1000);
10000a44:	0109c404 	movi	r4,10000
10000a48:	001fb080 	call	1001fb08 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a4c:	010000c4 	movi	r4,3
10000a50:	00003640 	call	10000364 <IO_read>
10000a54:	10bfffcc 	andi	r2,r2,65535
10000a58:	1080040c 	andi	r2,r2,16
10000a5c:	103ff826 	beq	r2,zero,10000a40 <__alt_data_end+0xf8000a40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a60:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a64:	01414184 	movi	r5,1286
10000a68:	01000084 	movi	r4,2
10000a6c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a70:	0009883a 	mov	r4,zero
10000a74:	00003640 	call	10000364 <IO_read>
10000a78:	10bfffcc 	andi	r2,r2,65535
10000a7c:	100b883a 	mov	r5,r2
10000a80:	010400b4 	movhi	r4,4098
10000a84:	21077804 	addi	r4,r4,7648
10000a88:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a8c:	01414204 	movi	r5,1288
10000a90:	01000084 	movi	r4,2
10000a94:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a98:	0009883a 	mov	r4,zero
10000a9c:	00003640 	call	10000364 <IO_read>
10000aa0:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000aa4:	e0bffd0b 	ldhu	r2,-12(fp)
10000aa8:	100b883a 	mov	r5,r2
10000aac:	010400b4 	movhi	r4,4098
10000ab0:	21078304 	addi	r4,r4,7692
10000ab4:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000ab8:	00000206 	br	10000ac4 <keycall_init+0x6f8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000abc:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10000ac0:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ac4:	e0bffd0b 	ldhu	r2,-12(fp)
10000ac8:	108000d8 	cmpnei	r2,r2,3
10000acc:	103ffb1e 	bne	r2,zero,10000abc <__alt_data_end+0xf8000abc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000ad0:	010400b4 	movhi	r4,4098
10000ad4:	21078f04 	addi	r4,r4,7740
10000ad8:	0009f640 	call	10009f64 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000adc:	01415b04 	movi	r5,1388
10000ae0:	01000084 	movi	r4,2
10000ae4:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10000ae8:	0009883a 	mov	r4,zero
10000aec:	00003640 	call	10000364 <IO_read>
10000af0:	e0bfff0d 	sth	r2,-4(fp)
	code = code & 0x003;
10000af4:	e0bfff0b 	ldhu	r2,-4(fp)
10000af8:	108000cc 	andi	r2,r2,3
10000afc:	e0bfff0d 	sth	r2,-4(fp)
	printf("\ncode = %x\n", code);
10000b00:	e0bfff0b 	ldhu	r2,-4(fp)
10000b04:	100b883a 	mov	r5,r2
10000b08:	010400b4 	movhi	r4,4098
10000b0c:	2107a204 	addi	r4,r4,7816
10000b10:	0009e480 	call	10009e48 <printf>

	if (code == 0x01)
10000b14:	e0bfff0b 	ldhu	r2,-4(fp)
10000b18:	10800058 	cmpnei	r2,r2,1
10000b1c:	1000041e 	bne	r2,zero,10000b30 <keycall_init+0x764>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b20:	010400b4 	movhi	r4,4098
10000b24:	2107a504 	addi	r4,r4,7828
10000b28:	0009f640 	call	10009f64 <puts>
10000b2c:	00000306 	br	10000b3c <keycall_init+0x770>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b30:	010400b4 	movhi	r4,4098
10000b34:	2107b404 	addi	r4,r4,7888
10000b38:	0009f640 	call	10009f64 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b3c:	01415d84 	movi	r5,1398
10000b40:	01000084 	movi	r4,2
10000b44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b48:	0141cfc4 	movi	r5,1855
10000b4c:	0009883a 	mov	r4,zero
10000b50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b54:	01604154 	movui	r5,33029
10000b58:	0009883a 	mov	r4,zero
10000b5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b60:	014000c4 	movi	r5,3
10000b64:	0009883a 	mov	r4,zero
10000b68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b6c:	01400204 	movi	r5,8
10000b70:	0009883a 	mov	r4,zero
10000b74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b78:	016b0294 	movui	r5,44042
10000b7c:	0009883a 	mov	r4,zero
10000b80:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b84:	01415d84 	movi	r5,1398
10000b88:	01006c04 	movi	r4,432
10000b8c:	0007d7c0 	call	10007d7c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b90:	01415f04 	movi	r5,1404
10000b94:	01000084 	movi	r4,2
10000b98:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b9c:	0009883a 	mov	r4,zero
10000ba0:	00003640 	call	10000364 <IO_read>
10000ba4:	e0bfff85 	stb	r2,-2(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000ba8:	e0bfff83 	ldbu	r2,-2(fp)
10000bac:	100b883a 	mov	r5,r2
10000bb0:	010400b4 	movhi	r4,4098
10000bb4:	2107bd04 	addi	r4,r4,7924
10000bb8:	0009e480 	call	10009e48 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bbc:	00086e40 	call	100086e4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bc0:	00000306 	br	10000bd0 <keycall_init+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bc4:	00086e40 	call	100086e4 <UsbSetConfig>
		usleep(10*1000);
10000bc8:	0109c404 	movi	r4,10000
10000bcc:	001fb080 	call	1001fb08 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bd0:	010000c4 	movi	r4,3
10000bd4:	00003640 	call	10000364 <IO_read>
10000bd8:	10bfffcc 	andi	r2,r2,65535
10000bdc:	1080040c 	andi	r2,r2,16
10000be0:	103ff826 	beq	r2,zero,10000bc4 <__alt_data_end+0xf8000bc4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000be4:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000be8:	01414184 	movi	r5,1286
10000bec:	01000084 	movi	r4,2
10000bf0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bf4:	0009883a 	mov	r4,zero
10000bf8:	00003640 	call	10000364 <IO_read>
10000bfc:	10bfffcc 	andi	r2,r2,65535
10000c00:	100b883a 	mov	r5,r2
10000c04:	010400b4 	movhi	r4,4098
10000c08:	2107c704 	addi	r4,r4,7964
10000c0c:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c10:	01414204 	movi	r5,1288
10000c14:	01000084 	movi	r4,2
10000c18:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c1c:	0009883a 	mov	r4,zero
10000c20:	00003640 	call	10000364 <IO_read>
10000c24:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c28:	e0bffd0b 	ldhu	r2,-12(fp)
10000c2c:	100b883a 	mov	r5,r2
10000c30:	010400b4 	movhi	r4,4098
10000c34:	2107d204 	addi	r4,r4,8008
10000c38:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000c3c:	00000206 	br	10000c48 <keycall_init+0x87c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c40:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10000c44:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c48:	e0bffd0b 	ldhu	r2,-12(fp)
10000c4c:	108000d8 	cmpnei	r2,r2,3
10000c50:	103ffb1e 	bne	r2,zero,10000c40 <__alt_data_end+0xf8000c40>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c54:	010400b4 	movhi	r4,4098
10000c58:	2107de04 	addi	r4,r4,8056
10000c5c:	0009f640 	call	10009f64 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c60:	00087e40 	call	100087e4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c64:	00000306 	br	10000c74 <keycall_init+0x8a8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c68:	00087e40 	call	100087e4 <UsbClassRequest>
		usleep(10*1000);
10000c6c:	0109c404 	movi	r4,10000
10000c70:	001fb080 	call	1001fb08 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c74:	010000c4 	movi	r4,3
10000c78:	00003640 	call	10000364 <IO_read>
10000c7c:	10bfffcc 	andi	r2,r2,65535
10000c80:	1080040c 	andi	r2,r2,16
10000c84:	103ff826 	beq	r2,zero,10000c68 <__alt_data_end+0xf8000c68>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c88:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c8c:	01414184 	movi	r5,1286
10000c90:	01000084 	movi	r4,2
10000c94:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c98:	0009883a 	mov	r4,zero
10000c9c:	00003640 	call	10000364 <IO_read>
10000ca0:	10bfffcc 	andi	r2,r2,65535
10000ca4:	100b883a 	mov	r5,r2
10000ca8:	010400b4 	movhi	r4,4098
10000cac:	2107f004 	addi	r4,r4,8128
10000cb0:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cb4:	01414204 	movi	r5,1288
10000cb8:	01000084 	movi	r4,2
10000cbc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cc0:	0009883a 	mov	r4,zero
10000cc4:	00003640 	call	10000364 <IO_read>
10000cc8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ccc:	e0bffd0b 	ldhu	r2,-12(fp)
10000cd0:	100b883a 	mov	r5,r2
10000cd4:	010400b4 	movhi	r4,4098
10000cd8:	2107fb04 	addi	r4,r4,8172
10000cdc:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000ce0:	00000206 	br	10000cec <keycall_init+0x920>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ce4:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10000ce8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000cec:	e0bffd0b 	ldhu	r2,-12(fp)
10000cf0:	108000d8 	cmpnei	r2,r2,3
10000cf4:	103ffb1e 	bne	r2,zero,10000ce4 <__alt_data_end+0xf8000ce4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000cf8:	010400b4 	movhi	r4,4098
10000cfc:	21080704 	addi	r4,r4,8220
10000d00:	0009f640 	call	10009f64 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d04:	00088e40 	call	100088e4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d08:	00000306 	br	10000d18 <keycall_init+0x94c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d0c:	00088e40 	call	100088e4 <UsbGetHidDesc>
		usleep(10*1000);
10000d10:	0109c404 	movi	r4,10000
10000d14:	001fb080 	call	1001fb08 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d18:	010000c4 	movi	r4,3
10000d1c:	00003640 	call	10000364 <IO_read>
10000d20:	10bfffcc 	andi	r2,r2,65535
10000d24:	1080040c 	andi	r2,r2,16
10000d28:	103ff826 	beq	r2,zero,10000d0c <__alt_data_end+0xf8000d0c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d2c:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d30:	01414184 	movi	r5,1286
10000d34:	01000084 	movi	r4,2
10000d38:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d3c:	0009883a 	mov	r4,zero
10000d40:	00003640 	call	10000364 <IO_read>
10000d44:	10bfffcc 	andi	r2,r2,65535
10000d48:	100b883a 	mov	r5,r2
10000d4c:	010400b4 	movhi	r4,4098
10000d50:	2107f004 	addi	r4,r4,8128
10000d54:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d58:	01414204 	movi	r5,1288
10000d5c:	01000084 	movi	r4,2
10000d60:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d64:	0009883a 	mov	r4,zero
10000d68:	00003640 	call	10000364 <IO_read>
10000d6c:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d70:	e0bffd0b 	ldhu	r2,-12(fp)
10000d74:	100b883a 	mov	r5,r2
10000d78:	010400b4 	movhi	r4,4098
10000d7c:	2107fb04 	addi	r4,r4,8172
10000d80:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000d84:	00000206 	br	10000d90 <keycall_init+0x9c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d88:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10000d8c:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d90:	e0bffd0b 	ldhu	r2,-12(fp)
10000d94:	108000d8 	cmpnei	r2,r2,3
10000d98:	103ffb1e 	bne	r2,zero,10000d88 <__alt_data_end+0xf8000d88>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d9c:	010400b4 	movhi	r4,4098
10000da0:	21081904 	addi	r4,r4,8292
10000da4:	0009f640 	call	10009f64 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000da8:	0008a2c0 	call	10008a2c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dac:	00000306 	br	10000dbc <keycall_init+0x9f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000db0:	0008a2c0 	call	10008a2c <UsbGetReportDesc>
		usleep(10*1000);
10000db4:	0109c404 	movi	r4,10000
10000db8:	001fb080 	call	1001fb08 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dbc:	010000c4 	movi	r4,3
10000dc0:	00003640 	call	10000364 <IO_read>
10000dc4:	10bfffcc 	andi	r2,r2,65535
10000dc8:	1080040c 	andi	r2,r2,16
10000dcc:	103ff826 	beq	r2,zero,10000db0 <__alt_data_end+0xf8000db0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000dd0:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000dd4:	01414184 	movi	r5,1286
10000dd8:	01000084 	movi	r4,2
10000ddc:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000de0:	0009883a 	mov	r4,zero
10000de4:	00003640 	call	10000364 <IO_read>
10000de8:	10bfffcc 	andi	r2,r2,65535
10000dec:	100b883a 	mov	r5,r2
10000df0:	010400b4 	movhi	r4,4098
10000df4:	21082d04 	addi	r4,r4,8372
10000df8:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10000dfc:	01414204 	movi	r5,1288
10000e00:	01000084 	movi	r4,2
10000e04:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e08:	0009883a 	mov	r4,zero
10000e0c:	00003640 	call	10000364 <IO_read>
10000e10:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e14:	e0bffd0b 	ldhu	r2,-12(fp)
10000e18:	100b883a 	mov	r5,r2
10000e1c:	010400b4 	movhi	r4,4098
10000e20:	21083904 	addi	r4,r4,8420
10000e24:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10000e28:	00000206 	br	10000e34 <keycall_init+0xa68>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e2c:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10000e30:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e34:	e0bffd0b 	ldhu	r2,-12(fp)
10000e38:	108000d8 	cmpnei	r2,r2,3
10000e3c:	103ffb1e 	bne	r2,zero,10000e2c <__alt_data_end+0xf8000e2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000e40:	010400b4 	movhi	r4,4098
10000e44:	21084504 	addi	r4,r4,8468
10000e48:	0009f640 	call	10009f64 <puts>
			usleep(200);
		}

	}//end while
	//*/
	return 0;
10000e4c:	0005883a 	mov	r2,zero
}
10000e50:	e037883a 	mov	sp,fp
10000e54:	dfc00117 	ldw	ra,4(sp)
10000e58:	df000017 	ldw	fp,0(sp)
10000e5c:	dec00204 	addi	sp,sp,8
10000e60:	f800283a 	ret

10000e64 <keycall>:

void keycall(short int keycodes[3]){
10000e64:	defffb04 	addi	sp,sp,-20
10000e68:	dfc00415 	stw	ra,16(sp)
10000e6c:	df000315 	stw	fp,12(sp)
10000e70:	dc000215 	stw	r16,8(sp)
10000e74:	df000304 	addi	fp,sp,12
10000e78:	e13ffe15 	stw	r4,-8(fp)
	//int keycode_56 = 0;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	//short int keycodes[3];
	alt_u16 usb_ctl_val;
	alt_u8 toggle = 0;
10000e7c:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 hot_plug_count;
	ctl_reg = USB1_CTL_REG;
10000e80:	00b02284 	movi	r2,-16246
10000e84:	d0a8640d 	sth	r2,-24176(gp)
	alt_u8 data_size = 0x08; ////////////////////////////////
10000e88:	00800204 	movi	r2,8
10000e8c:	e0bffd45 	stb	r2,-11(fp)

	toggle++;
10000e90:	e0bffd03 	ldbu	r2,-12(fp)
10000e94:	10800044 	addi	r2,r2,1
10000e98:	e0bffd05 	stb	r2,-12(fp)
	IO_write(HPI_ADDR,0x0500); //the start address
10000e9c:	01414004 	movi	r5,1280
10000ea0:	01000084 	movi	r4,2
10000ea4:	00002f40 	call	100002f4 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10000ea8:	01414704 	movi	r5,1308
10000eac:	0009883a 	mov	r4,zero
10000eb0:	00002f40 	call	100002f4 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000eb4:	e0bffd43 	ldbu	r2,-11(fp)
10000eb8:	108003cc 	andi	r2,r2,15
10000ebc:	100b883a 	mov	r5,r2
10000ec0:	0009883a 	mov	r4,zero
10000ec4:	00002f40 	call	100002f4 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ec8:	0140a444 	movi	r5,657
10000ecc:	0009883a 	mov	r4,zero
10000ed0:	00002f40 	call	100002f4 <IO_write>
	if(toggle%2)
10000ed4:	e0bffd03 	ldbu	r2,-12(fp)
10000ed8:	1080004c 	andi	r2,r2,1
10000edc:	10803fcc 	andi	r2,r2,255
10000ee0:	10000426 	beq	r2,zero,10000ef4 <keycall+0x90>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10000ee4:	01400044 	movi	r5,1
10000ee8:	0009883a 	mov	r4,zero
10000eec:	00002f40 	call	100002f4 <IO_write>
10000ef0:	00000306 	br	10000f00 <keycall+0x9c>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10000ef4:	01401044 	movi	r5,65
10000ef8:	0009883a 	mov	r4,zero
10000efc:	00002f40 	call	100002f4 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10000f00:	014004c4 	movi	r5,19
10000f04:	0009883a 	mov	r4,zero
10000f08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10000f0c:	000b883a 	mov	r5,zero
10000f10:	0009883a 	mov	r4,zero
10000f14:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f18:	01414004 	movi	r5,1280
10000f1c:	01006c04 	movi	r4,432
10000f20:	0007d7c0 	call	10007d7c <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f24:	00002206 	br	10000fb0 <keycall+0x14c>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
10000f28:	01414004 	movi	r5,1280
10000f2c:	01000084 	movi	r4,2
10000f30:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000f34:	01414704 	movi	r5,1308
10000f38:	0009883a 	mov	r4,zero
10000f3c:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f40:	e0bffd43 	ldbu	r2,-11(fp)
10000f44:	108003cc 	andi	r2,r2,15
10000f48:	100b883a 	mov	r5,r2
10000f4c:	0009883a 	mov	r4,zero
10000f50:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f54:	0140a444 	movi	r5,657
10000f58:	0009883a 	mov	r4,zero
10000f5c:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
10000f60:	e0bffd03 	ldbu	r2,-12(fp)
10000f64:	1080004c 	andi	r2,r2,1
10000f68:	10803fcc 	andi	r2,r2,255
10000f6c:	10000426 	beq	r2,zero,10000f80 <keycall+0x11c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f70:	01400044 	movi	r5,1
10000f74:	0009883a 	mov	r4,zero
10000f78:	00002f40 	call	100002f4 <IO_write>
10000f7c:	00000306 	br	10000f8c <keycall+0x128>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f80:	01401044 	movi	r5,65
10000f84:	0009883a 	mov	r4,zero
10000f88:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f8c:	014004c4 	movi	r5,19
10000f90:	0009883a 	mov	r4,zero
10000f94:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//
10000f98:	000b883a 	mov	r5,zero
10000f9c:	0009883a 	mov	r4,zero
10000fa0:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fa4:	01414004 	movi	r5,1280
10000fa8:	01006c04 	movi	r4,432
10000fac:	0007d7c0 	call	10007d7c <UsbWrite>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fb0:	010000c4 	movi	r4,3
10000fb4:	00003640 	call	10000364 <IO_read>
10000fb8:	10bfffcc 	andi	r2,r2,65535
10000fbc:	1080040c 	andi	r2,r2,16
10000fc0:	103fd926 	beq	r2,zero,10000f28 <__alt_data_end+0xf8000f28>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		//usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10000fc4:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>
10000fc8:	e0bffd8d 	sth	r2,-10(fp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycodes[0] = UsbRead(0x051e);
10000fcc:	01014784 	movi	r4,1310
10000fd0:	0007dd40 	call	10007dd4 <UsbRead>
10000fd4:	1007883a 	mov	r3,r2
10000fd8:	e0bffe17 	ldw	r2,-8(fp)
10000fdc:	10c0000d 	sth	r3,0(r2)
	keycodes[1] = UsbRead(0x0520);
10000fe0:	e0bffe17 	ldw	r2,-8(fp)
10000fe4:	14000084 	addi	r16,r2,2
10000fe8:	01014804 	movi	r4,1312
10000fec:	0007dd40 	call	10007dd4 <UsbRead>
10000ff0:	8080000d 	sth	r2,0(r16)
	keycodes[2] = UsbRead(0x0522);
10000ff4:	e0bffe17 	ldw	r2,-8(fp)
10000ff8:	14000104 	addi	r16,r2,4
10000ffc:	01014884 	movi	r4,1314
10001000:	0007dd40 	call	10007dd4 <UsbRead>
10001004:	8080000d 	sth	r2,0(r16)
	//printf("\nfirst six keycode values are %04x, %04x, %04x\n", keycodes[0], keycodes[1], keycodes[2]);
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycodes[0] & 0xff;
10001008:	00802004 	movi	r2,128
1000100c:	e0fffe17 	ldw	r3,-8(fp)
10001010:	18c0000b 	ldhu	r3,0(r3)
10001014:	10c00005 	stb	r3,0(r2)

	return;
10001018:	0001883a 	nop
			keycall_init();

		usleep(200);
	}
	*/
}
1000101c:	e6ffff04 	addi	sp,fp,-4
10001020:	dfc00217 	ldw	ra,8(sp)
10001024:	df000117 	ldw	fp,4(sp)
10001028:	dc000017 	ldw	r16,0(sp)
1000102c:	dec00304 	addi	sp,sp,12
10001030:	f800283a 	ret

10001034 <getkeys>:

char getkeys(short int keycodes[3]){
10001034:	defffa04 	addi	sp,sp,-24
10001038:	dfc00515 	stw	ra,20(sp)
1000103c:	df000415 	stw	fp,16(sp)
10001040:	df000404 	addi	fp,sp,16
10001044:	e13fff15 	stw	r4,-4(fp)
	char res = 0;
10001048:	e03ffc05 	stb	zero,-16(fp)
	unsigned char* keys = (unsigned char*) keycodes;
1000104c:	e0bfff17 	ldw	r2,-4(fp)
10001050:	e0bffe15 	stw	r2,-8(fp)
	keycall(keycodes);
10001054:	e13fff17 	ldw	r4,-4(fp)
10001058:	0000e640 	call	10000e64 <keycall>
	int i = 0;
1000105c:	e03ffd15 	stw	zero,-12(fp)
	while(keys[i] && (i < 6)){
10001060:	00005606 	br	100011bc <getkeys+0x188>
		switch(keys[i++]){
10001064:	e0bffd17 	ldw	r2,-12(fp)
10001068:	10c00044 	addi	r3,r2,1
1000106c:	e0fffd15 	stw	r3,-12(fp)
10001070:	1007883a 	mov	r3,r2
10001074:	e0bffe17 	ldw	r2,-8(fp)
10001078:	10c5883a 	add	r2,r2,r3
1000107c:	10800003 	ldbu	r2,0(r2)
10001080:	10803fcc 	andi	r2,r2,255
10001084:	10bfff04 	addi	r2,r2,-4
10001088:	10c00a68 	cmpgeui	r3,r2,41
1000108c:	18004b1e 	bne	r3,zero,100011bc <getkeys+0x188>
10001090:	100690ba 	slli	r3,r2,2
10001094:	00840034 	movhi	r2,4096
10001098:	10842a04 	addi	r2,r2,4264
1000109c:	1885883a 	add	r2,r3,r2
100010a0:	10800017 	ldw	r2,0(r2)
100010a4:	1000683a 	jmp	r2
100010a8:	1000115c 	xori	zero,r2,69
100010ac:	100011bc 	xorhi	zero,r2,70
100010b0:	100011bc 	xorhi	zero,r2,70
100010b4:	1000117c 	xorhi	zero,r2,69
100010b8:	100011bc 	xorhi	zero,r2,70
100010bc:	100011bc 	xorhi	zero,r2,70
100010c0:	100011bc 	xorhi	zero,r2,70
100010c4:	100011bc 	xorhi	zero,r2,70
100010c8:	100011bc 	xorhi	zero,r2,70
100010cc:	1000118c 	andi	zero,r2,70
100010d0:	1000119c 	xori	zero,r2,70
100010d4:	100011bc 	xorhi	zero,r2,70
100010d8:	100011bc 	xorhi	zero,r2,70
100010dc:	100011bc 	xorhi	zero,r2,70
100010e0:	100011bc 	xorhi	zero,r2,70
100010e4:	100011bc 	xorhi	zero,r2,70
100010e8:	100011bc 	xorhi	zero,r2,70
100010ec:	100011bc 	xorhi	zero,r2,70
100010f0:	1000116c 	andhi	zero,r2,69
100010f4:	100011bc 	xorhi	zero,r2,70
100010f8:	100011bc 	xorhi	zero,r2,70
100010fc:	100011bc 	xorhi	zero,r2,70
10001100:	1000114c 	andi	zero,r2,69
10001104:	100011bc 	xorhi	zero,r2,70
10001108:	100011bc 	xorhi	zero,r2,70
1000110c:	100011bc 	xorhi	zero,r2,70
10001110:	100011bc 	xorhi	zero,r2,70
10001114:	100011bc 	xorhi	zero,r2,70
10001118:	100011bc 	xorhi	zero,r2,70
1000111c:	100011bc 	xorhi	zero,r2,70
10001120:	100011bc 	xorhi	zero,r2,70
10001124:	100011bc 	xorhi	zero,r2,70
10001128:	100011bc 	xorhi	zero,r2,70
1000112c:	100011bc 	xorhi	zero,r2,70
10001130:	100011bc 	xorhi	zero,r2,70
10001134:	100011bc 	xorhi	zero,r2,70
10001138:	100011bc 	xorhi	zero,r2,70
1000113c:	100011bc 	xorhi	zero,r2,70
10001140:	100011bc 	xorhi	zero,r2,70
10001144:	100011bc 	xorhi	zero,r2,70
10001148:	100011ac 	andhi	zero,r2,70
			case 26: res ^= 0x1;	break;
1000114c:	e0bffc03 	ldbu	r2,-16(fp)
10001150:	1080005c 	xori	r2,r2,1
10001154:	e0bffc05 	stb	r2,-16(fp)
10001158:	00001806 	br	100011bc <getkeys+0x188>
			case 4: res ^= 0x2;		break;
1000115c:	e0bffc03 	ldbu	r2,-16(fp)
10001160:	1080009c 	xori	r2,r2,2
10001164:	e0bffc05 	stb	r2,-16(fp)
10001168:	00001406 	br	100011bc <getkeys+0x188>
			case 22: res ^= 0x4;	break;
1000116c:	e0bffc03 	ldbu	r2,-16(fp)
10001170:	1080011c 	xori	r2,r2,4
10001174:	e0bffc05 	stb	r2,-16(fp)
10001178:	00001006 	br	100011bc <getkeys+0x188>
			case 7: res ^= 0x8;		break;
1000117c:	e0bffc03 	ldbu	r2,-16(fp)
10001180:	1080021c 	xori	r2,r2,8
10001184:	e0bffc05 	stb	r2,-16(fp)
10001188:	00000c06 	br	100011bc <getkeys+0x188>
			case 13: res ^= 0x10;	break;
1000118c:	e0bffc03 	ldbu	r2,-16(fp)
10001190:	1080041c 	xori	r2,r2,16
10001194:	e0bffc05 	stb	r2,-16(fp)
10001198:	00000806 	br	100011bc <getkeys+0x188>
			case 14: res ^= 0x20;	break;
1000119c:	e0bffc03 	ldbu	r2,-16(fp)
100011a0:	1080081c 	xori	r2,r2,32
100011a4:	e0bffc05 	stb	r2,-16(fp)
100011a8:	00000406 	br	100011bc <getkeys+0x188>
			case 44: res ^= 0x40;	break;
100011ac:	e0bffc03 	ldbu	r2,-16(fp)
100011b0:	1080101c 	xori	r2,r2,64
100011b4:	e0bffc05 	stb	r2,-16(fp)
100011b8:	0001883a 	nop
char getkeys(short int keycodes[3]){
	char res = 0;
	unsigned char* keys = (unsigned char*) keycodes;
	keycall(keycodes);
	int i = 0;
	while(keys[i] && (i < 6)){
100011bc:	e0bffd17 	ldw	r2,-12(fp)
100011c0:	e0fffe17 	ldw	r3,-8(fp)
100011c4:	1885883a 	add	r2,r3,r2
100011c8:	10800003 	ldbu	r2,0(r2)
100011cc:	10803fcc 	andi	r2,r2,255
100011d0:	10000326 	beq	r2,zero,100011e0 <getkeys+0x1ac>
100011d4:	e0bffd17 	ldw	r2,-12(fp)
100011d8:	10800190 	cmplti	r2,r2,6
100011dc:	103fa11e 	bne	r2,zero,10001064 <__alt_data_end+0xf8001064>
			case 14: res ^= 0x20;	break;
			case 44: res ^= 0x40;	break;
			default: ;
		}
	}
	return res;
100011e0:	e0bffc03 	ldbu	r2,-16(fp)
}
100011e4:	e037883a 	mov	sp,fp
100011e8:	dfc00117 	ldw	ra,4(sp)
100011ec:	df000017 	ldw	fp,0(sp)
100011f0:	dec00204 	addi	sp,sp,8
100011f4:	f800283a 	ret

100011f8 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100011f8:	deff5f04 	addi	sp,sp,-644
100011fc:	dfc0a015 	stw	ra,640(sp)
10001200:	df009f15 	stw	fp,636(sp)
10001204:	df009f04 	addi	fp,sp,636
	unsigned int clock;
	short int keycodes[3];
	int x, y;
	int v_x, v_y;
	unsigned int vel_x = 15;
10001208:	008003c4 	movi	r2,15
1000120c:	e0bf8415 	stw	r2,-496(fp)
	unsigned int vel_x2 = 25;
10001210:	00800644 	movi	r2,25
10001214:	e0bf8515 	stw	r2,-492(fp)
	unsigned int vel_y = 2;
10001218:	00800084 	movi	r2,2
1000121c:	e0bf8615 	stw	r2,-488(fp)
	unsigned int v_jump1 = 45;
10001220:	00800b44 	movi	r2,45
10001224:	e0bf8715 	stw	r2,-484(fp)
	unsigned int v_jump2 = 60;
10001228:	00800f04 	movi	r2,60
1000122c:	e0bf8815 	stw	r2,-480(fp)
	unsigned int v_jump3 = 20;
10001230:	00800504 	movi	r2,20
10001234:	e0bf8915 	stw	r2,-476(fp)

	int x_dart[4], y_dart[4];
	int v_x_dart[4];
	char cnt_dart[4], cd_dart;
	unsigned int status_dart[4];
	unsigned int vel_dart = 40;
10001238:	00800a04 	movi	r2,40
1000123c:	e0bf8a15 	stw	r2,-472(fp)





	unsigned int ground = 1440;
10001240:	00816804 	movi	r2,1440
10001244:	e0bf8b15 	stw	r2,-468(fp)
	unsigned int v_enemy1 = 3;
10001248:	008000c4 	movi	r2,3
1000124c:	e0bf8c15 	stw	r2,-464(fp)
	unsigned int v_enemy2 = 5;
10001250:	00800144 	movi	r2,5
10001254:	e0bf8d15 	stw	r2,-460(fp)
	unsigned int v_enemy3 = 7;
10001258:	008001c4 	movi	r2,7
1000125c:	e0bf8e15 	stw	r2,-456(fp)
	unsigned int v_enemy4 = 25;
10001260:	00800644 	movi	r2,25
10001264:	e0bf8f15 	stw	r2,-452(fp)
	int mapX;
	unsigned int map_bound = 20480;
10001268:	00940004 	movi	r2,20480
1000126c:	e0bf9015 	stw	r2,-448(fp)
	unsigned int left_bound = 640;
10001270:	0080a004 	movi	r2,640
10001274:	e0bf9115 	stw	r2,-444(fp)
	unsigned int right_bound = 1920;
10001278:	0081e004 	movi	r2,1920
1000127c:	e0bf9215 	stw	r2,-440(fp)

	char on_gnd;
	keycall_init();
10001280:	00003cc0 	call	100003cc <keycall_init>
	printf("\nKeycall end.\n");
10001284:	010400b4 	movhi	r4,4098
10001288:	21085904 	addi	r4,r4,8548
1000128c:	0009f640 	call	10009f64 <puts>

	int i;
	for(i = 0; i < 3; i++){
10001290:	e03f7315 	stw	zero,-564(fp)
10001294:	00000906 	br	100012bc <main+0xc4>
		keycodes[i] = 0;
10001298:	e0bf7317 	ldw	r2,-564(fp)
1000129c:	1085883a 	add	r2,r2,r2
100012a0:	e0ff6104 	addi	r3,fp,-636
100012a4:	1885883a 	add	r2,r3,r2
100012a8:	10803284 	addi	r2,r2,202
100012ac:	1000000d 	sth	zero,0(r2)
	char on_gnd;
	keycall_init();
	printf("\nKeycall end.\n");

	int i;
	for(i = 0; i < 3; i++){
100012b0:	e0bf7317 	ldw	r2,-564(fp)
100012b4:	10800044 	addi	r2,r2,1
100012b8:	e0bf7315 	stw	r2,-564(fp)
100012bc:	e0bf7317 	ldw	r2,-564(fp)
100012c0:	108000d0 	cmplti	r2,r2,3
100012c4:	103ff41e 	bne	r2,zero,10001298 <__alt_data_end+0xf8001298>

	char key_char;

	Start_label:
	while (1){
		key_char = getkeys(keycodes);
100012c8:	e0bf9384 	addi	r2,fp,-434
100012cc:	1009883a 	mov	r4,r2
100012d0:	00010340 	call	10001034 <getkeys>
100012d4:	e0bf9305 	stb	r2,-436(fp)
		//printf("key_char;%x\n", key_char);
		if(key_char & 0x40) break;
100012d8:	e0bf9303 	ldbu	r2,-436(fp)
100012dc:	10803fcc 	andi	r2,r2,255
100012e0:	1080100c 	andi	r2,r2,64
100012e4:	1000011e 	bne	r2,zero,100012ec <main+0xf4>
	}
100012e8:	003ff706 	br	100012c8 <__alt_data_end+0xf80012c8>

	Start_label:
	while (1){
		key_char = getkeys(keycodes);
		//printf("key_char;%x\n", key_char);
		if(key_char & 0x40) break;
100012ec:	0001883a 	nop
	}
	clock = 0;
100012f0:	e03f6115 	stw	zero,-636(fp)
	x = 480;
100012f4:	00807804 	movi	r2,480
100012f8:	e0bf6215 	stw	r2,-632(fp)
	y = ground;
100012fc:	e0bf8b17 	ldw	r2,-468(fp)
10001300:	e0bf6315 	stw	r2,-628(fp)
	v_x = 0;
10001304:	e03f6415 	stw	zero,-624(fp)
	v_y = 0;
10001308:	e03f6515 	stw	zero,-620(fp)
	on_gnd = 1;
1000130c:	00800044 	movi	r2,1
10001310:	e0bf7205 	stb	r2,-568(fp)
	hurt_counter = 0;
10001314:	e03f6815 	stw	zero,-608(fp)
	air_counter = 0;
10001318:	e03f6915 	stw	zero,-604(fp)
	status_ninja = 0xc0000000;
1000131c:	00b00034 	movhi	r2,49152
10001320:	e0bf6615 	stw	r2,-616(fp)
	life_energy_status = 0;
10001324:	e03f6c15 	stw	zero,-592(fp)
	mapX = 0;
10001328:	e03f7115 	stw	zero,-572(fp)
	cd_dart = 0;
1000132c:	e03f6d05 	stb	zero,-588(fp)

	idx_dart = 0;
10001330:	e03f6d8d 	sth	zero,-586(fp)
	idx_lady = 0;
10001334:	e03f6e8d 	sth	zero,-582(fp)
	idx_zombie = 0;
10001338:	e03f6f0d 	sth	zero,-580(fp)
	idx_skull = 0;
1000133c:	e03f700d 	sth	zero,-576(fp)

	spin = 0;
10001340:	e03f670d 	sth	zero,-612(fp)
	spin_cd = 0;
10001344:	e03f678d 	sth	zero,-610(fp)
	life = 100;
10001348:	00801904 	movi	r2,100
1000134c:	e0bf6a15 	stw	r2,-600(fp)
	energy = 1;
10001350:	00800044 	movi	r2,1
10001354:	e0bf6b15 	stw	r2,-596(fp)
	for (i_dart = 0; i_dart < 4; i_dart++){
10001358:	e03f6e0d 	sth	zero,-584(fp)
1000135c:	00007406 	br	10001530 <main+0x338>
		status_dart[i_dart] = 0;
10001360:	e0bf6e0f 	ldh	r2,-584(fp)
10001364:	1085883a 	add	r2,r2,r2
10001368:	1085883a 	add	r2,r2,r2
1000136c:	e13f6104 	addi	r4,fp,-636
10001370:	2085883a 	add	r2,r4,r2
10001374:	10804104 	addi	r2,r2,260
10001378:	10000015 	stw	zero,0(r2)
		x_dart[i_dart] = 0;
1000137c:	e0bf6e0f 	ldh	r2,-584(fp)
10001380:	1085883a 	add	r2,r2,r2
10001384:	1085883a 	add	r2,r2,r2
10001388:	e17f6104 	addi	r5,fp,-636
1000138c:	2885883a 	add	r2,r5,r2
10001390:	10803404 	addi	r2,r2,208
10001394:	10000015 	stw	zero,0(r2)
		y_dart[i_dart] = 0;
10001398:	e0bf6e0f 	ldh	r2,-584(fp)
1000139c:	1085883a 	add	r2,r2,r2
100013a0:	1085883a 	add	r2,r2,r2
100013a4:	e0ff6104 	addi	r3,fp,-636
100013a8:	1885883a 	add	r2,r3,r2
100013ac:	10803804 	addi	r2,r2,224
100013b0:	10000015 	stw	zero,0(r2)
		v_x_dart[i_dart] = 0;
100013b4:	e0bf6e0f 	ldh	r2,-584(fp)
100013b8:	1085883a 	add	r2,r2,r2
100013bc:	1085883a 	add	r2,r2,r2
100013c0:	e13f6104 	addi	r4,fp,-636
100013c4:	2085883a 	add	r2,r4,r2
100013c8:	10803c04 	addi	r2,r2,240
100013cc:	10000015 	stw	zero,0(r2)
		cnt_dart[i_dart] = 0;
100013d0:	e0bf6e0f 	ldh	r2,-584(fp)
100013d4:	e0ffa104 	addi	r3,fp,-380
100013d8:	1885883a 	add	r2,r3,r2
100013dc:	10000005 	stb	zero,0(r2)

		status_lady[i_dart] = 0;
100013e0:	e0bf6e0f 	ldh	r2,-584(fp)
100013e4:	1085883a 	add	r2,r2,r2
100013e8:	1085883a 	add	r2,r2,r2
100013ec:	e17f6104 	addi	r5,fp,-636
100013f0:	2885883a 	add	r2,r5,r2
100013f4:	10804f04 	addi	r2,r2,316
100013f8:	10000015 	stw	zero,0(r2)
		x_lady[i_dart] = 0;
100013fc:	e0bf6e0f 	ldh	r2,-584(fp)
10001400:	1085883a 	add	r2,r2,r2
10001404:	1085883a 	add	r2,r2,r2
10001408:	e0ff6104 	addi	r3,fp,-636
1000140c:	1885883a 	add	r2,r3,r2
10001410:	10804504 	addi	r2,r2,276
10001414:	10000015 	stw	zero,0(r2)
		//y_lady[i_dart] = 0;
		v_x_lady[i_dart] = 0;
10001418:	e0bf6e0f 	ldh	r2,-584(fp)
1000141c:	1085883a 	add	r2,r2,r2
10001420:	1085883a 	add	r2,r2,r2
10001424:	e13f6104 	addi	r4,fp,-636
10001428:	2085883a 	add	r2,r4,r2
1000142c:	10804904 	addi	r2,r2,292
10001430:	10000015 	stw	zero,0(r2)
		live_lady[i_dart] = 0;
10001434:	e0bf6e0f 	ldh	r2,-584(fp)
10001438:	1085883a 	add	r2,r2,r2
1000143c:	e17f6104 	addi	r5,fp,-636
10001440:	2885883a 	add	r2,r5,r2
10001444:	10804d04 	addi	r2,r2,308
10001448:	1000000d 	sth	zero,0(r2)

		status_zombie[i_dart] = 0;
1000144c:	e0bf6e0f 	ldh	r2,-584(fp)
10001450:	1085883a 	add	r2,r2,r2
10001454:	1085883a 	add	r2,r2,r2
10001458:	e0ff6104 	addi	r3,fp,-636
1000145c:	1885883a 	add	r2,r3,r2
10001460:	10805d04 	addi	r2,r2,372
10001464:	10000015 	stw	zero,0(r2)
		x_zombie[i_dart] = 0;
10001468:	e0bf6e0f 	ldh	r2,-584(fp)
1000146c:	1085883a 	add	r2,r2,r2
10001470:	1085883a 	add	r2,r2,r2
10001474:	e13f6104 	addi	r4,fp,-636
10001478:	2085883a 	add	r2,r4,r2
1000147c:	10805304 	addi	r2,r2,332
10001480:	10000015 	stw	zero,0(r2)
		//y_zombie[i_dart] = 0;
		v_x_zombie[i_dart] = 0;
10001484:	e0bf6e0f 	ldh	r2,-584(fp)
10001488:	1085883a 	add	r2,r2,r2
1000148c:	1085883a 	add	r2,r2,r2
10001490:	e17f6104 	addi	r5,fp,-636
10001494:	2885883a 	add	r2,r5,r2
10001498:	10805704 	addi	r2,r2,348
1000149c:	10000015 	stw	zero,0(r2)
		live_zombie[i_dart] = 0;
100014a0:	e0bf6e0f 	ldh	r2,-584(fp)
100014a4:	1085883a 	add	r2,r2,r2
100014a8:	e0ff6104 	addi	r3,fp,-636
100014ac:	1885883a 	add	r2,r3,r2
100014b0:	10805b04 	addi	r2,r2,364
100014b4:	1000000d 	sth	zero,0(r2)

		status_swampt[i_dart] = 0;
100014b8:	e0bf6e0f 	ldh	r2,-584(fp)
100014bc:	1085883a 	add	r2,r2,r2
100014c0:	1085883a 	add	r2,r2,r2
100014c4:	e13f6104 	addi	r4,fp,-636
100014c8:	2085883a 	add	r2,r4,r2
100014cc:	10806b04 	addi	r2,r2,428
100014d0:	10000015 	stw	zero,0(r2)
		x_swampt[i_dart] = 0;
100014d4:	e0bf6e0f 	ldh	r2,-584(fp)
100014d8:	1085883a 	add	r2,r2,r2
100014dc:	1085883a 	add	r2,r2,r2
100014e0:	e17f6104 	addi	r5,fp,-636
100014e4:	2885883a 	add	r2,r5,r2
100014e8:	10806104 	addi	r2,r2,388
100014ec:	10000015 	stw	zero,0(r2)
		//y_swampt[i_dart] = 0;
		v_x_swampt[i_dart] = 0;
100014f0:	e0bf6e0f 	ldh	r2,-584(fp)
100014f4:	1085883a 	add	r2,r2,r2
100014f8:	1085883a 	add	r2,r2,r2
100014fc:	e0ff6104 	addi	r3,fp,-636
10001500:	1885883a 	add	r2,r3,r2
10001504:	10806504 	addi	r2,r2,404
10001508:	10000015 	stw	zero,0(r2)
		live_swampt[i_dart] = 0;
1000150c:	e0bf6e0f 	ldh	r2,-584(fp)
10001510:	1085883a 	add	r2,r2,r2
10001514:	e13f6104 	addi	r4,fp,-636
10001518:	2085883a 	add	r2,r4,r2
1000151c:	10806904 	addi	r2,r2,420
10001520:	1000000d 	sth	zero,0(r2)

	spin = 0;
	spin_cd = 0;
	life = 100;
	energy = 1;
	for (i_dart = 0; i_dart < 4; i_dart++){
10001524:	e0bf6e0b 	ldhu	r2,-584(fp)
10001528:	10800044 	addi	r2,r2,1
1000152c:	e0bf6e0d 	sth	r2,-584(fp)
10001530:	e0bf6e0f 	ldh	r2,-584(fp)
10001534:	10800110 	cmplti	r2,r2,4
10001538:	103f891e 	bne	r2,zero,10001360 <__alt_data_end+0xf8001360>
		//y_swampt[i_dart] = 0;
		v_x_swampt[i_dart] = 0;
		live_swampt[i_dart] = 0;

	}
	for (i_dart = 0; i_dart < 2; i_dart++){
1000153c:	e03f6e0d 	sth	zero,-584(fp)
10001540:	00003206 	br	1000160c <main+0x414>
		status_skull[i_dart] = 0;
10001544:	e0bf6e0f 	ldh	r2,-584(fp)
10001548:	1085883a 	add	r2,r2,r2
1000154c:	1085883a 	add	r2,r2,r2
10001550:	e17f6104 	addi	r5,fp,-636
10001554:	2885883a 	add	r2,r5,r2
10001558:	10807904 	addi	r2,r2,484
1000155c:	10000015 	stw	zero,0(r2)
		x_skull[i_dart] = 0;
10001560:	e0bf6e0f 	ldh	r2,-584(fp)
10001564:	1085883a 	add	r2,r2,r2
10001568:	1085883a 	add	r2,r2,r2
1000156c:	e0ff6104 	addi	r3,fp,-636
10001570:	1885883a 	add	r2,r3,r2
10001574:	10806f04 	addi	r2,r2,444
10001578:	10000015 	stw	zero,0(r2)
		y_skull[i_dart] = 0;
1000157c:	e0bf6e0f 	ldh	r2,-584(fp)
10001580:	1085883a 	add	r2,r2,r2
10001584:	1085883a 	add	r2,r2,r2
10001588:	e13f6104 	addi	r4,fp,-636
1000158c:	2085883a 	add	r2,r4,r2
10001590:	10807104 	addi	r2,r2,452
10001594:	10000015 	stw	zero,0(r2)
		v_x_skull[i_dart] = 0;
10001598:	e0bf6e0f 	ldh	r2,-584(fp)
1000159c:	1085883a 	add	r2,r2,r2
100015a0:	1085883a 	add	r2,r2,r2
100015a4:	e17f6104 	addi	r5,fp,-636
100015a8:	2885883a 	add	r2,r5,r2
100015ac:	10807304 	addi	r2,r2,460
100015b0:	10000015 	stw	zero,0(r2)
		v_y_skull[i_dart] = 0;
100015b4:	e0bf6e0f 	ldh	r2,-584(fp)
100015b8:	1085883a 	add	r2,r2,r2
100015bc:	1085883a 	add	r2,r2,r2
100015c0:	e0ff6104 	addi	r3,fp,-636
100015c4:	1885883a 	add	r2,r3,r2
100015c8:	10807504 	addi	r2,r2,468
100015cc:	10000015 	stw	zero,0(r2)
		live_skull[i_dart] = 0;
100015d0:	e0bf6e0f 	ldh	r2,-584(fp)
100015d4:	1085883a 	add	r2,r2,r2
100015d8:	e13f6104 	addi	r4,fp,-636
100015dc:	2085883a 	add	r2,r4,r2
100015e0:	10807804 	addi	r2,r2,480
100015e4:	1000000d 	sth	zero,0(r2)
		cnt_skull[i_dart] = 0;
100015e8:	e0bf6e0f 	ldh	r2,-584(fp)
100015ec:	1085883a 	add	r2,r2,r2
100015f0:	e17f6104 	addi	r5,fp,-636
100015f4:	2885883a 	add	r2,r5,r2
100015f8:	10807704 	addi	r2,r2,476
100015fc:	1000000d 	sth	zero,0(r2)
		//y_swampt[i_dart] = 0;
		v_x_swampt[i_dart] = 0;
		live_swampt[i_dart] = 0;

	}
	for (i_dart = 0; i_dart < 2; i_dart++){
10001600:	e0bf6e0b 	ldhu	r2,-584(fp)
10001604:	10800044 	addi	r2,r2,1
10001608:	e0bf6e0d 	sth	r2,-584(fp)
1000160c:	e0bf6e0f 	ldh	r2,-584(fp)
10001610:	10800090 	cmplti	r2,r2,2
10001614:	103fcb1e 	bne	r2,zero,10001544 <__alt_data_end+0xf8001544>
		v_y_skull[i_dart] = 0;
		live_skull[i_dart] = 0;
		cnt_skull[i_dart] = 0;
	}

	printf("Start!\n");
10001618:	010400b4 	movhi	r4,4098
1000161c:	21085d04 	addi	r4,r4,8564
10001620:	0009f640 	call	10009f64 <puts>
	while(1){
		//goto Boss_label_pre;
		clock += 1;
10001624:	e0bf6117 	ldw	r2,-636(fp)
10001628:	10800044 	addi	r2,r2,1
1000162c:	e0bf6115 	stw	r2,-636(fp)
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
10001630:	0001883a 	nop
10001634:	d0a00017 	ldw	r2,-32768(gp)
10001638:	10803f04 	addi	r2,r2,252
1000163c:	10800017 	ldw	r2,0(r2)
10001640:	103ffc26 	beq	r2,zero,10001634 <__alt_data_end+0xf8001634>
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = mapX >> 3;
10001644:	d0a00017 	ldw	r2,-32768(gp)
10001648:	e0ff7117 	ldw	r3,-572(fp)
1000164c:	1807d0fa 	srai	r3,r3,3
10001650:	10c00015 	stw	r3,0(r2)
		reg_ptr[1] = (life ^ (energy << 8)) | life_energy_status;
10001654:	d0a00017 	ldw	r2,-32768(gp)
10001658:	10800104 	addi	r2,r2,4
1000165c:	e0ff6b17 	ldw	r3,-596(fp)
10001660:	1808923a 	slli	r4,r3,8
10001664:	e0ff6a17 	ldw	r3,-600(fp)
10001668:	20c6f03a 	xor	r3,r4,r3
1000166c:	1809883a 	mov	r4,r3
10001670:	e0ff6c17 	ldw	r3,-592(fp)
10001674:	20c6b03a 	or	r3,r4,r3
10001678:	10c00015 	stw	r3,0(r2)
		reg_ptr[2] = (((y_dart[0]>>3) << 16) ^ (x_dart[0]>>3)) | status_dart[0];
1000167c:	d0a00017 	ldw	r2,-32768(gp)
10001680:	10800204 	addi	r2,r2,8
10001684:	e0ff9917 	ldw	r3,-412(fp)
10001688:	1807d0fa 	srai	r3,r3,3
1000168c:	1808943a 	slli	r4,r3,16
10001690:	e0ff9517 	ldw	r3,-428(fp)
10001694:	1807d0fa 	srai	r3,r3,3
10001698:	20c6f03a 	xor	r3,r4,r3
1000169c:	1809883a 	mov	r4,r3
100016a0:	e0ffa217 	ldw	r3,-376(fp)
100016a4:	20c6b03a 	or	r3,r4,r3
100016a8:	10c00015 	stw	r3,0(r2)
		reg_ptr[3] = (((y_dart[1]>>3) << 16) ^ (x_dart[1]>>3)) | status_dart[1];
100016ac:	d0a00017 	ldw	r2,-32768(gp)
100016b0:	10800304 	addi	r2,r2,12
100016b4:	e0ff9a17 	ldw	r3,-408(fp)
100016b8:	1807d0fa 	srai	r3,r3,3
100016bc:	1808943a 	slli	r4,r3,16
100016c0:	e0ff9617 	ldw	r3,-424(fp)
100016c4:	1807d0fa 	srai	r3,r3,3
100016c8:	20c6f03a 	xor	r3,r4,r3
100016cc:	1809883a 	mov	r4,r3
100016d0:	e0ffa317 	ldw	r3,-372(fp)
100016d4:	20c6b03a 	or	r3,r4,r3
100016d8:	10c00015 	stw	r3,0(r2)
		reg_ptr[4] = (((y_dart[2]>>3) << 16) ^ (x_dart[2]>>3)) | status_dart[2];
100016dc:	d0a00017 	ldw	r2,-32768(gp)
100016e0:	10800404 	addi	r2,r2,16
100016e4:	e0ff9b17 	ldw	r3,-404(fp)
100016e8:	1807d0fa 	srai	r3,r3,3
100016ec:	1808943a 	slli	r4,r3,16
100016f0:	e0ff9717 	ldw	r3,-420(fp)
100016f4:	1807d0fa 	srai	r3,r3,3
100016f8:	20c6f03a 	xor	r3,r4,r3
100016fc:	1809883a 	mov	r4,r3
10001700:	e0ffa417 	ldw	r3,-368(fp)
10001704:	20c6b03a 	or	r3,r4,r3
10001708:	10c00015 	stw	r3,0(r2)
		reg_ptr[5] = (((y_dart[3]>>3) << 16) ^ (x_dart[3]>>3)) | status_dart[3];
1000170c:	d0a00017 	ldw	r2,-32768(gp)
10001710:	10800504 	addi	r2,r2,20
10001714:	e0ff9c17 	ldw	r3,-400(fp)
10001718:	1807d0fa 	srai	r3,r3,3
1000171c:	1808943a 	slli	r4,r3,16
10001720:	e0ff9817 	ldw	r3,-416(fp)
10001724:	1807d0fa 	srai	r3,r3,3
10001728:	20c6f03a 	xor	r3,r4,r3
1000172c:	1809883a 	mov	r4,r3
10001730:	e0ffa517 	ldw	r3,-364(fp)
10001734:	20c6b03a 	or	r3,r4,r3
10001738:	10c00015 	stw	r3,0(r2)
		reg_ptr[18] = ((((y_skull[0]>>3) << 16) ^ (x_skull[0]>>3)) & 0x01ffffff) | status_skull[0];
1000173c:	d0a00017 	ldw	r2,-32768(gp)
10001740:	10c01204 	addi	r3,r2,72
10001744:	e0bfd217 	ldw	r2,-184(fp)
10001748:	1005d0fa 	srai	r2,r2,3
1000174c:	1008943a 	slli	r4,r2,16
10001750:	e0bfd017 	ldw	r2,-192(fp)
10001754:	1005d0fa 	srai	r2,r2,3
10001758:	2084f03a 	xor	r2,r4,r2
1000175c:	1009883a 	mov	r4,r2
10001760:	00808034 	movhi	r2,512
10001764:	10bfffc4 	addi	r2,r2,-1
10001768:	2088703a 	and	r4,r4,r2
1000176c:	e0bfda17 	ldw	r2,-152(fp)
10001770:	2084b03a 	or	r2,r4,r2
10001774:	18800015 	stw	r2,0(r3)
		reg_ptr[19] = ((((y_skull[1]>>3) << 16) ^ (x_skull[1]>>3)) & 0x01ffffff) | status_skull[1];
10001778:	d0a00017 	ldw	r2,-32768(gp)
1000177c:	10c01304 	addi	r3,r2,76
10001780:	e0bfd317 	ldw	r2,-180(fp)
10001784:	1005d0fa 	srai	r2,r2,3
10001788:	1008943a 	slli	r4,r2,16
1000178c:	e0bfd117 	ldw	r2,-188(fp)
10001790:	1005d0fa 	srai	r2,r2,3
10001794:	2084f03a 	xor	r2,r4,r2
10001798:	1009883a 	mov	r4,r2
1000179c:	00808034 	movhi	r2,512
100017a0:	10bfffc4 	addi	r2,r2,-1
100017a4:	2088703a 	and	r4,r4,r2
100017a8:	e0bfdb17 	ldw	r2,-148(fp)
100017ac:	2084b03a 	or	r2,r4,r2
100017b0:	18800015 	stw	r2,0(r3)
		reg_ptr[20] = ((0x00b40000 ^ (x_lady[0]>>3)) & 0x01ffffff) | status_lady[0];
100017b4:	d0a00017 	ldw	r2,-32768(gp)
100017b8:	10c01404 	addi	r3,r2,80
100017bc:	e0bfa617 	ldw	r2,-360(fp)
100017c0:	1005d0fa 	srai	r2,r2,3
100017c4:	10802d3c 	xorhi	r2,r2,180
100017c8:	1009883a 	mov	r4,r2
100017cc:	00808034 	movhi	r2,512
100017d0:	10bfffc4 	addi	r2,r2,-1
100017d4:	2088703a 	and	r4,r4,r2
100017d8:	e0bfb017 	ldw	r2,-320(fp)
100017dc:	2084b03a 	or	r2,r4,r2
100017e0:	18800015 	stw	r2,0(r3)
		reg_ptr[21] = ((0x00b40000 ^ (x_lady[1]>>3)) & 0x01ffffff) | status_lady[1];
100017e4:	d0a00017 	ldw	r2,-32768(gp)
100017e8:	10c01504 	addi	r3,r2,84
100017ec:	e0bfa717 	ldw	r2,-356(fp)
100017f0:	1005d0fa 	srai	r2,r2,3
100017f4:	10802d3c 	xorhi	r2,r2,180
100017f8:	1009883a 	mov	r4,r2
100017fc:	00808034 	movhi	r2,512
10001800:	10bfffc4 	addi	r2,r2,-1
10001804:	2088703a 	and	r4,r4,r2
10001808:	e0bfb117 	ldw	r2,-316(fp)
1000180c:	2084b03a 	or	r2,r4,r2
10001810:	18800015 	stw	r2,0(r3)
		reg_ptr[22] = ((0x00b40000 ^ (x_lady[2]>>3)) & 0x01ffffff) | status_lady[2];
10001814:	d0a00017 	ldw	r2,-32768(gp)
10001818:	10c01604 	addi	r3,r2,88
1000181c:	e0bfa817 	ldw	r2,-352(fp)
10001820:	1005d0fa 	srai	r2,r2,3
10001824:	10802d3c 	xorhi	r2,r2,180
10001828:	1009883a 	mov	r4,r2
1000182c:	00808034 	movhi	r2,512
10001830:	10bfffc4 	addi	r2,r2,-1
10001834:	2088703a 	and	r4,r4,r2
10001838:	e0bfb217 	ldw	r2,-312(fp)
1000183c:	2084b03a 	or	r2,r4,r2
10001840:	18800015 	stw	r2,0(r3)
		reg_ptr[23] = ((0x00b40000 ^ (x_lady[3]>>3)) & 0x01ffffff) | status_lady[3];
10001844:	d0a00017 	ldw	r2,-32768(gp)
10001848:	10c01704 	addi	r3,r2,92
1000184c:	e0bfa917 	ldw	r2,-348(fp)
10001850:	1005d0fa 	srai	r2,r2,3
10001854:	10802d3c 	xorhi	r2,r2,180
10001858:	1009883a 	mov	r4,r2
1000185c:	00808034 	movhi	r2,512
10001860:	10bfffc4 	addi	r2,r2,-1
10001864:	2088703a 	and	r4,r4,r2
10001868:	e0bfb317 	ldw	r2,-308(fp)
1000186c:	2084b03a 	or	r2,r4,r2
10001870:	18800015 	stw	r2,0(r3)
		reg_ptr[37] = (0x00b40000 ^ (x_zombie[0]>>3)) | status_zombie[0];
10001874:	d0a00017 	ldw	r2,-32768(gp)
10001878:	10802504 	addi	r2,r2,148
1000187c:	e0ffb417 	ldw	r3,-304(fp)
10001880:	1807d0fa 	srai	r3,r3,3
10001884:	18c02d3c 	xorhi	r3,r3,180
10001888:	1809883a 	mov	r4,r3
1000188c:	e0ffbe17 	ldw	r3,-264(fp)
10001890:	20c6b03a 	or	r3,r4,r3
10001894:	10c00015 	stw	r3,0(r2)
		reg_ptr[38] = (0x00b40000 ^ (x_zombie[1]>>3)) | status_zombie[1];
10001898:	d0a00017 	ldw	r2,-32768(gp)
1000189c:	10802604 	addi	r2,r2,152
100018a0:	e0ffb517 	ldw	r3,-300(fp)
100018a4:	1807d0fa 	srai	r3,r3,3
100018a8:	18c02d3c 	xorhi	r3,r3,180
100018ac:	1809883a 	mov	r4,r3
100018b0:	e0ffbf17 	ldw	r3,-260(fp)
100018b4:	20c6b03a 	or	r3,r4,r3
100018b8:	10c00015 	stw	r3,0(r2)
		reg_ptr[39] = (0x00b40000 ^ (x_zombie[2]>>3)) | status_zombie[2];
100018bc:	d0a00017 	ldw	r2,-32768(gp)
100018c0:	10802704 	addi	r2,r2,156
100018c4:	e0ffb617 	ldw	r3,-296(fp)
100018c8:	1807d0fa 	srai	r3,r3,3
100018cc:	18c02d3c 	xorhi	r3,r3,180
100018d0:	1809883a 	mov	r4,r3
100018d4:	e0ffc017 	ldw	r3,-256(fp)
100018d8:	20c6b03a 	or	r3,r4,r3
100018dc:	10c00015 	stw	r3,0(r2)
		reg_ptr[40] = (0x00b40000 ^ (x_zombie[3]>>3)) | status_zombie[3];
100018e0:	d0a00017 	ldw	r2,-32768(gp)
100018e4:	10802804 	addi	r2,r2,160
100018e8:	e0ffb717 	ldw	r3,-292(fp)
100018ec:	1807d0fa 	srai	r3,r3,3
100018f0:	18c02d3c 	xorhi	r3,r3,180
100018f4:	1809883a 	mov	r4,r3
100018f8:	e0ffc117 	ldw	r3,-252(fp)
100018fc:	20c6b03a 	or	r3,r4,r3
10001900:	10c00015 	stw	r3,0(r2)
		reg_ptr[33] = (0x00b40000 ^ (x_swampt[0]>>3)) | status_swampt[0];
10001904:	d0a00017 	ldw	r2,-32768(gp)
10001908:	10802104 	addi	r2,r2,132
1000190c:	e0ffc217 	ldw	r3,-248(fp)
10001910:	1807d0fa 	srai	r3,r3,3
10001914:	18c02d3c 	xorhi	r3,r3,180
10001918:	1809883a 	mov	r4,r3
1000191c:	e0ffcc17 	ldw	r3,-208(fp)
10001920:	20c6b03a 	or	r3,r4,r3
10001924:	10c00015 	stw	r3,0(r2)
		reg_ptr[34] = (0x00b40000 ^ (x_swampt[1]>>3)) | status_swampt[1];
10001928:	d0a00017 	ldw	r2,-32768(gp)
1000192c:	10802204 	addi	r2,r2,136
10001930:	e0ffc317 	ldw	r3,-244(fp)
10001934:	1807d0fa 	srai	r3,r3,3
10001938:	18c02d3c 	xorhi	r3,r3,180
1000193c:	1809883a 	mov	r4,r3
10001940:	e0ffcd17 	ldw	r3,-204(fp)
10001944:	20c6b03a 	or	r3,r4,r3
10001948:	10c00015 	stw	r3,0(r2)
		reg_ptr[35] = (0x00b40000 ^ (x_swampt[2]>>3)) | status_swampt[2];
1000194c:	d0a00017 	ldw	r2,-32768(gp)
10001950:	10802304 	addi	r2,r2,140
10001954:	e0ffc417 	ldw	r3,-240(fp)
10001958:	1807d0fa 	srai	r3,r3,3
1000195c:	18c02d3c 	xorhi	r3,r3,180
10001960:	1809883a 	mov	r4,r3
10001964:	e0ffce17 	ldw	r3,-200(fp)
10001968:	20c6b03a 	or	r3,r4,r3
1000196c:	10c00015 	stw	r3,0(r2)
		reg_ptr[36] = (0x00b40000 ^ (x_swampt[3]>>3)) | status_swampt[3];
10001970:	d0a00017 	ldw	r2,-32768(gp)
10001974:	10802404 	addi	r2,r2,144
10001978:	e0ffc517 	ldw	r3,-236(fp)
1000197c:	1807d0fa 	srai	r3,r3,3
10001980:	18c02d3c 	xorhi	r3,r3,180
10001984:	1809883a 	mov	r4,r3
10001988:	e0ffcf17 	ldw	r3,-196(fp)
1000198c:	20c6b03a 	or	r3,r4,r3
10001990:	10c00015 	stw	r3,0(r2)
		reg_ptr[32] = (((y>>3) << 16) ^ (x >> 3)) | status_ninja;
10001994:	d0a00017 	ldw	r2,-32768(gp)
10001998:	10802004 	addi	r2,r2,128
1000199c:	e0ff6317 	ldw	r3,-628(fp)
100019a0:	1807d0fa 	srai	r3,r3,3
100019a4:	1808943a 	slli	r4,r3,16
100019a8:	e0ff6217 	ldw	r3,-632(fp)
100019ac:	1807d0fa 	srai	r3,r3,3
100019b0:	20c6f03a 	xor	r3,r4,r3
100019b4:	1809883a 	mov	r4,r3
100019b8:	e0ff6617 	ldw	r3,-616(fp)
100019bc:	20c6b03a 	or	r3,r4,r3
100019c0:	10c00015 	stw	r3,0(r2)
		reg_ptr[41] = (0x00b00000 ^ 100) | 0x80000000;
100019c4:	d0a00017 	ldw	r2,-32768(gp)
100019c8:	10c02904 	addi	r3,r2,164
100019cc:	00a02c34 	movhi	r2,32944
100019d0:	10801904 	addi	r2,r2,100
100019d4:	18800015 	stw	r2,0(r3)
		reg_ptr[42] = (0x00c40000 ^ 90) | 0x80000000;
100019d8:	d0a00017 	ldw	r2,-32768(gp)
100019dc:	10c02a04 	addi	r3,r2,168
100019e0:	00a03134 	movhi	r2,32964
100019e4:	10801684 	addi	r2,r2,90
100019e8:	18800015 	stw	r2,0(r3)
		reg_ptr[62] = 1;
100019ec:	d0a00017 	ldw	r2,-32768(gp)
100019f0:	10803e04 	addi	r2,r2,248
100019f4:	00c00044 	movi	r3,1
100019f8:	10c00015 	stw	r3,0(r2)
		if(! spin){
100019fc:	e0bf670f 	ldh	r2,-612(fp)
10001a00:	1000011e 	bne	r2,zero,10001a08 <main+0x810>
			v_x = 0;
10001a04:	e03f6415 	stw	zero,-624(fp)
		}

		key_char = air_counter ? 0 : getkeys(keycodes);
10001a08:	e0bf6917 	ldw	r2,-604(fp)
10001a0c:	1000041e 	bne	r2,zero,10001a20 <main+0x828>
10001a10:	e0bf9384 	addi	r2,fp,-434
10001a14:	1009883a 	mov	r4,r2
10001a18:	00010340 	call	10001034 <getkeys>
10001a1c:	00000106 	br	10001a24 <main+0x82c>
10001a20:	0005883a 	mov	r2,zero
10001a24:	e0bf9305 	stb	r2,-436(fp)
		reg_ptr[62] = 0;
10001a28:	d0a00017 	ldw	r2,-32768(gp)
10001a2c:	10803e04 	addi	r2,r2,248
10001a30:	10000015 	stw	zero,0(r2)
		// W 01
		if ((key_char & 0x01) && energy == 80){
10001a34:	e0bf9303 	ldbu	r2,-436(fp)
10001a38:	10803fcc 	andi	r2,r2,255
10001a3c:	1080004c 	andi	r2,r2,1
10001a40:	10000626 	beq	r2,zero,10001a5c <main+0x864>
10001a44:	e0bf6b17 	ldw	r2,-596(fp)
10001a48:	10801418 	cmpnei	r2,r2,80
10001a4c:	1000031e 	bne	r2,zero,10001a5c <main+0x864>
			status_ninja |= 0x02000000;
10001a50:	e0bf6617 	ldw	r2,-616(fp)
10001a54:	10808034 	orhi	r2,r2,512
10001a58:	e0bf6615 	stw	r2,-616(fp)
		}
		// D 08
		if(!spin){
10001a5c:	e0bf670f 	ldh	r2,-612(fp)
10001a60:	1000181e 	bne	r2,zero,10001ac4 <main+0x8cc>
			if (key_char & 0x08){
10001a64:	e0bf9303 	ldbu	r2,-436(fp)
10001a68:	10803fcc 	andi	r2,r2,255
10001a6c:	1080020c 	andi	r2,r2,8
10001a70:	10000726 	beq	r2,zero,10001a90 <main+0x898>
				v_x += vel_x;
10001a74:	e0ff6417 	ldw	r3,-624(fp)
10001a78:	e0bf8417 	ldw	r2,-496(fp)
10001a7c:	1885883a 	add	r2,r3,r2
10001a80:	e0bf6415 	stw	r2,-624(fp)
				status_ninja |= 0x40000000;
10001a84:	e0bf6617 	ldw	r2,-616(fp)
10001a88:	10900034 	orhi	r2,r2,16384
10001a8c:	e0bf6615 	stw	r2,-616(fp)
			}
			// A 02
			if (key_char & 0x02){
10001a90:	e0bf9303 	ldbu	r2,-436(fp)
10001a94:	10803fcc 	andi	r2,r2,255
10001a98:	1080008c 	andi	r2,r2,2
10001a9c:	10000926 	beq	r2,zero,10001ac4 <main+0x8cc>
				v_x -= vel_x;
10001aa0:	e0ff6417 	ldw	r3,-624(fp)
10001aa4:	e0bf8417 	ldw	r2,-496(fp)
10001aa8:	1885c83a 	sub	r2,r3,r2
10001aac:	e0bf6415 	stw	r2,-624(fp)
				status_ninja &= 0xbfffffff;
10001ab0:	e0ff6617 	ldw	r3,-616(fp)
10001ab4:	00b00034 	movhi	r2,49152
10001ab8:	10bfffc4 	addi	r2,r2,-1
10001abc:	1884703a 	and	r2,r3,r2
10001ac0:	e0bf6615 	stw	r2,-616(fp)
			}
		}
		// K
		if ((key_char & 0x20) && on_gnd){
10001ac4:	e0bf9303 	ldbu	r2,-436(fp)
10001ac8:	10803fcc 	andi	r2,r2,255
10001acc:	1080080c 	andi	r2,r2,32
10001ad0:	10000c26 	beq	r2,zero,10001b04 <main+0x90c>
10001ad4:	e0bf7207 	ldb	r2,-568(fp)
10001ad8:	10000a26 	beq	r2,zero,10001b04 <main+0x90c>
			v_y = (status_ninja & 0x02000000) ? -v_jump2 : -v_jump1;
10001adc:	e0bf6617 	ldw	r2,-616(fp)
10001ae0:	1080802c 	andhi	r2,r2,512
10001ae4:	10000326 	beq	r2,zero,10001af4 <main+0x8fc>
10001ae8:	e0bf8817 	ldw	r2,-480(fp)
10001aec:	0085c83a 	sub	r2,zero,r2
10001af0:	00000206 	br	10001afc <main+0x904>
10001af4:	e0bf8717 	ldw	r2,-484(fp)
10001af8:	0085c83a 	sub	r2,zero,r2
10001afc:	e0bf6515 	stw	r2,-620(fp)
			on_gnd = 0;
10001b00:	e03f7205 	stb	zero,-568(fp)
		}

		//J
		if ((key_char & 0x10) && !cd_dart){
10001b04:	e0bf9303 	ldbu	r2,-436(fp)
10001b08:	10803fcc 	andi	r2,r2,255
10001b0c:	1080040c 	andi	r2,r2,16
10001b10:	10007926 	beq	r2,zero,10001cf8 <main+0xb00>
10001b14:	e0bf6d07 	ldb	r2,-588(fp)
10001b18:	1000771e 	bne	r2,zero,10001cf8 <main+0xb00>
			if(status_ninja & 0x02000000){
10001b1c:	e0bf6617 	ldw	r2,-616(fp)
10001b20:	1080802c 	andhi	r2,r2,512
10001b24:	10000f26 	beq	r2,zero,10001b64 <main+0x96c>
				if(!spin_cd){
10001b28:	e0bf678f 	ldh	r2,-610(fp)
10001b2c:	1000721e 	bne	r2,zero,10001cf8 <main+0xb00>
					spin = 30;
10001b30:	00800784 	movi	r2,30
10001b34:	e0bf670d 	sth	r2,-612(fp)
					spin_cd = 60;
10001b38:	00800f04 	movi	r2,60
10001b3c:	e0bf678d 	sth	r2,-610(fp)
					v_x = (status_ninja & 0x40000000) ? vel_x2 : -vel_x2;
10001b40:	e0bf6617 	ldw	r2,-616(fp)
10001b44:	1090002c 	andhi	r2,r2,16384
10001b48:	1000031e 	bne	r2,zero,10001b58 <main+0x960>
10001b4c:	e0bf8517 	ldw	r2,-492(fp)
10001b50:	0085c83a 	sub	r2,zero,r2
10001b54:	00000106 	br	10001b5c <main+0x964>
10001b58:	e0bf8517 	ldw	r2,-492(fp)
10001b5c:	e0bf6415 	stw	r2,-624(fp)
10001b60:	00006506 	br	10001cf8 <main+0xb00>
				}
			} else {
				cnt_dart[idx_dart] = 60;
10001b64:	e0bf6d8f 	ldh	r2,-586(fp)
10001b68:	e0ffa104 	addi	r3,fp,-380
10001b6c:	1885883a 	add	r2,r3,r2
10001b70:	00c00f04 	movi	r3,60
10001b74:	10c00005 	stb	r3,0(r2)
				cd_dart = 20;
10001b78:	00800504 	movi	r2,20
10001b7c:	e0bf6d05 	stb	r2,-588(fp)
				x_dart[idx_dart] = x;
10001b80:	e0bf6d8f 	ldh	r2,-586(fp)
10001b84:	1085883a 	add	r2,r2,r2
10001b88:	1085883a 	add	r2,r2,r2
10001b8c:	e0ff6104 	addi	r3,fp,-636
10001b90:	1885883a 	add	r2,r3,r2
10001b94:	10803404 	addi	r2,r2,208
10001b98:	e0ff6217 	ldw	r3,-632(fp)
10001b9c:	10c00015 	stw	r3,0(r2)
				y_dart[idx_dart] = y;
10001ba0:	e0bf6d8f 	ldh	r2,-586(fp)
10001ba4:	1085883a 	add	r2,r2,r2
10001ba8:	1085883a 	add	r2,r2,r2
10001bac:	e13f6104 	addi	r4,fp,-636
10001bb0:	2085883a 	add	r2,r4,r2
10001bb4:	10803804 	addi	r2,r2,224
10001bb8:	e0ff6317 	ldw	r3,-628(fp)
10001bbc:	10c00015 	stw	r3,0(r2)
				status_dart[idx_dart] |= 0x80000000;
10001bc0:	e0bf6d8f 	ldh	r2,-586(fp)
10001bc4:	e0ff6d8f 	ldh	r3,-586(fp)
10001bc8:	18c7883a 	add	r3,r3,r3
10001bcc:	18c7883a 	add	r3,r3,r3
10001bd0:	e17f6104 	addi	r5,fp,-636
10001bd4:	28c7883a 	add	r3,r5,r3
10001bd8:	18c04104 	addi	r3,r3,260
10001bdc:	18c00017 	ldw	r3,0(r3)
10001be0:	18e00034 	orhi	r3,r3,32768
10001be4:	1085883a 	add	r2,r2,r2
10001be8:	1085883a 	add	r2,r2,r2
10001bec:	e13f6104 	addi	r4,fp,-636
10001bf0:	2085883a 	add	r2,r4,r2
10001bf4:	10804104 	addi	r2,r2,260
10001bf8:	10c00015 	stw	r3,0(r2)
				if (status_ninja & 0x40000000){
10001bfc:	e0bf6617 	ldw	r2,-616(fp)
10001c00:	1090002c 	andhi	r2,r2,16384
10001c04:	10001826 	beq	r2,zero,10001c68 <main+0xa70>
					v_x_dart[idx_dart] = vel_dart;
10001c08:	e0bf6d8f 	ldh	r2,-586(fp)
10001c0c:	e0ff8a17 	ldw	r3,-472(fp)
10001c10:	1085883a 	add	r2,r2,r2
10001c14:	1085883a 	add	r2,r2,r2
10001c18:	e17f6104 	addi	r5,fp,-636
10001c1c:	2885883a 	add	r2,r5,r2
10001c20:	10803c04 	addi	r2,r2,240
10001c24:	10c00015 	stw	r3,0(r2)
					status_dart[idx_dart] |= 0x40000000;
10001c28:	e0bf6d8f 	ldh	r2,-586(fp)
10001c2c:	e0ff6d8f 	ldh	r3,-586(fp)
10001c30:	18c7883a 	add	r3,r3,r3
10001c34:	18c7883a 	add	r3,r3,r3
10001c38:	e13f6104 	addi	r4,fp,-636
10001c3c:	20c7883a 	add	r3,r4,r3
10001c40:	18c04104 	addi	r3,r3,260
10001c44:	18c00017 	ldw	r3,0(r3)
10001c48:	18d00034 	orhi	r3,r3,16384
10001c4c:	1085883a 	add	r2,r2,r2
10001c50:	1085883a 	add	r2,r2,r2
10001c54:	e17f6104 	addi	r5,fp,-636
10001c58:	2885883a 	add	r2,r5,r2
10001c5c:	10804104 	addi	r2,r2,260
10001c60:	10c00015 	stw	r3,0(r2)
10001c64:	00001a06 	br	10001cd0 <main+0xad8>
				} else{
					v_x_dart[idx_dart] = -vel_dart;
10001c68:	e0bf6d8f 	ldh	r2,-586(fp)
10001c6c:	e0ff8a17 	ldw	r3,-472(fp)
10001c70:	00c7c83a 	sub	r3,zero,r3
10001c74:	1085883a 	add	r2,r2,r2
10001c78:	1085883a 	add	r2,r2,r2
10001c7c:	e13f6104 	addi	r4,fp,-636
10001c80:	2085883a 	add	r2,r4,r2
10001c84:	10803c04 	addi	r2,r2,240
10001c88:	10c00015 	stw	r3,0(r2)
					status_dart[idx_dart] &= 0xbfffffff;
10001c8c:	e0ff6d8f 	ldh	r3,-586(fp)
10001c90:	e0bf6d8f 	ldh	r2,-586(fp)
10001c94:	1085883a 	add	r2,r2,r2
10001c98:	1085883a 	add	r2,r2,r2
10001c9c:	e17f6104 	addi	r5,fp,-636
10001ca0:	2885883a 	add	r2,r5,r2
10001ca4:	10804104 	addi	r2,r2,260
10001ca8:	11000017 	ldw	r4,0(r2)
10001cac:	00b00034 	movhi	r2,49152
10001cb0:	10bfffc4 	addi	r2,r2,-1
10001cb4:	2088703a 	and	r4,r4,r2
10001cb8:	18c5883a 	add	r2,r3,r3
10001cbc:	1085883a 	add	r2,r2,r2
10001cc0:	e0ff6104 	addi	r3,fp,-636
10001cc4:	1885883a 	add	r2,r3,r2
10001cc8:	10804104 	addi	r2,r2,260
10001ccc:	11000015 	stw	r4,0(r2)
				}
				if(idx_dart++ == 3){
10001cd0:	e0bf6d8b 	ldhu	r2,-586(fp)
10001cd4:	1007883a 	mov	r3,r2
10001cd8:	18c00044 	addi	r3,r3,1
10001cdc:	e0ff6d8d 	sth	r3,-586(fp)
10001ce0:	10bfffcc 	andi	r2,r2,65535
10001ce4:	10a0001c 	xori	r2,r2,32768
10001ce8:	10a00004 	addi	r2,r2,-32768
10001cec:	108000d8 	cmpnei	r2,r2,3
10001cf0:	1000011e 	bne	r2,zero,10001cf8 <main+0xb00>
					idx_dart = 0;
10001cf4:	e03f6d8d 	sth	zero,-586(fp)
				}
			}
		}

		if ((clock & 0x000000ff) == 0){
10001cf8:	e0bf6117 	ldw	r2,-636(fp)
10001cfc:	10803fcc 	andi	r2,r2,255
10001d00:	1000321e 	bne	r2,zero,10001dcc <main+0xbd4>
			live_lady[idx_lady] = 2;
10001d04:	e0bf6e8f 	ldh	r2,-582(fp)
10001d08:	1085883a 	add	r2,r2,r2
10001d0c:	e13f6104 	addi	r4,fp,-636
10001d10:	2085883a 	add	r2,r4,r2
10001d14:	10804d04 	addi	r2,r2,308
10001d18:	00c00084 	movi	r3,2
10001d1c:	10c0000d 	sth	r3,0(r2)
			x_lady[idx_lady] = mapX + 2500;
10001d20:	e0bf6e8f 	ldh	r2,-582(fp)
10001d24:	e0ff7117 	ldw	r3,-572(fp)
10001d28:	18c27104 	addi	r3,r3,2500
10001d2c:	1085883a 	add	r2,r2,r2
10001d30:	1085883a 	add	r2,r2,r2
10001d34:	e17f6104 	addi	r5,fp,-636
10001d38:	2885883a 	add	r2,r5,r2
10001d3c:	10804504 	addi	r2,r2,276
10001d40:	10c00015 	stw	r3,0(r2)
			//y_lady[idx_lady] = ground;
			status_lady[idx_lady] |= 0x90000000;
10001d44:	e0bf6e8f 	ldh	r2,-582(fp)
10001d48:	e0ff6e8f 	ldh	r3,-582(fp)
10001d4c:	18c7883a 	add	r3,r3,r3
10001d50:	18c7883a 	add	r3,r3,r3
10001d54:	e13f6104 	addi	r4,fp,-636
10001d58:	20c7883a 	add	r3,r4,r3
10001d5c:	18c04f04 	addi	r3,r3,316
10001d60:	18c00017 	ldw	r3,0(r3)
10001d64:	18e40034 	orhi	r3,r3,36864
10001d68:	1085883a 	add	r2,r2,r2
10001d6c:	1085883a 	add	r2,r2,r2
10001d70:	e17f6104 	addi	r5,fp,-636
10001d74:	2885883a 	add	r2,r5,r2
10001d78:	10804f04 	addi	r2,r2,316
10001d7c:	10c00015 	stw	r3,0(r2)
			v_x_lady[idx_lady] = -v_enemy1;
10001d80:	e0bf6e8f 	ldh	r2,-582(fp)
10001d84:	e0ff8c17 	ldw	r3,-464(fp)
10001d88:	00c7c83a 	sub	r3,zero,r3
10001d8c:	1085883a 	add	r2,r2,r2
10001d90:	1085883a 	add	r2,r2,r2
10001d94:	e13f6104 	addi	r4,fp,-636
10001d98:	2085883a 	add	r2,r4,r2
10001d9c:	10804904 	addi	r2,r2,292
10001da0:	10c00015 	stw	r3,0(r2)
			if(idx_lady++ >= 3){
10001da4:	e0bf6e8b 	ldhu	r2,-582(fp)
10001da8:	1007883a 	mov	r3,r2
10001dac:	18c00044 	addi	r3,r3,1
10001db0:	e0ff6e8d 	sth	r3,-582(fp)
10001db4:	10bfffcc 	andi	r2,r2,65535
10001db8:	10a0001c 	xori	r2,r2,32768
10001dbc:	10a00004 	addi	r2,r2,-32768
10001dc0:	108000d0 	cmplti	r2,r2,3
10001dc4:	1000011e 	bne	r2,zero,10001dcc <main+0xbd4>
				idx_lady = 0;
10001dc8:	e03f6e8d 	sth	zero,-582(fp)
			}
		}

		if ((clock & 0x000000ff) == 0x00000080){
10001dcc:	e0bf6117 	ldw	r2,-636(fp)
10001dd0:	10803fcc 	andi	r2,r2,255
10001dd4:	10802018 	cmpnei	r2,r2,128
10001dd8:	10002b1e 	bne	r2,zero,10001e88 <main+0xc90>
			live_zombie[idx_zombie] = 3;
10001ddc:	e0bf6f0f 	ldh	r2,-580(fp)
10001de0:	1085883a 	add	r2,r2,r2
10001de4:	e17f6104 	addi	r5,fp,-636
10001de8:	2885883a 	add	r2,r5,r2
10001dec:	10805b04 	addi	r2,r2,364
10001df0:	00c000c4 	movi	r3,3
10001df4:	10c0000d 	sth	r3,0(r2)
			x_zombie[idx_zombie] = mapX + 2500;
10001df8:	e0bf6f0f 	ldh	r2,-580(fp)
10001dfc:	e0ff7117 	ldw	r3,-572(fp)
10001e00:	18c27104 	addi	r3,r3,2500
10001e04:	1085883a 	add	r2,r2,r2
10001e08:	1085883a 	add	r2,r2,r2
10001e0c:	e13f6104 	addi	r4,fp,-636
10001e10:	2085883a 	add	r2,r4,r2
10001e14:	10805304 	addi	r2,r2,332
10001e18:	10c00015 	stw	r3,0(r2)
			//y_zombie[idx_zombie] = ground;
			status_zombie[idx_zombie] = 0x80000000;
10001e1c:	e0bf6f0f 	ldh	r2,-580(fp)
10001e20:	1085883a 	add	r2,r2,r2
10001e24:	1085883a 	add	r2,r2,r2
10001e28:	e17f6104 	addi	r5,fp,-636
10001e2c:	2885883a 	add	r2,r5,r2
10001e30:	10805d04 	addi	r2,r2,372
10001e34:	00e00034 	movhi	r3,32768
10001e38:	10c00015 	stw	r3,0(r2)
			v_x_zombie[idx_zombie] = -v_enemy2;
10001e3c:	e0bf6f0f 	ldh	r2,-580(fp)
10001e40:	e0ff8d17 	ldw	r3,-460(fp)
10001e44:	00c7c83a 	sub	r3,zero,r3
10001e48:	1085883a 	add	r2,r2,r2
10001e4c:	1085883a 	add	r2,r2,r2
10001e50:	e13f6104 	addi	r4,fp,-636
10001e54:	2085883a 	add	r2,r4,r2
10001e58:	10805704 	addi	r2,r2,348
10001e5c:	10c00015 	stw	r3,0(r2)
			if(idx_zombie++ >= 3){
10001e60:	e0bf6f0b 	ldhu	r2,-580(fp)
10001e64:	1007883a 	mov	r3,r2
10001e68:	18c00044 	addi	r3,r3,1
10001e6c:	e0ff6f0d 	sth	r3,-580(fp)
10001e70:	10bfffcc 	andi	r2,r2,65535
10001e74:	10a0001c 	xori	r2,r2,32768
10001e78:	10a00004 	addi	r2,r2,-32768
10001e7c:	108000d0 	cmplti	r2,r2,3
10001e80:	1000011e 	bne	r2,zero,10001e88 <main+0xc90>
				idx_zombie = 0;
10001e84:	e03f6f0d 	sth	zero,-580(fp)
			}
		}
		if ((clock & 0x000001ff) == 0x00000100){
10001e88:	e0bf6117 	ldw	r2,-636(fp)
10001e8c:	10807fcc 	andi	r2,r2,511
10001e90:	10804018 	cmpnei	r2,r2,256
10001e94:	10002b1e 	bne	r2,zero,10001f44 <main+0xd4c>
			live_swampt[idx_swampt] = 3;
10001e98:	e0bf6f8f 	ldh	r2,-578(fp)
10001e9c:	1085883a 	add	r2,r2,r2
10001ea0:	e17f6104 	addi	r5,fp,-636
10001ea4:	2885883a 	add	r2,r5,r2
10001ea8:	10806904 	addi	r2,r2,420
10001eac:	00c000c4 	movi	r3,3
10001eb0:	10c0000d 	sth	r3,0(r2)
			x_swampt[idx_swampt] = mapX + 2500;
10001eb4:	e0bf6f8f 	ldh	r2,-578(fp)
10001eb8:	e0ff7117 	ldw	r3,-572(fp)
10001ebc:	18c27104 	addi	r3,r3,2500
10001ec0:	1085883a 	add	r2,r2,r2
10001ec4:	1085883a 	add	r2,r2,r2
10001ec8:	e13f6104 	addi	r4,fp,-636
10001ecc:	2085883a 	add	r2,r4,r2
10001ed0:	10806104 	addi	r2,r2,388
10001ed4:	10c00015 	stw	r3,0(r2)
			//y_swampt[idx_swampt] = ground;
			status_swampt[idx_swampt] = 0x80000000;
10001ed8:	e0bf6f8f 	ldh	r2,-578(fp)
10001edc:	1085883a 	add	r2,r2,r2
10001ee0:	1085883a 	add	r2,r2,r2
10001ee4:	e17f6104 	addi	r5,fp,-636
10001ee8:	2885883a 	add	r2,r5,r2
10001eec:	10806b04 	addi	r2,r2,428
10001ef0:	00e00034 	movhi	r3,32768
10001ef4:	10c00015 	stw	r3,0(r2)
			v_x_swampt[idx_swampt] = -v_enemy2;
10001ef8:	e0bf6f8f 	ldh	r2,-578(fp)
10001efc:	e0ff8d17 	ldw	r3,-460(fp)
10001f00:	00c7c83a 	sub	r3,zero,r3
10001f04:	1085883a 	add	r2,r2,r2
10001f08:	1085883a 	add	r2,r2,r2
10001f0c:	e13f6104 	addi	r4,fp,-636
10001f10:	2085883a 	add	r2,r4,r2
10001f14:	10806504 	addi	r2,r2,404
10001f18:	10c00015 	stw	r3,0(r2)
			if(idx_swampt++ >= 3){
10001f1c:	e0bf6f8b 	ldhu	r2,-578(fp)
10001f20:	1007883a 	mov	r3,r2
10001f24:	18c00044 	addi	r3,r3,1
10001f28:	e0ff6f8d 	sth	r3,-578(fp)
10001f2c:	10bfffcc 	andi	r2,r2,65535
10001f30:	10a0001c 	xori	r2,r2,32768
10001f34:	10a00004 	addi	r2,r2,-32768
10001f38:	108000d0 	cmplti	r2,r2,3
10001f3c:	1000011e 	bne	r2,zero,10001f44 <main+0xd4c>
				idx_swampt = 0;
10001f40:	e03f6f8d 	sth	zero,-578(fp)




		/////////////////dart/////////////////
		for(i_dart = 0; i_dart < 4; i_dart++){
10001f44:	e03f6e0d 	sth	zero,-584(fp)
10001f48:	00049306 	br	10003198 <main+0x1fa0>
			if(cnt_dart[i_dart] > 0){
10001f4c:	e0bf6e0f 	ldh	r2,-584(fp)
10001f50:	e0ffa104 	addi	r3,fp,-380
10001f54:	1885883a 	add	r2,r3,r2
10001f58:	10800003 	ldbu	r2,0(r2)
10001f5c:	10803fcc 	andi	r2,r2,255
10001f60:	1080201c 	xori	r2,r2,128
10001f64:	10bfe004 	addi	r2,r2,-128
10001f68:	0080200e 	bge	zero,r2,10001fec <main+0xdf4>
				cnt_dart[i_dart]--;
10001f6c:	e0bf6e0f 	ldh	r2,-584(fp)
10001f70:	e0ffa104 	addi	r3,fp,-380
10001f74:	1887883a 	add	r3,r3,r2
10001f78:	18c00003 	ldbu	r3,0(r3)
10001f7c:	18ffffc4 	addi	r3,r3,-1
10001f80:	1809883a 	mov	r4,r3
10001f84:	e0ffa104 	addi	r3,fp,-380
10001f88:	1885883a 	add	r2,r3,r2
10001f8c:	11000005 	stb	r4,0(r2)
				x_dart[i_dart] += v_x_dart[i_dart];
10001f90:	e0bf6e0f 	ldh	r2,-584(fp)
10001f94:	e0ff6e0f 	ldh	r3,-584(fp)
10001f98:	18c7883a 	add	r3,r3,r3
10001f9c:	18c7883a 	add	r3,r3,r3
10001fa0:	e17f6104 	addi	r5,fp,-636
10001fa4:	28c7883a 	add	r3,r5,r3
10001fa8:	18c03404 	addi	r3,r3,208
10001fac:	19000017 	ldw	r4,0(r3)
10001fb0:	e0ff6e0f 	ldh	r3,-584(fp)
10001fb4:	18c7883a 	add	r3,r3,r3
10001fb8:	18c7883a 	add	r3,r3,r3
10001fbc:	e17f6104 	addi	r5,fp,-636
10001fc0:	28c7883a 	add	r3,r5,r3
10001fc4:	18c03c04 	addi	r3,r3,240
10001fc8:	18c00017 	ldw	r3,0(r3)
10001fcc:	20c7883a 	add	r3,r4,r3
10001fd0:	1085883a 	add	r2,r2,r2
10001fd4:	1085883a 	add	r2,r2,r2
10001fd8:	e13f6104 	addi	r4,fp,-636
10001fdc:	2085883a 	add	r2,r4,r2
10001fe0:	10803404 	addi	r2,r2,208
10001fe4:	10c00015 	stw	r3,0(r2)
10001fe8:	00000706 	br	10002008 <main+0xe10>
			}
			else{
				status_dart[i_dart] = 0;
10001fec:	e0bf6e0f 	ldh	r2,-584(fp)
10001ff0:	1085883a 	add	r2,r2,r2
10001ff4:	1085883a 	add	r2,r2,r2
10001ff8:	e17f6104 	addi	r5,fp,-636
10001ffc:	2885883a 	add	r2,r5,r2
10002000:	10804104 	addi	r2,r2,260
10002004:	10000015 	stw	zero,0(r2)
			}

			if(live_lady[i_dart]){
10002008:	e0bf6e0f 	ldh	r2,-584(fp)
1000200c:	1085883a 	add	r2,r2,r2
10002010:	e0ff6104 	addi	r3,fp,-636
10002014:	1885883a 	add	r2,r3,r2
10002018:	10804d04 	addi	r2,r2,308
1000201c:	1080000b 	ldhu	r2,0(r2)
10002020:	10bfffcc 	andi	r2,r2,65535
10002024:	10a0001c 	xori	r2,r2,32768
10002028:	10a00004 	addi	r2,r2,-32768
1000202c:	10018826 	beq	r2,zero,10002650 <main+0x1458>
				if (x_lady[i_dart] <= 0){
10002030:	e0bf6e0f 	ldh	r2,-584(fp)
10002034:	1085883a 	add	r2,r2,r2
10002038:	1085883a 	add	r2,r2,r2
1000203c:	e13f6104 	addi	r4,fp,-636
10002040:	2085883a 	add	r2,r4,r2
10002044:	10804504 	addi	r2,r2,276
10002048:	10800017 	ldw	r2,0(r2)
1000204c:	00800e16 	blt	zero,r2,10002088 <main+0xe90>
					status_lady[i_dart] = 0;
10002050:	e0bf6e0f 	ldh	r2,-584(fp)
10002054:	1085883a 	add	r2,r2,r2
10002058:	1085883a 	add	r2,r2,r2
1000205c:	e17f6104 	addi	r5,fp,-636
10002060:	2885883a 	add	r2,r5,r2
10002064:	10804f04 	addi	r2,r2,316
10002068:	10000015 	stw	zero,0(r2)
					live_lady[i_dart] = 0;
1000206c:	e0bf6e0f 	ldh	r2,-584(fp)
10002070:	1085883a 	add	r2,r2,r2
10002074:	e0ff6104 	addi	r3,fp,-636
10002078:	1885883a 	add	r2,r3,r2
1000207c:	10804d04 	addi	r2,r2,308
10002080:	1000000d 	sth	zero,0(r2)
					goto Zombie_label;
10002084:	00017206 	br	10002650 <main+0x1458>
				}
				if (x_lady[i_dart] > mapX + 2560|| (x_lady[i_dart] + 200) < mapX){
10002088:	e0bf6e0f 	ldh	r2,-584(fp)
1000208c:	1085883a 	add	r2,r2,r2
10002090:	1085883a 	add	r2,r2,r2
10002094:	e13f6104 	addi	r4,fp,-636
10002098:	2085883a 	add	r2,r4,r2
1000209c:	10804504 	addi	r2,r2,276
100020a0:	10800017 	ldw	r2,0(r2)
100020a4:	e0ff7117 	ldw	r3,-572(fp)
100020a8:	18c28004 	addi	r3,r3,2560
100020ac:	18800a16 	blt	r3,r2,100020d8 <main+0xee0>
100020b0:	e0bf6e0f 	ldh	r2,-584(fp)
100020b4:	1085883a 	add	r2,r2,r2
100020b8:	1085883a 	add	r2,r2,r2
100020bc:	e17f6104 	addi	r5,fp,-636
100020c0:	2885883a 	add	r2,r5,r2
100020c4:	10804504 	addi	r2,r2,276
100020c8:	10800017 	ldw	r2,0(r2)
100020cc:	10c03204 	addi	r3,r2,200
100020d0:	e0bf7117 	ldw	r2,-572(fp)
100020d4:	1880120e 	bge	r3,r2,10002120 <main+0xf28>
					status_lady[i_dart] &= 0x7fffffff;
100020d8:	e0ff6e0f 	ldh	r3,-584(fp)
100020dc:	e0bf6e0f 	ldh	r2,-584(fp)
100020e0:	1085883a 	add	r2,r2,r2
100020e4:	1085883a 	add	r2,r2,r2
100020e8:	e13f6104 	addi	r4,fp,-636
100020ec:	2085883a 	add	r2,r4,r2
100020f0:	10804f04 	addi	r2,r2,316
100020f4:	11000017 	ldw	r4,0(r2)
100020f8:	00a00034 	movhi	r2,32768
100020fc:	10bfffc4 	addi	r2,r2,-1
10002100:	2088703a 	and	r4,r4,r2
10002104:	18c5883a 	add	r2,r3,r3
10002108:	1085883a 	add	r2,r2,r2
1000210c:	e17f6104 	addi	r5,fp,-636
10002110:	2885883a 	add	r2,r5,r2
10002114:	10804f04 	addi	r2,r2,316
10002118:	11000015 	stw	r4,0(r2)
1000211c:	00000f06 	br	1000215c <main+0xf64>
				} else {
					status_lady[i_dart] |= 0x80000000;
10002120:	e0bf6e0f 	ldh	r2,-584(fp)
10002124:	e0ff6e0f 	ldh	r3,-584(fp)
10002128:	18c7883a 	add	r3,r3,r3
1000212c:	18c7883a 	add	r3,r3,r3
10002130:	e13f6104 	addi	r4,fp,-636
10002134:	20c7883a 	add	r3,r4,r3
10002138:	18c04f04 	addi	r3,r3,316
1000213c:	18c00017 	ldw	r3,0(r3)
10002140:	18e00034 	orhi	r3,r3,32768
10002144:	1085883a 	add	r2,r2,r2
10002148:	1085883a 	add	r2,r2,r2
1000214c:	e17f6104 	addi	r5,fp,-636
10002150:	2885883a 	add	r2,r5,r2
10002154:	10804f04 	addi	r2,r2,316
10002158:	10c00015 	stw	r3,0(r2)
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
1000215c:	e03f7415 	stw	zero,-560(fp)
10002160:	00005006 	br	100022a4 <main+0x10ac>
					if(status_dart[j_dart]){
10002164:	e0bf7417 	ldw	r2,-560(fp)
10002168:	1085883a 	add	r2,r2,r2
1000216c:	1085883a 	add	r2,r2,r2
10002170:	e0ff6104 	addi	r3,fp,-636
10002174:	1885883a 	add	r2,r3,r2
10002178:	10804104 	addi	r2,r2,260
1000217c:	10800017 	ldw	r2,0(r2)
10002180:	10004526 	beq	r2,zero,10002298 <main+0x10a0>
						if ((x_lady[i_dart] + 200 > x_dart[j_dart]) && (x_lady[i_dart] < x_dart[j_dart] + 48) && (1440 < y_dart[j_dart] + 48)){
10002184:	e0bf6e0f 	ldh	r2,-584(fp)
10002188:	1085883a 	add	r2,r2,r2
1000218c:	1085883a 	add	r2,r2,r2
10002190:	e13f6104 	addi	r4,fp,-636
10002194:	2085883a 	add	r2,r4,r2
10002198:	10804504 	addi	r2,r2,276
1000219c:	10800017 	ldw	r2,0(r2)
100021a0:	10c03204 	addi	r3,r2,200
100021a4:	e0bf7417 	ldw	r2,-560(fp)
100021a8:	1085883a 	add	r2,r2,r2
100021ac:	1085883a 	add	r2,r2,r2
100021b0:	e17f6104 	addi	r5,fp,-636
100021b4:	2885883a 	add	r2,r5,r2
100021b8:	10803404 	addi	r2,r2,208
100021bc:	10800017 	ldw	r2,0(r2)
100021c0:	10c0350e 	bge	r2,r3,10002298 <main+0x10a0>
100021c4:	e0bf6e0f 	ldh	r2,-584(fp)
100021c8:	1085883a 	add	r2,r2,r2
100021cc:	1085883a 	add	r2,r2,r2
100021d0:	e0ff6104 	addi	r3,fp,-636
100021d4:	1885883a 	add	r2,r3,r2
100021d8:	10804504 	addi	r2,r2,276
100021dc:	10c00017 	ldw	r3,0(r2)
100021e0:	e0bf7417 	ldw	r2,-560(fp)
100021e4:	1085883a 	add	r2,r2,r2
100021e8:	1085883a 	add	r2,r2,r2
100021ec:	e13f6104 	addi	r4,fp,-636
100021f0:	2085883a 	add	r2,r4,r2
100021f4:	10803404 	addi	r2,r2,208
100021f8:	10800017 	ldw	r2,0(r2)
100021fc:	10800c04 	addi	r2,r2,48
10002200:	1880250e 	bge	r3,r2,10002298 <main+0x10a0>
10002204:	e0bf7417 	ldw	r2,-560(fp)
10002208:	1085883a 	add	r2,r2,r2
1000220c:	1085883a 	add	r2,r2,r2
10002210:	e17f6104 	addi	r5,fp,-636
10002214:	2885883a 	add	r2,r5,r2
10002218:	10803804 	addi	r2,r2,224
1000221c:	10800017 	ldw	r2,0(r2)
10002220:	10800c04 	addi	r2,r2,48
10002224:	10816850 	cmplti	r2,r2,1441
10002228:	10001b1e 	bne	r2,zero,10002298 <main+0x10a0>
							live_lady[i_dart] -= 1;
1000222c:	e0bf6e0f 	ldh	r2,-584(fp)
10002230:	e0ff6e0f 	ldh	r3,-584(fp)
10002234:	18c7883a 	add	r3,r3,r3
10002238:	e13f6104 	addi	r4,fp,-636
1000223c:	20c7883a 	add	r3,r4,r3
10002240:	18c04d04 	addi	r3,r3,308
10002244:	18c0000b 	ldhu	r3,0(r3)
10002248:	18ffffc4 	addi	r3,r3,-1
1000224c:	1085883a 	add	r2,r2,r2
10002250:	e17f6104 	addi	r5,fp,-636
10002254:	2885883a 	add	r2,r5,r2
10002258:	10804d04 	addi	r2,r2,308
1000225c:	10c0000d 	sth	r3,0(r2)
							status_dart[j_dart] = 0;
10002260:	e0bf7417 	ldw	r2,-560(fp)
10002264:	1085883a 	add	r2,r2,r2
10002268:	1085883a 	add	r2,r2,r2
1000226c:	e0ff6104 	addi	r3,fp,-636
10002270:	1885883a 	add	r2,r3,r2
10002274:	10804104 	addi	r2,r2,260
10002278:	10000015 	stw	zero,0(r2)
							cnt_dart[j_dart] = 0;
1000227c:	e0ffa104 	addi	r3,fp,-380
10002280:	e0bf7417 	ldw	r2,-560(fp)
10002284:	1885883a 	add	r2,r3,r2
10002288:	10000005 	stb	zero,0(r2)
							energy += 10;
1000228c:	e0bf6b17 	ldw	r2,-596(fp)
10002290:	10800284 	addi	r2,r2,10
10002294:	e0bf6b15 	stw	r2,-596(fp)
				if (x_lady[i_dart] > mapX + 2560|| (x_lady[i_dart] + 200) < mapX){
					status_lady[i_dart] &= 0x7fffffff;
				} else {
					status_lady[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
10002298:	e0bf7417 	ldw	r2,-560(fp)
1000229c:	10800044 	addi	r2,r2,1
100022a0:	e0bf7415 	stw	r2,-560(fp)
100022a4:	e0bf7417 	ldw	r2,-560(fp)
100022a8:	10800110 	cmplti	r2,r2,4
100022ac:	103fad1e 	bne	r2,zero,10002164 <__alt_data_end+0xf8002164>
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
100022b0:	e0bf6817 	ldw	r2,-608(fp)
100022b4:	1000451e 	bne	r2,zero,100023cc <main+0x11d4>
					if ((x_lady[i_dart] + 100 > x) && (x_lady[i_dart] < x + 160) && (1440 < y + 240)){
100022b8:	e0bf6e0f 	ldh	r2,-584(fp)
100022bc:	1085883a 	add	r2,r2,r2
100022c0:	1085883a 	add	r2,r2,r2
100022c4:	e13f6104 	addi	r4,fp,-636
100022c8:	2085883a 	add	r2,r4,r2
100022cc:	10804504 	addi	r2,r2,276
100022d0:	10800017 	ldw	r2,0(r2)
100022d4:	10801904 	addi	r2,r2,100
100022d8:	e0ff6217 	ldw	r3,-632(fp)
100022dc:	18803b0e 	bge	r3,r2,100023cc <main+0x11d4>
100022e0:	e0bf6e0f 	ldh	r2,-584(fp)
100022e4:	1085883a 	add	r2,r2,r2
100022e8:	1085883a 	add	r2,r2,r2
100022ec:	e17f6104 	addi	r5,fp,-636
100022f0:	2885883a 	add	r2,r5,r2
100022f4:	10804504 	addi	r2,r2,276
100022f8:	10c00017 	ldw	r3,0(r2)
100022fc:	e0bf6217 	ldw	r2,-632(fp)
10002300:	10802804 	addi	r2,r2,160
10002304:	1880310e 	bge	r3,r2,100023cc <main+0x11d4>
10002308:	e0bf6317 	ldw	r2,-628(fp)
1000230c:	10803c04 	addi	r2,r2,240
10002310:	10816850 	cmplti	r2,r2,1441
10002314:	10002d1e 	bne	r2,zero,100023cc <main+0x11d4>
						if (status_ninja & 0x02000000){
10002318:	e0bf6617 	ldw	r2,-616(fp)
1000231c:	1080802c 	andhi	r2,r2,512
10002320:	10001326 	beq	r2,zero,10002370 <main+0x1178>
							if(spin){
10002324:	e0bf670f 	ldh	r2,-612(fp)
10002328:	10002826 	beq	r2,zero,100023cc <main+0x11d4>
								live_lady[i_dart] -= 3;
1000232c:	e0bf6e0f 	ldh	r2,-584(fp)
10002330:	e0ff6e0f 	ldh	r3,-584(fp)
10002334:	18c7883a 	add	r3,r3,r3
10002338:	e13f6104 	addi	r4,fp,-636
1000233c:	20c7883a 	add	r3,r4,r3
10002340:	18c04d04 	addi	r3,r3,308
10002344:	18c0000b 	ldhu	r3,0(r3)
10002348:	18ffff44 	addi	r3,r3,-3
1000234c:	1085883a 	add	r2,r2,r2
10002350:	e17f6104 	addi	r5,fp,-636
10002354:	2885883a 	add	r2,r5,r2
10002358:	10804d04 	addi	r2,r2,308
1000235c:	10c0000d 	sth	r3,0(r2)
								life += 5;
10002360:	e0bf6a17 	ldw	r2,-600(fp)
10002364:	10800144 	addi	r2,r2,5
10002368:	e0bf6a15 	stw	r2,-600(fp)
1000236c:	00001706 	br	100023cc <main+0x11d4>
							}
						} else {
							hurt_counter = 60;
10002370:	00800f04 	movi	r2,60
10002374:	e0bf6815 	stw	r2,-608(fp)
							air_counter = 30;
10002378:	00800784 	movi	r2,30
1000237c:	e0bf6915 	stw	r2,-604(fp)
							v_y = -v_jump3;
10002380:	e0bf8917 	ldw	r2,-476(fp)
10002384:	0085c83a 	sub	r2,zero,r2
10002388:	e0bf6515 	stw	r2,-620(fp)
							on_gnd = 0;
1000238c:	e03f7205 	stb	zero,-568(fp)
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
10002390:	e0ff6617 	ldw	r3,-616(fp)
10002394:	00b90034 	movhi	r2,58368
10002398:	10bfffc4 	addi	r2,r2,-1
1000239c:	1884703a 	and	r2,r3,r2
100023a0:	10820034 	orhi	r2,r2,2048
100023a4:	e0bf6615 	stw	r2,-616(fp)
							life_energy_status |= 0x00000080;
100023a8:	e0bf6c17 	ldw	r2,-592(fp)
100023ac:	10802014 	ori	r2,r2,128
100023b0:	e0bf6c15 	stw	r2,-592(fp)
							life -= 10;
100023b4:	e0bf6a17 	ldw	r2,-600(fp)
100023b8:	10bffd84 	addi	r2,r2,-10
100023bc:	e0bf6a15 	stw	r2,-600(fp)
							energy += 5;
100023c0:	e0bf6b17 	ldw	r2,-596(fp)
100023c4:	10800144 	addi	r2,r2,5
100023c8:	e0bf6b15 	stw	r2,-596(fp)
						}
					}
				}

				if ((v_x_lady[i_dart] < 0 && x_lady[i_dart] < x - 800) || (v_x_lady[i_dart] > 0 && x_lady[i_dart] > x + 800)){
100023cc:	e0bf6e0f 	ldh	r2,-584(fp)
100023d0:	1085883a 	add	r2,r2,r2
100023d4:	1085883a 	add	r2,r2,r2
100023d8:	e0ff6104 	addi	r3,fp,-636
100023dc:	1885883a 	add	r2,r3,r2
100023e0:	10804904 	addi	r2,r2,292
100023e4:	10800017 	ldw	r2,0(r2)
100023e8:	10000a0e 	bge	r2,zero,10002414 <main+0x121c>
100023ec:	e0bf6e0f 	ldh	r2,-584(fp)
100023f0:	1085883a 	add	r2,r2,r2
100023f4:	1085883a 	add	r2,r2,r2
100023f8:	e13f6104 	addi	r4,fp,-636
100023fc:	2085883a 	add	r2,r4,r2
10002400:	10804504 	addi	r2,r2,276
10002404:	10c00017 	ldw	r3,0(r2)
10002408:	e0bf6217 	ldw	r2,-632(fp)
1000240c:	10bf3804 	addi	r2,r2,-800
10002410:	18801216 	blt	r3,r2,1000245c <main+0x1264>
10002414:	e0bf6e0f 	ldh	r2,-584(fp)
10002418:	1085883a 	add	r2,r2,r2
1000241c:	1085883a 	add	r2,r2,r2
10002420:	e17f6104 	addi	r5,fp,-636
10002424:	2885883a 	add	r2,r5,r2
10002428:	10804904 	addi	r2,r2,292
1000242c:	10800017 	ldw	r2,0(r2)
10002430:	00802b0e 	bge	zero,r2,100024e0 <main+0x12e8>
10002434:	e0bf6e0f 	ldh	r2,-584(fp)
10002438:	1085883a 	add	r2,r2,r2
1000243c:	1085883a 	add	r2,r2,r2
10002440:	e0ff6104 	addi	r3,fp,-636
10002444:	1885883a 	add	r2,r3,r2
10002448:	10804504 	addi	r2,r2,276
1000244c:	10800017 	ldw	r2,0(r2)
10002450:	e0ff6217 	ldw	r3,-632(fp)
10002454:	18c0c804 	addi	r3,r3,800
10002458:	1880210e 	bge	r3,r2,100024e0 <main+0x12e8>
					v_x_lady[i_dart] = -v_x_lady[i_dart];
1000245c:	e0bf6e0f 	ldh	r2,-584(fp)
10002460:	e0ff6e0f 	ldh	r3,-584(fp)
10002464:	18c7883a 	add	r3,r3,r3
10002468:	18c7883a 	add	r3,r3,r3
1000246c:	e13f6104 	addi	r4,fp,-636
10002470:	20c7883a 	add	r3,r4,r3
10002474:	18c04904 	addi	r3,r3,292
10002478:	18c00017 	ldw	r3,0(r3)
1000247c:	00c7c83a 	sub	r3,zero,r3
10002480:	1085883a 	add	r2,r2,r2
10002484:	1085883a 	add	r2,r2,r2
10002488:	e17f6104 	addi	r5,fp,-636
1000248c:	2885883a 	add	r2,r5,r2
10002490:	10804904 	addi	r2,r2,292
10002494:	10c00015 	stw	r3,0(r2)
					status_lady[i_dart] = (status_lady[i_dart] ^ 0x40000000) &  0xefffffff;
10002498:	e0ff6e0f 	ldh	r3,-584(fp)
1000249c:	e0bf6e0f 	ldh	r2,-584(fp)
100024a0:	1085883a 	add	r2,r2,r2
100024a4:	1085883a 	add	r2,r2,r2
100024a8:	e13f6104 	addi	r4,fp,-636
100024ac:	2085883a 	add	r2,r4,r2
100024b0:	10804f04 	addi	r2,r2,316
100024b4:	10800017 	ldw	r2,0(r2)
100024b8:	1110003c 	xorhi	r4,r2,16384
100024bc:	00bc0034 	movhi	r2,61440
100024c0:	10bfffc4 	addi	r2,r2,-1
100024c4:	2088703a 	and	r4,r4,r2
100024c8:	18c5883a 	add	r2,r3,r3
100024cc:	1085883a 	add	r2,r2,r2
100024d0:	e17f6104 	addi	r5,fp,-636
100024d4:	2885883a 	add	r2,r5,r2
100024d8:	10804f04 	addi	r2,r2,316
100024dc:	11000015 	stw	r4,0(r2)
				}
				x_lady[i_dart] += v_x_lady[i_dart];
100024e0:	e0bf6e0f 	ldh	r2,-584(fp)
100024e4:	e0ff6e0f 	ldh	r3,-584(fp)
100024e8:	18c7883a 	add	r3,r3,r3
100024ec:	18c7883a 	add	r3,r3,r3
100024f0:	e13f6104 	addi	r4,fp,-636
100024f4:	20c7883a 	add	r3,r4,r3
100024f8:	18c04504 	addi	r3,r3,276
100024fc:	19000017 	ldw	r4,0(r3)
10002500:	e0ff6e0f 	ldh	r3,-584(fp)
10002504:	18c7883a 	add	r3,r3,r3
10002508:	18c7883a 	add	r3,r3,r3
1000250c:	e17f6104 	addi	r5,fp,-636
10002510:	28c7883a 	add	r3,r5,r3
10002514:	18c04904 	addi	r3,r3,292
10002518:	18c00017 	ldw	r3,0(r3)
1000251c:	20c7883a 	add	r3,r4,r3
10002520:	1085883a 	add	r2,r2,r2
10002524:	1085883a 	add	r2,r2,r2
10002528:	e13f6104 	addi	r4,fp,-636
1000252c:	2085883a 	add	r2,r4,r2
10002530:	10804504 	addi	r2,r2,276
10002534:	10c00015 	stw	r3,0(r2)
				if(live_lady[i_dart] <= 0){
10002538:	e0bf6e0f 	ldh	r2,-584(fp)
1000253c:	1085883a 	add	r2,r2,r2
10002540:	e17f6104 	addi	r5,fp,-636
10002544:	2885883a 	add	r2,r5,r2
10002548:	10804d04 	addi	r2,r2,308
1000254c:	1080000b 	ldhu	r2,0(r2)
10002550:	10bfffcc 	andi	r2,r2,65535
10002554:	10a0001c 	xori	r2,r2,32768
10002558:	10a00004 	addi	r2,r2,-32768
1000255c:	00803c16 	blt	zero,r2,10002650 <main+0x1458>
					live_lady[i_dart] = 0;
10002560:	e0bf6e0f 	ldh	r2,-584(fp)
10002564:	1085883a 	add	r2,r2,r2
10002568:	e0ff6104 	addi	r3,fp,-636
1000256c:	1885883a 	add	r2,r3,r2
10002570:	10804d04 	addi	r2,r2,308
10002574:	1000000d 	sth	zero,0(r2)
					status_lady[i_dart] = 0;
10002578:	e0bf6e0f 	ldh	r2,-584(fp)
1000257c:	1085883a 	add	r2,r2,r2
10002580:	1085883a 	add	r2,r2,r2
10002584:	e13f6104 	addi	r4,fp,-636
10002588:	2085883a 	add	r2,r4,r2
1000258c:	10804f04 	addi	r2,r2,316
10002590:	10000015 	stw	zero,0(r2)

					live_skull[idx_skull] = 1;
10002594:	e0bf700f 	ldh	r2,-576(fp)
10002598:	1085883a 	add	r2,r2,r2
1000259c:	e17f6104 	addi	r5,fp,-636
100025a0:	2885883a 	add	r2,r5,r2
100025a4:	10807804 	addi	r2,r2,480
100025a8:	00c00044 	movi	r3,1
100025ac:	10c0000d 	sth	r3,0(r2)
					x_skull[idx_skull] = x_lady[i_dart];
100025b0:	e0bf700f 	ldh	r2,-576(fp)
100025b4:	e0ff6e0f 	ldh	r3,-584(fp)
100025b8:	18c7883a 	add	r3,r3,r3
100025bc:	18c7883a 	add	r3,r3,r3
100025c0:	e13f6104 	addi	r4,fp,-636
100025c4:	20c7883a 	add	r3,r4,r3
100025c8:	18c04504 	addi	r3,r3,276
100025cc:	18c00017 	ldw	r3,0(r3)
100025d0:	1085883a 	add	r2,r2,r2
100025d4:	1085883a 	add	r2,r2,r2
100025d8:	e17f6104 	addi	r5,fp,-636
100025dc:	2885883a 	add	r2,r5,r2
100025e0:	10806f04 	addi	r2,r2,444
100025e4:	10c00015 	stw	r3,0(r2)
					y_skull[idx_skull] = ground;
100025e8:	e0bf700f 	ldh	r2,-576(fp)
100025ec:	e0ff8b17 	ldw	r3,-468(fp)
100025f0:	1085883a 	add	r2,r2,r2
100025f4:	1085883a 	add	r2,r2,r2
100025f8:	e13f6104 	addi	r4,fp,-636
100025fc:	2085883a 	add	r2,r4,r2
10002600:	10807104 	addi	r2,r2,452
10002604:	10c00015 	stw	r3,0(r2)
					status_skull[idx_skull] = 0x80000000;
10002608:	e0bf700f 	ldh	r2,-576(fp)
1000260c:	1085883a 	add	r2,r2,r2
10002610:	1085883a 	add	r2,r2,r2
10002614:	e17f6104 	addi	r5,fp,-636
10002618:	2885883a 	add	r2,r5,r2
1000261c:	10807904 	addi	r2,r2,484
10002620:	00e00034 	movhi	r3,32768
10002624:	10c00015 	stw	r3,0(r2)
					if(idx_skull++ >= 2){
10002628:	e0bf700b 	ldhu	r2,-576(fp)
1000262c:	1007883a 	mov	r3,r2
10002630:	18c00044 	addi	r3,r3,1
10002634:	e0ff700d 	sth	r3,-576(fp)
10002638:	10bfffcc 	andi	r2,r2,65535
1000263c:	10a0001c 	xori	r2,r2,32768
10002640:	10a00004 	addi	r2,r2,-32768
10002644:	10800090 	cmplti	r2,r2,2
10002648:	1000011e 	bne	r2,zero,10002650 <main+0x1458>
						idx_skull = 0;
1000264c:	e03f700d 	sth	zero,-576(fp)
					}
				}
			}
			Zombie_label: ;
			if(live_zombie[i_dart]){
10002650:	e0bf6e0f 	ldh	r2,-584(fp)
10002654:	1085883a 	add	r2,r2,r2
10002658:	e0ff6104 	addi	r3,fp,-636
1000265c:	1885883a 	add	r2,r3,r2
10002660:	10805b04 	addi	r2,r2,364
10002664:	1080000b 	ldhu	r2,0(r2)
10002668:	10bfffcc 	andi	r2,r2,65535
1000266c:	10a0001c 	xori	r2,r2,32768
10002670:	10a00004 	addi	r2,r2,-32768
10002674:	10015626 	beq	r2,zero,10002bd0 <main+0x19d8>
				if (x_zombie[i_dart] <= 0){
10002678:	e0bf6e0f 	ldh	r2,-584(fp)
1000267c:	1085883a 	add	r2,r2,r2
10002680:	1085883a 	add	r2,r2,r2
10002684:	e13f6104 	addi	r4,fp,-636
10002688:	2085883a 	add	r2,r4,r2
1000268c:	10805304 	addi	r2,r2,332
10002690:	10800017 	ldw	r2,0(r2)
10002694:	00800e16 	blt	zero,r2,100026d0 <main+0x14d8>
					status_zombie[i_dart] = 0;
10002698:	e0bf6e0f 	ldh	r2,-584(fp)
1000269c:	1085883a 	add	r2,r2,r2
100026a0:	1085883a 	add	r2,r2,r2
100026a4:	e17f6104 	addi	r5,fp,-636
100026a8:	2885883a 	add	r2,r5,r2
100026ac:	10805d04 	addi	r2,r2,372
100026b0:	10000015 	stw	zero,0(r2)
					live_zombie[i_dart] = 0;
100026b4:	e0bf6e0f 	ldh	r2,-584(fp)
100026b8:	1085883a 	add	r2,r2,r2
100026bc:	e0ff6104 	addi	r3,fp,-636
100026c0:	1885883a 	add	r2,r3,r2
100026c4:	10805b04 	addi	r2,r2,364
100026c8:	1000000d 	sth	zero,0(r2)
					goto x1;
100026cc:	00014006 	br	10002bd0 <main+0x19d8>
				}
				if (x_zombie[i_dart] > mapX + 2560|| (x_zombie[i_dart] + 200) < mapX){
100026d0:	e0bf6e0f 	ldh	r2,-584(fp)
100026d4:	1085883a 	add	r2,r2,r2
100026d8:	1085883a 	add	r2,r2,r2
100026dc:	e13f6104 	addi	r4,fp,-636
100026e0:	2085883a 	add	r2,r4,r2
100026e4:	10805304 	addi	r2,r2,332
100026e8:	10800017 	ldw	r2,0(r2)
100026ec:	e0ff7117 	ldw	r3,-572(fp)
100026f0:	18c28004 	addi	r3,r3,2560
100026f4:	18800a16 	blt	r3,r2,10002720 <main+0x1528>
100026f8:	e0bf6e0f 	ldh	r2,-584(fp)
100026fc:	1085883a 	add	r2,r2,r2
10002700:	1085883a 	add	r2,r2,r2
10002704:	e17f6104 	addi	r5,fp,-636
10002708:	2885883a 	add	r2,r5,r2
1000270c:	10805304 	addi	r2,r2,332
10002710:	10800017 	ldw	r2,0(r2)
10002714:	10c03204 	addi	r3,r2,200
10002718:	e0bf7117 	ldw	r2,-572(fp)
1000271c:	1880120e 	bge	r3,r2,10002768 <main+0x1570>
					status_zombie[i_dart] &= 0x7fffffff;
10002720:	e0ff6e0f 	ldh	r3,-584(fp)
10002724:	e0bf6e0f 	ldh	r2,-584(fp)
10002728:	1085883a 	add	r2,r2,r2
1000272c:	1085883a 	add	r2,r2,r2
10002730:	e13f6104 	addi	r4,fp,-636
10002734:	2085883a 	add	r2,r4,r2
10002738:	10805d04 	addi	r2,r2,372
1000273c:	11000017 	ldw	r4,0(r2)
10002740:	00a00034 	movhi	r2,32768
10002744:	10bfffc4 	addi	r2,r2,-1
10002748:	2088703a 	and	r4,r4,r2
1000274c:	18c5883a 	add	r2,r3,r3
10002750:	1085883a 	add	r2,r2,r2
10002754:	e17f6104 	addi	r5,fp,-636
10002758:	2885883a 	add	r2,r5,r2
1000275c:	10805d04 	addi	r2,r2,372
10002760:	11000015 	stw	r4,0(r2)
10002764:	00000f06 	br	100027a4 <main+0x15ac>
				} else {
					status_zombie[i_dart] |= 0x80000000;
10002768:	e0bf6e0f 	ldh	r2,-584(fp)
1000276c:	e0ff6e0f 	ldh	r3,-584(fp)
10002770:	18c7883a 	add	r3,r3,r3
10002774:	18c7883a 	add	r3,r3,r3
10002778:	e13f6104 	addi	r4,fp,-636
1000277c:	20c7883a 	add	r3,r4,r3
10002780:	18c05d04 	addi	r3,r3,372
10002784:	18c00017 	ldw	r3,0(r3)
10002788:	18e00034 	orhi	r3,r3,32768
1000278c:	1085883a 	add	r2,r2,r2
10002790:	1085883a 	add	r2,r2,r2
10002794:	e17f6104 	addi	r5,fp,-636
10002798:	2885883a 	add	r2,r5,r2
1000279c:	10805d04 	addi	r2,r2,372
100027a0:	10c00015 	stw	r3,0(r2)
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
100027a4:	e03f7515 	stw	zero,-556(fp)
100027a8:	00005006 	br	100028ec <main+0x16f4>
					if(status_dart[j_dart]){
100027ac:	e0bf7517 	ldw	r2,-556(fp)
100027b0:	1085883a 	add	r2,r2,r2
100027b4:	1085883a 	add	r2,r2,r2
100027b8:	e0ff6104 	addi	r3,fp,-636
100027bc:	1885883a 	add	r2,r3,r2
100027c0:	10804104 	addi	r2,r2,260
100027c4:	10800017 	ldw	r2,0(r2)
100027c8:	10004526 	beq	r2,zero,100028e0 <main+0x16e8>
						if ((x_zombie[i_dart] + 100 > x_dart[j_dart]) && (x_zombie[i_dart] < x_dart[j_dart] + 48) && (1440 < y_dart[j_dart] + 48)){
100027cc:	e0bf6e0f 	ldh	r2,-584(fp)
100027d0:	1085883a 	add	r2,r2,r2
100027d4:	1085883a 	add	r2,r2,r2
100027d8:	e13f6104 	addi	r4,fp,-636
100027dc:	2085883a 	add	r2,r4,r2
100027e0:	10805304 	addi	r2,r2,332
100027e4:	10800017 	ldw	r2,0(r2)
100027e8:	10c01904 	addi	r3,r2,100
100027ec:	e0bf7517 	ldw	r2,-556(fp)
100027f0:	1085883a 	add	r2,r2,r2
100027f4:	1085883a 	add	r2,r2,r2
100027f8:	e17f6104 	addi	r5,fp,-636
100027fc:	2885883a 	add	r2,r5,r2
10002800:	10803404 	addi	r2,r2,208
10002804:	10800017 	ldw	r2,0(r2)
10002808:	10c0350e 	bge	r2,r3,100028e0 <main+0x16e8>
1000280c:	e0bf6e0f 	ldh	r2,-584(fp)
10002810:	1085883a 	add	r2,r2,r2
10002814:	1085883a 	add	r2,r2,r2
10002818:	e0ff6104 	addi	r3,fp,-636
1000281c:	1885883a 	add	r2,r3,r2
10002820:	10805304 	addi	r2,r2,332
10002824:	10c00017 	ldw	r3,0(r2)
10002828:	e0bf7517 	ldw	r2,-556(fp)
1000282c:	1085883a 	add	r2,r2,r2
10002830:	1085883a 	add	r2,r2,r2
10002834:	e13f6104 	addi	r4,fp,-636
10002838:	2085883a 	add	r2,r4,r2
1000283c:	10803404 	addi	r2,r2,208
10002840:	10800017 	ldw	r2,0(r2)
10002844:	10800c04 	addi	r2,r2,48
10002848:	1880250e 	bge	r3,r2,100028e0 <main+0x16e8>
1000284c:	e0bf7517 	ldw	r2,-556(fp)
10002850:	1085883a 	add	r2,r2,r2
10002854:	1085883a 	add	r2,r2,r2
10002858:	e17f6104 	addi	r5,fp,-636
1000285c:	2885883a 	add	r2,r5,r2
10002860:	10803804 	addi	r2,r2,224
10002864:	10800017 	ldw	r2,0(r2)
10002868:	10800c04 	addi	r2,r2,48
1000286c:	10816850 	cmplti	r2,r2,1441
10002870:	10001b1e 	bne	r2,zero,100028e0 <main+0x16e8>
							live_zombie[i_dart] -= 1;
10002874:	e0bf6e0f 	ldh	r2,-584(fp)
10002878:	e0ff6e0f 	ldh	r3,-584(fp)
1000287c:	18c7883a 	add	r3,r3,r3
10002880:	e13f6104 	addi	r4,fp,-636
10002884:	20c7883a 	add	r3,r4,r3
10002888:	18c05b04 	addi	r3,r3,364
1000288c:	18c0000b 	ldhu	r3,0(r3)
10002890:	18ffffc4 	addi	r3,r3,-1
10002894:	1085883a 	add	r2,r2,r2
10002898:	e17f6104 	addi	r5,fp,-636
1000289c:	2885883a 	add	r2,r5,r2
100028a0:	10805b04 	addi	r2,r2,364
100028a4:	10c0000d 	sth	r3,0(r2)
							status_dart[j_dart] = 0;
100028a8:	e0bf7517 	ldw	r2,-556(fp)
100028ac:	1085883a 	add	r2,r2,r2
100028b0:	1085883a 	add	r2,r2,r2
100028b4:	e0ff6104 	addi	r3,fp,-636
100028b8:	1885883a 	add	r2,r3,r2
100028bc:	10804104 	addi	r2,r2,260
100028c0:	10000015 	stw	zero,0(r2)
							cnt_dart[j_dart] = 0;
100028c4:	e0ffa104 	addi	r3,fp,-380
100028c8:	e0bf7517 	ldw	r2,-556(fp)
100028cc:	1885883a 	add	r2,r3,r2
100028d0:	10000005 	stb	zero,0(r2)
							energy += 10;
100028d4:	e0bf6b17 	ldw	r2,-596(fp)
100028d8:	10800284 	addi	r2,r2,10
100028dc:	e0bf6b15 	stw	r2,-596(fp)
				if (x_zombie[i_dart] > mapX + 2560|| (x_zombie[i_dart] + 200) < mapX){
					status_zombie[i_dart] &= 0x7fffffff;
				} else {
					status_zombie[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
100028e0:	e0bf7517 	ldw	r2,-556(fp)
100028e4:	10800044 	addi	r2,r2,1
100028e8:	e0bf7515 	stw	r2,-556(fp)
100028ec:	e0bf7517 	ldw	r2,-556(fp)
100028f0:	10800110 	cmplti	r2,r2,4
100028f4:	103fad1e 	bne	r2,zero,100027ac <__alt_data_end+0xf80027ac>
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
100028f8:	e0bf6817 	ldw	r2,-608(fp)
100028fc:	1000451e 	bne	r2,zero,10002a14 <main+0x181c>
					if ((x_zombie[i_dart] + 100 > x) && (x_zombie[i_dart] < x + 160) && (1440 < y + 240)){
10002900:	e0bf6e0f 	ldh	r2,-584(fp)
10002904:	1085883a 	add	r2,r2,r2
10002908:	1085883a 	add	r2,r2,r2
1000290c:	e13f6104 	addi	r4,fp,-636
10002910:	2085883a 	add	r2,r4,r2
10002914:	10805304 	addi	r2,r2,332
10002918:	10800017 	ldw	r2,0(r2)
1000291c:	10801904 	addi	r2,r2,100
10002920:	e0ff6217 	ldw	r3,-632(fp)
10002924:	18803b0e 	bge	r3,r2,10002a14 <main+0x181c>
10002928:	e0bf6e0f 	ldh	r2,-584(fp)
1000292c:	1085883a 	add	r2,r2,r2
10002930:	1085883a 	add	r2,r2,r2
10002934:	e17f6104 	addi	r5,fp,-636
10002938:	2885883a 	add	r2,r5,r2
1000293c:	10805304 	addi	r2,r2,332
10002940:	10c00017 	ldw	r3,0(r2)
10002944:	e0bf6217 	ldw	r2,-632(fp)
10002948:	10802804 	addi	r2,r2,160
1000294c:	1880310e 	bge	r3,r2,10002a14 <main+0x181c>
10002950:	e0bf6317 	ldw	r2,-628(fp)
10002954:	10803c04 	addi	r2,r2,240
10002958:	10816850 	cmplti	r2,r2,1441
1000295c:	10002d1e 	bne	r2,zero,10002a14 <main+0x181c>
						if (status_ninja & 0x02000000){
10002960:	e0bf6617 	ldw	r2,-616(fp)
10002964:	1080802c 	andhi	r2,r2,512
10002968:	10001326 	beq	r2,zero,100029b8 <main+0x17c0>
							if(spin){
1000296c:	e0bf670f 	ldh	r2,-612(fp)
10002970:	10002826 	beq	r2,zero,10002a14 <main+0x181c>
								live_zombie[i_dart] -= 3;
10002974:	e0bf6e0f 	ldh	r2,-584(fp)
10002978:	e0ff6e0f 	ldh	r3,-584(fp)
1000297c:	18c7883a 	add	r3,r3,r3
10002980:	e13f6104 	addi	r4,fp,-636
10002984:	20c7883a 	add	r3,r4,r3
10002988:	18c05b04 	addi	r3,r3,364
1000298c:	18c0000b 	ldhu	r3,0(r3)
10002990:	18ffff44 	addi	r3,r3,-3
10002994:	1085883a 	add	r2,r2,r2
10002998:	e17f6104 	addi	r5,fp,-636
1000299c:	2885883a 	add	r2,r5,r2
100029a0:	10805b04 	addi	r2,r2,364
100029a4:	10c0000d 	sth	r3,0(r2)
								life += 5;
100029a8:	e0bf6a17 	ldw	r2,-600(fp)
100029ac:	10800144 	addi	r2,r2,5
100029b0:	e0bf6a15 	stw	r2,-600(fp)
100029b4:	00001706 	br	10002a14 <main+0x181c>
							}
						} else {
							hurt_counter = 60;
100029b8:	00800f04 	movi	r2,60
100029bc:	e0bf6815 	stw	r2,-608(fp)
							air_counter = 30;
100029c0:	00800784 	movi	r2,30
100029c4:	e0bf6915 	stw	r2,-604(fp)
							v_y = -v_jump3;
100029c8:	e0bf8917 	ldw	r2,-476(fp)
100029cc:	0085c83a 	sub	r2,zero,r2
100029d0:	e0bf6515 	stw	r2,-620(fp)
							on_gnd = 0;
100029d4:	e03f7205 	stb	zero,-568(fp)
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
100029d8:	e0ff6617 	ldw	r3,-616(fp)
100029dc:	00b90034 	movhi	r2,58368
100029e0:	10bfffc4 	addi	r2,r2,-1
100029e4:	1884703a 	and	r2,r3,r2
100029e8:	10820034 	orhi	r2,r2,2048
100029ec:	e0bf6615 	stw	r2,-616(fp)
							life_energy_status |= 0x00000080;
100029f0:	e0bf6c17 	ldw	r2,-592(fp)
100029f4:	10802014 	ori	r2,r2,128
100029f8:	e0bf6c15 	stw	r2,-592(fp)
							life -= 10;
100029fc:	e0bf6a17 	ldw	r2,-600(fp)
10002a00:	10bffd84 	addi	r2,r2,-10
10002a04:	e0bf6a15 	stw	r2,-600(fp)
							energy += 5;
10002a08:	e0bf6b17 	ldw	r2,-596(fp)
10002a0c:	10800144 	addi	r2,r2,5
10002a10:	e0bf6b15 	stw	r2,-596(fp)
						}
					}
				}

				if ((v_x_zombie[i_dart] < 0 && x_zombie[i_dart] < x - 400) || (v_x_zombie[i_dart] > 0 && x_zombie[i_dart] > x + 800)){
10002a14:	e0bf6e0f 	ldh	r2,-584(fp)
10002a18:	1085883a 	add	r2,r2,r2
10002a1c:	1085883a 	add	r2,r2,r2
10002a20:	e0ff6104 	addi	r3,fp,-636
10002a24:	1885883a 	add	r2,r3,r2
10002a28:	10805704 	addi	r2,r2,348
10002a2c:	10800017 	ldw	r2,0(r2)
10002a30:	10000a0e 	bge	r2,zero,10002a5c <main+0x1864>
10002a34:	e0bf6e0f 	ldh	r2,-584(fp)
10002a38:	1085883a 	add	r2,r2,r2
10002a3c:	1085883a 	add	r2,r2,r2
10002a40:	e13f6104 	addi	r4,fp,-636
10002a44:	2085883a 	add	r2,r4,r2
10002a48:	10805304 	addi	r2,r2,332
10002a4c:	10c00017 	ldw	r3,0(r2)
10002a50:	e0bf6217 	ldw	r2,-632(fp)
10002a54:	10bf9c04 	addi	r2,r2,-400
10002a58:	18801216 	blt	r3,r2,10002aa4 <main+0x18ac>
10002a5c:	e0bf6e0f 	ldh	r2,-584(fp)
10002a60:	1085883a 	add	r2,r2,r2
10002a64:	1085883a 	add	r2,r2,r2
10002a68:	e17f6104 	addi	r5,fp,-636
10002a6c:	2885883a 	add	r2,r5,r2
10002a70:	10805704 	addi	r2,r2,348
10002a74:	10800017 	ldw	r2,0(r2)
10002a78:	0080280e 	bge	zero,r2,10002b1c <main+0x1924>
10002a7c:	e0bf6e0f 	ldh	r2,-584(fp)
10002a80:	1085883a 	add	r2,r2,r2
10002a84:	1085883a 	add	r2,r2,r2
10002a88:	e0ff6104 	addi	r3,fp,-636
10002a8c:	1885883a 	add	r2,r3,r2
10002a90:	10805304 	addi	r2,r2,332
10002a94:	10800017 	ldw	r2,0(r2)
10002a98:	e0ff6217 	ldw	r3,-632(fp)
10002a9c:	18c0c804 	addi	r3,r3,800
10002aa0:	18801e0e 	bge	r3,r2,10002b1c <main+0x1924>
					v_x_zombie[i_dart] = -v_x_zombie[i_dart];
10002aa4:	e0bf6e0f 	ldh	r2,-584(fp)
10002aa8:	e0ff6e0f 	ldh	r3,-584(fp)
10002aac:	18c7883a 	add	r3,r3,r3
10002ab0:	18c7883a 	add	r3,r3,r3
10002ab4:	e13f6104 	addi	r4,fp,-636
10002ab8:	20c7883a 	add	r3,r4,r3
10002abc:	18c05704 	addi	r3,r3,348
10002ac0:	18c00017 	ldw	r3,0(r3)
10002ac4:	00c7c83a 	sub	r3,zero,r3
10002ac8:	1085883a 	add	r2,r2,r2
10002acc:	1085883a 	add	r2,r2,r2
10002ad0:	e17f6104 	addi	r5,fp,-636
10002ad4:	2885883a 	add	r2,r5,r2
10002ad8:	10805704 	addi	r2,r2,348
10002adc:	10c00015 	stw	r3,0(r2)
					status_zombie[i_dart] = status_zombie[i_dart] ^ 0x40000000;
10002ae0:	e0bf6e0f 	ldh	r2,-584(fp)
10002ae4:	e0ff6e0f 	ldh	r3,-584(fp)
10002ae8:	18c7883a 	add	r3,r3,r3
10002aec:	18c7883a 	add	r3,r3,r3
10002af0:	e13f6104 	addi	r4,fp,-636
10002af4:	20c7883a 	add	r3,r4,r3
10002af8:	18c05d04 	addi	r3,r3,372
10002afc:	18c00017 	ldw	r3,0(r3)
10002b00:	18d0003c 	xorhi	r3,r3,16384
10002b04:	1085883a 	add	r2,r2,r2
10002b08:	1085883a 	add	r2,r2,r2
10002b0c:	e17f6104 	addi	r5,fp,-636
10002b10:	2885883a 	add	r2,r5,r2
10002b14:	10805d04 	addi	r2,r2,372
10002b18:	10c00015 	stw	r3,0(r2)
				}
				x_zombie[i_dart] += v_x_zombie[i_dart];
10002b1c:	e0bf6e0f 	ldh	r2,-584(fp)
10002b20:	e0ff6e0f 	ldh	r3,-584(fp)
10002b24:	18c7883a 	add	r3,r3,r3
10002b28:	18c7883a 	add	r3,r3,r3
10002b2c:	e13f6104 	addi	r4,fp,-636
10002b30:	20c7883a 	add	r3,r4,r3
10002b34:	18c05304 	addi	r3,r3,332
10002b38:	19000017 	ldw	r4,0(r3)
10002b3c:	e0ff6e0f 	ldh	r3,-584(fp)
10002b40:	18c7883a 	add	r3,r3,r3
10002b44:	18c7883a 	add	r3,r3,r3
10002b48:	e17f6104 	addi	r5,fp,-636
10002b4c:	28c7883a 	add	r3,r5,r3
10002b50:	18c05704 	addi	r3,r3,348
10002b54:	18c00017 	ldw	r3,0(r3)
10002b58:	20c7883a 	add	r3,r4,r3
10002b5c:	1085883a 	add	r2,r2,r2
10002b60:	1085883a 	add	r2,r2,r2
10002b64:	e13f6104 	addi	r4,fp,-636
10002b68:	2085883a 	add	r2,r4,r2
10002b6c:	10805304 	addi	r2,r2,332
10002b70:	10c00015 	stw	r3,0(r2)
				if(live_zombie[i_dart] <= 0){
10002b74:	e0bf6e0f 	ldh	r2,-584(fp)
10002b78:	1085883a 	add	r2,r2,r2
10002b7c:	e17f6104 	addi	r5,fp,-636
10002b80:	2885883a 	add	r2,r5,r2
10002b84:	10805b04 	addi	r2,r2,364
10002b88:	1080000b 	ldhu	r2,0(r2)
10002b8c:	10bfffcc 	andi	r2,r2,65535
10002b90:	10a0001c 	xori	r2,r2,32768
10002b94:	10a00004 	addi	r2,r2,-32768
10002b98:	00800d16 	blt	zero,r2,10002bd0 <main+0x19d8>
					live_zombie[i_dart] = 0;
10002b9c:	e0bf6e0f 	ldh	r2,-584(fp)
10002ba0:	1085883a 	add	r2,r2,r2
10002ba4:	e0ff6104 	addi	r3,fp,-636
10002ba8:	1885883a 	add	r2,r3,r2
10002bac:	10805b04 	addi	r2,r2,364
10002bb0:	1000000d 	sth	zero,0(r2)
					status_zombie[i_dart] = 0;
10002bb4:	e0bf6e0f 	ldh	r2,-584(fp)
10002bb8:	1085883a 	add	r2,r2,r2
10002bbc:	1085883a 	add	r2,r2,r2
10002bc0:	e13f6104 	addi	r4,fp,-636
10002bc4:	2085883a 	add	r2,r4,r2
10002bc8:	10805d04 	addi	r2,r2,372
10002bcc:	10000015 	stw	zero,0(r2)
				}
			}
			x1:
			if(live_swampt[i_dart]){
10002bd0:	e0bf6e0f 	ldh	r2,-584(fp)
10002bd4:	1085883a 	add	r2,r2,r2
10002bd8:	e17f6104 	addi	r5,fp,-636
10002bdc:	2885883a 	add	r2,r5,r2
10002be0:	10806904 	addi	r2,r2,420
10002be4:	1080000b 	ldhu	r2,0(r2)
10002be8:	10bfffcc 	andi	r2,r2,65535
10002bec:	10a0001c 	xori	r2,r2,32768
10002bf0:	10a00004 	addi	r2,r2,-32768
10002bf4:	10016526 	beq	r2,zero,1000318c <main+0x1f94>
				if (x_swampt[i_dart] <= 0){
10002bf8:	e0bf6e0f 	ldh	r2,-584(fp)
10002bfc:	1085883a 	add	r2,r2,r2
10002c00:	1085883a 	add	r2,r2,r2
10002c04:	e0ff6104 	addi	r3,fp,-636
10002c08:	1885883a 	add	r2,r3,r2
10002c0c:	10806104 	addi	r2,r2,388
10002c10:	10800017 	ldw	r2,0(r2)
10002c14:	00800e16 	blt	zero,r2,10002c50 <main+0x1a58>
					status_swampt[i_dart] = 0;
10002c18:	e0bf6e0f 	ldh	r2,-584(fp)
10002c1c:	1085883a 	add	r2,r2,r2
10002c20:	1085883a 	add	r2,r2,r2
10002c24:	e13f6104 	addi	r4,fp,-636
10002c28:	2085883a 	add	r2,r4,r2
10002c2c:	10806b04 	addi	r2,r2,428
10002c30:	10000015 	stw	zero,0(r2)
					live_swampt[i_dart] = 0;
10002c34:	e0bf6e0f 	ldh	r2,-584(fp)
10002c38:	1085883a 	add	r2,r2,r2
10002c3c:	e17f6104 	addi	r5,fp,-636
10002c40:	2885883a 	add	r2,r5,r2
10002c44:	10806904 	addi	r2,r2,420
10002c48:	1000000d 	sth	zero,0(r2)
					goto x_label;
10002c4c:	00014f06 	br	1000318c <main+0x1f94>
				}
				if (x_swampt[i_dart] > mapX + 2560|| (x_swampt[i_dart] + 200) < mapX){
10002c50:	e0bf6e0f 	ldh	r2,-584(fp)
10002c54:	1085883a 	add	r2,r2,r2
10002c58:	1085883a 	add	r2,r2,r2
10002c5c:	e0ff6104 	addi	r3,fp,-636
10002c60:	1885883a 	add	r2,r3,r2
10002c64:	10806104 	addi	r2,r2,388
10002c68:	10800017 	ldw	r2,0(r2)
10002c6c:	e0ff7117 	ldw	r3,-572(fp)
10002c70:	18c28004 	addi	r3,r3,2560
10002c74:	18800a16 	blt	r3,r2,10002ca0 <main+0x1aa8>
10002c78:	e0bf6e0f 	ldh	r2,-584(fp)
10002c7c:	1085883a 	add	r2,r2,r2
10002c80:	1085883a 	add	r2,r2,r2
10002c84:	e13f6104 	addi	r4,fp,-636
10002c88:	2085883a 	add	r2,r4,r2
10002c8c:	10806104 	addi	r2,r2,388
10002c90:	10800017 	ldw	r2,0(r2)
10002c94:	10c03204 	addi	r3,r2,200
10002c98:	e0bf7117 	ldw	r2,-572(fp)
10002c9c:	1880120e 	bge	r3,r2,10002ce8 <main+0x1af0>
					status_swampt[i_dart] &= 0x7fffffff;
10002ca0:	e0ff6e0f 	ldh	r3,-584(fp)
10002ca4:	e0bf6e0f 	ldh	r2,-584(fp)
10002ca8:	1085883a 	add	r2,r2,r2
10002cac:	1085883a 	add	r2,r2,r2
10002cb0:	e17f6104 	addi	r5,fp,-636
10002cb4:	2885883a 	add	r2,r5,r2
10002cb8:	10806b04 	addi	r2,r2,428
10002cbc:	11000017 	ldw	r4,0(r2)
10002cc0:	00a00034 	movhi	r2,32768
10002cc4:	10bfffc4 	addi	r2,r2,-1
10002cc8:	2088703a 	and	r4,r4,r2
10002ccc:	18c5883a 	add	r2,r3,r3
10002cd0:	1085883a 	add	r2,r2,r2
10002cd4:	e0ff6104 	addi	r3,fp,-636
10002cd8:	1885883a 	add	r2,r3,r2
10002cdc:	10806b04 	addi	r2,r2,428
10002ce0:	11000015 	stw	r4,0(r2)
10002ce4:	00000f06 	br	10002d24 <main+0x1b2c>
				} else {
					status_swampt[i_dart] |= 0x80000000;
10002ce8:	e0bf6e0f 	ldh	r2,-584(fp)
10002cec:	e0ff6e0f 	ldh	r3,-584(fp)
10002cf0:	18c7883a 	add	r3,r3,r3
10002cf4:	18c7883a 	add	r3,r3,r3
10002cf8:	e13f6104 	addi	r4,fp,-636
10002cfc:	20c7883a 	add	r3,r4,r3
10002d00:	18c06b04 	addi	r3,r3,428
10002d04:	18c00017 	ldw	r3,0(r3)
10002d08:	18e00034 	orhi	r3,r3,32768
10002d0c:	1085883a 	add	r2,r2,r2
10002d10:	1085883a 	add	r2,r2,r2
10002d14:	e17f6104 	addi	r5,fp,-636
10002d18:	2885883a 	add	r2,r5,r2
10002d1c:	10806b04 	addi	r2,r2,428
10002d20:	10c00015 	stw	r3,0(r2)
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
10002d24:	e03f7615 	stw	zero,-552(fp)
10002d28:	00005f06 	br	10002ea8 <main+0x1cb0>
					if(status_dart[j_dart]){
10002d2c:	e0bf7617 	ldw	r2,-552(fp)
10002d30:	1085883a 	add	r2,r2,r2
10002d34:	1085883a 	add	r2,r2,r2
10002d38:	e0ff6104 	addi	r3,fp,-636
10002d3c:	1885883a 	add	r2,r3,r2
10002d40:	10804104 	addi	r2,r2,260
10002d44:	10800017 	ldw	r2,0(r2)
10002d48:	10005426 	beq	r2,zero,10002e9c <main+0x1ca4>
						if ((x_swampt[i_dart] + 100 > x_dart[j_dart]) && (x_swampt[i_dart] < x_dart[j_dart] + 48) && (1440 < y_dart[j_dart] + 48)){
10002d4c:	e0bf6e0f 	ldh	r2,-584(fp)
10002d50:	1085883a 	add	r2,r2,r2
10002d54:	1085883a 	add	r2,r2,r2
10002d58:	e13f6104 	addi	r4,fp,-636
10002d5c:	2085883a 	add	r2,r4,r2
10002d60:	10806104 	addi	r2,r2,388
10002d64:	10800017 	ldw	r2,0(r2)
10002d68:	10c01904 	addi	r3,r2,100
10002d6c:	e0bf7617 	ldw	r2,-552(fp)
10002d70:	1085883a 	add	r2,r2,r2
10002d74:	1085883a 	add	r2,r2,r2
10002d78:	e17f6104 	addi	r5,fp,-636
10002d7c:	2885883a 	add	r2,r5,r2
10002d80:	10803404 	addi	r2,r2,208
10002d84:	10800017 	ldw	r2,0(r2)
10002d88:	10c0440e 	bge	r2,r3,10002e9c <main+0x1ca4>
10002d8c:	e0bf6e0f 	ldh	r2,-584(fp)
10002d90:	1085883a 	add	r2,r2,r2
10002d94:	1085883a 	add	r2,r2,r2
10002d98:	e0ff6104 	addi	r3,fp,-636
10002d9c:	1885883a 	add	r2,r3,r2
10002da0:	10806104 	addi	r2,r2,388
10002da4:	10c00017 	ldw	r3,0(r2)
10002da8:	e0bf7617 	ldw	r2,-552(fp)
10002dac:	1085883a 	add	r2,r2,r2
10002db0:	1085883a 	add	r2,r2,r2
10002db4:	e13f6104 	addi	r4,fp,-636
10002db8:	2085883a 	add	r2,r4,r2
10002dbc:	10803404 	addi	r2,r2,208
10002dc0:	10800017 	ldw	r2,0(r2)
10002dc4:	10800c04 	addi	r2,r2,48
10002dc8:	1880340e 	bge	r3,r2,10002e9c <main+0x1ca4>
10002dcc:	e0bf7617 	ldw	r2,-552(fp)
10002dd0:	1085883a 	add	r2,r2,r2
10002dd4:	1085883a 	add	r2,r2,r2
10002dd8:	e17f6104 	addi	r5,fp,-636
10002ddc:	2885883a 	add	r2,r5,r2
10002de0:	10803804 	addi	r2,r2,224
10002de4:	10800017 	ldw	r2,0(r2)
10002de8:	10800c04 	addi	r2,r2,48
10002dec:	10816850 	cmplti	r2,r2,1441
10002df0:	10002a1e 	bne	r2,zero,10002e9c <main+0x1ca4>
							live_swampt[i_dart] -= 1;
10002df4:	e0bf6e0f 	ldh	r2,-584(fp)
10002df8:	e0ff6e0f 	ldh	r3,-584(fp)
10002dfc:	18c7883a 	add	r3,r3,r3
10002e00:	e13f6104 	addi	r4,fp,-636
10002e04:	20c7883a 	add	r3,r4,r3
10002e08:	18c06904 	addi	r3,r3,420
10002e0c:	18c0000b 	ldhu	r3,0(r3)
10002e10:	18ffffc4 	addi	r3,r3,-1
10002e14:	1085883a 	add	r2,r2,r2
10002e18:	e17f6104 	addi	r5,fp,-636
10002e1c:	2885883a 	add	r2,r5,r2
10002e20:	10806904 	addi	r2,r2,420
10002e24:	10c0000d 	sth	r3,0(r2)
							status_swampt[i_dart] ^= 0x10000000;
10002e28:	e0bf6e0f 	ldh	r2,-584(fp)
10002e2c:	e0ff6e0f 	ldh	r3,-584(fp)
10002e30:	18c7883a 	add	r3,r3,r3
10002e34:	18c7883a 	add	r3,r3,r3
10002e38:	e13f6104 	addi	r4,fp,-636
10002e3c:	20c7883a 	add	r3,r4,r3
10002e40:	18c06b04 	addi	r3,r3,428
10002e44:	18c00017 	ldw	r3,0(r3)
10002e48:	18c4003c 	xorhi	r3,r3,4096
10002e4c:	1085883a 	add	r2,r2,r2
10002e50:	1085883a 	add	r2,r2,r2
10002e54:	e17f6104 	addi	r5,fp,-636
10002e58:	2885883a 	add	r2,r5,r2
10002e5c:	10806b04 	addi	r2,r2,428
10002e60:	10c00015 	stw	r3,0(r2)
							status_dart[j_dart] = 0;
10002e64:	e0bf7617 	ldw	r2,-552(fp)
10002e68:	1085883a 	add	r2,r2,r2
10002e6c:	1085883a 	add	r2,r2,r2
10002e70:	e0ff6104 	addi	r3,fp,-636
10002e74:	1885883a 	add	r2,r3,r2
10002e78:	10804104 	addi	r2,r2,260
10002e7c:	10000015 	stw	zero,0(r2)
							cnt_dart[j_dart] = 0;
10002e80:	e0ffa104 	addi	r3,fp,-380
10002e84:	e0bf7617 	ldw	r2,-552(fp)
10002e88:	1885883a 	add	r2,r3,r2
10002e8c:	10000005 	stb	zero,0(r2)
							energy += 10;
10002e90:	e0bf6b17 	ldw	r2,-596(fp)
10002e94:	10800284 	addi	r2,r2,10
10002e98:	e0bf6b15 	stw	r2,-596(fp)
				if (x_swampt[i_dart] > mapX + 2560|| (x_swampt[i_dart] + 200) < mapX){
					status_swampt[i_dart] &= 0x7fffffff;
				} else {
					status_swampt[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
10002e9c:	e0bf7617 	ldw	r2,-552(fp)
10002ea0:	10800044 	addi	r2,r2,1
10002ea4:	e0bf7615 	stw	r2,-552(fp)
10002ea8:	e0bf7617 	ldw	r2,-552(fp)
10002eac:	10800110 	cmplti	r2,r2,4
10002eb0:	103f9e1e 	bne	r2,zero,10002d2c <__alt_data_end+0xf8002d2c>
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
10002eb4:	e0bf6817 	ldw	r2,-608(fp)
10002eb8:	1000451e 	bne	r2,zero,10002fd0 <main+0x1dd8>
					if ((x_swampt[i_dart] + 100 > x) && (x_swampt[i_dart] < x + 160) && (1440 < y + 240)){
10002ebc:	e0bf6e0f 	ldh	r2,-584(fp)
10002ec0:	1085883a 	add	r2,r2,r2
10002ec4:	1085883a 	add	r2,r2,r2
10002ec8:	e13f6104 	addi	r4,fp,-636
10002ecc:	2085883a 	add	r2,r4,r2
10002ed0:	10806104 	addi	r2,r2,388
10002ed4:	10800017 	ldw	r2,0(r2)
10002ed8:	10801904 	addi	r2,r2,100
10002edc:	e0ff6217 	ldw	r3,-632(fp)
10002ee0:	18803b0e 	bge	r3,r2,10002fd0 <main+0x1dd8>
10002ee4:	e0bf6e0f 	ldh	r2,-584(fp)
10002ee8:	1085883a 	add	r2,r2,r2
10002eec:	1085883a 	add	r2,r2,r2
10002ef0:	e17f6104 	addi	r5,fp,-636
10002ef4:	2885883a 	add	r2,r5,r2
10002ef8:	10806104 	addi	r2,r2,388
10002efc:	10c00017 	ldw	r3,0(r2)
10002f00:	e0bf6217 	ldw	r2,-632(fp)
10002f04:	10802804 	addi	r2,r2,160
10002f08:	1880310e 	bge	r3,r2,10002fd0 <main+0x1dd8>
10002f0c:	e0bf6317 	ldw	r2,-628(fp)
10002f10:	10803c04 	addi	r2,r2,240
10002f14:	10816850 	cmplti	r2,r2,1441
10002f18:	10002d1e 	bne	r2,zero,10002fd0 <main+0x1dd8>
						if (status_ninja & 0x02000000){
10002f1c:	e0bf6617 	ldw	r2,-616(fp)
10002f20:	1080802c 	andhi	r2,r2,512
10002f24:	10001326 	beq	r2,zero,10002f74 <main+0x1d7c>
							if(spin){
10002f28:	e0bf670f 	ldh	r2,-612(fp)
10002f2c:	10002826 	beq	r2,zero,10002fd0 <main+0x1dd8>
								live_swampt[i_dart] -= 3;
10002f30:	e0bf6e0f 	ldh	r2,-584(fp)
10002f34:	e0ff6e0f 	ldh	r3,-584(fp)
10002f38:	18c7883a 	add	r3,r3,r3
10002f3c:	e13f6104 	addi	r4,fp,-636
10002f40:	20c7883a 	add	r3,r4,r3
10002f44:	18c06904 	addi	r3,r3,420
10002f48:	18c0000b 	ldhu	r3,0(r3)
10002f4c:	18ffff44 	addi	r3,r3,-3
10002f50:	1085883a 	add	r2,r2,r2
10002f54:	e17f6104 	addi	r5,fp,-636
10002f58:	2885883a 	add	r2,r5,r2
10002f5c:	10806904 	addi	r2,r2,420
10002f60:	10c0000d 	sth	r3,0(r2)
								life += 5;
10002f64:	e0bf6a17 	ldw	r2,-600(fp)
10002f68:	10800144 	addi	r2,r2,5
10002f6c:	e0bf6a15 	stw	r2,-600(fp)
10002f70:	00001706 	br	10002fd0 <main+0x1dd8>
							}
						} else {
							hurt_counter = 60;
10002f74:	00800f04 	movi	r2,60
10002f78:	e0bf6815 	stw	r2,-608(fp)
							air_counter = 30;
10002f7c:	00800784 	movi	r2,30
10002f80:	e0bf6915 	stw	r2,-604(fp)
							v_y = -v_jump3;
10002f84:	e0bf8917 	ldw	r2,-476(fp)
10002f88:	0085c83a 	sub	r2,zero,r2
10002f8c:	e0bf6515 	stw	r2,-620(fp)
							on_gnd = 0;
10002f90:	e03f7205 	stb	zero,-568(fp)
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
10002f94:	e0ff6617 	ldw	r3,-616(fp)
10002f98:	00b90034 	movhi	r2,58368
10002f9c:	10bfffc4 	addi	r2,r2,-1
10002fa0:	1884703a 	and	r2,r3,r2
10002fa4:	10820034 	orhi	r2,r2,2048
10002fa8:	e0bf6615 	stw	r2,-616(fp)
							life_energy_status |= 0x00000080;
10002fac:	e0bf6c17 	ldw	r2,-592(fp)
10002fb0:	10802014 	ori	r2,r2,128
10002fb4:	e0bf6c15 	stw	r2,-592(fp)
							life -= 10;
10002fb8:	e0bf6a17 	ldw	r2,-600(fp)
10002fbc:	10bffd84 	addi	r2,r2,-10
10002fc0:	e0bf6a15 	stw	r2,-600(fp)
							energy += 5;
10002fc4:	e0bf6b17 	ldw	r2,-596(fp)
10002fc8:	10800144 	addi	r2,r2,5
10002fcc:	e0bf6b15 	stw	r2,-596(fp)
						}
					}
				}

				if ((v_x_swampt[i_dart] < 0 && x_swampt[i_dart] < x - 400) || (v_x_swampt[i_dart] > 0 && x_swampt[i_dart] > x + 800)){
10002fd0:	e0bf6e0f 	ldh	r2,-584(fp)
10002fd4:	1085883a 	add	r2,r2,r2
10002fd8:	1085883a 	add	r2,r2,r2
10002fdc:	e0ff6104 	addi	r3,fp,-636
10002fe0:	1885883a 	add	r2,r3,r2
10002fe4:	10806504 	addi	r2,r2,404
10002fe8:	10800017 	ldw	r2,0(r2)
10002fec:	10000a0e 	bge	r2,zero,10003018 <main+0x1e20>
10002ff0:	e0bf6e0f 	ldh	r2,-584(fp)
10002ff4:	1085883a 	add	r2,r2,r2
10002ff8:	1085883a 	add	r2,r2,r2
10002ffc:	e13f6104 	addi	r4,fp,-636
10003000:	2085883a 	add	r2,r4,r2
10003004:	10806104 	addi	r2,r2,388
10003008:	10c00017 	ldw	r3,0(r2)
1000300c:	e0bf6217 	ldw	r2,-632(fp)
10003010:	10bf9c04 	addi	r2,r2,-400
10003014:	18801216 	blt	r3,r2,10003060 <main+0x1e68>
10003018:	e0bf6e0f 	ldh	r2,-584(fp)
1000301c:	1085883a 	add	r2,r2,r2
10003020:	1085883a 	add	r2,r2,r2
10003024:	e17f6104 	addi	r5,fp,-636
10003028:	2885883a 	add	r2,r5,r2
1000302c:	10806504 	addi	r2,r2,404
10003030:	10800017 	ldw	r2,0(r2)
10003034:	0080280e 	bge	zero,r2,100030d8 <main+0x1ee0>
10003038:	e0bf6e0f 	ldh	r2,-584(fp)
1000303c:	1085883a 	add	r2,r2,r2
10003040:	1085883a 	add	r2,r2,r2
10003044:	e0ff6104 	addi	r3,fp,-636
10003048:	1885883a 	add	r2,r3,r2
1000304c:	10806104 	addi	r2,r2,388
10003050:	10800017 	ldw	r2,0(r2)
10003054:	e0ff6217 	ldw	r3,-632(fp)
10003058:	18c0c804 	addi	r3,r3,800
1000305c:	18801e0e 	bge	r3,r2,100030d8 <main+0x1ee0>
					v_x_swampt[i_dart] = -v_x_swampt[i_dart];
10003060:	e0bf6e0f 	ldh	r2,-584(fp)
10003064:	e0ff6e0f 	ldh	r3,-584(fp)
10003068:	18c7883a 	add	r3,r3,r3
1000306c:	18c7883a 	add	r3,r3,r3
10003070:	e13f6104 	addi	r4,fp,-636
10003074:	20c7883a 	add	r3,r4,r3
10003078:	18c06504 	addi	r3,r3,404
1000307c:	18c00017 	ldw	r3,0(r3)
10003080:	00c7c83a 	sub	r3,zero,r3
10003084:	1085883a 	add	r2,r2,r2
10003088:	1085883a 	add	r2,r2,r2
1000308c:	e17f6104 	addi	r5,fp,-636
10003090:	2885883a 	add	r2,r5,r2
10003094:	10806504 	addi	r2,r2,404
10003098:	10c00015 	stw	r3,0(r2)
					status_swampt[i_dart] = status_swampt[i_dart] ^ 0x40000000;
1000309c:	e0bf6e0f 	ldh	r2,-584(fp)
100030a0:	e0ff6e0f 	ldh	r3,-584(fp)
100030a4:	18c7883a 	add	r3,r3,r3
100030a8:	18c7883a 	add	r3,r3,r3
100030ac:	e13f6104 	addi	r4,fp,-636
100030b0:	20c7883a 	add	r3,r4,r3
100030b4:	18c06b04 	addi	r3,r3,428
100030b8:	18c00017 	ldw	r3,0(r3)
100030bc:	18d0003c 	xorhi	r3,r3,16384
100030c0:	1085883a 	add	r2,r2,r2
100030c4:	1085883a 	add	r2,r2,r2
100030c8:	e17f6104 	addi	r5,fp,-636
100030cc:	2885883a 	add	r2,r5,r2
100030d0:	10806b04 	addi	r2,r2,428
100030d4:	10c00015 	stw	r3,0(r2)
				}
				x_swampt[i_dart] += v_x_swampt[i_dart];
100030d8:	e0bf6e0f 	ldh	r2,-584(fp)
100030dc:	e0ff6e0f 	ldh	r3,-584(fp)
100030e0:	18c7883a 	add	r3,r3,r3
100030e4:	18c7883a 	add	r3,r3,r3
100030e8:	e13f6104 	addi	r4,fp,-636
100030ec:	20c7883a 	add	r3,r4,r3
100030f0:	18c06104 	addi	r3,r3,388
100030f4:	19000017 	ldw	r4,0(r3)
100030f8:	e0ff6e0f 	ldh	r3,-584(fp)
100030fc:	18c7883a 	add	r3,r3,r3
10003100:	18c7883a 	add	r3,r3,r3
10003104:	e17f6104 	addi	r5,fp,-636
10003108:	28c7883a 	add	r3,r5,r3
1000310c:	18c06504 	addi	r3,r3,404
10003110:	18c00017 	ldw	r3,0(r3)
10003114:	20c7883a 	add	r3,r4,r3
10003118:	1085883a 	add	r2,r2,r2
1000311c:	1085883a 	add	r2,r2,r2
10003120:	e13f6104 	addi	r4,fp,-636
10003124:	2085883a 	add	r2,r4,r2
10003128:	10806104 	addi	r2,r2,388
1000312c:	10c00015 	stw	r3,0(r2)
				if(live_swampt[i_dart] <= 0){
10003130:	e0bf6e0f 	ldh	r2,-584(fp)
10003134:	1085883a 	add	r2,r2,r2
10003138:	e17f6104 	addi	r5,fp,-636
1000313c:	2885883a 	add	r2,r5,r2
10003140:	10806904 	addi	r2,r2,420
10003144:	1080000b 	ldhu	r2,0(r2)
10003148:	10bfffcc 	andi	r2,r2,65535
1000314c:	10a0001c 	xori	r2,r2,32768
10003150:	10a00004 	addi	r2,r2,-32768
10003154:	00800d16 	blt	zero,r2,1000318c <main+0x1f94>
					live_swampt[i_dart] = 0;
10003158:	e0bf6e0f 	ldh	r2,-584(fp)
1000315c:	1085883a 	add	r2,r2,r2
10003160:	e0ff6104 	addi	r3,fp,-636
10003164:	1885883a 	add	r2,r3,r2
10003168:	10806904 	addi	r2,r2,420
1000316c:	1000000d 	sth	zero,0(r2)
					status_swampt[i_dart] = 0;
10003170:	e0bf6e0f 	ldh	r2,-584(fp)
10003174:	1085883a 	add	r2,r2,r2
10003178:	1085883a 	add	r2,r2,r2
1000317c:	e13f6104 	addi	r4,fp,-636
10003180:	2085883a 	add	r2,r4,r2
10003184:	10806b04 	addi	r2,r2,428
10003188:	10000015 	stw	zero,0(r2)




		/////////////////dart/////////////////
		for(i_dart = 0; i_dart < 4; i_dart++){
1000318c:	e0bf6e0b 	ldhu	r2,-584(fp)
10003190:	10800044 	addi	r2,r2,1
10003194:	e0bf6e0d 	sth	r2,-584(fp)
10003198:	e0bf6e0f 	ldh	r2,-584(fp)
1000319c:	10800110 	cmplti	r2,r2,4
100031a0:	103b6a1e 	bne	r2,zero,10001f4c <__alt_data_end+0xf8001f4c>
				}
			}
			x_label:;

		}
		for(i_dart = 0; i_dart < 2; i_dart++){
100031a4:	e03f6e0d 	sth	zero,-584(fp)
100031a8:	00018d06 	br	100037e0 <main+0x25e8>
			if(live_skull[i_dart]){
100031ac:	e0bf6e0f 	ldh	r2,-584(fp)
100031b0:	1085883a 	add	r2,r2,r2
100031b4:	e17f6104 	addi	r5,fp,-636
100031b8:	2885883a 	add	r2,r5,r2
100031bc:	10807804 	addi	r2,r2,480
100031c0:	1080000b 	ldhu	r2,0(r2)
100031c4:	10bfffcc 	andi	r2,r2,65535
100031c8:	10a0001c 	xori	r2,r2,32768
100031cc:	10a00004 	addi	r2,r2,-32768
100031d0:	10018026 	beq	r2,zero,100037d4 <main+0x25dc>
				if (x_skull[i_dart] <= 0){
100031d4:	e0bf6e0f 	ldh	r2,-584(fp)
100031d8:	1085883a 	add	r2,r2,r2
100031dc:	1085883a 	add	r2,r2,r2
100031e0:	e0ff6104 	addi	r3,fp,-636
100031e4:	1885883a 	add	r2,r3,r2
100031e8:	10806f04 	addi	r2,r2,444
100031ec:	10800017 	ldw	r2,0(r2)
100031f0:	00800e16 	blt	zero,r2,1000322c <main+0x2034>
					status_skull[i_dart] = 0;
100031f4:	e0bf6e0f 	ldh	r2,-584(fp)
100031f8:	1085883a 	add	r2,r2,r2
100031fc:	1085883a 	add	r2,r2,r2
10003200:	e13f6104 	addi	r4,fp,-636
10003204:	2085883a 	add	r2,r4,r2
10003208:	10807904 	addi	r2,r2,484
1000320c:	10000015 	stw	zero,0(r2)
					live_skull[i_dart] = 0;
10003210:	e0bf6e0f 	ldh	r2,-584(fp)
10003214:	1085883a 	add	r2,r2,r2
10003218:	e17f6104 	addi	r5,fp,-636
1000321c:	2885883a 	add	r2,r5,r2
10003220:	10807804 	addi	r2,r2,480
10003224:	1000000d 	sth	zero,0(r2)
					goto y_label0;
10003228:	00016a06 	br	100037d4 <main+0x25dc>
				}
				if (x_skull[i_dart] > mapX + 2560|| (x_lady[i_dart] + 200) < mapX){
1000322c:	e0bf6e0f 	ldh	r2,-584(fp)
10003230:	1085883a 	add	r2,r2,r2
10003234:	1085883a 	add	r2,r2,r2
10003238:	e0ff6104 	addi	r3,fp,-636
1000323c:	1885883a 	add	r2,r3,r2
10003240:	10806f04 	addi	r2,r2,444
10003244:	10800017 	ldw	r2,0(r2)
10003248:	e0ff7117 	ldw	r3,-572(fp)
1000324c:	18c28004 	addi	r3,r3,2560
10003250:	18800a16 	blt	r3,r2,1000327c <main+0x2084>
10003254:	e0bf6e0f 	ldh	r2,-584(fp)
10003258:	1085883a 	add	r2,r2,r2
1000325c:	1085883a 	add	r2,r2,r2
10003260:	e13f6104 	addi	r4,fp,-636
10003264:	2085883a 	add	r2,r4,r2
10003268:	10804504 	addi	r2,r2,276
1000326c:	10800017 	ldw	r2,0(r2)
10003270:	10c03204 	addi	r3,r2,200
10003274:	e0bf7117 	ldw	r2,-572(fp)
10003278:	1880120e 	bge	r3,r2,100032c4 <main+0x20cc>
					status_skull[i_dart] &= 0x7fffffff;
1000327c:	e0ff6e0f 	ldh	r3,-584(fp)
10003280:	e0bf6e0f 	ldh	r2,-584(fp)
10003284:	1085883a 	add	r2,r2,r2
10003288:	1085883a 	add	r2,r2,r2
1000328c:	e17f6104 	addi	r5,fp,-636
10003290:	2885883a 	add	r2,r5,r2
10003294:	10807904 	addi	r2,r2,484
10003298:	11000017 	ldw	r4,0(r2)
1000329c:	00a00034 	movhi	r2,32768
100032a0:	10bfffc4 	addi	r2,r2,-1
100032a4:	2088703a 	and	r4,r4,r2
100032a8:	18c5883a 	add	r2,r3,r3
100032ac:	1085883a 	add	r2,r2,r2
100032b0:	e0ff6104 	addi	r3,fp,-636
100032b4:	1885883a 	add	r2,r3,r2
100032b8:	10807904 	addi	r2,r2,484
100032bc:	11000015 	stw	r4,0(r2)
100032c0:	00000f06 	br	10003300 <main+0x2108>
				} else {
					status_skull[i_dart] |= 0x80000000;
100032c4:	e0bf6e0f 	ldh	r2,-584(fp)
100032c8:	e0ff6e0f 	ldh	r3,-584(fp)
100032cc:	18c7883a 	add	r3,r3,r3
100032d0:	18c7883a 	add	r3,r3,r3
100032d4:	e13f6104 	addi	r4,fp,-636
100032d8:	20c7883a 	add	r3,r4,r3
100032dc:	18c07904 	addi	r3,r3,484
100032e0:	18c00017 	ldw	r3,0(r3)
100032e4:	18e00034 	orhi	r3,r3,32768
100032e8:	1085883a 	add	r2,r2,r2
100032ec:	1085883a 	add	r2,r2,r2
100032f0:	e17f6104 	addi	r5,fp,-636
100032f4:	2885883a 	add	r2,r5,r2
100032f8:	10807904 	addi	r2,r2,484
100032fc:	10c00015 	stw	r3,0(r2)
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
10003300:	e03f7715 	stw	zero,-548(fp)
10003304:	00005006 	br	10003448 <main+0x2250>
					if(status_dart[j_dart]){
10003308:	e0bf7717 	ldw	r2,-548(fp)
1000330c:	1085883a 	add	r2,r2,r2
10003310:	1085883a 	add	r2,r2,r2
10003314:	e0ff6104 	addi	r3,fp,-636
10003318:	1885883a 	add	r2,r3,r2
1000331c:	10804104 	addi	r2,r2,260
10003320:	10800017 	ldw	r2,0(r2)
10003324:	10004526 	beq	r2,zero,1000343c <main+0x2244>
						if ((x_skull[i_dart] + 100 > x_dart[j_dart]) && (x_skull[i_dart] < x_dart[j_dart] + 48) && (y_skull[i_dart] < y_dart[j_dart] + 48)){
10003328:	e0bf6e0f 	ldh	r2,-584(fp)
1000332c:	1085883a 	add	r2,r2,r2
10003330:	1085883a 	add	r2,r2,r2
10003334:	e13f6104 	addi	r4,fp,-636
10003338:	2085883a 	add	r2,r4,r2
1000333c:	10806f04 	addi	r2,r2,444
10003340:	10800017 	ldw	r2,0(r2)
10003344:	10c01904 	addi	r3,r2,100
10003348:	e0bf7717 	ldw	r2,-548(fp)
1000334c:	1085883a 	add	r2,r2,r2
10003350:	1085883a 	add	r2,r2,r2
10003354:	e17f6104 	addi	r5,fp,-636
10003358:	2885883a 	add	r2,r5,r2
1000335c:	10803404 	addi	r2,r2,208
10003360:	10800017 	ldw	r2,0(r2)
10003364:	10c0350e 	bge	r2,r3,1000343c <main+0x2244>
10003368:	e0bf6e0f 	ldh	r2,-584(fp)
1000336c:	1085883a 	add	r2,r2,r2
10003370:	1085883a 	add	r2,r2,r2
10003374:	e0ff6104 	addi	r3,fp,-636
10003378:	1885883a 	add	r2,r3,r2
1000337c:	10806f04 	addi	r2,r2,444
10003380:	10c00017 	ldw	r3,0(r2)
10003384:	e0bf7717 	ldw	r2,-548(fp)
10003388:	1085883a 	add	r2,r2,r2
1000338c:	1085883a 	add	r2,r2,r2
10003390:	e13f6104 	addi	r4,fp,-636
10003394:	2085883a 	add	r2,r4,r2
10003398:	10803404 	addi	r2,r2,208
1000339c:	10800017 	ldw	r2,0(r2)
100033a0:	10800c04 	addi	r2,r2,48
100033a4:	1880250e 	bge	r3,r2,1000343c <main+0x2244>
100033a8:	e0bf6e0f 	ldh	r2,-584(fp)
100033ac:	1085883a 	add	r2,r2,r2
100033b0:	1085883a 	add	r2,r2,r2
100033b4:	e17f6104 	addi	r5,fp,-636
100033b8:	2885883a 	add	r2,r5,r2
100033bc:	10807104 	addi	r2,r2,452
100033c0:	10c00017 	ldw	r3,0(r2)
100033c4:	e0bf7717 	ldw	r2,-548(fp)
100033c8:	1085883a 	add	r2,r2,r2
100033cc:	1085883a 	add	r2,r2,r2
100033d0:	e13f6104 	addi	r4,fp,-636
100033d4:	2085883a 	add	r2,r4,r2
100033d8:	10803804 	addi	r2,r2,224
100033dc:	10800017 	ldw	r2,0(r2)
100033e0:	10800c04 	addi	r2,r2,48
100033e4:	1880150e 	bge	r3,r2,1000343c <main+0x2244>
							live_skull[i_dart] = -1;
100033e8:	e0bf6e0f 	ldh	r2,-584(fp)
100033ec:	1085883a 	add	r2,r2,r2
100033f0:	e17f6104 	addi	r5,fp,-636
100033f4:	2885883a 	add	r2,r5,r2
100033f8:	10807804 	addi	r2,r2,480
100033fc:	00ffffc4 	movi	r3,-1
10003400:	10c0000d 	sth	r3,0(r2)
							status_dart[j_dart] = 0;
10003404:	e0bf7717 	ldw	r2,-548(fp)
10003408:	1085883a 	add	r2,r2,r2
1000340c:	1085883a 	add	r2,r2,r2
10003410:	e0ff6104 	addi	r3,fp,-636
10003414:	1885883a 	add	r2,r3,r2
10003418:	10804104 	addi	r2,r2,260
1000341c:	10000015 	stw	zero,0(r2)
							cnt_dart[j_dart] = 0;
10003420:	e0ffa104 	addi	r3,fp,-380
10003424:	e0bf7717 	ldw	r2,-548(fp)
10003428:	1885883a 	add	r2,r3,r2
1000342c:	10000005 	stb	zero,0(r2)
							energy += 10;
10003430:	e0bf6b17 	ldw	r2,-596(fp)
10003434:	10800284 	addi	r2,r2,10
10003438:	e0bf6b15 	stw	r2,-596(fp)
				if (x_skull[i_dart] > mapX + 2560|| (x_lady[i_dart] + 200) < mapX){
					status_skull[i_dart] &= 0x7fffffff;
				} else {
					status_skull[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
1000343c:	e0bf7717 	ldw	r2,-548(fp)
10003440:	10800044 	addi	r2,r2,1
10003444:	e0bf7715 	stw	r2,-548(fp)
10003448:	e0bf7717 	ldw	r2,-548(fp)
1000344c:	10800110 	cmplti	r2,r2,4
10003450:	103fad1e 	bne	r2,zero,10003308 <__alt_data_end+0xf8003308>
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
10003454:	e0bf6817 	ldw	r2,-608(fp)
10003458:	1000451e 	bne	r2,zero,10003570 <main+0x2378>
					if ((x_skull[i_dart] + 100 > x) && (x_skull[i_dart] < x + 160) && (y_skull[i_dart] < y + 240)){
1000345c:	e0bf6e0f 	ldh	r2,-584(fp)
10003460:	1085883a 	add	r2,r2,r2
10003464:	1085883a 	add	r2,r2,r2
10003468:	e13f6104 	addi	r4,fp,-636
1000346c:	2085883a 	add	r2,r4,r2
10003470:	10806f04 	addi	r2,r2,444
10003474:	10800017 	ldw	r2,0(r2)
10003478:	10801904 	addi	r2,r2,100
1000347c:	e0ff6217 	ldw	r3,-632(fp)
10003480:	18803b0e 	bge	r3,r2,10003570 <main+0x2378>
10003484:	e0bf6e0f 	ldh	r2,-584(fp)
10003488:	1085883a 	add	r2,r2,r2
1000348c:	1085883a 	add	r2,r2,r2
10003490:	e17f6104 	addi	r5,fp,-636
10003494:	2885883a 	add	r2,r5,r2
10003498:	10806f04 	addi	r2,r2,444
1000349c:	10c00017 	ldw	r3,0(r2)
100034a0:	e0bf6217 	ldw	r2,-632(fp)
100034a4:	10802804 	addi	r2,r2,160
100034a8:	1880310e 	bge	r3,r2,10003570 <main+0x2378>
100034ac:	e0bf6e0f 	ldh	r2,-584(fp)
100034b0:	1085883a 	add	r2,r2,r2
100034b4:	1085883a 	add	r2,r2,r2
100034b8:	e0ff6104 	addi	r3,fp,-636
100034bc:	1885883a 	add	r2,r3,r2
100034c0:	10807104 	addi	r2,r2,452
100034c4:	10c00017 	ldw	r3,0(r2)
100034c8:	e0bf6317 	ldw	r2,-628(fp)
100034cc:	10803c04 	addi	r2,r2,240
100034d0:	1880270e 	bge	r3,r2,10003570 <main+0x2378>
						live_skull[i_dart] = -1;
100034d4:	e0bf6e0f 	ldh	r2,-584(fp)
100034d8:	1085883a 	add	r2,r2,r2
100034dc:	e13f6104 	addi	r4,fp,-636
100034e0:	2085883a 	add	r2,r4,r2
100034e4:	10807804 	addi	r2,r2,480
100034e8:	00ffffc4 	movi	r3,-1
100034ec:	10c0000d 	sth	r3,0(r2)
						if (status_ninja & 0x02000000){
100034f0:	e0bf6617 	ldw	r2,-616(fp)
100034f4:	1080802c 	andhi	r2,r2,512
100034f8:	10000626 	beq	r2,zero,10003514 <main+0x231c>
							if(spin){
100034fc:	e0bf670f 	ldh	r2,-612(fp)
10003500:	10001b26 	beq	r2,zero,10003570 <main+0x2378>
								life += 5;
10003504:	e0bf6a17 	ldw	r2,-600(fp)
10003508:	10800144 	addi	r2,r2,5
1000350c:	e0bf6a15 	stw	r2,-600(fp)
10003510:	00001706 	br	10003570 <main+0x2378>
							}
						} else {
							hurt_counter = 60;
10003514:	00800f04 	movi	r2,60
10003518:	e0bf6815 	stw	r2,-608(fp)
							air_counter = 30;
1000351c:	00800784 	movi	r2,30
10003520:	e0bf6915 	stw	r2,-604(fp)
							v_y = -v_jump3;
10003524:	e0bf8917 	ldw	r2,-476(fp)
10003528:	0085c83a 	sub	r2,zero,r2
1000352c:	e0bf6515 	stw	r2,-620(fp)
							on_gnd = 0;
10003530:	e03f7205 	stb	zero,-568(fp)
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
10003534:	e0ff6617 	ldw	r3,-616(fp)
10003538:	00b90034 	movhi	r2,58368
1000353c:	10bfffc4 	addi	r2,r2,-1
10003540:	1884703a 	and	r2,r3,r2
10003544:	10820034 	orhi	r2,r2,2048
10003548:	e0bf6615 	stw	r2,-616(fp)
							life_energy_status |= 0x00000080;
1000354c:	e0bf6c17 	ldw	r2,-592(fp)
10003550:	10802014 	ori	r2,r2,128
10003554:	e0bf6c15 	stw	r2,-592(fp)
							life -= 10;
10003558:	e0bf6a17 	ldw	r2,-600(fp)
1000355c:	10bffd84 	addi	r2,r2,-10
10003560:	e0bf6a15 	stw	r2,-600(fp)
							energy += 5;
10003564:	e0bf6b17 	ldw	r2,-596(fp)
10003568:	10800144 	addi	r2,r2,5
1000356c:	e0bf6b15 	stw	r2,-596(fp)
						}
					}
				}
				if (x > x_skull[i_dart]){
10003570:	e0bf6e0f 	ldh	r2,-584(fp)
10003574:	1085883a 	add	r2,r2,r2
10003578:	1085883a 	add	r2,r2,r2
1000357c:	e17f6104 	addi	r5,fp,-636
10003580:	2885883a 	add	r2,r5,r2
10003584:	10806f04 	addi	r2,r2,444
10003588:	10c00017 	ldw	r3,0(r2)
1000358c:	e0bf6217 	ldw	r2,-632(fp)
10003590:	1880180e 	bge	r3,r2,100035f4 <main+0x23fc>
					v_x_skull[i_dart] = v_enemy1;
10003594:	e0bf6e0f 	ldh	r2,-584(fp)
10003598:	e0ff8c17 	ldw	r3,-464(fp)
1000359c:	1085883a 	add	r2,r2,r2
100035a0:	1085883a 	add	r2,r2,r2
100035a4:	e13f6104 	addi	r4,fp,-636
100035a8:	2085883a 	add	r2,r4,r2
100035ac:	10807304 	addi	r2,r2,460
100035b0:	10c00015 	stw	r3,0(r2)
					status_skull[i_dart] |= 0x40000000;
100035b4:	e0bf6e0f 	ldh	r2,-584(fp)
100035b8:	e0ff6e0f 	ldh	r3,-584(fp)
100035bc:	18c7883a 	add	r3,r3,r3
100035c0:	18c7883a 	add	r3,r3,r3
100035c4:	e17f6104 	addi	r5,fp,-636
100035c8:	28c7883a 	add	r3,r5,r3
100035cc:	18c07904 	addi	r3,r3,484
100035d0:	18c00017 	ldw	r3,0(r3)
100035d4:	18d00034 	orhi	r3,r3,16384
100035d8:	1085883a 	add	r2,r2,r2
100035dc:	1085883a 	add	r2,r2,r2
100035e0:	e13f6104 	addi	r4,fp,-636
100035e4:	2085883a 	add	r2,r4,r2
100035e8:	10807904 	addi	r2,r2,484
100035ec:	10c00015 	stw	r3,0(r2)
100035f0:	00001a06 	br	1000365c <main+0x2464>
				} else{
					v_x_skull[i_dart] = -v_enemy1;
100035f4:	e0bf6e0f 	ldh	r2,-584(fp)
100035f8:	e0ff8c17 	ldw	r3,-464(fp)
100035fc:	00c7c83a 	sub	r3,zero,r3
10003600:	1085883a 	add	r2,r2,r2
10003604:	1085883a 	add	r2,r2,r2
10003608:	e17f6104 	addi	r5,fp,-636
1000360c:	2885883a 	add	r2,r5,r2
10003610:	10807304 	addi	r2,r2,460
10003614:	10c00015 	stw	r3,0(r2)
					status_skull[i_dart] &= 0xbfffffff;
10003618:	e0ff6e0f 	ldh	r3,-584(fp)
1000361c:	e0bf6e0f 	ldh	r2,-584(fp)
10003620:	1085883a 	add	r2,r2,r2
10003624:	1085883a 	add	r2,r2,r2
10003628:	e13f6104 	addi	r4,fp,-636
1000362c:	2085883a 	add	r2,r4,r2
10003630:	10807904 	addi	r2,r2,484
10003634:	11000017 	ldw	r4,0(r2)
10003638:	00b00034 	movhi	r2,49152
1000363c:	10bfffc4 	addi	r2,r2,-1
10003640:	2088703a 	and	r4,r4,r2
10003644:	18c5883a 	add	r2,r3,r3
10003648:	1085883a 	add	r2,r2,r2
1000364c:	e17f6104 	addi	r5,fp,-636
10003650:	2885883a 	add	r2,r5,r2
10003654:	10807904 	addi	r2,r2,484
10003658:	11000015 	stw	r4,0(r2)
				}

				if (y > y_skull[i_dart]){
1000365c:	e0bf6e0f 	ldh	r2,-584(fp)
10003660:	1085883a 	add	r2,r2,r2
10003664:	1085883a 	add	r2,r2,r2
10003668:	e0ff6104 	addi	r3,fp,-636
1000366c:	1885883a 	add	r2,r3,r2
10003670:	10807104 	addi	r2,r2,452
10003674:	10c00017 	ldw	r3,0(r2)
10003678:	e0bf6317 	ldw	r2,-628(fp)
1000367c:	1880090e 	bge	r3,r2,100036a4 <main+0x24ac>
					v_y_skull[i_dart] = v_enemy1;
10003680:	e0bf6e0f 	ldh	r2,-584(fp)
10003684:	e0ff8c17 	ldw	r3,-464(fp)
10003688:	1085883a 	add	r2,r2,r2
1000368c:	1085883a 	add	r2,r2,r2
10003690:	e13f6104 	addi	r4,fp,-636
10003694:	2085883a 	add	r2,r4,r2
10003698:	10807504 	addi	r2,r2,468
1000369c:	10c00015 	stw	r3,0(r2)
100036a0:	00000906 	br	100036c8 <main+0x24d0>
				} else{
					v_y_skull[i_dart] = -v_enemy1;
100036a4:	e0bf6e0f 	ldh	r2,-584(fp)
100036a8:	e0ff8c17 	ldw	r3,-464(fp)
100036ac:	00c7c83a 	sub	r3,zero,r3
100036b0:	1085883a 	add	r2,r2,r2
100036b4:	1085883a 	add	r2,r2,r2
100036b8:	e17f6104 	addi	r5,fp,-636
100036bc:	2885883a 	add	r2,r5,r2
100036c0:	10807504 	addi	r2,r2,468
100036c4:	10c00015 	stw	r3,0(r2)
				}
				x_skull[i_dart] += v_x_skull[i_dart];
100036c8:	e0bf6e0f 	ldh	r2,-584(fp)
100036cc:	e0ff6e0f 	ldh	r3,-584(fp)
100036d0:	18c7883a 	add	r3,r3,r3
100036d4:	18c7883a 	add	r3,r3,r3
100036d8:	e13f6104 	addi	r4,fp,-636
100036dc:	20c7883a 	add	r3,r4,r3
100036e0:	18c06f04 	addi	r3,r3,444
100036e4:	19000017 	ldw	r4,0(r3)
100036e8:	e0ff6e0f 	ldh	r3,-584(fp)
100036ec:	18c7883a 	add	r3,r3,r3
100036f0:	18c7883a 	add	r3,r3,r3
100036f4:	e17f6104 	addi	r5,fp,-636
100036f8:	28c7883a 	add	r3,r5,r3
100036fc:	18c07304 	addi	r3,r3,460
10003700:	18c00017 	ldw	r3,0(r3)
10003704:	20c7883a 	add	r3,r4,r3
10003708:	1085883a 	add	r2,r2,r2
1000370c:	1085883a 	add	r2,r2,r2
10003710:	e13f6104 	addi	r4,fp,-636
10003714:	2085883a 	add	r2,r4,r2
10003718:	10806f04 	addi	r2,r2,444
1000371c:	10c00015 	stw	r3,0(r2)
				y_skull[i_dart] += v_y_skull[i_dart];
10003720:	e0bf6e0f 	ldh	r2,-584(fp)
10003724:	e0ff6e0f 	ldh	r3,-584(fp)
10003728:	18c7883a 	add	r3,r3,r3
1000372c:	18c7883a 	add	r3,r3,r3
10003730:	e17f6104 	addi	r5,fp,-636
10003734:	28c7883a 	add	r3,r5,r3
10003738:	18c07104 	addi	r3,r3,452
1000373c:	19000017 	ldw	r4,0(r3)
10003740:	e0ff6e0f 	ldh	r3,-584(fp)
10003744:	18c7883a 	add	r3,r3,r3
10003748:	18c7883a 	add	r3,r3,r3
1000374c:	e17f6104 	addi	r5,fp,-636
10003750:	28c7883a 	add	r3,r5,r3
10003754:	18c07504 	addi	r3,r3,468
10003758:	18c00017 	ldw	r3,0(r3)
1000375c:	20c7883a 	add	r3,r4,r3
10003760:	1085883a 	add	r2,r2,r2
10003764:	1085883a 	add	r2,r2,r2
10003768:	e13f6104 	addi	r4,fp,-636
1000376c:	2085883a 	add	r2,r4,r2
10003770:	10807104 	addi	r2,r2,452
10003774:	10c00015 	stw	r3,0(r2)
				if(live_skull[i_dart] <= 0){
10003778:	e0bf6e0f 	ldh	r2,-584(fp)
1000377c:	1085883a 	add	r2,r2,r2
10003780:	e17f6104 	addi	r5,fp,-636
10003784:	2885883a 	add	r2,r5,r2
10003788:	10807804 	addi	r2,r2,480
1000378c:	1080000b 	ldhu	r2,0(r2)
10003790:	10bfffcc 	andi	r2,r2,65535
10003794:	10a0001c 	xori	r2,r2,32768
10003798:	10a00004 	addi	r2,r2,-32768
1000379c:	00800d16 	blt	zero,r2,100037d4 <main+0x25dc>
					live_skull[i_dart] = 0;
100037a0:	e0bf6e0f 	ldh	r2,-584(fp)
100037a4:	1085883a 	add	r2,r2,r2
100037a8:	e0ff6104 	addi	r3,fp,-636
100037ac:	1885883a 	add	r2,r3,r2
100037b0:	10807804 	addi	r2,r2,480
100037b4:	1000000d 	sth	zero,0(r2)
					status_skull[i_dart] = 0;
100037b8:	e0bf6e0f 	ldh	r2,-584(fp)
100037bc:	1085883a 	add	r2,r2,r2
100037c0:	1085883a 	add	r2,r2,r2
100037c4:	e13f6104 	addi	r4,fp,-636
100037c8:	2085883a 	add	r2,r4,r2
100037cc:	10807904 	addi	r2,r2,484
100037d0:	10000015 	stw	zero,0(r2)
				}
			}
			x_label:;

		}
		for(i_dart = 0; i_dart < 2; i_dart++){
100037d4:	e0bf6e0b 	ldhu	r2,-584(fp)
100037d8:	10800044 	addi	r2,r2,1
100037dc:	e0bf6e0d 	sth	r2,-584(fp)
100037e0:	e0bf6e0f 	ldh	r2,-584(fp)
100037e4:	10800090 	cmplti	r2,r2,2
100037e8:	103e701e 	bne	r2,zero,100031ac <__alt_data_end+0xf80031ac>
					status_skull[i_dart] = 0;
				}
			}
			y_label0:;
		}
		if (life >= 100){
100037ec:	e0bf6a17 	ldw	r2,-600(fp)
100037f0:	10801910 	cmplti	r2,r2,100
100037f4:	1000021e 	bne	r2,zero,10003800 <main+0x2608>
			life = 100;
100037f8:	00801904 	movi	r2,100
100037fc:	e0bf6a15 	stw	r2,-600(fp)
		}
		if (life<= 1){
10003800:	e0bf6a17 	ldw	r2,-600(fp)
10003804:	10800088 	cmpgei	r2,r2,2
10003808:	1000031e 	bne	r2,zero,10003818 <main+0x2620>
			life = 1;
1000380c:	00800044 	movi	r2,1
10003810:	e0bf6a15 	stw	r2,-600(fp)
			goto Dead_label;
10003814:	00077606 	br	100055f0 <main+0x43f8>
		}
		if(cd_dart > 0){
10003818:	e0bf6d07 	ldb	r2,-588(fp)
1000381c:	0080030e 	bge	zero,r2,1000382c <main+0x2634>
			cd_dart--;
10003820:	e0bf6d03 	ldbu	r2,-588(fp)
10003824:	10bfffc4 	addi	r2,r2,-1
10003828:	e0bf6d05 	stb	r2,-588(fp)
		}
		//////////////////////////////////////
		if (!on_gnd){
1000382c:	e0bf7207 	ldb	r2,-568(fp)
10003830:	10000f1e 	bne	r2,zero,10003870 <main+0x2678>
			if (y > ground){
10003834:	e0bf6317 	ldw	r2,-628(fp)
10003838:	e0ff8b17 	ldw	r3,-468(fp)
1000383c:	1880082e 	bgeu	r3,r2,10003860 <main+0x2668>
				if (v_y > 0){
10003840:	e0bf6517 	ldw	r2,-620(fp)
10003844:	0080010e 	bge	zero,r2,1000384c <main+0x2654>
					v_y = 0;
10003848:	e03f6515 	stw	zero,-620(fp)
				}
				y = ground;
1000384c:	e0bf8b17 	ldw	r2,-468(fp)
10003850:	e0bf6315 	stw	r2,-628(fp)
				on_gnd = 1;
10003854:	00800044 	movi	r2,1
10003858:	e0bf7205 	stb	r2,-568(fp)
1000385c:	00000406 	br	10003870 <main+0x2678>
			}
			else{
				v_y += vel_y;
10003860:	e0ff6517 	ldw	r3,-620(fp)
10003864:	e0bf8617 	ldw	r2,-488(fp)
10003868:	1885883a 	add	r2,r3,r2
1000386c:	e0bf6515 	stw	r2,-620(fp)
			}
		}
		if (spin){
10003870:	e0bf670f 	ldh	r2,-612(fp)
10003874:	10000126 	beq	r2,zero,1000387c <main+0x2684>
			v_y = 0;
10003878:	e03f6515 	stw	zero,-620(fp)
		}
		if(air_counter == 0){
1000387c:	e0bf6917 	ldw	r2,-604(fp)
10003880:	10000b1e 	bne	r2,zero,100038b0 <main+0x26b8>
			if (v_x == 0){
10003884:	e0bf6417 	ldw	r2,-624(fp)
10003888:	1000061e 	bne	r2,zero,100038a4 <main+0x26ac>
				status_ninja &= 0xe3ffffff;
1000388c:	e0ff6617 	ldw	r3,-616(fp)
10003890:	00b90034 	movhi	r2,58368
10003894:	10bfffc4 	addi	r2,r2,-1
10003898:	1884703a 	and	r2,r3,r2
1000389c:	e0bf6615 	stw	r2,-616(fp)
100038a0:	00000306 	br	100038b0 <main+0x26b8>
			} else {
				status_ninja |= 0x9c000000;
100038a4:	e0bf6617 	ldw	r2,-616(fp)
100038a8:	10a70034 	orhi	r2,r2,39936
100038ac:	e0bf6615 	stw	r2,-616(fp)
			}
		}
		y += v_y;
100038b0:	e0ff6317 	ldw	r3,-628(fp)
100038b4:	e0bf6517 	ldw	r2,-620(fp)
100038b8:	1885883a 	add	r2,r3,r2
100038bc:	e0bf6315 	stw	r2,-628(fp)
		x += v_x;
100038c0:	e0ff6217 	ldw	r3,-632(fp)
100038c4:	e0bf6417 	ldw	r2,-624(fp)
100038c8:	1885883a 	add	r2,r3,r2
100038cc:	e0bf6215 	stw	r2,-632(fp)
		if (y < 0){
100038d0:	e0bf6317 	ldw	r2,-628(fp)
100038d4:	1000010e 	bge	r2,zero,100038dc <main+0x26e4>
			y = 0;
100038d8:	e03f6315 	stw	zero,-628(fp)
		}
		if (x < 0){
100038dc:	e0bf6217 	ldw	r2,-632(fp)
100038e0:	1000010e 	bge	r2,zero,100038e8 <main+0x26f0>
			x = 0;
100038e4:	e03f6215 	stw	zero,-632(fp)
		}
		if (x >= map_bound){
100038e8:	e0ff6217 	ldw	r3,-632(fp)
100038ec:	e0bf9017 	ldw	r2,-448(fp)
100038f0:	18800536 	bltu	r3,r2,10003908 <main+0x2710>
			x = map_bound;
100038f4:	e0bf9017 	ldw	r2,-448(fp)
100038f8:	e0bf6215 	stw	r2,-632(fp)
			goto Boss_label_pre;
100038fc:	0001883a 	nop
	int x_icear[2];
	int y_icear[2];
	int v_x_icear[2];
	short int live_icear[2];
	unsigned int status_icear[2];
	for (int i = 0; i < 2; i++){
10003900:	e03f7815 	stw	zero,-544(fp)
10003904:	00007d06 	br	10003afc <main+0x2904>
		}
		if (x >= map_bound){
			x = map_bound;
			goto Boss_label_pre;
		}
		if (mapX + left_bound > x){
10003908:	e0ff7117 	ldw	r3,-572(fp)
1000390c:	e0bf9117 	ldw	r2,-444(fp)
10003910:	1885883a 	add	r2,r3,r2
10003914:	e0ff6217 	ldw	r3,-632(fp)
10003918:	1880082e 	bgeu	r3,r2,1000393c <main+0x2744>
			mapX = x - left_bound;
1000391c:	e0ff6217 	ldw	r3,-632(fp)
10003920:	e0bf9117 	ldw	r2,-444(fp)
10003924:	1885c83a 	sub	r2,r3,r2
10003928:	e0bf7115 	stw	r2,-572(fp)
			if (mapX < 0){
1000392c:	e0bf7117 	ldw	r2,-572(fp)
10003930:	1000100e 	bge	r2,zero,10003974 <main+0x277c>
				mapX = 0;
10003934:	e03f7115 	stw	zero,-572(fp)
10003938:	00000e06 	br	10003974 <main+0x277c>
			}
		} else if(mapX + right_bound < x){
1000393c:	e0ff7117 	ldw	r3,-572(fp)
10003940:	e0bf9217 	ldw	r2,-440(fp)
10003944:	1887883a 	add	r3,r3,r2
10003948:	e0bf6217 	ldw	r2,-632(fp)
1000394c:	1880092e 	bgeu	r3,r2,10003974 <main+0x277c>
			mapX = x - right_bound;
10003950:	e0ff6217 	ldw	r3,-632(fp)
10003954:	e0bf9217 	ldw	r2,-440(fp)
10003958:	1885c83a 	sub	r2,r3,r2
1000395c:	e0bf7115 	stw	r2,-572(fp)
			if (mapX > map_bound){
10003960:	e0bf7117 	ldw	r2,-572(fp)
10003964:	e0ff9017 	ldw	r3,-448(fp)
10003968:	1880022e 	bgeu	r3,r2,10003974 <main+0x277c>
				mapX = map_bound;
1000396c:	e0bf9017 	ldw	r2,-448(fp)
10003970:	e0bf7115 	stw	r2,-572(fp)
			}
		}

		if (status_ninja & 0x02000000){
10003974:	e0bf6617 	ldw	r2,-616(fp)
10003978:	1080802c 	andhi	r2,r2,512
1000397c:	10001726 	beq	r2,zero,100039dc <main+0x27e4>
			if (energy <= 1){
10003980:	e0bf6b17 	ldw	r2,-596(fp)
10003984:	10800088 	cmpgei	r2,r2,2
10003988:	10000d1e 	bne	r2,zero,100039c0 <main+0x27c8>
				energy = 1;
1000398c:	00800044 	movi	r2,1
10003990:	e0bf6b15 	stw	r2,-596(fp)
				life_energy_status &= 0xffff7fff;
10003994:	e0ff6c17 	ldw	r3,-592(fp)
10003998:	00bffff4 	movhi	r2,65535
1000399c:	109fffc4 	addi	r2,r2,32767
100039a0:	1884703a 	and	r2,r3,r2
100039a4:	e0bf6c15 	stw	r2,-592(fp)
				status_ninja &= 0xfdffffff;
100039a8:	e0ff6617 	ldw	r3,-616(fp)
100039ac:	00bf8034 	movhi	r2,65024
100039b0:	10bfffc4 	addi	r2,r2,-1
100039b4:	1884703a 	and	r2,r3,r2
100039b8:	e0bf6615 	stw	r2,-616(fp)
100039bc:	00001906 	br	10003a24 <main+0x282c>
			} else if((clock & 0x00000003) == 0){
100039c0:	e0bf6117 	ldw	r2,-636(fp)
100039c4:	108000cc 	andi	r2,r2,3
100039c8:	1000161e 	bne	r2,zero,10003a24 <main+0x282c>
				energy -= 1;
100039cc:	e0bf6b17 	ldw	r2,-596(fp)
100039d0:	10bfffc4 	addi	r2,r2,-1
100039d4:	e0bf6b15 	stw	r2,-596(fp)
100039d8:	00001206 	br	10003a24 <main+0x282c>
			}
		} else if(energy < 80){
100039dc:	e0bf6b17 	ldw	r2,-596(fp)
100039e0:	10801408 	cmpgei	r2,r2,80
100039e4:	1000071e 	bne	r2,zero,10003a04 <main+0x280c>
			if((clock & 0x0000000f) == 0){
100039e8:	e0bf6117 	ldw	r2,-636(fp)
100039ec:	108003cc 	andi	r2,r2,15
100039f0:	10000c1e 	bne	r2,zero,10003a24 <main+0x282c>
				energy += 1;
100039f4:	e0bf6b17 	ldw	r2,-596(fp)
100039f8:	10800044 	addi	r2,r2,1
100039fc:	e0bf6b15 	stw	r2,-596(fp)
10003a00:	00000806 	br	10003a24 <main+0x282c>
			}
		} else if(energy >= 80){
10003a04:	e0bf6b17 	ldw	r2,-596(fp)
10003a08:	10801410 	cmplti	r2,r2,80
10003a0c:	1000051e 	bne	r2,zero,10003a24 <main+0x282c>
			energy = 80;
10003a10:	00801404 	movi	r2,80
10003a14:	e0bf6b15 	stw	r2,-596(fp)
			life_energy_status |= 0x00008000;
10003a18:	e0bf6c17 	ldw	r2,-592(fp)
10003a1c:	10a00014 	ori	r2,r2,32768
10003a20:	e0bf6c15 	stw	r2,-592(fp)
		}

		if (hurt_counter > 0){
10003a24:	e0bf6817 	ldw	r2,-608(fp)
10003a28:	0080040e 	bge	zero,r2,10003a3c <main+0x2844>
			hurt_counter -= 1;
10003a2c:	e0bf6817 	ldw	r2,-608(fp)
10003a30:	10bfffc4 	addi	r2,r2,-1
10003a34:	e0bf6815 	stw	r2,-608(fp)
10003a38:	00000506 	br	10003a50 <main+0x2858>
		} else {
			hurt_counter = 0;
10003a3c:	e03f6815 	stw	zero,-608(fp)
			life_energy_status &= 0xffffff7f;
10003a40:	e0ff6c17 	ldw	r3,-592(fp)
10003a44:	00bfdfc4 	movi	r2,-129
10003a48:	1884703a 	and	r2,r3,r2
10003a4c:	e0bf6c15 	stw	r2,-592(fp)
		}
		if (air_counter > 0){
10003a50:	e0bf6917 	ldw	r2,-604(fp)
10003a54:	0080030e 	bge	zero,r2,10003a64 <main+0x286c>
			air_counter -= 1;
10003a58:	e0bf6917 	ldw	r2,-604(fp)
10003a5c:	10bfffc4 	addi	r2,r2,-1
10003a60:	e0bf6915 	stw	r2,-604(fp)
		}
		if(spin <= 0){
10003a64:	e0bf670f 	ldh	r2,-612(fp)
10003a68:	00800216 	blt	zero,r2,10003a74 <main+0x287c>
			spin = 0;
10003a6c:	e03f670d 	sth	zero,-612(fp)
10003a70:	00000906 	br	10003a98 <main+0x28a0>
		} else {
			spin -= 1;
10003a74:	e0bf670b 	ldhu	r2,-612(fp)
10003a78:	10bfffc4 	addi	r2,r2,-1
10003a7c:	e0bf670d 	sth	r2,-612(fp)
			status_ninja = (status_ninja | 0x04000000) & 0xe7ffffff;
10003a80:	e0ff6617 	ldw	r3,-616(fp)
10003a84:	00b90034 	movhi	r2,58368
10003a88:	10bfffc4 	addi	r2,r2,-1
10003a8c:	1884703a 	and	r2,r3,r2
10003a90:	10810034 	orhi	r2,r2,1024
10003a94:	e0bf6615 	stw	r2,-616(fp)
		}
		if(spin_cd <= 0){
10003a98:	e0bf678f 	ldh	r2,-610(fp)
10003a9c:	00800216 	blt	zero,r2,10003aa8 <main+0x28b0>
			spin_cd = 0;
10003aa0:	e03f678d 	sth	zero,-610(fp)
10003aa4:	0036df06 	br	10001624 <__alt_data_end+0xf8001624>
		} else {
			spin_cd -= 1;
10003aa8:	e0bf678b 	ldhu	r2,-610(fp)
10003aac:	10bfffc4 	addi	r2,r2,-1
10003ab0:	e0bf678d 	sth	r2,-610(fp)
		}

	}
10003ab4:	0036db06 	br	10001624 <__alt_data_end+0xf8001624>
	int y_icear[2];
	int v_x_icear[2];
	short int live_icear[2];
	unsigned int status_icear[2];
	for (int i = 0; i < 2; i++){
		status_iceball[i] = 0;
10003ab8:	e0bf7817 	ldw	r2,-544(fp)
10003abc:	1085883a 	add	r2,r2,r2
10003ac0:	1085883a 	add	r2,r2,r2
10003ac4:	e17f6104 	addi	r5,fp,-636
10003ac8:	2885883a 	add	r2,r5,r2
10003acc:	10809404 	addi	r2,r2,592
10003ad0:	10000015 	stw	zero,0(r2)
		status_icear[i] = 0;
10003ad4:	e0bf7817 	ldw	r2,-544(fp)
10003ad8:	1085883a 	add	r2,r2,r2
10003adc:	1085883a 	add	r2,r2,r2
10003ae0:	e0ff6104 	addi	r3,fp,-636
10003ae4:	1885883a 	add	r2,r3,r2
10003ae8:	10809d04 	addi	r2,r2,628
10003aec:	10000015 	stw	zero,0(r2)
	int x_icear[2];
	int y_icear[2];
	int v_x_icear[2];
	short int live_icear[2];
	unsigned int status_icear[2];
	for (int i = 0; i < 2; i++){
10003af0:	e0bf7817 	ldw	r2,-544(fp)
10003af4:	10800044 	addi	r2,r2,1
10003af8:	e0bf7815 	stw	r2,-544(fp)
10003afc:	e0bf7817 	ldw	r2,-544(fp)
10003b00:	10800090 	cmplti	r2,r2,2
10003b04:	103fec1e 	bne	r2,zero,10003ab8 <__alt_data_end+0xf8003ab8>
		status_iceball[i] = 0;
		status_icear[i] = 0;
	}
	for (int i = 0; i < 4; i++){
10003b08:	e03f7915 	stw	zero,-540(fp)
10003b0c:	00000a06 	br	10003b38 <main+0x2940>
		status_fireball[i] = 0;
10003b10:	e0bf7917 	ldw	r2,-540(fp)
10003b14:	1085883a 	add	r2,r2,r2
10003b18:	1085883a 	add	r2,r2,r2
10003b1c:	e13f6104 	addi	r4,fp,-636
10003b20:	2085883a 	add	r2,r4,r2
10003b24:	10808304 	addi	r2,r2,524
10003b28:	10000015 	stw	zero,0(r2)
	unsigned int status_icear[2];
	for (int i = 0; i < 2; i++){
		status_iceball[i] = 0;
		status_icear[i] = 0;
	}
	for (int i = 0; i < 4; i++){
10003b2c:	e0bf7917 	ldw	r2,-540(fp)
10003b30:	10800044 	addi	r2,r2,1
10003b34:	e0bf7915 	stw	r2,-540(fp)
10003b38:	e0bf7917 	ldw	r2,-540(fp)
10003b3c:	10800110 	cmplti	r2,r2,4
10003b40:	103ff31e 	bne	r2,zero,10003b10 <__alt_data_end+0xf8003b10>
		status_fireball[i] = 0;
	}
	mapX = map_bound;
10003b44:	e0bf9017 	ldw	r2,-448(fp)
10003b48:	e0bf7115 	stw	r2,-572(fp)
	reg_ptr[18] = 0;
10003b4c:	d0a00017 	ldw	r2,-32768(gp)
10003b50:	10801204 	addi	r2,r2,72
10003b54:	10000015 	stw	zero,0(r2)
	reg_ptr[19] = 0;
10003b58:	d0a00017 	ldw	r2,-32768(gp)
10003b5c:	10801304 	addi	r2,r2,76
10003b60:	10000015 	stw	zero,0(r2)
	reg_ptr[20] = 0;
10003b64:	d0a00017 	ldw	r2,-32768(gp)
10003b68:	10801404 	addi	r2,r2,80
10003b6c:	10000015 	stw	zero,0(r2)
	reg_ptr[21] = 0;
10003b70:	d0a00017 	ldw	r2,-32768(gp)
10003b74:	10801504 	addi	r2,r2,84
10003b78:	10000015 	stw	zero,0(r2)
	reg_ptr[22] = 0;
10003b7c:	d0a00017 	ldw	r2,-32768(gp)
10003b80:	10801604 	addi	r2,r2,88
10003b84:	10000015 	stw	zero,0(r2)
	reg_ptr[23] = 0;
10003b88:	d0a00017 	ldw	r2,-32768(gp)
10003b8c:	10801704 	addi	r2,r2,92
10003b90:	10000015 	stw	zero,0(r2)
	reg_ptr[37] = 0;
10003b94:	d0a00017 	ldw	r2,-32768(gp)
10003b98:	10802504 	addi	r2,r2,148
10003b9c:	10000015 	stw	zero,0(r2)
	reg_ptr[38] = 0;
10003ba0:	d0a00017 	ldw	r2,-32768(gp)
10003ba4:	10802604 	addi	r2,r2,152
10003ba8:	10000015 	stw	zero,0(r2)
	reg_ptr[39] = 0;
10003bac:	d0a00017 	ldw	r2,-32768(gp)
10003bb0:	10802704 	addi	r2,r2,156
10003bb4:	10000015 	stw	zero,0(r2)
	reg_ptr[40] = 0;
10003bb8:	d0a00017 	ldw	r2,-32768(gp)
10003bbc:	10802804 	addi	r2,r2,160
10003bc0:	10000015 	stw	zero,0(r2)
	reg_ptr[33] = 0;
10003bc4:	d0a00017 	ldw	r2,-32768(gp)
10003bc8:	10802104 	addi	r2,r2,132
10003bcc:	10000015 	stw	zero,0(r2)
	reg_ptr[34] = 0;
10003bd0:	d0a00017 	ldw	r2,-32768(gp)
10003bd4:	10802204 	addi	r2,r2,136
10003bd8:	10000015 	stw	zero,0(r2)
	reg_ptr[35] = 0;
10003bdc:	d0a00017 	ldw	r2,-32768(gp)
10003be0:	10802304 	addi	r2,r2,140
10003be4:	10000015 	stw	zero,0(r2)
	reg_ptr[36] = 0;
10003be8:	d0a00017 	ldw	r2,-32768(gp)
10003bec:	10802404 	addi	r2,r2,144
10003bf0:	10000015 	stw	zero,0(r2)
	reg_ptr[10] = 0;
10003bf4:	d0a00017 	ldw	r2,-32768(gp)
10003bf8:	10800a04 	addi	r2,r2,40
10003bfc:	10000015 	stw	zero,0(r2)
	reg_ptr[11] = 0;
10003c00:	d0a00017 	ldw	r2,-32768(gp)
10003c04:	10800b04 	addi	r2,r2,44
10003c08:	10000015 	stw	zero,0(r2)
	reg_ptr[12] = 0;
10003c0c:	d0a00017 	ldw	r2,-32768(gp)
10003c10:	10800c04 	addi	r2,r2,48
10003c14:	10000015 	stw	zero,0(r2)
	reg_ptr[13] = 0;
10003c18:	d0a00017 	ldw	r2,-32768(gp)
10003c1c:	10800d04 	addi	r2,r2,52
10003c20:	10000015 	stw	zero,0(r2)
	reg_ptr[25] = 0;
10003c24:	d0a00017 	ldw	r2,-32768(gp)
10003c28:	10801904 	addi	r2,r2,100
10003c2c:	10000015 	stw	zero,0(r2)
	reg_ptr[26] = 0;
10003c30:	d0a00017 	ldw	r2,-32768(gp)
10003c34:	10801a04 	addi	r2,r2,104
10003c38:	10000015 	stw	zero,0(r2)
	reg_ptr[27] = 0;
10003c3c:	d0a00017 	ldw	r2,-32768(gp)
10003c40:	10801b04 	addi	r2,r2,108
10003c44:	10000015 	stw	zero,0(r2)
	reg_ptr[28] = 0;
10003c48:	d0a00017 	ldw	r2,-32768(gp)
10003c4c:	10801c04 	addi	r2,r2,112
10003c50:	10000015 	stw	zero,0(r2)

	y = ground;
10003c54:	e0bf8b17 	ldw	r2,-468(fp)
10003c58:	e0bf6315 	stw	r2,-628(fp)
	x = map_bound + 40;
10003c5c:	e0bf9017 	ldw	r2,-448(fp)
10003c60:	10800a04 	addi	r2,r2,40
10003c64:	e0bf6215 	stw	r2,-632(fp)
	status_ninja = 0xd0000000;
10003c68:	00b40034 	movhi	r2,53248
10003c6c:	e0bf6615 	stw	r2,-616(fp)
	unsigned int campfire_status = 0;
10003c70:	e03f7a15 	stw	zero,-536(fp)
	int boss_countdown = 270;
10003c74:	00804384 	movi	r2,270
10003c78:	e0bf7b15 	stw	r2,-532(fp)
	int x_boss = 2560 + 320 - 1;
10003c7c:	0082cfc4 	movi	r2,2879
10003c80:	e0bf7c15 	stw	r2,-528(fp)
	int status_boss = 0;
10003c84:	e03f7d15 	stw	zero,-524(fp)
	while(1){
		clock += 1;
10003c88:	e0bf6117 	ldw	r2,-636(fp)
10003c8c:	10800044 	addi	r2,r2,1
10003c90:	e0bf6115 	stw	r2,-636(fp)
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
10003c94:	0001883a 	nop
10003c98:	d0a00017 	ldw	r2,-32768(gp)
10003c9c:	10803f04 	addi	r2,r2,252
10003ca0:	10800017 	ldw	r2,0(r2)
10003ca4:	103ffc26 	beq	r2,zero,10003c98 <__alt_data_end+0xf8003c98>
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");

		reg_ptr[0] = 2560 | 0x00020000;
10003ca8:	d0e00017 	ldw	r3,-32768(gp)
10003cac:	008000b4 	movhi	r2,2
10003cb0:	10828004 	addi	r2,r2,2560
10003cb4:	18800015 	stw	r2,0(r3)
		reg_ptr[1] = (life + (energy << 8)) | life_energy_status;
10003cb8:	d0a00017 	ldw	r2,-32768(gp)
10003cbc:	10800104 	addi	r2,r2,4
10003cc0:	e0ff6b17 	ldw	r3,-596(fp)
10003cc4:	1808923a 	slli	r4,r3,8
10003cc8:	e0ff6a17 	ldw	r3,-600(fp)
10003ccc:	20c7883a 	add	r3,r4,r3
10003cd0:	1809883a 	mov	r4,r3
10003cd4:	e0ff6c17 	ldw	r3,-592(fp)
10003cd8:	20c6b03a 	or	r3,r4,r3
10003cdc:	10c00015 	stw	r3,0(r2)
		reg_ptr[2] = (((y_dart[0]>>3) << 16) + (x_dart[0]>>3)) | status_dart[0];
10003ce0:	d0a00017 	ldw	r2,-32768(gp)
10003ce4:	10800204 	addi	r2,r2,8
10003ce8:	e0ff9917 	ldw	r3,-412(fp)
10003cec:	1807d0fa 	srai	r3,r3,3
10003cf0:	1808943a 	slli	r4,r3,16
10003cf4:	e0ff9517 	ldw	r3,-428(fp)
10003cf8:	1807d0fa 	srai	r3,r3,3
10003cfc:	20c7883a 	add	r3,r4,r3
10003d00:	1809883a 	mov	r4,r3
10003d04:	e0ffa217 	ldw	r3,-376(fp)
10003d08:	20c6b03a 	or	r3,r4,r3
10003d0c:	10c00015 	stw	r3,0(r2)
		reg_ptr[3] = (((y_dart[1]>>3) << 16) + (x_dart[1]>>3)) | status_dart[1];
10003d10:	d0a00017 	ldw	r2,-32768(gp)
10003d14:	10800304 	addi	r2,r2,12
10003d18:	e0ff9a17 	ldw	r3,-408(fp)
10003d1c:	1807d0fa 	srai	r3,r3,3
10003d20:	1808943a 	slli	r4,r3,16
10003d24:	e0ff9617 	ldw	r3,-424(fp)
10003d28:	1807d0fa 	srai	r3,r3,3
10003d2c:	20c7883a 	add	r3,r4,r3
10003d30:	1809883a 	mov	r4,r3
10003d34:	e0ffa317 	ldw	r3,-372(fp)
10003d38:	20c6b03a 	or	r3,r4,r3
10003d3c:	10c00015 	stw	r3,0(r2)
		reg_ptr[4] = (((y_dart[2]>>3) << 16) + (x_dart[2]>>3)) | status_dart[2];
10003d40:	d0a00017 	ldw	r2,-32768(gp)
10003d44:	10800404 	addi	r2,r2,16
10003d48:	e0ff9b17 	ldw	r3,-404(fp)
10003d4c:	1807d0fa 	srai	r3,r3,3
10003d50:	1808943a 	slli	r4,r3,16
10003d54:	e0ff9717 	ldw	r3,-420(fp)
10003d58:	1807d0fa 	srai	r3,r3,3
10003d5c:	20c7883a 	add	r3,r4,r3
10003d60:	1809883a 	mov	r4,r3
10003d64:	e0ffa417 	ldw	r3,-368(fp)
10003d68:	20c6b03a 	or	r3,r4,r3
10003d6c:	10c00015 	stw	r3,0(r2)
		reg_ptr[5] = (((y_dart[3]>>3) << 16) + (x_dart[3]>>3)) | status_dart[3];
10003d70:	d0a00017 	ldw	r2,-32768(gp)
10003d74:	10800504 	addi	r2,r2,20
10003d78:	e0ff9c17 	ldw	r3,-400(fp)
10003d7c:	1807d0fa 	srai	r3,r3,3
10003d80:	1808943a 	slli	r4,r3,16
10003d84:	e0ff9817 	ldw	r3,-416(fp)
10003d88:	1807d0fa 	srai	r3,r3,3
10003d8c:	20c7883a 	add	r3,r4,r3
10003d90:	1809883a 	mov	r4,r3
10003d94:	e0ffa517 	ldw	r3,-364(fp)
10003d98:	20c6b03a 	or	r3,r4,r3
10003d9c:	10c00015 	stw	r3,0(r2)
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
10003da0:	d0a00017 	ldw	r2,-32768(gp)
10003da4:	10802004 	addi	r2,r2,128
10003da8:	e0ff6317 	ldw	r3,-628(fp)
10003dac:	1807d0fa 	srai	r3,r3,3
10003db0:	1808943a 	slli	r4,r3,16
10003db4:	e0ff6217 	ldw	r3,-632(fp)
10003db8:	1807d0fa 	srai	r3,r3,3
10003dbc:	20c7883a 	add	r3,r4,r3
10003dc0:	1809883a 	mov	r4,r3
10003dc4:	e0ff6617 	ldw	r3,-616(fp)
10003dc8:	20c6b03a 	or	r3,r4,r3
10003dcc:	10c00015 	stw	r3,0(r2)
		reg_ptr[41] = (0x00b00000 ^ 2660) | campfire_status;
10003dd0:	d0a00017 	ldw	r2,-32768(gp)
10003dd4:	10c02904 	addi	r3,r2,164
10003dd8:	e13f7a17 	ldw	r4,-536(fp)
10003ddc:	00802c34 	movhi	r2,176
10003de0:	10829904 	addi	r2,r2,2660
10003de4:	2084b03a 	or	r2,r4,r2
10003de8:	18800015 	stw	r2,0(r3)
		reg_ptr[42] = (0x00c40000 ^ 2650) | 0x80000000;
10003dec:	d0a00017 	ldw	r2,-32768(gp)
10003df0:	10c02a04 	addi	r3,r2,168
10003df4:	00a03134 	movhi	r2,32964
10003df8:	10829684 	addi	r2,r2,2650
10003dfc:	18800015 	stw	r2,0(r3)
		reg_ptr[47] = x_boss | status_boss;
10003e00:	d0a00017 	ldw	r2,-32768(gp)
10003e04:	10802f04 	addi	r2,r2,188
10003e08:	e13f7c17 	ldw	r4,-528(fp)
10003e0c:	e0ff7d17 	ldw	r3,-524(fp)
10003e10:	20c6b03a 	or	r3,r4,r3
10003e14:	10c00015 	stw	r3,0(r2)
		reg_ptr[62] = 1;
10003e18:	d0a00017 	ldw	r2,-32768(gp)
10003e1c:	10803e04 	addi	r2,r2,248
10003e20:	00c00044 	movi	r3,1
10003e24:	10c00015 	stw	r3,0(r2)
		key_char = getkeys(keycodes);
10003e28:	e0bf9384 	addi	r2,fp,-434
10003e2c:	1009883a 	mov	r4,r2
10003e30:	00010340 	call	10001034 <getkeys>
10003e34:	e0bf9305 	stb	r2,-436(fp)
		reg_ptr[62] = 0;
10003e38:	d0a00017 	ldw	r2,-32768(gp)
10003e3c:	10803e04 	addi	r2,r2,248
10003e40:	10000015 	stw	zero,0(r2)
		if ((key_char & 0x04) && campfire_status != 0x80000000){
10003e44:	e0bf9303 	ldbu	r2,-436(fp)
10003e48:	10803fcc 	andi	r2,r2,255
10003e4c:	1080010c 	andi	r2,r2,4
10003e50:	10000d26 	beq	r2,zero,10003e88 <main+0x2c90>
10003e54:	e0ff7a17 	ldw	r3,-536(fp)
10003e58:	00a00034 	movhi	r2,32768
10003e5c:	18800a26 	beq	r3,r2,10003e88 <main+0x2c90>
			campfire_status = 0x80000000;
10003e60:	00a00034 	movhi	r2,32768
10003e64:	e0bf7a15 	stw	r2,-536(fp)
			boss_countdown = 540;
10003e68:	00808704 	movi	r2,540
10003e6c:	e0bf7b15 	stw	r2,-532(fp)
			status_boss = 0x80000000;
10003e70:	00a00034 	movhi	r2,32768
10003e74:	e0bf7d15 	stw	r2,-524(fp)
			life = 100;
10003e78:	00801904 	movi	r2,100
10003e7c:	e0bf6a15 	stw	r2,-600(fp)
			energy = 60;
10003e80:	00800f04 	movi	r2,60
10003e84:	e0bf6b15 	stw	r2,-596(fp)
		}
		if (boss_countdown > 0){
10003e88:	e0bf7b17 	ldw	r2,-532(fp)
10003e8c:	0080090e 	bge	zero,r2,10003eb4 <main+0x2cbc>
			boss_countdown -= 1;
10003e90:	e0bf7b17 	ldw	r2,-532(fp)
10003e94:	10bfffc4 	addi	r2,r2,-1
10003e98:	e0bf7b15 	stw	r2,-532(fp)
			x_boss = boss_countdown / 2 + 50 + 2560;
10003e9c:	e0bf7b17 	ldw	r2,-532(fp)
10003ea0:	1006d7fa 	srli	r3,r2,31
10003ea4:	1885883a 	add	r2,r3,r2
10003ea8:	1005d07a 	srai	r2,r2,1
10003eac:	10828c84 	addi	r2,r2,2610
10003eb0:	e0bf7c15 	stw	r2,-528(fp)
		}
		if (boss_countdown <= 0){
10003eb4:	e0bf7b17 	ldw	r2,-532(fp)
10003eb8:	00bf7316 	blt	zero,r2,10003c88 <__alt_data_end+0xf8003c88>
			x_boss = 2610;
10003ebc:	00828c84 	movi	r2,2610
10003ec0:	e0bf7c15 	stw	r2,-528(fp)
			status_boss = 0x80000000;
10003ec4:	00a00034 	movhi	r2,32768
10003ec8:	e0bf7d15 	stw	r2,-524(fp)
			goto Boss_label;
10003ecc:	0001883a 	nop
		}
	}

	Boss_label : ;
	hurt_counter = 0;
10003ed0:	e03f6815 	stw	zero,-608(fp)
	air_counter = 0;
10003ed4:	e03f6915 	stw	zero,-604(fp)
	x_boss = 2610;
10003ed8:	00828c84 	movi	r2,2610
10003edc:	e0bf7c15 	stw	r2,-528(fp)
	status_boss = 0x80000000;
10003ee0:	00a00034 	movhi	r2,32768
10003ee4:	e0bf7d15 	stw	r2,-524(fp)
	int boss_life = 20;
10003ee8:	00800504 	movi	r2,20
10003eec:	e0bf7e15 	stw	r2,-520(fp)
	clock = 0;
10003ef0:	e03f6115 	stw	zero,-636(fp)
	mapX = 20480;
10003ef4:	00940004 	movi	r2,20480
10003ef8:	e0bf7115 	stw	r2,-572(fp)
	x = 20480 + 320;
10003efc:	00945004 	movi	r2,20800
10003f00:	e0bf6215 	stw	r2,-632(fp)
	while(1){
		clock += 1;
10003f04:	e0bf6117 	ldw	r2,-636(fp)
10003f08:	10800044 	addi	r2,r2,1
10003f0c:	e0bf6115 	stw	r2,-636(fp)
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
10003f10:	0001883a 	nop
10003f14:	d0a00017 	ldw	r2,-32768(gp)
10003f18:	10803f04 	addi	r2,r2,252
10003f1c:	10800017 	ldw	r2,0(r2)
10003f20:	103ffc26 	beq	r2,zero,10003f14 <__alt_data_end+0xf8003f14>
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = 2560 | 0x00020000;
10003f24:	d0e00017 	ldw	r3,-32768(gp)
10003f28:	008000b4 	movhi	r2,2
10003f2c:	10828004 	addi	r2,r2,2560
10003f30:	18800015 	stw	r2,0(r3)
		reg_ptr[1] = (life + (energy << 8)) | life_energy_status;
10003f34:	d0a00017 	ldw	r2,-32768(gp)
10003f38:	10800104 	addi	r2,r2,4
10003f3c:	e0ff6b17 	ldw	r3,-596(fp)
10003f40:	1808923a 	slli	r4,r3,8
10003f44:	e0ff6a17 	ldw	r3,-600(fp)
10003f48:	20c7883a 	add	r3,r4,r3
10003f4c:	1809883a 	mov	r4,r3
10003f50:	e0ff6c17 	ldw	r3,-592(fp)
10003f54:	20c6b03a 	or	r3,r4,r3
10003f58:	10c00015 	stw	r3,0(r2)
		reg_ptr[2] = (((y_dart[0]>>3) << 16) + (x_dart[0]>>3)) | status_dart[0];
10003f5c:	d0a00017 	ldw	r2,-32768(gp)
10003f60:	10800204 	addi	r2,r2,8
10003f64:	e0ff9917 	ldw	r3,-412(fp)
10003f68:	1807d0fa 	srai	r3,r3,3
10003f6c:	1808943a 	slli	r4,r3,16
10003f70:	e0ff9517 	ldw	r3,-428(fp)
10003f74:	1807d0fa 	srai	r3,r3,3
10003f78:	20c7883a 	add	r3,r4,r3
10003f7c:	1809883a 	mov	r4,r3
10003f80:	e0ffa217 	ldw	r3,-376(fp)
10003f84:	20c6b03a 	or	r3,r4,r3
10003f88:	10c00015 	stw	r3,0(r2)
		reg_ptr[3] = (((y_dart[1]>>3) << 16) + (x_dart[1]>>3)) | status_dart[1];
10003f8c:	d0a00017 	ldw	r2,-32768(gp)
10003f90:	10800304 	addi	r2,r2,12
10003f94:	e0ff9a17 	ldw	r3,-408(fp)
10003f98:	1807d0fa 	srai	r3,r3,3
10003f9c:	1808943a 	slli	r4,r3,16
10003fa0:	e0ff9617 	ldw	r3,-424(fp)
10003fa4:	1807d0fa 	srai	r3,r3,3
10003fa8:	20c7883a 	add	r3,r4,r3
10003fac:	1809883a 	mov	r4,r3
10003fb0:	e0ffa317 	ldw	r3,-372(fp)
10003fb4:	20c6b03a 	or	r3,r4,r3
10003fb8:	10c00015 	stw	r3,0(r2)
		reg_ptr[4] = (((y_dart[2]>>3) << 16) + (x_dart[2]>>3)) | status_dart[2];
10003fbc:	d0a00017 	ldw	r2,-32768(gp)
10003fc0:	10800404 	addi	r2,r2,16
10003fc4:	e0ff9b17 	ldw	r3,-404(fp)
10003fc8:	1807d0fa 	srai	r3,r3,3
10003fcc:	1808943a 	slli	r4,r3,16
10003fd0:	e0ff9717 	ldw	r3,-420(fp)
10003fd4:	1807d0fa 	srai	r3,r3,3
10003fd8:	20c7883a 	add	r3,r4,r3
10003fdc:	1809883a 	mov	r4,r3
10003fe0:	e0ffa417 	ldw	r3,-368(fp)
10003fe4:	20c6b03a 	or	r3,r4,r3
10003fe8:	10c00015 	stw	r3,0(r2)
		reg_ptr[5] = (((y_dart[3]>>3) << 16) + (x_dart[3]>>3)) | status_dart[3];
10003fec:	d0a00017 	ldw	r2,-32768(gp)
10003ff0:	10800504 	addi	r2,r2,20
10003ff4:	e0ff9c17 	ldw	r3,-400(fp)
10003ff8:	1807d0fa 	srai	r3,r3,3
10003ffc:	1808943a 	slli	r4,r3,16
10004000:	e0ff9817 	ldw	r3,-416(fp)
10004004:	1807d0fa 	srai	r3,r3,3
10004008:	20c7883a 	add	r3,r4,r3
1000400c:	1809883a 	mov	r4,r3
10004010:	e0ffa517 	ldw	r3,-364(fp)
10004014:	20c6b03a 	or	r3,r4,r3
10004018:	10c00015 	stw	r3,0(r2)
		reg_ptr[10] = (((y_iceball[0]>>3) << 16) + (x_iceball[0]>>3)) | status_iceball[0];
1000401c:	d0a00017 	ldw	r2,-32768(gp)
10004020:	10800a04 	addi	r2,r2,40
10004024:	e0ffee17 	ldw	r3,-72(fp)
10004028:	1807d0fa 	srai	r3,r3,3
1000402c:	1808943a 	slli	r4,r3,16
10004030:	e0ffec17 	ldw	r3,-80(fp)
10004034:	1807d0fa 	srai	r3,r3,3
10004038:	20c7883a 	add	r3,r4,r3
1000403c:	1809883a 	mov	r4,r3
10004040:	e0fff517 	ldw	r3,-44(fp)
10004044:	20c6b03a 	or	r3,r4,r3
10004048:	10c00015 	stw	r3,0(r2)
		reg_ptr[11] = (((y_iceball[1]>>3) << 16) + (x_iceball[1]>>3)) | status_iceball[1];
1000404c:	d0a00017 	ldw	r2,-32768(gp)
10004050:	10800b04 	addi	r2,r2,44
10004054:	e0ffef17 	ldw	r3,-68(fp)
10004058:	1807d0fa 	srai	r3,r3,3
1000405c:	1808943a 	slli	r4,r3,16
10004060:	e0ffed17 	ldw	r3,-76(fp)
10004064:	1807d0fa 	srai	r3,r3,3
10004068:	20c7883a 	add	r3,r4,r3
1000406c:	1809883a 	mov	r4,r3
10004070:	e0fff617 	ldw	r3,-40(fp)
10004074:	20c6b03a 	or	r3,r4,r3
10004078:	10c00015 	stw	r3,0(r2)
		reg_ptr[12] = (((y_icear[0]>>3) << 16) + (x_icear[0]>>3)) | status_icear[0];
1000407c:	d0a00017 	ldw	r2,-32768(gp)
10004080:	10800c04 	addi	r2,r2,48
10004084:	e0fff917 	ldw	r3,-28(fp)
10004088:	1807d0fa 	srai	r3,r3,3
1000408c:	1808943a 	slli	r4,r3,16
10004090:	e0fff717 	ldw	r3,-36(fp)
10004094:	1807d0fa 	srai	r3,r3,3
10004098:	20c7883a 	add	r3,r4,r3
1000409c:	1809883a 	mov	r4,r3
100040a0:	e0fffe17 	ldw	r3,-8(fp)
100040a4:	20c6b03a 	or	r3,r4,r3
100040a8:	10c00015 	stw	r3,0(r2)
		reg_ptr[13] = (((y_icear[1]>>3) << 16) + (x_icear[1]>>3)) | status_icear[1];
100040ac:	d0a00017 	ldw	r2,-32768(gp)
100040b0:	10800d04 	addi	r2,r2,52
100040b4:	e0fffa17 	ldw	r3,-24(fp)
100040b8:	1807d0fa 	srai	r3,r3,3
100040bc:	1808943a 	slli	r4,r3,16
100040c0:	e0fff817 	ldw	r3,-32(fp)
100040c4:	1807d0fa 	srai	r3,r3,3
100040c8:	20c7883a 	add	r3,r4,r3
100040cc:	1809883a 	mov	r4,r3
100040d0:	e0ffff17 	ldw	r3,-4(fp)
100040d4:	20c6b03a 	or	r3,r4,r3
100040d8:	10c00015 	stw	r3,0(r2)

		reg_ptr[25] = (((y_fireball[0]>>3) << 16) + (x_fireball[0]>>3)) | status_fireball[0];
100040dc:	d0a00017 	ldw	r2,-32768(gp)
100040e0:	10801904 	addi	r2,r2,100
100040e4:	e0ffe017 	ldw	r3,-128(fp)
100040e8:	1807d0fa 	srai	r3,r3,3
100040ec:	1808943a 	slli	r4,r3,16
100040f0:	e0ffdc17 	ldw	r3,-144(fp)
100040f4:	1807d0fa 	srai	r3,r3,3
100040f8:	20c7883a 	add	r3,r4,r3
100040fc:	1809883a 	mov	r4,r3
10004100:	e0ffe417 	ldw	r3,-112(fp)
10004104:	20c6b03a 	or	r3,r4,r3
10004108:	10c00015 	stw	r3,0(r2)
		reg_ptr[26] = (((y_fireball[1]>>3) << 16) + (x_fireball[1]>>3)) | status_fireball[1];
1000410c:	d0a00017 	ldw	r2,-32768(gp)
10004110:	10801a04 	addi	r2,r2,104
10004114:	e0ffe117 	ldw	r3,-124(fp)
10004118:	1807d0fa 	srai	r3,r3,3
1000411c:	1808943a 	slli	r4,r3,16
10004120:	e0ffdd17 	ldw	r3,-140(fp)
10004124:	1807d0fa 	srai	r3,r3,3
10004128:	20c7883a 	add	r3,r4,r3
1000412c:	1809883a 	mov	r4,r3
10004130:	e0ffe517 	ldw	r3,-108(fp)
10004134:	20c6b03a 	or	r3,r4,r3
10004138:	10c00015 	stw	r3,0(r2)
		reg_ptr[27] = (((y_fireball[2]>>3) << 16) + (x_fireball[2]>>3)) | status_fireball[2];
1000413c:	d0a00017 	ldw	r2,-32768(gp)
10004140:	10801b04 	addi	r2,r2,108
10004144:	e0ffe217 	ldw	r3,-120(fp)
10004148:	1807d0fa 	srai	r3,r3,3
1000414c:	1808943a 	slli	r4,r3,16
10004150:	e0ffde17 	ldw	r3,-136(fp)
10004154:	1807d0fa 	srai	r3,r3,3
10004158:	20c7883a 	add	r3,r4,r3
1000415c:	1809883a 	mov	r4,r3
10004160:	e0ffe617 	ldw	r3,-104(fp)
10004164:	20c6b03a 	or	r3,r4,r3
10004168:	10c00015 	stw	r3,0(r2)
		reg_ptr[28] = (((y_fireball[3]>>3) << 16) + (x_fireball[3]>>3)) | status_fireball[3];
1000416c:	d0a00017 	ldw	r2,-32768(gp)
10004170:	10801c04 	addi	r2,r2,112
10004174:	e0ffe317 	ldw	r3,-116(fp)
10004178:	1807d0fa 	srai	r3,r3,3
1000417c:	1808943a 	slli	r4,r3,16
10004180:	e0ffdf17 	ldw	r3,-132(fp)
10004184:	1807d0fa 	srai	r3,r3,3
10004188:	20c7883a 	add	r3,r4,r3
1000418c:	1809883a 	mov	r4,r3
10004190:	e0ffe717 	ldw	r3,-100(fp)
10004194:	20c6b03a 	or	r3,r4,r3
10004198:	10c00015 	stw	r3,0(r2)

		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
1000419c:	d0a00017 	ldw	r2,-32768(gp)
100041a0:	10802004 	addi	r2,r2,128
100041a4:	e0ff6317 	ldw	r3,-628(fp)
100041a8:	1807d0fa 	srai	r3,r3,3
100041ac:	1808943a 	slli	r4,r3,16
100041b0:	e0ff6217 	ldw	r3,-632(fp)
100041b4:	1807d0fa 	srai	r3,r3,3
100041b8:	20c7883a 	add	r3,r4,r3
100041bc:	1809883a 	mov	r4,r3
100041c0:	e0ff6617 	ldw	r3,-616(fp)
100041c4:	20c6b03a 	or	r3,r4,r3
100041c8:	10c00015 	stw	r3,0(r2)
		reg_ptr[41] = (0x00b00000 ^ 2660) | 0x80000000;
100041cc:	d0a00017 	ldw	r2,-32768(gp)
100041d0:	10c02904 	addi	r3,r2,164
100041d4:	00a02c34 	movhi	r2,32944
100041d8:	10829904 	addi	r2,r2,2660
100041dc:	18800015 	stw	r2,0(r3)
		reg_ptr[42] = (0x00c40000 ^ 2650) | 0x80000000;
100041e0:	d0a00017 	ldw	r2,-32768(gp)
100041e4:	10c02a04 	addi	r3,r2,168
100041e8:	00a03134 	movhi	r2,32964
100041ec:	10829684 	addi	r2,r2,2650
100041f0:	18800015 	stw	r2,0(r3)
		reg_ptr[47] = x_boss | status_boss;
100041f4:	d0a00017 	ldw	r2,-32768(gp)
100041f8:	10802f04 	addi	r2,r2,188
100041fc:	e13f7c17 	ldw	r4,-528(fp)
10004200:	e0ff7d17 	ldw	r3,-524(fp)
10004204:	20c6b03a 	or	r3,r4,r3
10004208:	10c00015 	stw	r3,0(r2)
		reg_ptr[62] = 1;
1000420c:	d0a00017 	ldw	r2,-32768(gp)
10004210:	10803e04 	addi	r2,r2,248
10004214:	00c00044 	movi	r3,1
10004218:	10c00015 	stw	r3,0(r2)

		if(! spin){
1000421c:	e0bf670f 	ldh	r2,-612(fp)
10004220:	1000011e 	bne	r2,zero,10004228 <main+0x3030>
			v_x = 0;
10004224:	e03f6415 	stw	zero,-624(fp)
		}
		key_char = air_counter ? 0 : getkeys(keycodes);
10004228:	e0bf6917 	ldw	r2,-604(fp)
1000422c:	1000041e 	bne	r2,zero,10004240 <main+0x3048>
10004230:	e0bf9384 	addi	r2,fp,-434
10004234:	1009883a 	mov	r4,r2
10004238:	00010340 	call	10001034 <getkeys>
1000423c:	00000106 	br	10004244 <main+0x304c>
10004240:	0005883a 	mov	r2,zero
10004244:	e0bf9305 	stb	r2,-436(fp)
		reg_ptr[62] = 0;
10004248:	d0a00017 	ldw	r2,-32768(gp)
1000424c:	10803e04 	addi	r2,r2,248
10004250:	10000015 	stw	zero,0(r2)
		// W 01
		if ((key_char & 0x01) && energy == 80){
10004254:	e0bf9303 	ldbu	r2,-436(fp)
10004258:	10803fcc 	andi	r2,r2,255
1000425c:	1080004c 	andi	r2,r2,1
10004260:	10000626 	beq	r2,zero,1000427c <main+0x3084>
10004264:	e0bf6b17 	ldw	r2,-596(fp)
10004268:	10801418 	cmpnei	r2,r2,80
1000426c:	1000031e 	bne	r2,zero,1000427c <main+0x3084>
			status_ninja |= 0x02000000;
10004270:	e0bf6617 	ldw	r2,-616(fp)
10004274:	10808034 	orhi	r2,r2,512
10004278:	e0bf6615 	stw	r2,-616(fp)
		}
		// D 08
		if(!spin){
1000427c:	e0bf670f 	ldh	r2,-612(fp)
10004280:	1000181e 	bne	r2,zero,100042e4 <main+0x30ec>
			if (key_char & 0x08){
10004284:	e0bf9303 	ldbu	r2,-436(fp)
10004288:	10803fcc 	andi	r2,r2,255
1000428c:	1080020c 	andi	r2,r2,8
10004290:	10000726 	beq	r2,zero,100042b0 <main+0x30b8>
				v_x += vel_x;
10004294:	e0ff6417 	ldw	r3,-624(fp)
10004298:	e0bf8417 	ldw	r2,-496(fp)
1000429c:	1885883a 	add	r2,r3,r2
100042a0:	e0bf6415 	stw	r2,-624(fp)
				status_ninja |= 0x40000000;
100042a4:	e0bf6617 	ldw	r2,-616(fp)
100042a8:	10900034 	orhi	r2,r2,16384
100042ac:	e0bf6615 	stw	r2,-616(fp)
			}
			// A 02
			if (key_char & 0x02){
100042b0:	e0bf9303 	ldbu	r2,-436(fp)
100042b4:	10803fcc 	andi	r2,r2,255
100042b8:	1080008c 	andi	r2,r2,2
100042bc:	10000926 	beq	r2,zero,100042e4 <main+0x30ec>
				v_x -= vel_x;
100042c0:	e0ff6417 	ldw	r3,-624(fp)
100042c4:	e0bf8417 	ldw	r2,-496(fp)
100042c8:	1885c83a 	sub	r2,r3,r2
100042cc:	e0bf6415 	stw	r2,-624(fp)
				status_ninja &= 0xbfffffff;
100042d0:	e0ff6617 	ldw	r3,-616(fp)
100042d4:	00b00034 	movhi	r2,49152
100042d8:	10bfffc4 	addi	r2,r2,-1
100042dc:	1884703a 	and	r2,r3,r2
100042e0:	e0bf6615 	stw	r2,-616(fp)
			}
		}
		// K
		if ((key_char & 0x20) && on_gnd){
100042e4:	e0bf9303 	ldbu	r2,-436(fp)
100042e8:	10803fcc 	andi	r2,r2,255
100042ec:	1080080c 	andi	r2,r2,32
100042f0:	10000c26 	beq	r2,zero,10004324 <main+0x312c>
100042f4:	e0bf7207 	ldb	r2,-568(fp)
100042f8:	10000a26 	beq	r2,zero,10004324 <main+0x312c>
			v_y = (status_ninja & 0x02000000) ? -v_jump2 : -v_jump1;
100042fc:	e0bf6617 	ldw	r2,-616(fp)
10004300:	1080802c 	andhi	r2,r2,512
10004304:	10000326 	beq	r2,zero,10004314 <main+0x311c>
10004308:	e0bf8817 	ldw	r2,-480(fp)
1000430c:	0085c83a 	sub	r2,zero,r2
10004310:	00000206 	br	1000431c <main+0x3124>
10004314:	e0bf8717 	ldw	r2,-484(fp)
10004318:	0085c83a 	sub	r2,zero,r2
1000431c:	e0bf6515 	stw	r2,-620(fp)
			on_gnd = 0;
10004320:	e03f7205 	stb	zero,-568(fp)
		}

		//J
		if ((key_char & 0x10) && !cd_dart){
10004324:	e0bf9303 	ldbu	r2,-436(fp)
10004328:	10803fcc 	andi	r2,r2,255
1000432c:	1080040c 	andi	r2,r2,16
10004330:	10007926 	beq	r2,zero,10004518 <main+0x3320>
10004334:	e0bf6d07 	ldb	r2,-588(fp)
10004338:	1000771e 	bne	r2,zero,10004518 <main+0x3320>
			if(status_ninja & 0x02000000){
1000433c:	e0bf6617 	ldw	r2,-616(fp)
10004340:	1080802c 	andhi	r2,r2,512
10004344:	10000f26 	beq	r2,zero,10004384 <main+0x318c>
				if(!spin_cd){
10004348:	e0bf678f 	ldh	r2,-610(fp)
1000434c:	1000721e 	bne	r2,zero,10004518 <main+0x3320>
					spin = 30;
10004350:	00800784 	movi	r2,30
10004354:	e0bf670d 	sth	r2,-612(fp)
					spin_cd = 60;
10004358:	00800f04 	movi	r2,60
1000435c:	e0bf678d 	sth	r2,-610(fp)
					v_x = (status_ninja & 0x40000000) ? vel_x2 : -vel_x2;
10004360:	e0bf6617 	ldw	r2,-616(fp)
10004364:	1090002c 	andhi	r2,r2,16384
10004368:	1000031e 	bne	r2,zero,10004378 <main+0x3180>
1000436c:	e0bf8517 	ldw	r2,-492(fp)
10004370:	0085c83a 	sub	r2,zero,r2
10004374:	00000106 	br	1000437c <main+0x3184>
10004378:	e0bf8517 	ldw	r2,-492(fp)
1000437c:	e0bf6415 	stw	r2,-624(fp)
10004380:	00006506 	br	10004518 <main+0x3320>
				}
			} else {
				cnt_dart[idx_dart] = 60;
10004384:	e0bf6d8f 	ldh	r2,-586(fp)
10004388:	e0ffa104 	addi	r3,fp,-380
1000438c:	1885883a 	add	r2,r3,r2
10004390:	00c00f04 	movi	r3,60
10004394:	10c00005 	stb	r3,0(r2)
				cd_dart = 20;
10004398:	00800504 	movi	r2,20
1000439c:	e0bf6d05 	stb	r2,-588(fp)
				x_dart[idx_dart] = x;
100043a0:	e0bf6d8f 	ldh	r2,-586(fp)
100043a4:	1085883a 	add	r2,r2,r2
100043a8:	1085883a 	add	r2,r2,r2
100043ac:	e17f6104 	addi	r5,fp,-636
100043b0:	2885883a 	add	r2,r5,r2
100043b4:	10803404 	addi	r2,r2,208
100043b8:	e0ff6217 	ldw	r3,-632(fp)
100043bc:	10c00015 	stw	r3,0(r2)
				y_dart[idx_dart] = y;
100043c0:	e0bf6d8f 	ldh	r2,-586(fp)
100043c4:	1085883a 	add	r2,r2,r2
100043c8:	1085883a 	add	r2,r2,r2
100043cc:	e0ff6104 	addi	r3,fp,-636
100043d0:	1885883a 	add	r2,r3,r2
100043d4:	10803804 	addi	r2,r2,224
100043d8:	e0ff6317 	ldw	r3,-628(fp)
100043dc:	10c00015 	stw	r3,0(r2)
				status_dart[idx_dart] |= 0x80000000;
100043e0:	e0bf6d8f 	ldh	r2,-586(fp)
100043e4:	e0ff6d8f 	ldh	r3,-586(fp)
100043e8:	18c7883a 	add	r3,r3,r3
100043ec:	18c7883a 	add	r3,r3,r3
100043f0:	e13f6104 	addi	r4,fp,-636
100043f4:	20c7883a 	add	r3,r4,r3
100043f8:	18c04104 	addi	r3,r3,260
100043fc:	18c00017 	ldw	r3,0(r3)
10004400:	18e00034 	orhi	r3,r3,32768
10004404:	1085883a 	add	r2,r2,r2
10004408:	1085883a 	add	r2,r2,r2
1000440c:	e17f6104 	addi	r5,fp,-636
10004410:	2885883a 	add	r2,r5,r2
10004414:	10804104 	addi	r2,r2,260
10004418:	10c00015 	stw	r3,0(r2)
				if (status_ninja & 0x40000000){
1000441c:	e0bf6617 	ldw	r2,-616(fp)
10004420:	1090002c 	andhi	r2,r2,16384
10004424:	10001826 	beq	r2,zero,10004488 <main+0x3290>
					v_x_dart[idx_dart] = vel_dart;
10004428:	e0bf6d8f 	ldh	r2,-586(fp)
1000442c:	e0ff8a17 	ldw	r3,-472(fp)
10004430:	1085883a 	add	r2,r2,r2
10004434:	1085883a 	add	r2,r2,r2
10004438:	e13f6104 	addi	r4,fp,-636
1000443c:	2085883a 	add	r2,r4,r2
10004440:	10803c04 	addi	r2,r2,240
10004444:	10c00015 	stw	r3,0(r2)
					status_dart[idx_dart] |= 0x40000000;
10004448:	e0bf6d8f 	ldh	r2,-586(fp)
1000444c:	e0ff6d8f 	ldh	r3,-586(fp)
10004450:	18c7883a 	add	r3,r3,r3
10004454:	18c7883a 	add	r3,r3,r3
10004458:	e17f6104 	addi	r5,fp,-636
1000445c:	28c7883a 	add	r3,r5,r3
10004460:	18c04104 	addi	r3,r3,260
10004464:	18c00017 	ldw	r3,0(r3)
10004468:	18d00034 	orhi	r3,r3,16384
1000446c:	1085883a 	add	r2,r2,r2
10004470:	1085883a 	add	r2,r2,r2
10004474:	e13f6104 	addi	r4,fp,-636
10004478:	2085883a 	add	r2,r4,r2
1000447c:	10804104 	addi	r2,r2,260
10004480:	10c00015 	stw	r3,0(r2)
10004484:	00001a06 	br	100044f0 <main+0x32f8>
				} else{
					v_x_dart[idx_dart] = -vel_dart;
10004488:	e0bf6d8f 	ldh	r2,-586(fp)
1000448c:	e0ff8a17 	ldw	r3,-472(fp)
10004490:	00c7c83a 	sub	r3,zero,r3
10004494:	1085883a 	add	r2,r2,r2
10004498:	1085883a 	add	r2,r2,r2
1000449c:	e17f6104 	addi	r5,fp,-636
100044a0:	2885883a 	add	r2,r5,r2
100044a4:	10803c04 	addi	r2,r2,240
100044a8:	10c00015 	stw	r3,0(r2)
					status_dart[idx_dart] &= 0xbfffffff;
100044ac:	e0ff6d8f 	ldh	r3,-586(fp)
100044b0:	e0bf6d8f 	ldh	r2,-586(fp)
100044b4:	1085883a 	add	r2,r2,r2
100044b8:	1085883a 	add	r2,r2,r2
100044bc:	e13f6104 	addi	r4,fp,-636
100044c0:	2085883a 	add	r2,r4,r2
100044c4:	10804104 	addi	r2,r2,260
100044c8:	11000017 	ldw	r4,0(r2)
100044cc:	00b00034 	movhi	r2,49152
100044d0:	10bfffc4 	addi	r2,r2,-1
100044d4:	2088703a 	and	r4,r4,r2
100044d8:	18c5883a 	add	r2,r3,r3
100044dc:	1085883a 	add	r2,r2,r2
100044e0:	e17f6104 	addi	r5,fp,-636
100044e4:	2885883a 	add	r2,r5,r2
100044e8:	10804104 	addi	r2,r2,260
100044ec:	11000015 	stw	r4,0(r2)
				}
				if(idx_dart++ == 3){
100044f0:	e0bf6d8b 	ldhu	r2,-586(fp)
100044f4:	1007883a 	mov	r3,r2
100044f8:	18c00044 	addi	r3,r3,1
100044fc:	e0ff6d8d 	sth	r3,-586(fp)
10004500:	10bfffcc 	andi	r2,r2,65535
10004504:	10a0001c 	xori	r2,r2,32768
10004508:	10a00004 	addi	r2,r2,-32768
1000450c:	108000d8 	cmpnei	r2,r2,3
10004510:	1000011e 	bne	r2,zero,10004518 <main+0x3320>
					idx_dart = 0;
10004514:	e03f6d8d 	sth	zero,-586(fp)
				}
			}
		}

		if ((clock & 0x000000ff) == 0){
10004518:	e0bf6117 	ldw	r2,-636(fp)
1000451c:	10803fcc 	andi	r2,r2,255
10004520:	1000181e 	bne	r2,zero,10004584 <main+0x338c>
			status_boss = 0x90000000;
10004524:	00a40034 	movhi	r2,36864
10004528:	e0bf7d15 	stw	r2,-524(fp)
			x_iceball[0] = mapX + 1120;
1000452c:	e0bf7117 	ldw	r2,-572(fp)
10004530:	10811804 	addi	r2,r2,1120
10004534:	e0bfec15 	stw	r2,-80(fp)
			y_iceball[0] = 1200;
10004538:	00812c04 	movi	r2,1200
1000453c:	e0bfee15 	stw	r2,-72(fp)
			v_x_iceball[0] = 0;
10004540:	e03ff015 	stw	zero,-64(fp)
			v_y_iceball[0] = 0;
10004544:	e03ff215 	stw	zero,-56(fp)
			live_iceball[0] = 1;
10004548:	00800044 	movi	r2,1
1000454c:	e0bff40d 	sth	r2,-48(fp)
			status_iceball[0] = 0x80000000;
10004550:	00a00034 	movhi	r2,32768
10004554:	e0bff515 	stw	r2,-44(fp)
			x_iceball[1] = mapX + 1440;
10004558:	e0bf7117 	ldw	r2,-572(fp)
1000455c:	10816804 	addi	r2,r2,1440
10004560:	e0bfed15 	stw	r2,-76(fp)
			y_iceball[1] = 1520;
10004564:	00817c04 	movi	r2,1520
10004568:	e0bfef15 	stw	r2,-68(fp)
			v_x_iceball[1] = 0;
1000456c:	e03ff115 	stw	zero,-60(fp)
			v_y_iceball[1] = 0;
10004570:	e03ff315 	stw	zero,-52(fp)
			live_iceball[1] = 1;
10004574:	00800044 	movi	r2,1
10004578:	e0bff48d 	sth	r2,-46(fp)
			status_iceball[1] = 0x80000000;
1000457c:	00a00034 	movhi	r2,32768
10004580:	e0bff615 	stw	r2,-40(fp)
		}

		if ((clock & 0x000000ff) == 0x80){
10004584:	e0bf6117 	ldw	r2,-636(fp)
10004588:	10803fcc 	andi	r2,r2,255
1000458c:	10802018 	cmpnei	r2,r2,128
10004590:	1000231e 	bne	r2,zero,10004620 <main+0x3428>
			status_boss = 0x80000000;
10004594:	00a00034 	movhi	r2,32768
10004598:	e0bf7d15 	stw	r2,-524(fp)
			x_fireball[0] = mapX + 1280;
1000459c:	e0bf7117 	ldw	r2,-572(fp)
100045a0:	10814004 	addi	r2,r2,1280
100045a4:	e0bfdc15 	stw	r2,-144(fp)
			y_fireball[0] = 0;
100045a8:	e03fe015 	stw	zero,-128(fp)
			status_fireball[0] = 0x80000000;
100045ac:	00a00034 	movhi	r2,32768
100045b0:	e0bfe415 	stw	r2,-112(fp)
			live_fireball[0] = 0x80000000;
100045b4:	00a00034 	movhi	r2,32768
100045b8:	e0bfe815 	stw	r2,-96(fp)
			x_fireball[1] = mapX + 1920;
100045bc:	e0bf7117 	ldw	r2,-572(fp)
100045c0:	1081e004 	addi	r2,r2,1920
100045c4:	e0bfdd15 	stw	r2,-140(fp)
			y_fireball[1] = 0;
100045c8:	e03fe115 	stw	zero,-124(fp)
			status_fireball[1] = 0x80000000;
100045cc:	00a00034 	movhi	r2,32768
100045d0:	e0bfe515 	stw	r2,-108(fp)
			live_fireball[1] = 0x80000000;
100045d4:	00a00034 	movhi	r2,32768
100045d8:	e0bfe915 	stw	r2,-92(fp)
			x_fireball[2] = mapX + 2560;
100045dc:	e0bf7117 	ldw	r2,-572(fp)
100045e0:	10828004 	addi	r2,r2,2560
100045e4:	e0bfde15 	stw	r2,-136(fp)
			y_fireball[2] = 0;
100045e8:	e03fe215 	stw	zero,-120(fp)
			status_fireball[2] = 0x80000000;
100045ec:	00a00034 	movhi	r2,32768
100045f0:	e0bfe615 	stw	r2,-104(fp)
			live_fireball[2] = 0x80000000;
100045f4:	00a00034 	movhi	r2,32768
100045f8:	e0bfea15 	stw	r2,-88(fp)
			x_fireball[3] = mapX + 2560;
100045fc:	e0bf7117 	ldw	r2,-572(fp)
10004600:	10828004 	addi	r2,r2,2560
10004604:	e0bfdf15 	stw	r2,-132(fp)
			y_fireball[3] = 640;
10004608:	0080a004 	movi	r2,640
1000460c:	e0bfe315 	stw	r2,-116(fp)
			status_fireball[3] = 0x80000000;
10004610:	00a00034 	movhi	r2,32768
10004614:	e0bfe715 	stw	r2,-100(fp)
			live_fireball[3] = 0x80000000;
10004618:	00a00034 	movhi	r2,32768
1000461c:	e0bfeb15 	stw	r2,-84(fp)




		/////////////////dart/////////////////
		for(i_dart = 0; i_dart < 4; i_dart++){
10004620:	e03f6e0d 	sth	zero,-584(fp)
10004624:	00016706 	br	10004bc4 <main+0x39cc>
			if(cnt_dart[i_dart] > 0){
10004628:	e0bf6e0f 	ldh	r2,-584(fp)
1000462c:	e0ffa104 	addi	r3,fp,-380
10004630:	1885883a 	add	r2,r3,r2
10004634:	10800003 	ldbu	r2,0(r2)
10004638:	10803fcc 	andi	r2,r2,255
1000463c:	1080201c 	xori	r2,r2,128
10004640:	10bfe004 	addi	r2,r2,-128
10004644:	0080200e 	bge	zero,r2,100046c8 <main+0x34d0>
				cnt_dart[i_dart]--;
10004648:	e0bf6e0f 	ldh	r2,-584(fp)
1000464c:	e0ffa104 	addi	r3,fp,-380
10004650:	1887883a 	add	r3,r3,r2
10004654:	18c00003 	ldbu	r3,0(r3)
10004658:	18ffffc4 	addi	r3,r3,-1
1000465c:	1809883a 	mov	r4,r3
10004660:	e0ffa104 	addi	r3,fp,-380
10004664:	1885883a 	add	r2,r3,r2
10004668:	11000005 	stb	r4,0(r2)
				x_dart[i_dart] += v_x_dart[i_dart];
1000466c:	e0bf6e0f 	ldh	r2,-584(fp)
10004670:	e0ff6e0f 	ldh	r3,-584(fp)
10004674:	18c7883a 	add	r3,r3,r3
10004678:	18c7883a 	add	r3,r3,r3
1000467c:	e13f6104 	addi	r4,fp,-636
10004680:	20c7883a 	add	r3,r4,r3
10004684:	18c03404 	addi	r3,r3,208
10004688:	19000017 	ldw	r4,0(r3)
1000468c:	e0ff6e0f 	ldh	r3,-584(fp)
10004690:	18c7883a 	add	r3,r3,r3
10004694:	18c7883a 	add	r3,r3,r3
10004698:	e17f6104 	addi	r5,fp,-636
1000469c:	28c7883a 	add	r3,r5,r3
100046a0:	18c03c04 	addi	r3,r3,240
100046a4:	18c00017 	ldw	r3,0(r3)
100046a8:	20c7883a 	add	r3,r4,r3
100046ac:	1085883a 	add	r2,r2,r2
100046b0:	1085883a 	add	r2,r2,r2
100046b4:	e13f6104 	addi	r4,fp,-636
100046b8:	2085883a 	add	r2,r4,r2
100046bc:	10803404 	addi	r2,r2,208
100046c0:	10c00015 	stw	r3,0(r2)
100046c4:	00000706 	br	100046e4 <main+0x34ec>
			}
			else{
				status_dart[i_dart] = 0;
100046c8:	e0bf6e0f 	ldh	r2,-584(fp)
100046cc:	1085883a 	add	r2,r2,r2
100046d0:	1085883a 	add	r2,r2,r2
100046d4:	e17f6104 	addi	r5,fp,-636
100046d8:	2885883a 	add	r2,r5,r2
100046dc:	10804104 	addi	r2,r2,260
100046e0:	10000015 	stw	zero,0(r2)
			}

			if(live_fireball[i_dart]){
100046e4:	e0bf6e0f 	ldh	r2,-584(fp)
100046e8:	1085883a 	add	r2,r2,r2
100046ec:	1085883a 	add	r2,r2,r2
100046f0:	e0ff6104 	addi	r3,fp,-636
100046f4:	1885883a 	add	r2,r3,r2
100046f8:	10808704 	addi	r2,r2,540
100046fc:	10800017 	ldw	r2,0(r2)
10004700:	10012d26 	beq	r2,zero,10004bb8 <main+0x39c0>
				if (y_fireball[i_dart] >= 1920){
10004704:	e0bf6e0f 	ldh	r2,-584(fp)
10004708:	1085883a 	add	r2,r2,r2
1000470c:	1085883a 	add	r2,r2,r2
10004710:	e13f6104 	addi	r4,fp,-636
10004714:	2085883a 	add	r2,r4,r2
10004718:	10807f04 	addi	r2,r2,508
1000471c:	10800017 	ldw	r2,0(r2)
10004720:	1081e010 	cmplti	r2,r2,1920
10004724:	10000f1e 	bne	r2,zero,10004764 <main+0x356c>
					status_fireball[i_dart] = 0;
10004728:	e0bf6e0f 	ldh	r2,-584(fp)
1000472c:	1085883a 	add	r2,r2,r2
10004730:	1085883a 	add	r2,r2,r2
10004734:	e17f6104 	addi	r5,fp,-636
10004738:	2885883a 	add	r2,r5,r2
1000473c:	10808304 	addi	r2,r2,524
10004740:	10000015 	stw	zero,0(r2)
					live_fireball[i_dart] = 0;
10004744:	e0bf6e0f 	ldh	r2,-584(fp)
10004748:	1085883a 	add	r2,r2,r2
1000474c:	1085883a 	add	r2,r2,r2
10004750:	e0ff6104 	addi	r3,fp,-636
10004754:	1885883a 	add	r2,r3,r2
10004758:	10808704 	addi	r2,r2,540
1000475c:	10000015 	stw	zero,0(r2)
					goto fire_out;
10004760:	00011506 	br	10004bb8 <main+0x39c0>
				}
				if (x_fireball[i_dart] > mapX + 2560|| (x_fireball[i_dart] + 200) < mapX){
10004764:	e0bf6e0f 	ldh	r2,-584(fp)
10004768:	1085883a 	add	r2,r2,r2
1000476c:	1085883a 	add	r2,r2,r2
10004770:	e13f6104 	addi	r4,fp,-636
10004774:	2085883a 	add	r2,r4,r2
10004778:	10807b04 	addi	r2,r2,492
1000477c:	10800017 	ldw	r2,0(r2)
10004780:	e0ff7117 	ldw	r3,-572(fp)
10004784:	18c28004 	addi	r3,r3,2560
10004788:	18800a16 	blt	r3,r2,100047b4 <main+0x35bc>
1000478c:	e0bf6e0f 	ldh	r2,-584(fp)
10004790:	1085883a 	add	r2,r2,r2
10004794:	1085883a 	add	r2,r2,r2
10004798:	e17f6104 	addi	r5,fp,-636
1000479c:	2885883a 	add	r2,r5,r2
100047a0:	10807b04 	addi	r2,r2,492
100047a4:	10800017 	ldw	r2,0(r2)
100047a8:	10c03204 	addi	r3,r2,200
100047ac:	e0bf7117 	ldw	r2,-572(fp)
100047b0:	1880120e 	bge	r3,r2,100047fc <main+0x3604>
					status_fireball[i_dart] &= 0x7fffffff;
100047b4:	e0ff6e0f 	ldh	r3,-584(fp)
100047b8:	e0bf6e0f 	ldh	r2,-584(fp)
100047bc:	1085883a 	add	r2,r2,r2
100047c0:	1085883a 	add	r2,r2,r2
100047c4:	e13f6104 	addi	r4,fp,-636
100047c8:	2085883a 	add	r2,r4,r2
100047cc:	10808304 	addi	r2,r2,524
100047d0:	11000017 	ldw	r4,0(r2)
100047d4:	00a00034 	movhi	r2,32768
100047d8:	10bfffc4 	addi	r2,r2,-1
100047dc:	2088703a 	and	r4,r4,r2
100047e0:	18c5883a 	add	r2,r3,r3
100047e4:	1085883a 	add	r2,r2,r2
100047e8:	e17f6104 	addi	r5,fp,-636
100047ec:	2885883a 	add	r2,r5,r2
100047f0:	10808304 	addi	r2,r2,524
100047f4:	11000015 	stw	r4,0(r2)
100047f8:	00000f06 	br	10004838 <main+0x3640>
				} else {
					status_fireball[i_dart] |= 0x80000000;
100047fc:	e0bf6e0f 	ldh	r2,-584(fp)
10004800:	e0ff6e0f 	ldh	r3,-584(fp)
10004804:	18c7883a 	add	r3,r3,r3
10004808:	18c7883a 	add	r3,r3,r3
1000480c:	e13f6104 	addi	r4,fp,-636
10004810:	20c7883a 	add	r3,r4,r3
10004814:	18c08304 	addi	r3,r3,524
10004818:	18c00017 	ldw	r3,0(r3)
1000481c:	18e00034 	orhi	r3,r3,32768
10004820:	1085883a 	add	r2,r2,r2
10004824:	1085883a 	add	r2,r2,r2
10004828:	e17f6104 	addi	r5,fp,-636
1000482c:	2885883a 	add	r2,r5,r2
10004830:	10808304 	addi	r2,r2,524
10004834:	10c00015 	stw	r3,0(r2)
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
10004838:	e03f7f15 	stw	zero,-516(fp)
1000483c:	00005906 	br	100049a4 <main+0x37ac>
					if(status_dart[j_dart]){
10004840:	e0bf7f17 	ldw	r2,-516(fp)
10004844:	1085883a 	add	r2,r2,r2
10004848:	1085883a 	add	r2,r2,r2
1000484c:	e0ff6104 	addi	r3,fp,-636
10004850:	1885883a 	add	r2,r3,r2
10004854:	10804104 	addi	r2,r2,260
10004858:	10800017 	ldw	r2,0(r2)
1000485c:	10004e26 	beq	r2,zero,10004998 <main+0x37a0>
						if ((x_fireball[i_dart] + 100 > x_dart[j_dart]) && (x_fireball[i_dart] < x_dart[j_dart] + 48)
10004860:	e0bf6e0f 	ldh	r2,-584(fp)
10004864:	1085883a 	add	r2,r2,r2
10004868:	1085883a 	add	r2,r2,r2
1000486c:	e13f6104 	addi	r4,fp,-636
10004870:	2085883a 	add	r2,r4,r2
10004874:	10807b04 	addi	r2,r2,492
10004878:	10800017 	ldw	r2,0(r2)
1000487c:	10c01904 	addi	r3,r2,100
10004880:	e0bf7f17 	ldw	r2,-516(fp)
10004884:	1085883a 	add	r2,r2,r2
10004888:	1085883a 	add	r2,r2,r2
1000488c:	e17f6104 	addi	r5,fp,-636
10004890:	2885883a 	add	r2,r5,r2
10004894:	10803404 	addi	r2,r2,208
10004898:	10800017 	ldw	r2,0(r2)
1000489c:	10c03e0e 	bge	r2,r3,10004998 <main+0x37a0>
100048a0:	e0bf6e0f 	ldh	r2,-584(fp)
100048a4:	1085883a 	add	r2,r2,r2
100048a8:	1085883a 	add	r2,r2,r2
100048ac:	e0ff6104 	addi	r3,fp,-636
100048b0:	1885883a 	add	r2,r3,r2
100048b4:	10807b04 	addi	r2,r2,492
100048b8:	10c00017 	ldw	r3,0(r2)
100048bc:	e0bf7f17 	ldw	r2,-516(fp)
100048c0:	1085883a 	add	r2,r2,r2
100048c4:	1085883a 	add	r2,r2,r2
100048c8:	e13f6104 	addi	r4,fp,-636
100048cc:	2085883a 	add	r2,r4,r2
100048d0:	10803404 	addi	r2,r2,208
100048d4:	10800017 	ldw	r2,0(r2)
100048d8:	10800c04 	addi	r2,r2,48
100048dc:	18802e0e 	bge	r3,r2,10004998 <main+0x37a0>
								&& (y_fireball[i_dart] + 190 < y_dart[j_dart]) && (y_fireball[i_dart] >  y_dart[j_dart] + 48)){
100048e0:	e0bf6e0f 	ldh	r2,-584(fp)
100048e4:	1085883a 	add	r2,r2,r2
100048e8:	1085883a 	add	r2,r2,r2
100048ec:	e17f6104 	addi	r5,fp,-636
100048f0:	2885883a 	add	r2,r5,r2
100048f4:	10807f04 	addi	r2,r2,508
100048f8:	10800017 	ldw	r2,0(r2)
100048fc:	10c02f84 	addi	r3,r2,190
10004900:	e0bf7f17 	ldw	r2,-516(fp)
10004904:	1085883a 	add	r2,r2,r2
10004908:	1085883a 	add	r2,r2,r2
1000490c:	e13f6104 	addi	r4,fp,-636
10004910:	2085883a 	add	r2,r4,r2
10004914:	10803804 	addi	r2,r2,224
10004918:	10800017 	ldw	r2,0(r2)
1000491c:	18801e0e 	bge	r3,r2,10004998 <main+0x37a0>
10004920:	e0bf6e0f 	ldh	r2,-584(fp)
10004924:	1085883a 	add	r2,r2,r2
10004928:	1085883a 	add	r2,r2,r2
1000492c:	e17f6104 	addi	r5,fp,-636
10004930:	2885883a 	add	r2,r5,r2
10004934:	10807f04 	addi	r2,r2,508
10004938:	10c00017 	ldw	r3,0(r2)
1000493c:	e0bf7f17 	ldw	r2,-516(fp)
10004940:	1085883a 	add	r2,r2,r2
10004944:	1085883a 	add	r2,r2,r2
10004948:	e13f6104 	addi	r4,fp,-636
1000494c:	2085883a 	add	r2,r4,r2
10004950:	10803804 	addi	r2,r2,224
10004954:	10800017 	ldw	r2,0(r2)
10004958:	10800c04 	addi	r2,r2,48
1000495c:	10c00e0e 	bge	r2,r3,10004998 <main+0x37a0>
							status_dart[j_dart] = 0;
10004960:	e0bf7f17 	ldw	r2,-516(fp)
10004964:	1085883a 	add	r2,r2,r2
10004968:	1085883a 	add	r2,r2,r2
1000496c:	e17f6104 	addi	r5,fp,-636
10004970:	2885883a 	add	r2,r5,r2
10004974:	10804104 	addi	r2,r2,260
10004978:	10000015 	stw	zero,0(r2)
							cnt_dart[j_dart] = 0;
1000497c:	e0ffa104 	addi	r3,fp,-380
10004980:	e0bf7f17 	ldw	r2,-516(fp)
10004984:	1885883a 	add	r2,r3,r2
10004988:	10000005 	stb	zero,0(r2)
							energy += 10;
1000498c:	e0bf6b17 	ldw	r2,-596(fp)
10004990:	10800284 	addi	r2,r2,10
10004994:	e0bf6b15 	stw	r2,-596(fp)
				if (x_fireball[i_dart] > mapX + 2560|| (x_fireball[i_dart] + 200) < mapX){
					status_fireball[i_dart] &= 0x7fffffff;
				} else {
					status_fireball[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
10004998:	e0bf7f17 	ldw	r2,-516(fp)
1000499c:	10800044 	addi	r2,r2,1
100049a0:	e0bf7f15 	stw	r2,-516(fp)
100049a4:	e0bf7f17 	ldw	r2,-516(fp)
100049a8:	10800110 	cmplti	r2,r2,4
100049ac:	103fa41e 	bne	r2,zero,10004840 <__alt_data_end+0xf8004840>
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
100049b0:	e0bf6817 	ldw	r2,-608(fp)
100049b4:	1000481e 	bne	r2,zero,10004ad8 <main+0x38e0>
					if ((x_fireball[i_dart] + 100 > x) && (x_fireball[i_dart] < x + 160) && (y_fireball[i_dart] < y + 160)
100049b8:	e0bf6e0f 	ldh	r2,-584(fp)
100049bc:	1085883a 	add	r2,r2,r2
100049c0:	1085883a 	add	r2,r2,r2
100049c4:	e0ff6104 	addi	r3,fp,-636
100049c8:	1885883a 	add	r2,r3,r2
100049cc:	10807b04 	addi	r2,r2,492
100049d0:	10800017 	ldw	r2,0(r2)
100049d4:	10801904 	addi	r2,r2,100
100049d8:	e0ff6217 	ldw	r3,-632(fp)
100049dc:	18803e0e 	bge	r3,r2,10004ad8 <main+0x38e0>
100049e0:	e0bf6e0f 	ldh	r2,-584(fp)
100049e4:	1085883a 	add	r2,r2,r2
100049e8:	1085883a 	add	r2,r2,r2
100049ec:	e13f6104 	addi	r4,fp,-636
100049f0:	2085883a 	add	r2,r4,r2
100049f4:	10807b04 	addi	r2,r2,492
100049f8:	10c00017 	ldw	r3,0(r2)
100049fc:	e0bf6217 	ldw	r2,-632(fp)
10004a00:	10802804 	addi	r2,r2,160
10004a04:	1880340e 	bge	r3,r2,10004ad8 <main+0x38e0>
10004a08:	e0bf6e0f 	ldh	r2,-584(fp)
10004a0c:	1085883a 	add	r2,r2,r2
10004a10:	1085883a 	add	r2,r2,r2
10004a14:	e17f6104 	addi	r5,fp,-636
10004a18:	2885883a 	add	r2,r5,r2
10004a1c:	10807f04 	addi	r2,r2,508
10004a20:	10c00017 	ldw	r3,0(r2)
10004a24:	e0bf6317 	ldw	r2,-628(fp)
10004a28:	10802804 	addi	r2,r2,160
10004a2c:	18802a0e 	bge	r3,r2,10004ad8 <main+0x38e0>
							&& (y_fireball[i_dart] + 160 < y)){
10004a30:	e0bf6e0f 	ldh	r2,-584(fp)
10004a34:	1085883a 	add	r2,r2,r2
10004a38:	1085883a 	add	r2,r2,r2
10004a3c:	e0ff6104 	addi	r3,fp,-636
10004a40:	1885883a 	add	r2,r3,r2
10004a44:	10807f04 	addi	r2,r2,508
10004a48:	10800017 	ldw	r2,0(r2)
10004a4c:	10c02804 	addi	r3,r2,160
10004a50:	e0bf6317 	ldw	r2,-628(fp)
10004a54:	1880200e 	bge	r3,r2,10004ad8 <main+0x38e0>
						if (status_ninja & 0x02000000){
10004a58:	e0bf6617 	ldw	r2,-616(fp)
10004a5c:	1080802c 	andhi	r2,r2,512
10004a60:	10000626 	beq	r2,zero,10004a7c <main+0x3884>
							if(spin){
10004a64:	e0bf670f 	ldh	r2,-612(fp)
10004a68:	10001b26 	beq	r2,zero,10004ad8 <main+0x38e0>
								life += 5;
10004a6c:	e0bf6a17 	ldw	r2,-600(fp)
10004a70:	10800144 	addi	r2,r2,5
10004a74:	e0bf6a15 	stw	r2,-600(fp)
10004a78:	00001706 	br	10004ad8 <main+0x38e0>
							}
						} else {
							hurt_counter = 60;
10004a7c:	00800f04 	movi	r2,60
10004a80:	e0bf6815 	stw	r2,-608(fp)
							air_counter = 30;
10004a84:	00800784 	movi	r2,30
10004a88:	e0bf6915 	stw	r2,-604(fp)
							v_y = -v_jump3;
10004a8c:	e0bf8917 	ldw	r2,-476(fp)
10004a90:	0085c83a 	sub	r2,zero,r2
10004a94:	e0bf6515 	stw	r2,-620(fp)
							on_gnd = 0;
10004a98:	e03f7205 	stb	zero,-568(fp)
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
10004a9c:	e0ff6617 	ldw	r3,-616(fp)
10004aa0:	00b90034 	movhi	r2,58368
10004aa4:	10bfffc4 	addi	r2,r2,-1
10004aa8:	1884703a 	and	r2,r3,r2
10004aac:	10820034 	orhi	r2,r2,2048
10004ab0:	e0bf6615 	stw	r2,-616(fp)
							life_energy_status |= 0x00000080;
10004ab4:	e0bf6c17 	ldw	r2,-592(fp)
10004ab8:	10802014 	ori	r2,r2,128
10004abc:	e0bf6c15 	stw	r2,-592(fp)
							life -= 10;
10004ac0:	e0bf6a17 	ldw	r2,-600(fp)
10004ac4:	10bffd84 	addi	r2,r2,-10
10004ac8:	e0bf6a15 	stw	r2,-600(fp)
							energy += 5;
10004acc:	e0bf6b17 	ldw	r2,-596(fp)
10004ad0:	10800144 	addi	r2,r2,5
10004ad4:	e0bf6b15 	stw	r2,-596(fp)
						}
					}
				}

				x_fireball[i_dart] -= v_enemy3;
10004ad8:	e0bf6e0f 	ldh	r2,-584(fp)
10004adc:	e0ff6e0f 	ldh	r3,-584(fp)
10004ae0:	18c7883a 	add	r3,r3,r3
10004ae4:	18c7883a 	add	r3,r3,r3
10004ae8:	e13f6104 	addi	r4,fp,-636
10004aec:	20c7883a 	add	r3,r4,r3
10004af0:	18c07b04 	addi	r3,r3,492
10004af4:	18c00017 	ldw	r3,0(r3)
10004af8:	1809883a 	mov	r4,r3
10004afc:	e0ff8e17 	ldw	r3,-456(fp)
10004b00:	20c7c83a 	sub	r3,r4,r3
10004b04:	1085883a 	add	r2,r2,r2
10004b08:	1085883a 	add	r2,r2,r2
10004b0c:	e17f6104 	addi	r5,fp,-636
10004b10:	2885883a 	add	r2,r5,r2
10004b14:	10807b04 	addi	r2,r2,492
10004b18:	10c00015 	stw	r3,0(r2)
				y_fireball[i_dart] += v_enemy3;
10004b1c:	e0bf6e0f 	ldh	r2,-584(fp)
10004b20:	e0ff6e0f 	ldh	r3,-584(fp)
10004b24:	18c7883a 	add	r3,r3,r3
10004b28:	18c7883a 	add	r3,r3,r3
10004b2c:	e13f6104 	addi	r4,fp,-636
10004b30:	20c7883a 	add	r3,r4,r3
10004b34:	18c07f04 	addi	r3,r3,508
10004b38:	18c00017 	ldw	r3,0(r3)
10004b3c:	1809883a 	mov	r4,r3
10004b40:	e0ff8e17 	ldw	r3,-456(fp)
10004b44:	20c7883a 	add	r3,r4,r3
10004b48:	1085883a 	add	r2,r2,r2
10004b4c:	1085883a 	add	r2,r2,r2
10004b50:	e17f6104 	addi	r5,fp,-636
10004b54:	2885883a 	add	r2,r5,r2
10004b58:	10807f04 	addi	r2,r2,508
10004b5c:	10c00015 	stw	r3,0(r2)
				if(live_fireball[i_dart] <= 0){
10004b60:	e0bf6e0f 	ldh	r2,-584(fp)
10004b64:	1085883a 	add	r2,r2,r2
10004b68:	1085883a 	add	r2,r2,r2
10004b6c:	e0ff6104 	addi	r3,fp,-636
10004b70:	1885883a 	add	r2,r3,r2
10004b74:	10808704 	addi	r2,r2,540
10004b78:	10800017 	ldw	r2,0(r2)
10004b7c:	10000e1e 	bne	r2,zero,10004bb8 <main+0x39c0>
					live_fireball[i_dart] = 0;
10004b80:	e0bf6e0f 	ldh	r2,-584(fp)
10004b84:	1085883a 	add	r2,r2,r2
10004b88:	1085883a 	add	r2,r2,r2
10004b8c:	e13f6104 	addi	r4,fp,-636
10004b90:	2085883a 	add	r2,r4,r2
10004b94:	10808704 	addi	r2,r2,540
10004b98:	10000015 	stw	zero,0(r2)
					status_fireball[i_dart] = 0;
10004b9c:	e0bf6e0f 	ldh	r2,-584(fp)
10004ba0:	1085883a 	add	r2,r2,r2
10004ba4:	1085883a 	add	r2,r2,r2
10004ba8:	e17f6104 	addi	r5,fp,-636
10004bac:	2885883a 	add	r2,r5,r2
10004bb0:	10808304 	addi	r2,r2,524
10004bb4:	10000015 	stw	zero,0(r2)




		/////////////////dart/////////////////
		for(i_dart = 0; i_dart < 4; i_dart++){
10004bb8:	e0bf6e0b 	ldhu	r2,-584(fp)
10004bbc:	10800044 	addi	r2,r2,1
10004bc0:	e0bf6e0d 	sth	r2,-584(fp)
10004bc4:	e0bf6e0f 	ldh	r2,-584(fp)
10004bc8:	10800110 	cmplti	r2,r2,4
10004bcc:	103e961e 	bne	r2,zero,10004628 <__alt_data_end+0xf8004628>
					status_fireball[i_dart] = 0;
				}
			}
			fire_out: ;
		}
		for(i_dart = 0; i_dart < 2; i_dart++){
10004bd0:	e03f6e0d 	sth	zero,-584(fp)
10004bd4:	0001a606 	br	10005270 <main+0x4078>
			if (y_iceball[i_dart] >= 1920){
10004bd8:	e0bf6e0f 	ldh	r2,-584(fp)
10004bdc:	1085883a 	add	r2,r2,r2
10004be0:	1085883a 	add	r2,r2,r2
10004be4:	e0ff6104 	addi	r3,fp,-636
10004be8:	1885883a 	add	r2,r3,r2
10004bec:	10808d04 	addi	r2,r2,564
10004bf0:	10800017 	ldw	r2,0(r2)
10004bf4:	1081e010 	cmplti	r2,r2,1920
10004bf8:	10000e1e 	bne	r2,zero,10004c34 <main+0x3a3c>
					status_iceball[i_dart] = 0;
10004bfc:	e0bf6e0f 	ldh	r2,-584(fp)
10004c00:	1085883a 	add	r2,r2,r2
10004c04:	1085883a 	add	r2,r2,r2
10004c08:	e13f6104 	addi	r4,fp,-636
10004c0c:	2085883a 	add	r2,r4,r2
10004c10:	10809404 	addi	r2,r2,592
10004c14:	10000015 	stw	zero,0(r2)
					live_iceball[i_dart] = 0;
10004c18:	e0bf6e0f 	ldh	r2,-584(fp)
10004c1c:	1085883a 	add	r2,r2,r2
10004c20:	e17f6104 	addi	r5,fp,-636
10004c24:	2885883a 	add	r2,r5,r2
10004c28:	10809304 	addi	r2,r2,588
10004c2c:	1000000d 	sth	zero,0(r2)
					goto ice_out;
10004c30:	00018c06 	br	10005264 <main+0x406c>
				}
				if (x_iceball[i_dart] > mapX + 2560|| (x_iceball[i_dart] + 200) < mapX){
10004c34:	e0bf6e0f 	ldh	r2,-584(fp)
10004c38:	1085883a 	add	r2,r2,r2
10004c3c:	1085883a 	add	r2,r2,r2
10004c40:	e0ff6104 	addi	r3,fp,-636
10004c44:	1885883a 	add	r2,r3,r2
10004c48:	10808b04 	addi	r2,r2,556
10004c4c:	10800017 	ldw	r2,0(r2)
10004c50:	e0ff7117 	ldw	r3,-572(fp)
10004c54:	18c28004 	addi	r3,r3,2560
10004c58:	18800a16 	blt	r3,r2,10004c84 <main+0x3a8c>
10004c5c:	e0bf6e0f 	ldh	r2,-584(fp)
10004c60:	1085883a 	add	r2,r2,r2
10004c64:	1085883a 	add	r2,r2,r2
10004c68:	e13f6104 	addi	r4,fp,-636
10004c6c:	2085883a 	add	r2,r4,r2
10004c70:	10808b04 	addi	r2,r2,556
10004c74:	10800017 	ldw	r2,0(r2)
10004c78:	10c03204 	addi	r3,r2,200
10004c7c:	e0bf7117 	ldw	r2,-572(fp)
10004c80:	1880120e 	bge	r3,r2,10004ccc <main+0x3ad4>
					status_iceball[i_dart] &= 0x7fffffff;
10004c84:	e0ff6e0f 	ldh	r3,-584(fp)
10004c88:	e0bf6e0f 	ldh	r2,-584(fp)
10004c8c:	1085883a 	add	r2,r2,r2
10004c90:	1085883a 	add	r2,r2,r2
10004c94:	e17f6104 	addi	r5,fp,-636
10004c98:	2885883a 	add	r2,r5,r2
10004c9c:	10809404 	addi	r2,r2,592
10004ca0:	11000017 	ldw	r4,0(r2)
10004ca4:	00a00034 	movhi	r2,32768
10004ca8:	10bfffc4 	addi	r2,r2,-1
10004cac:	2088703a 	and	r4,r4,r2
10004cb0:	18c5883a 	add	r2,r3,r3
10004cb4:	1085883a 	add	r2,r2,r2
10004cb8:	e0ff6104 	addi	r3,fp,-636
10004cbc:	1885883a 	add	r2,r3,r2
10004cc0:	10809404 	addi	r2,r2,592
10004cc4:	11000015 	stw	r4,0(r2)
10004cc8:	00000f06 	br	10004d08 <main+0x3b10>
				} else {
					status_iceball[i_dart] |= 0x80000000;
10004ccc:	e0bf6e0f 	ldh	r2,-584(fp)
10004cd0:	e0ff6e0f 	ldh	r3,-584(fp)
10004cd4:	18c7883a 	add	r3,r3,r3
10004cd8:	18c7883a 	add	r3,r3,r3
10004cdc:	e13f6104 	addi	r4,fp,-636
10004ce0:	20c7883a 	add	r3,r4,r3
10004ce4:	18c09404 	addi	r3,r3,592
10004ce8:	18c00017 	ldw	r3,0(r3)
10004cec:	18e00034 	orhi	r3,r3,32768
10004cf0:	1085883a 	add	r2,r2,r2
10004cf4:	1085883a 	add	r2,r2,r2
10004cf8:	e17f6104 	addi	r5,fp,-636
10004cfc:	2885883a 	add	r2,r5,r2
10004d00:	10809404 	addi	r2,r2,592
10004d04:	10c00015 	stw	r3,0(r2)
				}
			if(live_iceball[i_dart]){
10004d08:	e0bf6e0f 	ldh	r2,-584(fp)
10004d0c:	1085883a 	add	r2,r2,r2
10004d10:	e0ff6104 	addi	r3,fp,-636
10004d14:	1885883a 	add	r2,r3,r2
10004d18:	10809304 	addi	r2,r2,588
10004d1c:	1080000b 	ldhu	r2,0(r2)
10004d20:	10bfffcc 	andi	r2,r2,65535
10004d24:	10a0001c 	xori	r2,r2,32768
10004d28:	10a00004 	addi	r2,r2,-32768
10004d2c:	10014d26 	beq	r2,zero,10005264 <main+0x406c>
				for(int j_dart = 0; j_dart < 4; j_dart++){
10004d30:	e03f8015 	stw	zero,-512(fp)
10004d34:	00005f06 	br	10004eb4 <main+0x3cbc>
					if(status_dart[j_dart]){
10004d38:	e0bf8017 	ldw	r2,-512(fp)
10004d3c:	1085883a 	add	r2,r2,r2
10004d40:	1085883a 	add	r2,r2,r2
10004d44:	e13f6104 	addi	r4,fp,-636
10004d48:	2085883a 	add	r2,r4,r2
10004d4c:	10804104 	addi	r2,r2,260
10004d50:	10800017 	ldw	r2,0(r2)
10004d54:	10005426 	beq	r2,zero,10004ea8 <main+0x3cb0>
						if ((x_iceball[i_dart] + 100 > x_dart[j_dart]) && (x_iceball[i_dart] < x_dart[j_dart] + 48) && (y_iceball[i_dart] < y_dart[j_dart] + 48)
10004d58:	e0bf6e0f 	ldh	r2,-584(fp)
10004d5c:	1085883a 	add	r2,r2,r2
10004d60:	1085883a 	add	r2,r2,r2
10004d64:	e17f6104 	addi	r5,fp,-636
10004d68:	2885883a 	add	r2,r5,r2
10004d6c:	10808b04 	addi	r2,r2,556
10004d70:	10800017 	ldw	r2,0(r2)
10004d74:	10c01904 	addi	r3,r2,100
10004d78:	e0bf8017 	ldw	r2,-512(fp)
10004d7c:	1085883a 	add	r2,r2,r2
10004d80:	1085883a 	add	r2,r2,r2
10004d84:	e13f6104 	addi	r4,fp,-636
10004d88:	2085883a 	add	r2,r4,r2
10004d8c:	10803404 	addi	r2,r2,208
10004d90:	10800017 	ldw	r2,0(r2)
10004d94:	10c0440e 	bge	r2,r3,10004ea8 <main+0x3cb0>
10004d98:	e0bf6e0f 	ldh	r2,-584(fp)
10004d9c:	1085883a 	add	r2,r2,r2
10004da0:	1085883a 	add	r2,r2,r2
10004da4:	e17f6104 	addi	r5,fp,-636
10004da8:	2885883a 	add	r2,r5,r2
10004dac:	10808b04 	addi	r2,r2,556
10004db0:	10c00017 	ldw	r3,0(r2)
10004db4:	e0bf8017 	ldw	r2,-512(fp)
10004db8:	1085883a 	add	r2,r2,r2
10004dbc:	1085883a 	add	r2,r2,r2
10004dc0:	e13f6104 	addi	r4,fp,-636
10004dc4:	2085883a 	add	r2,r4,r2
10004dc8:	10803404 	addi	r2,r2,208
10004dcc:	10800017 	ldw	r2,0(r2)
10004dd0:	10800c04 	addi	r2,r2,48
10004dd4:	1880340e 	bge	r3,r2,10004ea8 <main+0x3cb0>
10004dd8:	e0bf6e0f 	ldh	r2,-584(fp)
10004ddc:	1085883a 	add	r2,r2,r2
10004de0:	1085883a 	add	r2,r2,r2
10004de4:	e17f6104 	addi	r5,fp,-636
10004de8:	2885883a 	add	r2,r5,r2
10004dec:	10808d04 	addi	r2,r2,564
10004df0:	10c00017 	ldw	r3,0(r2)
10004df4:	e0bf8017 	ldw	r2,-512(fp)
10004df8:	1085883a 	add	r2,r2,r2
10004dfc:	1085883a 	add	r2,r2,r2
10004e00:	e13f6104 	addi	r4,fp,-636
10004e04:	2085883a 	add	r2,r4,r2
10004e08:	10803804 	addi	r2,r2,224
10004e0c:	10800017 	ldw	r2,0(r2)
10004e10:	10800c04 	addi	r2,r2,48
10004e14:	1880240e 	bge	r3,r2,10004ea8 <main+0x3cb0>
										&& (y_iceball[i_dart] + 100 > y_dart[j_dart])){
10004e18:	e0bf6e0f 	ldh	r2,-584(fp)
10004e1c:	1085883a 	add	r2,r2,r2
10004e20:	1085883a 	add	r2,r2,r2
10004e24:	e17f6104 	addi	r5,fp,-636
10004e28:	2885883a 	add	r2,r5,r2
10004e2c:	10808d04 	addi	r2,r2,564
10004e30:	10800017 	ldw	r2,0(r2)
10004e34:	10c01904 	addi	r3,r2,100
10004e38:	e0bf8017 	ldw	r2,-512(fp)
10004e3c:	1085883a 	add	r2,r2,r2
10004e40:	1085883a 	add	r2,r2,r2
10004e44:	e13f6104 	addi	r4,fp,-636
10004e48:	2085883a 	add	r2,r4,r2
10004e4c:	10803804 	addi	r2,r2,224
10004e50:	10800017 	ldw	r2,0(r2)
10004e54:	10c0140e 	bge	r2,r3,10004ea8 <main+0x3cb0>
							live_skull[i_dart] = 0;
10004e58:	e0bf6e0f 	ldh	r2,-584(fp)
10004e5c:	1085883a 	add	r2,r2,r2
10004e60:	e17f6104 	addi	r5,fp,-636
10004e64:	2885883a 	add	r2,r5,r2
10004e68:	10807804 	addi	r2,r2,480
10004e6c:	1000000d 	sth	zero,0(r2)
							status_dart[j_dart] = 0;
10004e70:	e0bf8017 	ldw	r2,-512(fp)
10004e74:	1085883a 	add	r2,r2,r2
10004e78:	1085883a 	add	r2,r2,r2
10004e7c:	e0ff6104 	addi	r3,fp,-636
10004e80:	1885883a 	add	r2,r3,r2
10004e84:	10804104 	addi	r2,r2,260
10004e88:	10000015 	stw	zero,0(r2)
							cnt_dart[j_dart] = 0;
10004e8c:	e0ffa104 	addi	r3,fp,-380
10004e90:	e0bf8017 	ldw	r2,-512(fp)
10004e94:	1885883a 	add	r2,r3,r2
10004e98:	10000005 	stb	zero,0(r2)
							energy += 10;
10004e9c:	e0bf6b17 	ldw	r2,-596(fp)
10004ea0:	10800284 	addi	r2,r2,10
10004ea4:	e0bf6b15 	stw	r2,-596(fp)
					status_iceball[i_dart] &= 0x7fffffff;
				} else {
					status_iceball[i_dart] |= 0x80000000;
				}
			if(live_iceball[i_dart]){
				for(int j_dart = 0; j_dart < 4; j_dart++){
10004ea8:	e0bf8017 	ldw	r2,-512(fp)
10004eac:	10800044 	addi	r2,r2,1
10004eb0:	e0bf8015 	stw	r2,-512(fp)
10004eb4:	e0bf8017 	ldw	r2,-512(fp)
10004eb8:	10800110 	cmplti	r2,r2,4
10004ebc:	103f9e1e 	bne	r2,zero,10004d38 <__alt_data_end+0xf8004d38>
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
10004ec0:	e0bf6817 	ldw	r2,-608(fp)
10004ec4:	10004e1e 	bne	r2,zero,10005000 <main+0x3e08>
					if ((x_iceball[i_dart] + 100 > x) && (x_iceball[i_dart] < x + 160) && (y_iceball[i_dart] < y + 240)&& (y_iceball[i_dart] + 100 > y)){
10004ec8:	e0bf6e0f 	ldh	r2,-584(fp)
10004ecc:	1085883a 	add	r2,r2,r2
10004ed0:	1085883a 	add	r2,r2,r2
10004ed4:	e13f6104 	addi	r4,fp,-636
10004ed8:	2085883a 	add	r2,r4,r2
10004edc:	10808b04 	addi	r2,r2,556
10004ee0:	10800017 	ldw	r2,0(r2)
10004ee4:	10801904 	addi	r2,r2,100
10004ee8:	e0ff6217 	ldw	r3,-632(fp)
10004eec:	1880440e 	bge	r3,r2,10005000 <main+0x3e08>
10004ef0:	e0bf6e0f 	ldh	r2,-584(fp)
10004ef4:	1085883a 	add	r2,r2,r2
10004ef8:	1085883a 	add	r2,r2,r2
10004efc:	e17f6104 	addi	r5,fp,-636
10004f00:	2885883a 	add	r2,r5,r2
10004f04:	10808b04 	addi	r2,r2,556
10004f08:	10c00017 	ldw	r3,0(r2)
10004f0c:	e0bf6217 	ldw	r2,-632(fp)
10004f10:	10802804 	addi	r2,r2,160
10004f14:	18803a0e 	bge	r3,r2,10005000 <main+0x3e08>
10004f18:	e0bf6e0f 	ldh	r2,-584(fp)
10004f1c:	1085883a 	add	r2,r2,r2
10004f20:	1085883a 	add	r2,r2,r2
10004f24:	e0ff6104 	addi	r3,fp,-636
10004f28:	1885883a 	add	r2,r3,r2
10004f2c:	10808d04 	addi	r2,r2,564
10004f30:	10c00017 	ldw	r3,0(r2)
10004f34:	e0bf6317 	ldw	r2,-628(fp)
10004f38:	10803c04 	addi	r2,r2,240
10004f3c:	1880300e 	bge	r3,r2,10005000 <main+0x3e08>
10004f40:	e0bf6e0f 	ldh	r2,-584(fp)
10004f44:	1085883a 	add	r2,r2,r2
10004f48:	1085883a 	add	r2,r2,r2
10004f4c:	e13f6104 	addi	r4,fp,-636
10004f50:	2085883a 	add	r2,r4,r2
10004f54:	10808d04 	addi	r2,r2,564
10004f58:	10800017 	ldw	r2,0(r2)
10004f5c:	10801904 	addi	r2,r2,100
10004f60:	e0ff6317 	ldw	r3,-628(fp)
10004f64:	1880260e 	bge	r3,r2,10005000 <main+0x3e08>
						live_iceball[i_dart] = 0;
10004f68:	e0bf6e0f 	ldh	r2,-584(fp)
10004f6c:	1085883a 	add	r2,r2,r2
10004f70:	e17f6104 	addi	r5,fp,-636
10004f74:	2885883a 	add	r2,r5,r2
10004f78:	10809304 	addi	r2,r2,588
10004f7c:	1000000d 	sth	zero,0(r2)
						if (status_ninja & 0x02000000){
10004f80:	e0bf6617 	ldw	r2,-616(fp)
10004f84:	1080802c 	andhi	r2,r2,512
10004f88:	10000626 	beq	r2,zero,10004fa4 <main+0x3dac>
							if(spin){
10004f8c:	e0bf670f 	ldh	r2,-612(fp)
10004f90:	10001b26 	beq	r2,zero,10005000 <main+0x3e08>
								life += 5;
10004f94:	e0bf6a17 	ldw	r2,-600(fp)
10004f98:	10800144 	addi	r2,r2,5
10004f9c:	e0bf6a15 	stw	r2,-600(fp)
10004fa0:	00001706 	br	10005000 <main+0x3e08>
							}
						} else {
							hurt_counter = 60;
10004fa4:	00800f04 	movi	r2,60
10004fa8:	e0bf6815 	stw	r2,-608(fp)
							air_counter = 30;
10004fac:	00800784 	movi	r2,30
10004fb0:	e0bf6915 	stw	r2,-604(fp)
							v_y = -v_jump3;
10004fb4:	e0bf8917 	ldw	r2,-476(fp)
10004fb8:	0085c83a 	sub	r2,zero,r2
10004fbc:	e0bf6515 	stw	r2,-620(fp)
							on_gnd = 0;
10004fc0:	e03f7205 	stb	zero,-568(fp)
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
10004fc4:	e0ff6617 	ldw	r3,-616(fp)
10004fc8:	00b90034 	movhi	r2,58368
10004fcc:	10bfffc4 	addi	r2,r2,-1
10004fd0:	1884703a 	and	r2,r3,r2
10004fd4:	10820034 	orhi	r2,r2,2048
10004fd8:	e0bf6615 	stw	r2,-616(fp)
							life_energy_status |= 0x00000080;
10004fdc:	e0bf6c17 	ldw	r2,-592(fp)
10004fe0:	10802014 	ori	r2,r2,128
10004fe4:	e0bf6c15 	stw	r2,-592(fp)
							life -= 10;
10004fe8:	e0bf6a17 	ldw	r2,-600(fp)
10004fec:	10bffd84 	addi	r2,r2,-10
10004ff0:	e0bf6a15 	stw	r2,-600(fp)
							energy += 5;
10004ff4:	e0bf6b17 	ldw	r2,-596(fp)
10004ff8:	10800144 	addi	r2,r2,5
10004ffc:	e0bf6b15 	stw	r2,-596(fp)
						}
					}
				}
				if (x > x_iceball[i_dart]){
10005000:	e0bf6e0f 	ldh	r2,-584(fp)
10005004:	1085883a 	add	r2,r2,r2
10005008:	1085883a 	add	r2,r2,r2
1000500c:	e0ff6104 	addi	r3,fp,-636
10005010:	1885883a 	add	r2,r3,r2
10005014:	10808b04 	addi	r2,r2,556
10005018:	10c00017 	ldw	r3,0(r2)
1000501c:	e0bf6217 	ldw	r2,-632(fp)
10005020:	1880180e 	bge	r3,r2,10005084 <main+0x3e8c>
					v_x_iceball[i_dart] = v_enemy1;
10005024:	e0bf6e0f 	ldh	r2,-584(fp)
10005028:	e0ff8c17 	ldw	r3,-464(fp)
1000502c:	1085883a 	add	r2,r2,r2
10005030:	1085883a 	add	r2,r2,r2
10005034:	e13f6104 	addi	r4,fp,-636
10005038:	2085883a 	add	r2,r4,r2
1000503c:	10808f04 	addi	r2,r2,572
10005040:	10c00015 	stw	r3,0(r2)
					status_iceball[i_dart] |= 0x40000000;
10005044:	e0bf6e0f 	ldh	r2,-584(fp)
10005048:	e0ff6e0f 	ldh	r3,-584(fp)
1000504c:	18c7883a 	add	r3,r3,r3
10005050:	18c7883a 	add	r3,r3,r3
10005054:	e17f6104 	addi	r5,fp,-636
10005058:	28c7883a 	add	r3,r5,r3
1000505c:	18c09404 	addi	r3,r3,592
10005060:	18c00017 	ldw	r3,0(r3)
10005064:	18d00034 	orhi	r3,r3,16384
10005068:	1085883a 	add	r2,r2,r2
1000506c:	1085883a 	add	r2,r2,r2
10005070:	e13f6104 	addi	r4,fp,-636
10005074:	2085883a 	add	r2,r4,r2
10005078:	10809404 	addi	r2,r2,592
1000507c:	10c00015 	stw	r3,0(r2)
10005080:	00001a06 	br	100050ec <main+0x3ef4>
				} else{
					v_x_iceball[i_dart] = -v_enemy1;
10005084:	e0bf6e0f 	ldh	r2,-584(fp)
10005088:	e0ff8c17 	ldw	r3,-464(fp)
1000508c:	00c7c83a 	sub	r3,zero,r3
10005090:	1085883a 	add	r2,r2,r2
10005094:	1085883a 	add	r2,r2,r2
10005098:	e17f6104 	addi	r5,fp,-636
1000509c:	2885883a 	add	r2,r5,r2
100050a0:	10808f04 	addi	r2,r2,572
100050a4:	10c00015 	stw	r3,0(r2)
					status_iceball[i_dart] &= 0xbfffffff;
100050a8:	e0ff6e0f 	ldh	r3,-584(fp)
100050ac:	e0bf6e0f 	ldh	r2,-584(fp)
100050b0:	1085883a 	add	r2,r2,r2
100050b4:	1085883a 	add	r2,r2,r2
100050b8:	e13f6104 	addi	r4,fp,-636
100050bc:	2085883a 	add	r2,r4,r2
100050c0:	10809404 	addi	r2,r2,592
100050c4:	11000017 	ldw	r4,0(r2)
100050c8:	00b00034 	movhi	r2,49152
100050cc:	10bfffc4 	addi	r2,r2,-1
100050d0:	2088703a 	and	r4,r4,r2
100050d4:	18c5883a 	add	r2,r3,r3
100050d8:	1085883a 	add	r2,r2,r2
100050dc:	e17f6104 	addi	r5,fp,-636
100050e0:	2885883a 	add	r2,r5,r2
100050e4:	10809404 	addi	r2,r2,592
100050e8:	11000015 	stw	r4,0(r2)
				}

				if (y > y_iceball[i_dart]){
100050ec:	e0bf6e0f 	ldh	r2,-584(fp)
100050f0:	1085883a 	add	r2,r2,r2
100050f4:	1085883a 	add	r2,r2,r2
100050f8:	e0ff6104 	addi	r3,fp,-636
100050fc:	1885883a 	add	r2,r3,r2
10005100:	10808d04 	addi	r2,r2,564
10005104:	10c00017 	ldw	r3,0(r2)
10005108:	e0bf6317 	ldw	r2,-628(fp)
1000510c:	1880090e 	bge	r3,r2,10005134 <main+0x3f3c>
					v_y_iceball[i_dart] = v_enemy1;
10005110:	e0bf6e0f 	ldh	r2,-584(fp)
10005114:	e0ff8c17 	ldw	r3,-464(fp)
10005118:	1085883a 	add	r2,r2,r2
1000511c:	1085883a 	add	r2,r2,r2
10005120:	e13f6104 	addi	r4,fp,-636
10005124:	2085883a 	add	r2,r4,r2
10005128:	10809104 	addi	r2,r2,580
1000512c:	10c00015 	stw	r3,0(r2)
10005130:	00000906 	br	10005158 <main+0x3f60>
				} else{
					v_y_iceball[i_dart] = -v_enemy1;
10005134:	e0bf6e0f 	ldh	r2,-584(fp)
10005138:	e0ff8c17 	ldw	r3,-464(fp)
1000513c:	00c7c83a 	sub	r3,zero,r3
10005140:	1085883a 	add	r2,r2,r2
10005144:	1085883a 	add	r2,r2,r2
10005148:	e17f6104 	addi	r5,fp,-636
1000514c:	2885883a 	add	r2,r5,r2
10005150:	10809104 	addi	r2,r2,580
10005154:	10c00015 	stw	r3,0(r2)
				}
				x_iceball[i_dart] += v_x_iceball[i_dart];
10005158:	e0bf6e0f 	ldh	r2,-584(fp)
1000515c:	e0ff6e0f 	ldh	r3,-584(fp)
10005160:	18c7883a 	add	r3,r3,r3
10005164:	18c7883a 	add	r3,r3,r3
10005168:	e13f6104 	addi	r4,fp,-636
1000516c:	20c7883a 	add	r3,r4,r3
10005170:	18c08b04 	addi	r3,r3,556
10005174:	19000017 	ldw	r4,0(r3)
10005178:	e0ff6e0f 	ldh	r3,-584(fp)
1000517c:	18c7883a 	add	r3,r3,r3
10005180:	18c7883a 	add	r3,r3,r3
10005184:	e17f6104 	addi	r5,fp,-636
10005188:	28c7883a 	add	r3,r5,r3
1000518c:	18c08f04 	addi	r3,r3,572
10005190:	18c00017 	ldw	r3,0(r3)
10005194:	20c7883a 	add	r3,r4,r3
10005198:	1085883a 	add	r2,r2,r2
1000519c:	1085883a 	add	r2,r2,r2
100051a0:	e13f6104 	addi	r4,fp,-636
100051a4:	2085883a 	add	r2,r4,r2
100051a8:	10808b04 	addi	r2,r2,556
100051ac:	10c00015 	stw	r3,0(r2)
				y_iceball[i_dart] += v_y_iceball[i_dart];
100051b0:	e0bf6e0f 	ldh	r2,-584(fp)
100051b4:	e0ff6e0f 	ldh	r3,-584(fp)
100051b8:	18c7883a 	add	r3,r3,r3
100051bc:	18c7883a 	add	r3,r3,r3
100051c0:	e17f6104 	addi	r5,fp,-636
100051c4:	28c7883a 	add	r3,r5,r3
100051c8:	18c08d04 	addi	r3,r3,564
100051cc:	19000017 	ldw	r4,0(r3)
100051d0:	e0ff6e0f 	ldh	r3,-584(fp)
100051d4:	18c7883a 	add	r3,r3,r3
100051d8:	18c7883a 	add	r3,r3,r3
100051dc:	e17f6104 	addi	r5,fp,-636
100051e0:	28c7883a 	add	r3,r5,r3
100051e4:	18c09104 	addi	r3,r3,580
100051e8:	18c00017 	ldw	r3,0(r3)
100051ec:	20c7883a 	add	r3,r4,r3
100051f0:	1085883a 	add	r2,r2,r2
100051f4:	1085883a 	add	r2,r2,r2
100051f8:	e13f6104 	addi	r4,fp,-636
100051fc:	2085883a 	add	r2,r4,r2
10005200:	10808d04 	addi	r2,r2,564
10005204:	10c00015 	stw	r3,0(r2)
				if(live_iceball[i_dart] <= 0){
10005208:	e0bf6e0f 	ldh	r2,-584(fp)
1000520c:	1085883a 	add	r2,r2,r2
10005210:	e17f6104 	addi	r5,fp,-636
10005214:	2885883a 	add	r2,r5,r2
10005218:	10809304 	addi	r2,r2,588
1000521c:	1080000b 	ldhu	r2,0(r2)
10005220:	10bfffcc 	andi	r2,r2,65535
10005224:	10a0001c 	xori	r2,r2,32768
10005228:	10a00004 	addi	r2,r2,-32768
1000522c:	00800d16 	blt	zero,r2,10005264 <main+0x406c>
					live_iceball[i_dart] = 0;
10005230:	e0bf6e0f 	ldh	r2,-584(fp)
10005234:	1085883a 	add	r2,r2,r2
10005238:	e0ff6104 	addi	r3,fp,-636
1000523c:	1885883a 	add	r2,r3,r2
10005240:	10809304 	addi	r2,r2,588
10005244:	1000000d 	sth	zero,0(r2)
					status_iceball[i_dart] = 0;
10005248:	e0bf6e0f 	ldh	r2,-584(fp)
1000524c:	1085883a 	add	r2,r2,r2
10005250:	1085883a 	add	r2,r2,r2
10005254:	e13f6104 	addi	r4,fp,-636
10005258:	2085883a 	add	r2,r4,r2
1000525c:	10809404 	addi	r2,r2,592
10005260:	10000015 	stw	zero,0(r2)
					status_fireball[i_dart] = 0;
				}
			}
			fire_out: ;
		}
		for(i_dart = 0; i_dart < 2; i_dart++){
10005264:	e0bf6e0b 	ldhu	r2,-584(fp)
10005268:	10800044 	addi	r2,r2,1
1000526c:	e0bf6e0d 	sth	r2,-584(fp)
10005270:	e0bf6e0f 	ldh	r2,-584(fp)
10005274:	10800090 	cmplti	r2,r2,2
10005278:	103e571e 	bne	r2,zero,10004bd8 <__alt_data_end+0xf8004bd8>
				}
			}
			ice_out:;
		}
		//*/
		for(int j_dart = 0; j_dart < 4; j_dart++){
1000527c:	e03f8115 	stw	zero,-508(fp)
10005280:	00002606 	br	1000531c <main+0x4124>
			if(status_dart[j_dart]){
10005284:	e0bf8117 	ldw	r2,-508(fp)
10005288:	1085883a 	add	r2,r2,r2
1000528c:	1085883a 	add	r2,r2,r2
10005290:	e17f6104 	addi	r5,fp,-636
10005294:	2885883a 	add	r2,r5,r2
10005298:	10804104 	addi	r2,r2,260
1000529c:	10800017 	ldw	r2,0(r2)
100052a0:	10001b26 	beq	r2,zero,10005310 <main+0x4118>
				if (2000 + mapX< x_dart[j_dart]){
100052a4:	e0bf7117 	ldw	r2,-572(fp)
100052a8:	10c1f404 	addi	r3,r2,2000
100052ac:	e0bf8117 	ldw	r2,-508(fp)
100052b0:	1085883a 	add	r2,r2,r2
100052b4:	1085883a 	add	r2,r2,r2
100052b8:	e13f6104 	addi	r4,fp,-636
100052bc:	2085883a 	add	r2,r4,r2
100052c0:	10803404 	addi	r2,r2,208
100052c4:	10800017 	ldw	r2,0(r2)
100052c8:	1880110e 	bge	r3,r2,10005310 <main+0x4118>
					boss_life -= 1;
100052cc:	e0bf7e17 	ldw	r2,-520(fp)
100052d0:	10bfffc4 	addi	r2,r2,-1
100052d4:	e0bf7e15 	stw	r2,-520(fp)
					status_dart[j_dart] = 0;
100052d8:	e0bf8117 	ldw	r2,-508(fp)
100052dc:	1085883a 	add	r2,r2,r2
100052e0:	1085883a 	add	r2,r2,r2
100052e4:	e17f6104 	addi	r5,fp,-636
100052e8:	2885883a 	add	r2,r5,r2
100052ec:	10804104 	addi	r2,r2,260
100052f0:	10000015 	stw	zero,0(r2)
					cnt_dart[j_dart] = 0;
100052f4:	e0ffa104 	addi	r3,fp,-380
100052f8:	e0bf8117 	ldw	r2,-508(fp)
100052fc:	1885883a 	add	r2,r3,r2
10005300:	10000005 	stb	zero,0(r2)
					energy += 10;
10005304:	e0bf6b17 	ldw	r2,-596(fp)
10005308:	10800284 	addi	r2,r2,10
1000530c:	e0bf6b15 	stw	r2,-596(fp)
				}
			}
			ice_out:;
		}
		//*/
		for(int j_dart = 0; j_dart < 4; j_dart++){
10005310:	e0bf8117 	ldw	r2,-508(fp)
10005314:	10800044 	addi	r2,r2,1
10005318:	e0bf8115 	stw	r2,-508(fp)
1000531c:	e0bf8117 	ldw	r2,-508(fp)
10005320:	10800110 	cmplti	r2,r2,4
10005324:	103fd71e 	bne	r2,zero,10005284 <__alt_data_end+0xf8005284>
					cnt_dart[j_dart] = 0;
					energy += 10;
				}
			}
		}
		if(hurt_counter == 0){
10005328:	e0bf6817 	ldw	r2,-608(fp)
1000532c:	10000f1e 	bne	r2,zero,1000536c <main+0x4174>
			if (200 + mapX < x){
10005330:	e0bf7117 	ldw	r2,-572(fp)
10005334:	10c03204 	addi	r3,r2,200
10005338:	e0bf6217 	ldw	r2,-632(fp)
1000533c:	18800b0e 	bge	r3,r2,1000536c <main+0x4174>
				if (status_ninja & 0x02000000){
10005340:	e0bf6617 	ldw	r2,-616(fp)
10005344:	1080802c 	andhi	r2,r2,512
10005348:	10000826 	beq	r2,zero,1000536c <main+0x4174>
					if(spin){
1000534c:	e0bf670f 	ldh	r2,-612(fp)
10005350:	10000626 	beq	r2,zero,1000536c <main+0x4174>
						life += 5;
10005354:	e0bf6a17 	ldw	r2,-600(fp)
10005358:	10800144 	addi	r2,r2,5
1000535c:	e0bf6a15 	stw	r2,-600(fp)
						boss_life -= 3;
10005360:	e0bf7e17 	ldw	r2,-520(fp)
10005364:	10bfff44 	addi	r2,r2,-3
10005368:	e0bf7e15 	stw	r2,-520(fp)
					}
				}

			}
		}
		if (boss_life <= 0){
1000536c:	e0bf7e17 	ldw	r2,-520(fp)
10005370:	00800816 	blt	zero,r2,10005394 <main+0x419c>
			status_boss = 0;
10005374:	e03f7d15 	stw	zero,-524(fp)
			goto win;
10005378:	0001883a 	nop
			goto Start_label;
		}
	}

	win :;
	clock = 0;
1000537c:	e03f6115 	stw	zero,-636(fp)
	status_boss = 0xb0000000;
10005380:	00ac0034 	movhi	r2,45056
10005384:	e0bf7d15 	stw	r2,-524(fp)
	for (int i = 2; i < 41; i++){
10005388:	00800084 	movi	r2,2
1000538c:	e0bf8215 	stw	r2,-504(fp)
10005390:	00015906 	br	100058f8 <main+0x4700>
		}
		if (boss_life <= 0){
			status_boss = 0;
			goto win;
		}
		if (life<= 1){
10005394:	e0bf6a17 	ldw	r2,-600(fp)
10005398:	10800088 	cmpgei	r2,r2,2
1000539c:	1000031e 	bne	r2,zero,100053ac <main+0x41b4>
			life = 1;
100053a0:	00800044 	movi	r2,1
100053a4:	e0bf6a15 	stw	r2,-600(fp)
			goto Dead_label;
100053a8:	00009106 	br	100055f0 <main+0x43f8>
		}
		if(cd_dart > 0){
100053ac:	e0bf6d07 	ldb	r2,-588(fp)
100053b0:	0080030e 	bge	zero,r2,100053c0 <main+0x41c8>
			cd_dart--;
100053b4:	e0bf6d03 	ldbu	r2,-588(fp)
100053b8:	10bfffc4 	addi	r2,r2,-1
100053bc:	e0bf6d05 	stb	r2,-588(fp)
		}
		//////////////////////////////////////
		if (!on_gnd){
100053c0:	e0bf7207 	ldb	r2,-568(fp)
100053c4:	10000f1e 	bne	r2,zero,10005404 <main+0x420c>
			if (y > ground){
100053c8:	e0bf6317 	ldw	r2,-628(fp)
100053cc:	e0ff8b17 	ldw	r3,-468(fp)
100053d0:	1880082e 	bgeu	r3,r2,100053f4 <main+0x41fc>
				if (v_y > 0){
100053d4:	e0bf6517 	ldw	r2,-620(fp)
100053d8:	0080010e 	bge	zero,r2,100053e0 <main+0x41e8>
					v_y = 0;
100053dc:	e03f6515 	stw	zero,-620(fp)
				}
				y = ground;
100053e0:	e0bf8b17 	ldw	r2,-468(fp)
100053e4:	e0bf6315 	stw	r2,-628(fp)
				on_gnd = 1;
100053e8:	00800044 	movi	r2,1
100053ec:	e0bf7205 	stb	r2,-568(fp)
100053f0:	00000406 	br	10005404 <main+0x420c>
			}
			else{
				v_y += vel_y;
100053f4:	e0ff6517 	ldw	r3,-620(fp)
100053f8:	e0bf8617 	ldw	r2,-488(fp)
100053fc:	1885883a 	add	r2,r3,r2
10005400:	e0bf6515 	stw	r2,-620(fp)
			}
		}
		if (spin){
10005404:	e0bf670f 	ldh	r2,-612(fp)
10005408:	10000126 	beq	r2,zero,10005410 <main+0x4218>
			v_y = 0;
1000540c:	e03f6515 	stw	zero,-620(fp)
		}
		if(air_counter == 0){
10005410:	e0bf6917 	ldw	r2,-604(fp)
10005414:	10000b1e 	bne	r2,zero,10005444 <main+0x424c>
			if (v_x == 0){
10005418:	e0bf6417 	ldw	r2,-624(fp)
1000541c:	1000061e 	bne	r2,zero,10005438 <main+0x4240>
				status_ninja &= 0xe3ffffff;
10005420:	e0ff6617 	ldw	r3,-616(fp)
10005424:	00b90034 	movhi	r2,58368
10005428:	10bfffc4 	addi	r2,r2,-1
1000542c:	1884703a 	and	r2,r3,r2
10005430:	e0bf6615 	stw	r2,-616(fp)
10005434:	00000306 	br	10005444 <main+0x424c>
			} else {
				status_ninja |= 0x9c000000;
10005438:	e0bf6617 	ldw	r2,-616(fp)
1000543c:	10a70034 	orhi	r2,r2,39936
10005440:	e0bf6615 	stw	r2,-616(fp)
			}
		}
		y += v_y;
10005444:	e0ff6317 	ldw	r3,-628(fp)
10005448:	e0bf6517 	ldw	r2,-620(fp)
1000544c:	1885883a 	add	r2,r3,r2
10005450:	e0bf6315 	stw	r2,-628(fp)
		x += v_x;
10005454:	e0ff6217 	ldw	r3,-632(fp)
10005458:	e0bf6417 	ldw	r2,-624(fp)
1000545c:	1885883a 	add	r2,r3,r2
10005460:	e0bf6215 	stw	r2,-632(fp)
		if (y < 0){
10005464:	e0bf6317 	ldw	r2,-628(fp)
10005468:	1000010e 	bge	r2,zero,10005470 <main+0x4278>
			y = 0;
1000546c:	e03f6315 	stw	zero,-628(fp)
		}
		if (x < 0){
10005470:	e0bf6217 	ldw	r2,-632(fp)
10005474:	1000010e 	bge	r2,zero,1000547c <main+0x4284>
			x = 0;
10005478:	e03f6215 	stw	zero,-632(fp)
		}
		if (x >= mapX + 2559){
1000547c:	e0bf7117 	ldw	r2,-572(fp)
10005480:	10827fc4 	addi	r2,r2,2559
10005484:	e0ff6217 	ldw	r3,-632(fp)
10005488:	18800316 	blt	r3,r2,10005498 <main+0x42a0>
			x = mapX + 2559;
1000548c:	e0bf7117 	ldw	r2,-572(fp)
10005490:	10827fc4 	addi	r2,r2,2559
10005494:	e0bf6215 	stw	r2,-632(fp)
		}
		if (mapX > x){
10005498:	e0bf7117 	ldw	r2,-572(fp)
1000549c:	e0ff6217 	ldw	r3,-632(fp)
100054a0:	1880020e 	bge	r3,r2,100054ac <main+0x42b4>
			x = mapX;
100054a4:	e0bf7117 	ldw	r2,-572(fp)
100054a8:	e0bf6215 	stw	r2,-632(fp)
		}

		if (status_ninja & 0x02000000){
100054ac:	e0bf6617 	ldw	r2,-616(fp)
100054b0:	1080802c 	andhi	r2,r2,512
100054b4:	10001726 	beq	r2,zero,10005514 <main+0x431c>
			if (energy <= 1){
100054b8:	e0bf6b17 	ldw	r2,-596(fp)
100054bc:	10800088 	cmpgei	r2,r2,2
100054c0:	10000d1e 	bne	r2,zero,100054f8 <main+0x4300>
				energy = 1;
100054c4:	00800044 	movi	r2,1
100054c8:	e0bf6b15 	stw	r2,-596(fp)
				life_energy_status &= 0xffff7fff;
100054cc:	e0ff6c17 	ldw	r3,-592(fp)
100054d0:	00bffff4 	movhi	r2,65535
100054d4:	109fffc4 	addi	r2,r2,32767
100054d8:	1884703a 	and	r2,r3,r2
100054dc:	e0bf6c15 	stw	r2,-592(fp)
				status_ninja &= 0xfdffffff;
100054e0:	e0ff6617 	ldw	r3,-616(fp)
100054e4:	00bf8034 	movhi	r2,65024
100054e8:	10bfffc4 	addi	r2,r2,-1
100054ec:	1884703a 	and	r2,r3,r2
100054f0:	e0bf6615 	stw	r2,-616(fp)
100054f4:	00001906 	br	1000555c <main+0x4364>
			} else if((clock & 0x00000003) == 0){
100054f8:	e0bf6117 	ldw	r2,-636(fp)
100054fc:	108000cc 	andi	r2,r2,3
10005500:	1000161e 	bne	r2,zero,1000555c <main+0x4364>
				energy -= 1;
10005504:	e0bf6b17 	ldw	r2,-596(fp)
10005508:	10bfffc4 	addi	r2,r2,-1
1000550c:	e0bf6b15 	stw	r2,-596(fp)
10005510:	00001206 	br	1000555c <main+0x4364>
			}
		} else if(energy < 80){
10005514:	e0bf6b17 	ldw	r2,-596(fp)
10005518:	10801408 	cmpgei	r2,r2,80
1000551c:	1000071e 	bne	r2,zero,1000553c <main+0x4344>
			if((clock & 0x0000000f) == 0){
10005520:	e0bf6117 	ldw	r2,-636(fp)
10005524:	108003cc 	andi	r2,r2,15
10005528:	10000c1e 	bne	r2,zero,1000555c <main+0x4364>
				energy += 1;
1000552c:	e0bf6b17 	ldw	r2,-596(fp)
10005530:	10800044 	addi	r2,r2,1
10005534:	e0bf6b15 	stw	r2,-596(fp)
10005538:	00000806 	br	1000555c <main+0x4364>
			}
		} else if(energy >= 80){
1000553c:	e0bf6b17 	ldw	r2,-596(fp)
10005540:	10801410 	cmplti	r2,r2,80
10005544:	1000051e 	bne	r2,zero,1000555c <main+0x4364>
			energy = 80;
10005548:	00801404 	movi	r2,80
1000554c:	e0bf6b15 	stw	r2,-596(fp)
			life_energy_status |= 0x00008000;
10005550:	e0bf6c17 	ldw	r2,-592(fp)
10005554:	10a00014 	ori	r2,r2,32768
10005558:	e0bf6c15 	stw	r2,-592(fp)
		}

		if (hurt_counter > 0){
1000555c:	e0bf6817 	ldw	r2,-608(fp)
10005560:	0080040e 	bge	zero,r2,10005574 <main+0x437c>
			hurt_counter -= 1;
10005564:	e0bf6817 	ldw	r2,-608(fp)
10005568:	10bfffc4 	addi	r2,r2,-1
1000556c:	e0bf6815 	stw	r2,-608(fp)
10005570:	00000506 	br	10005588 <main+0x4390>
		} else {
			hurt_counter = 0;
10005574:	e03f6815 	stw	zero,-608(fp)
			life_energy_status &= 0xffffff7f;
10005578:	e0ff6c17 	ldw	r3,-592(fp)
1000557c:	00bfdfc4 	movi	r2,-129
10005580:	1884703a 	and	r2,r3,r2
10005584:	e0bf6c15 	stw	r2,-592(fp)
		}
		if (air_counter > 0){
10005588:	e0bf6917 	ldw	r2,-604(fp)
1000558c:	0080030e 	bge	zero,r2,1000559c <main+0x43a4>
			air_counter -= 1;
10005590:	e0bf6917 	ldw	r2,-604(fp)
10005594:	10bfffc4 	addi	r2,r2,-1
10005598:	e0bf6915 	stw	r2,-604(fp)
		}
		if(spin <= 0){
1000559c:	e0bf670f 	ldh	r2,-612(fp)
100055a0:	00800216 	blt	zero,r2,100055ac <main+0x43b4>
			spin = 0;
100055a4:	e03f670d 	sth	zero,-612(fp)
100055a8:	00000906 	br	100055d0 <main+0x43d8>
		} else {
			spin -= 1;
100055ac:	e0bf670b 	ldhu	r2,-612(fp)
100055b0:	10bfffc4 	addi	r2,r2,-1
100055b4:	e0bf670d 	sth	r2,-612(fp)
			status_ninja = (status_ninja | 0x04000000) & 0xe7ffffff;
100055b8:	e0ff6617 	ldw	r3,-616(fp)
100055bc:	00b90034 	movhi	r2,58368
100055c0:	10bfffc4 	addi	r2,r2,-1
100055c4:	1884703a 	and	r2,r3,r2
100055c8:	10810034 	orhi	r2,r2,1024
100055cc:	e0bf6615 	stw	r2,-616(fp)
		}
		if(spin_cd <= 0){
100055d0:	e0bf678f 	ldh	r2,-610(fp)
100055d4:	00800216 	blt	zero,r2,100055e0 <main+0x43e8>
			spin_cd = 0;
100055d8:	e03f678d 	sth	zero,-610(fp)
100055dc:	003a4906 	br	10003f04 <__alt_data_end+0xf8003f04>
		} else {
			spin_cd -= 1;
100055e0:	e0bf678b 	ldhu	r2,-610(fp)
100055e4:	10bfffc4 	addi	r2,r2,-1
100055e8:	e0bf678d 	sth	r2,-610(fp)
		}
	}
100055ec:	003a4506 	br	10003f04 <__alt_data_end+0xf8003f04>
	Dead_label: ;
	status_ninja = (status_ninja | 0x14000000) & 0xf7ffffff;
100055f0:	e0ff6617 	ldw	r3,-616(fp)
100055f4:	00b90034 	movhi	r2,58368
100055f8:	10bfffc4 	addi	r2,r2,-1
100055fc:	1884703a 	and	r2,r3,r2
10005600:	10850034 	orhi	r2,r2,5120
10005604:	e0bf6615 	stw	r2,-616(fp)
	while(1){
		clock += 1;
10005608:	e0bf6117 	ldw	r2,-636(fp)
1000560c:	10800044 	addi	r2,r2,1
10005610:	e0bf6115 	stw	r2,-636(fp)
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
10005614:	0001883a 	nop
10005618:	d0a00017 	ldw	r2,-32768(gp)
1000561c:	10803f04 	addi	r2,r2,252
10005620:	10800017 	ldw	r2,0(r2)
10005624:	103ffc26 	beq	r2,zero,10005618 <__alt_data_end+0xf8005618>
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = (mapX >> 3) | 0x00010000;
10005628:	d0a00017 	ldw	r2,-32768(gp)
1000562c:	e0ff7117 	ldw	r3,-572(fp)
10005630:	1807d0fa 	srai	r3,r3,3
10005634:	18c00074 	orhi	r3,r3,1
10005638:	10c00015 	stw	r3,0(r2)
		reg_ptr[1] = (life + (energy << 8)) | life_energy_status;
1000563c:	d0a00017 	ldw	r2,-32768(gp)
10005640:	10800104 	addi	r2,r2,4
10005644:	e0ff6b17 	ldw	r3,-596(fp)
10005648:	1808923a 	slli	r4,r3,8
1000564c:	e0ff6a17 	ldw	r3,-600(fp)
10005650:	20c7883a 	add	r3,r4,r3
10005654:	1809883a 	mov	r4,r3
10005658:	e0ff6c17 	ldw	r3,-592(fp)
1000565c:	20c6b03a 	or	r3,r4,r3
10005660:	10c00015 	stw	r3,0(r2)
		reg_ptr[2] = (((y_dart[0]>>3) << 16) + (x_dart[0]>>3)) | status_dart[0];
10005664:	d0a00017 	ldw	r2,-32768(gp)
10005668:	10800204 	addi	r2,r2,8
1000566c:	e0ff9917 	ldw	r3,-412(fp)
10005670:	1807d0fa 	srai	r3,r3,3
10005674:	1808943a 	slli	r4,r3,16
10005678:	e0ff9517 	ldw	r3,-428(fp)
1000567c:	1807d0fa 	srai	r3,r3,3
10005680:	20c7883a 	add	r3,r4,r3
10005684:	1809883a 	mov	r4,r3
10005688:	e0ffa217 	ldw	r3,-376(fp)
1000568c:	20c6b03a 	or	r3,r4,r3
10005690:	10c00015 	stw	r3,0(r2)
		reg_ptr[3] = (((y_dart[1]>>3) << 16) + (x_dart[1]>>3)) | status_dart[1];
10005694:	d0a00017 	ldw	r2,-32768(gp)
10005698:	10800304 	addi	r2,r2,12
1000569c:	e0ff9a17 	ldw	r3,-408(fp)
100056a0:	1807d0fa 	srai	r3,r3,3
100056a4:	1808943a 	slli	r4,r3,16
100056a8:	e0ff9617 	ldw	r3,-424(fp)
100056ac:	1807d0fa 	srai	r3,r3,3
100056b0:	20c7883a 	add	r3,r4,r3
100056b4:	1809883a 	mov	r4,r3
100056b8:	e0ffa317 	ldw	r3,-372(fp)
100056bc:	20c6b03a 	or	r3,r4,r3
100056c0:	10c00015 	stw	r3,0(r2)
		reg_ptr[4] = (((y_dart[2]>>3) << 16) + (x_dart[2]>>3)) | status_dart[2];
100056c4:	d0a00017 	ldw	r2,-32768(gp)
100056c8:	10800404 	addi	r2,r2,16
100056cc:	e0ff9b17 	ldw	r3,-404(fp)
100056d0:	1807d0fa 	srai	r3,r3,3
100056d4:	1808943a 	slli	r4,r3,16
100056d8:	e0ff9717 	ldw	r3,-420(fp)
100056dc:	1807d0fa 	srai	r3,r3,3
100056e0:	20c7883a 	add	r3,r4,r3
100056e4:	1809883a 	mov	r4,r3
100056e8:	e0ffa417 	ldw	r3,-368(fp)
100056ec:	20c6b03a 	or	r3,r4,r3
100056f0:	10c00015 	stw	r3,0(r2)
		reg_ptr[5] = (((y_dart[3]>>3) << 16) + (x_dart[3]>>3)) | status_dart[3];
100056f4:	d0a00017 	ldw	r2,-32768(gp)
100056f8:	10800504 	addi	r2,r2,20
100056fc:	e0ff9c17 	ldw	r3,-400(fp)
10005700:	1807d0fa 	srai	r3,r3,3
10005704:	1808943a 	slli	r4,r3,16
10005708:	e0ff9817 	ldw	r3,-416(fp)
1000570c:	1807d0fa 	srai	r3,r3,3
10005710:	20c7883a 	add	r3,r4,r3
10005714:	1809883a 	mov	r4,r3
10005718:	e0ffa517 	ldw	r3,-364(fp)
1000571c:	20c6b03a 	or	r3,r4,r3
10005720:	10c00015 	stw	r3,0(r2)
		reg_ptr[20] = (0x00b40000 + (x_lady[0]>>3)) | status_lady[0];
10005724:	d0a00017 	ldw	r2,-32768(gp)
10005728:	10801404 	addi	r2,r2,80
1000572c:	e0ffa617 	ldw	r3,-360(fp)
10005730:	1809d0fa 	srai	r4,r3,3
10005734:	00c02d34 	movhi	r3,180
10005738:	20c7883a 	add	r3,r4,r3
1000573c:	1809883a 	mov	r4,r3
10005740:	e0ffb017 	ldw	r3,-320(fp)
10005744:	20c6b03a 	or	r3,r4,r3
10005748:	10c00015 	stw	r3,0(r2)
		reg_ptr[21] = (0x00b40000 + (x_lady[1]>>3)) | status_lady[1];
1000574c:	d0a00017 	ldw	r2,-32768(gp)
10005750:	10801504 	addi	r2,r2,84
10005754:	e0ffa717 	ldw	r3,-356(fp)
10005758:	1809d0fa 	srai	r4,r3,3
1000575c:	00c02d34 	movhi	r3,180
10005760:	20c7883a 	add	r3,r4,r3
10005764:	1809883a 	mov	r4,r3
10005768:	e0ffb117 	ldw	r3,-316(fp)
1000576c:	20c6b03a 	or	r3,r4,r3
10005770:	10c00015 	stw	r3,0(r2)
		reg_ptr[22] = (0x00b40000+ (x_lady[2]>>3)) | status_lady[2];
10005774:	d0a00017 	ldw	r2,-32768(gp)
10005778:	10801604 	addi	r2,r2,88
1000577c:	e0ffa817 	ldw	r3,-352(fp)
10005780:	1809d0fa 	srai	r4,r3,3
10005784:	00c02d34 	movhi	r3,180
10005788:	20c7883a 	add	r3,r4,r3
1000578c:	1809883a 	mov	r4,r3
10005790:	e0ffb217 	ldw	r3,-312(fp)
10005794:	20c6b03a 	or	r3,r4,r3
10005798:	10c00015 	stw	r3,0(r2)
		reg_ptr[23] = (0x00b40000 + (x_lady[3]>>3)) | status_lady[3];
1000579c:	d0a00017 	ldw	r2,-32768(gp)
100057a0:	10801704 	addi	r2,r2,92
100057a4:	e0ffa917 	ldw	r3,-348(fp)
100057a8:	1809d0fa 	srai	r4,r3,3
100057ac:	00c02d34 	movhi	r3,180
100057b0:	20c7883a 	add	r3,r4,r3
100057b4:	1809883a 	mov	r4,r3
100057b8:	e0ffb317 	ldw	r3,-308(fp)
100057bc:	20c6b03a 	or	r3,r4,r3
100057c0:	10c00015 	stw	r3,0(r2)
		reg_ptr[37] = (0x00b40000 + (x_zombie[0]>>3)) | status_zombie[0];
100057c4:	d0a00017 	ldw	r2,-32768(gp)
100057c8:	10802504 	addi	r2,r2,148
100057cc:	e0ffb417 	ldw	r3,-304(fp)
100057d0:	1809d0fa 	srai	r4,r3,3
100057d4:	00c02d34 	movhi	r3,180
100057d8:	20c7883a 	add	r3,r4,r3
100057dc:	1809883a 	mov	r4,r3
100057e0:	e0ffbe17 	ldw	r3,-264(fp)
100057e4:	20c6b03a 	or	r3,r4,r3
100057e8:	10c00015 	stw	r3,0(r2)
		reg_ptr[38] = (0x00b40000 + (x_zombie[1]>>3)) | status_zombie[1];
100057ec:	d0a00017 	ldw	r2,-32768(gp)
100057f0:	10802604 	addi	r2,r2,152
100057f4:	e0ffb517 	ldw	r3,-300(fp)
100057f8:	1809d0fa 	srai	r4,r3,3
100057fc:	00c02d34 	movhi	r3,180
10005800:	20c7883a 	add	r3,r4,r3
10005804:	1809883a 	mov	r4,r3
10005808:	e0ffbf17 	ldw	r3,-260(fp)
1000580c:	20c6b03a 	or	r3,r4,r3
10005810:	10c00015 	stw	r3,0(r2)
		reg_ptr[39] = (0x00b40000 + (x_zombie[2]>>3)) | status_zombie[2];
10005814:	d0a00017 	ldw	r2,-32768(gp)
10005818:	10802704 	addi	r2,r2,156
1000581c:	e0ffb617 	ldw	r3,-296(fp)
10005820:	1809d0fa 	srai	r4,r3,3
10005824:	00c02d34 	movhi	r3,180
10005828:	20c7883a 	add	r3,r4,r3
1000582c:	1809883a 	mov	r4,r3
10005830:	e0ffc017 	ldw	r3,-256(fp)
10005834:	20c6b03a 	or	r3,r4,r3
10005838:	10c00015 	stw	r3,0(r2)
		reg_ptr[40] = (0x00b40000 + (x_zombie[3]>>3)) | status_zombie[3];
1000583c:	d0a00017 	ldw	r2,-32768(gp)
10005840:	10802804 	addi	r2,r2,160
10005844:	e0ffb717 	ldw	r3,-292(fp)
10005848:	1809d0fa 	srai	r4,r3,3
1000584c:	00c02d34 	movhi	r3,180
10005850:	20c7883a 	add	r3,r4,r3
10005854:	1809883a 	mov	r4,r3
10005858:	e0ffc117 	ldw	r3,-252(fp)
1000585c:	20c6b03a 	or	r3,r4,r3
10005860:	10c00015 	stw	r3,0(r2)
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
10005864:	d0a00017 	ldw	r2,-32768(gp)
10005868:	10802004 	addi	r2,r2,128
1000586c:	e0ff6317 	ldw	r3,-628(fp)
10005870:	1807d0fa 	srai	r3,r3,3
10005874:	1808943a 	slli	r4,r3,16
10005878:	e0ff6217 	ldw	r3,-632(fp)
1000587c:	1807d0fa 	srai	r3,r3,3
10005880:	20c7883a 	add	r3,r4,r3
10005884:	1809883a 	mov	r4,r3
10005888:	e0ff6617 	ldw	r3,-616(fp)
1000588c:	20c6b03a 	or	r3,r4,r3
10005890:	10c00015 	stw	r3,0(r2)
		reg_ptr[62] = 1;
10005894:	d0a00017 	ldw	r2,-32768(gp)
10005898:	10803e04 	addi	r2,r2,248
1000589c:	00c00044 	movi	r3,1
100058a0:	10c00015 	stw	r3,0(r2)
		key_char = getkeys(keycodes);
100058a4:	e0bf9384 	addi	r2,fp,-434
100058a8:	1009883a 	mov	r4,r2
100058ac:	00010340 	call	10001034 <getkeys>
100058b0:	e0bf9305 	stb	r2,-436(fp)
		reg_ptr[62] = 0;
100058b4:	d0a00017 	ldw	r2,-32768(gp)
100058b8:	10803e04 	addi	r2,r2,248
100058bc:	10000015 	stw	zero,0(r2)
		if (key_char & 0x40){
100058c0:	e0bf9303 	ldbu	r2,-436(fp)
100058c4:	10803fcc 	andi	r2,r2,255
100058c8:	1080100c 	andi	r2,r2,64
100058cc:	103f4e26 	beq	r2,zero,10005608 <__alt_data_end+0xf8005608>
			goto Start_label;
100058d0:	002e7d06 	br	100012c8 <__alt_data_end+0xf80012c8>

	win :;
	clock = 0;
	status_boss = 0xb0000000;
	for (int i = 2; i < 41; i++){
		reg_ptr[i] = 0;
100058d4:	d0e00017 	ldw	r3,-32768(gp)
100058d8:	e0bf8217 	ldw	r2,-504(fp)
100058dc:	1085883a 	add	r2,r2,r2
100058e0:	1085883a 	add	r2,r2,r2
100058e4:	1885883a 	add	r2,r3,r2
100058e8:	10000015 	stw	zero,0(r2)
	}

	win :;
	clock = 0;
	status_boss = 0xb0000000;
	for (int i = 2; i < 41; i++){
100058ec:	e0bf8217 	ldw	r2,-504(fp)
100058f0:	10800044 	addi	r2,r2,1
100058f4:	e0bf8215 	stw	r2,-504(fp)
100058f8:	e0bf8217 	ldw	r2,-504(fp)
100058fc:	10800a50 	cmplti	r2,r2,41
10005900:	103ff41e 	bne	r2,zero,100058d4 <__alt_data_end+0xf80058d4>
		reg_ptr[i] = 0;
	}
	while(1){
		clock += 1;
10005904:	e0bf6117 	ldw	r2,-636(fp)
10005908:	10800044 	addi	r2,r2,1
1000590c:	e0bf6115 	stw	r2,-636(fp)
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
10005910:	0001883a 	nop
10005914:	d0a00017 	ldw	r2,-32768(gp)
10005918:	10803f04 	addi	r2,r2,252
1000591c:	10800017 	ldw	r2,0(r2)
10005920:	103ffc26 	beq	r2,zero,10005914 <__alt_data_end+0xf8005914>
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = (mapX >> 3) | 0x00020000;
10005924:	d0a00017 	ldw	r2,-32768(gp)
10005928:	e0ff7117 	ldw	r3,-572(fp)
1000592c:	1807d0fa 	srai	r3,r3,3
10005930:	18c000b4 	orhi	r3,r3,2
10005934:	10c00015 	stw	r3,0(r2)
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
10005938:	d0a00017 	ldw	r2,-32768(gp)
1000593c:	10802004 	addi	r2,r2,128
10005940:	e0ff6317 	ldw	r3,-628(fp)
10005944:	1807d0fa 	srai	r3,r3,3
10005948:	1808943a 	slli	r4,r3,16
1000594c:	e0ff6217 	ldw	r3,-632(fp)
10005950:	1807d0fa 	srai	r3,r3,3
10005954:	20c7883a 	add	r3,r4,r3
10005958:	1809883a 	mov	r4,r3
1000595c:	e0ff6617 	ldw	r3,-616(fp)
10005960:	20c6b03a 	or	r3,r4,r3
10005964:	10c00015 	stw	r3,0(r2)
		reg_ptr[47] = x_boss | status_boss;
10005968:	d0a00017 	ldw	r2,-32768(gp)
1000596c:	10802f04 	addi	r2,r2,188
10005970:	e13f7c17 	ldw	r4,-528(fp)
10005974:	e0ff7d17 	ldw	r3,-524(fp)
10005978:	20c6b03a 	or	r3,r4,r3
1000597c:	10c00015 	stw	r3,0(r2)
		reg_ptr[62] = 1;
10005980:	d0a00017 	ldw	r2,-32768(gp)
10005984:	10803e04 	addi	r2,r2,248
10005988:	00c00044 	movi	r3,1
1000598c:	10c00015 	stw	r3,0(r2)
		key_char = getkeys(keycodes);
10005990:	e0bf9384 	addi	r2,fp,-434
10005994:	1009883a 	mov	r4,r2
10005998:	00010340 	call	10001034 <getkeys>
1000599c:	e0bf9305 	stb	r2,-436(fp)
		reg_ptr[62] = 0;
100059a0:	d0a00017 	ldw	r2,-32768(gp)
100059a4:	10803e04 	addi	r2,r2,248
100059a8:	10000015 	stw	zero,0(r2)
		if (clock == 120){
100059ac:	e0bf6117 	ldw	r2,-636(fp)
100059b0:	10801e18 	cmpnei	r2,r2,120
100059b4:	103fd31e 	bne	r2,zero,10005904 <__alt_data_end+0xf8005904>
		}
	}

	win2: ;
	while(1){
		clock += 1;
100059b8:	e0bf6117 	ldw	r2,-636(fp)
100059bc:	10800044 	addi	r2,r2,1
100059c0:	e0bf6115 	stw	r2,-636(fp)
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
100059c4:	0001883a 	nop
100059c8:	d0a00017 	ldw	r2,-32768(gp)
100059cc:	10803f04 	addi	r2,r2,252
100059d0:	10800017 	ldw	r2,0(r2)
100059d4:	103ffc26 	beq	r2,zero,100059c8 <__alt_data_end+0xf80059c8>
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = (mapX >> 3) | 0x00040000;
100059d8:	d0a00017 	ldw	r2,-32768(gp)
100059dc:	e0ff7117 	ldw	r3,-572(fp)
100059e0:	1807d0fa 	srai	r3,r3,3
100059e4:	18c00134 	orhi	r3,r3,4
100059e8:	10c00015 	stw	r3,0(r2)
		for (int i = 2; i < 41; i++){
100059ec:	00800084 	movi	r2,2
100059f0:	e0bf8315 	stw	r2,-500(fp)
100059f4:	00000906 	br	10005a1c <main+0x4824>
			reg_ptr[i] = 0;
100059f8:	d0e00017 	ldw	r3,-32768(gp)
100059fc:	e0bf8317 	ldw	r2,-500(fp)
10005a00:	1085883a 	add	r2,r2,r2
10005a04:	1085883a 	add	r2,r2,r2
10005a08:	1885883a 	add	r2,r3,r2
10005a0c:	10000015 	stw	zero,0(r2)
		while(!reg_ptr[63]){
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = (mapX >> 3) | 0x00040000;
		for (int i = 2; i < 41; i++){
10005a10:	e0bf8317 	ldw	r2,-500(fp)
10005a14:	10800044 	addi	r2,r2,1
10005a18:	e0bf8315 	stw	r2,-500(fp)
10005a1c:	e0bf8317 	ldw	r2,-500(fp)
10005a20:	10800a50 	cmplti	r2,r2,41
10005a24:	103ff41e 	bne	r2,zero,100059f8 <__alt_data_end+0xf80059f8>
			reg_ptr[i] = 0;
		}
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
10005a28:	d0a00017 	ldw	r2,-32768(gp)
10005a2c:	10802004 	addi	r2,r2,128
10005a30:	e0ff6317 	ldw	r3,-628(fp)
10005a34:	1807d0fa 	srai	r3,r3,3
10005a38:	1808943a 	slli	r4,r3,16
10005a3c:	e0ff6217 	ldw	r3,-632(fp)
10005a40:	1807d0fa 	srai	r3,r3,3
10005a44:	20c7883a 	add	r3,r4,r3
10005a48:	1809883a 	mov	r4,r3
10005a4c:	e0ff6617 	ldw	r3,-616(fp)
10005a50:	20c6b03a 	or	r3,r4,r3
10005a54:	10c00015 	stw	r3,0(r2)
		reg_ptr[62] = 1;
10005a58:	d0a00017 	ldw	r2,-32768(gp)
10005a5c:	10803e04 	addi	r2,r2,248
10005a60:	00c00044 	movi	r3,1
10005a64:	10c00015 	stw	r3,0(r2)
		key_char = getkeys(keycodes);
10005a68:	e0bf9384 	addi	r2,fp,-434
10005a6c:	1009883a 	mov	r4,r2
10005a70:	00010340 	call	10001034 <getkeys>
10005a74:	e0bf9305 	stb	r2,-436(fp)
		reg_ptr[62] = 0;
10005a78:	d0a00017 	ldw	r2,-32768(gp)
10005a7c:	10803e04 	addi	r2,r2,248
10005a80:	10000015 	stw	zero,0(r2)
		if (key_char & 0x40){
10005a84:	e0bf9303 	ldbu	r2,-436(fp)
10005a88:	10803fcc 	andi	r2,r2,255
10005a8c:	1080100c 	andi	r2,r2,64
10005a90:	103fc926 	beq	r2,zero,100059b8 <__alt_data_end+0xf80059b8>
			goto Start_label;
10005a94:	002e0c06 	br	100012c8 <__alt_data_end+0xf80012c8>

10005a98 <main_lab8>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main_lab8(void)
{
10005a98:	defff904 	addi	sp,sp,-28
10005a9c:	dfc00615 	stw	ra,24(sp)
10005aa0:	df000515 	stw	fp,20(sp)
10005aa4:	df000504 	addi	fp,sp,20
	IO_init();
10005aa8:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10005aac:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10005ab0:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
10005ab4:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10005ab8:	010400b4 	movhi	r4,4098
10005abc:	21085f04 	addi	r4,r4,8572
10005ac0:	0009f640 	call	10009f64 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10005ac4:	0007e180 	call	10007e18 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10005ac8:	000b883a 	mov	r5,zero
10005acc:	01005104 	movi	r4,324
10005ad0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10005ad4:	017fffd4 	movui	r5,65535
10005ad8:	01302414 	movui	r4,49296
10005adc:	0007d7c0 	call	10007d7c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10005ae0:	01409604 	movi	r5,600
10005ae4:	01006d04 	movi	r4,436
10005ae8:	0007d7c0 	call	10007d7c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10005aec:	00811004 	movi	r2,1088
10005af0:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10005af4:	e0bffb0b 	ldhu	r2,-20(fp)
10005af8:	100b883a 	mov	r5,r2
10005afc:	01005084 	movi	r4,322
10005b00:	0007d7c0 	call	10007d7c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10005b04:	00808404 	movi	r2,528
10005b08:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10005b0c:	e0bffe0b 	ldhu	r2,-8(fp)
10005b10:	100b883a 	mov	r5,r2
10005b14:	01302314 	movui	r4,49292
10005b18:	0007d7c0 	call	10007d7c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10005b1c:	000b883a 	mov	r5,zero
10005b20:	01007104 	movi	r4,452
10005b24:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005b28:	000b883a 	mov	r5,zero
10005b2c:	01007184 	movi	r4,454
10005b30:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005b34:	000b883a 	mov	r5,zero
10005b38:	01007204 	movi	r4,456
10005b3c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005b40:	000b883a 	mov	r5,zero
10005b44:	01007284 	movi	r4,458
10005b48:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005b4c:	000b883a 	mov	r5,zero
10005b50:	01007304 	movi	r4,460
10005b54:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005b58:	000b883a 	mov	r5,zero
10005b5c:	01007384 	movi	r4,462
10005b60:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10005b64:	000b883a 	mov	r5,zero
10005b68:	01007404 	movi	r4,464
10005b6c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005b70:	000b883a 	mov	r5,zero
10005b74:	01007484 	movi	r4,466
10005b78:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10005b7c:	000b883a 	mov	r5,zero
10005b80:	01007504 	movi	r4,468
10005b84:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10005b88:	000b883a 	mov	r5,zero
10005b8c:	01007584 	movi	r4,470
10005b90:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10005b94:	000b883a 	mov	r5,zero
10005b98:	01007604 	movi	r4,472
10005b9c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10005ba0:	000b883a 	mov	r5,zero
10005ba4:	01007684 	movi	r4,474
10005ba8:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10005bac:	000b883a 	mov	r5,zero
10005bb0:	01007704 	movi	r4,476
10005bb4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005bb8:	000b883a 	mov	r5,zero
10005bbc:	01007784 	movi	r4,478
10005bc0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10005bc4:	01401c84 	movi	r5,114
10005bc8:	01007084 	movi	r4,450
10005bcc:	0007d7c0 	call	10007d7c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005bd0:	01738054 	movui	r5,52737
10005bd4:	01000044 	movi	r4,1
10005bd8:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10005bdc:	0001883a 	nop
10005be0:	010000c4 	movi	r4,3
10005be4:	00003640 	call	10000364 <IO_read>
10005be8:	10bfffcc 	andi	r2,r2,65535
10005bec:	103ffc26 	beq	r2,zero,10005be0 <__alt_data_end+0xf8005be0>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005bf0:	00000806 	br	10005c14 <main_lab8+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005bf4:	01000044 	movi	r4,1
10005bf8:	00003640 	call	10000364 <IO_read>
10005bfc:	10bfffcc 	andi	r2,r2,65535
10005c00:	100b883a 	mov	r5,r2
10005c04:	010400b4 	movhi	r4,4098
10005c08:	21086504 	addi	r4,r4,8596
10005c0c:	0009e480 	call	10009e48 <printf>
		goto USB_HOT_PLUG;
10005c10:	003fac06 	br	10005ac4 <__alt_data_end+0xf8005ac4>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005c14:	01000044 	movi	r4,1
10005c18:	00003640 	call	10000364 <IO_read>
10005c1c:	10bfffcc 	andi	r2,r2,65535
10005c20:	1083fb58 	cmpnei	r2,r2,4077
10005c24:	103ff31e 	bne	r2,zero,10005bf4 <__alt_data_end+0xf8005bf4>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10005c28:	010400b4 	movhi	r4,4098
10005c2c:	21086e04 	addi	r4,r4,8632
10005c30:	0009e480 	call	10009e48 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10005c34:	01401d04 	movi	r5,116
10005c38:	01007084 	movi	r4,450
10005c3c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10005c40:	01400f04 	movi	r5,60
10005c44:	01007104 	movi	r4,452
10005c48:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005c4c:	000b883a 	mov	r5,zero
10005c50:	01007184 	movi	r4,454
10005c54:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005c58:	000b883a 	mov	r5,zero
10005c5c:	01007204 	movi	r4,456
10005c60:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005c64:	000b883a 	mov	r5,zero
10005c68:	01007284 	movi	r4,458
10005c6c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005c70:	000b883a 	mov	r5,zero
10005c74:	01007304 	movi	r4,460
10005c78:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005c7c:	000b883a 	mov	r5,zero
10005c80:	01007384 	movi	r4,462
10005c84:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10005c88:	000b883a 	mov	r5,zero
10005c8c:	01007404 	movi	r4,464
10005c90:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005c94:	000b883a 	mov	r5,zero
10005c98:	01007484 	movi	r4,466
10005c9c:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10005ca0:	000b883a 	mov	r5,zero
10005ca4:	01007504 	movi	r4,468
10005ca8:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10005cac:	000b883a 	mov	r5,zero
10005cb0:	01007584 	movi	r4,470
10005cb4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10005cb8:	000b883a 	mov	r5,zero
10005cbc:	01007604 	movi	r4,472
10005cc0:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10005cc4:	000b883a 	mov	r5,zero
10005cc8:	01007684 	movi	r4,474
10005ccc:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10005cd0:	000b883a 	mov	r5,zero
10005cd4:	01007704 	movi	r4,476
10005cd8:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005cdc:	000b883a 	mov	r5,zero
10005ce0:	01007784 	movi	r4,478
10005ce4:	0007d7c0 	call	10007d7c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005ce8:	01738054 	movui	r5,52737
10005cec:	01000044 	movi	r4,1
10005cf0:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005cf4:	0001883a 	nop
10005cf8:	01000044 	movi	r4,1
10005cfc:	00003640 	call	10000364 <IO_read>
10005d00:	10bfffcc 	andi	r2,r2,65535
10005d04:	1083fb58 	cmpnei	r2,r2,4077
10005d08:	10000826 	beq	r2,zero,10005d2c <main_lab8+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005d0c:	01000044 	movi	r4,1
10005d10:	00003640 	call	10000364 <IO_read>
10005d14:	10bfffcc 	andi	r2,r2,65535
10005d18:	100b883a 	mov	r5,r2
10005d1c:	010400b4 	movhi	r4,4098
10005d20:	21086504 	addi	r4,r4,8596
10005d24:	0009e480 	call	10009e48 <printf>
		goto USB_HOT_PLUG;
10005d28:	003f6606 	br	10005ac4 <__alt_data_end+0xf8005ac4>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10005d2c:	00b02284 	movi	r2,-16246
10005d30:	d0a8650d 	sth	r2,-24172(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10005d34:	008c0004 	movi	r2,12288
10005d38:	d0a8658d 	sth	r2,-24170(gp)
	fs_device = A_DP_STAT;
10005d3c:	00880004 	movi	r2,8192
10005d40:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10005d44:	d0a8650b 	ldhu	r2,-24172(gp)
10005d48:	10bfffcc 	andi	r2,r2,65535
10005d4c:	1009883a 	mov	r4,r2
10005d50:	0007dd40 	call	10007dd4 <UsbRead>
10005d54:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10005d58:	d0a8658b 	ldhu	r2,-24170(gp)
10005d5c:	e0fffb0b 	ldhu	r3,-20(fp)
10005d60:	1884703a 	and	r2,r3,r2
10005d64:	10bfffcc 	andi	r2,r2,65535
10005d68:	1000351e 	bne	r2,zero,10005e40 <main_lab8+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005d6c:	e03ffbc5 	stb	zero,-17(fp)
10005d70:	00000f06 	br	10005db0 <main_lab8+0x318>
		{
			usleep(5*1000);
10005d74:	0104e204 	movi	r4,5000
10005d78:	001fb080 	call	1001fb08 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10005d7c:	d0a8650b 	ldhu	r2,-24172(gp)
10005d80:	10bfffcc 	andi	r2,r2,65535
10005d84:	1009883a 	mov	r4,r2
10005d88:	0007dd40 	call	10007dd4 <UsbRead>
10005d8c:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
10005d90:	d0a8658b 	ldhu	r2,-24170(gp)
10005d94:	e0fffb0b 	ldhu	r3,-20(fp)
10005d98:	1884703a 	and	r2,r3,r2
10005d9c:	10bfffcc 	andi	r2,r2,65535
10005da0:	1000071e 	bne	r2,zero,10005dc0 <main_lab8+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005da4:	e0bffbc3 	ldbu	r2,-17(fp)
10005da8:	10800044 	addi	r2,r2,1
10005dac:	e0bffbc5 	stb	r2,-17(fp)
10005db0:	e0bffbc3 	ldbu	r2,-17(fp)
10005db4:	10800170 	cmpltui	r2,r2,5
10005db8:	103fee1e 	bne	r2,zero,10005d74 <__alt_data_end+0xf8005d74>
10005dbc:	00000106 	br	10005dc4 <main_lab8+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10005dc0:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10005dc4:	d0a8658b 	ldhu	r2,-24170(gp)
10005dc8:	e0fffb0b 	ldhu	r3,-20(fp)
10005dcc:	1884703a 	and	r2,r3,r2
10005dd0:	10bfffcc 	andi	r2,r2,65535
10005dd4:	1000261e 	bne	r2,zero,10005e70 <main_lab8+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10005dd8:	010400b4 	movhi	r4,4098
10005ddc:	21087204 	addi	r4,r4,8648
10005de0:	0009f640 	call	10009f64 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10005de4:	010400b4 	movhi	r4,4098
10005de8:	21087c04 	addi	r4,r4,8688
10005dec:	0009f640 	call	10009f64 <puts>
			while (!(usb_ctl_val & no_device))
10005df0:	00000d06 	br	10005e28 <main_lab8+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10005df4:	d0a8650b 	ldhu	r2,-24172(gp)
10005df8:	10bfffcc 	andi	r2,r2,65535
10005dfc:	1009883a 	mov	r4,r2
10005e00:	0007dd40 	call	10007dd4 <UsbRead>
10005e04:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10005e08:	d0a8658b 	ldhu	r2,-24170(gp)
10005e0c:	e0fffb0b 	ldhu	r3,-20(fp)
10005e10:	1884703a 	and	r2,r3,r2
10005e14:	10bfffcc 	andi	r2,r2,65535
10005e18:	10000126 	beq	r2,zero,10005e20 <main_lab8+0x388>
					goto USB_HOT_PLUG;
10005e1c:	003f2906 	br	10005ac4 <__alt_data_end+0xf8005ac4>

				usleep(2000);
10005e20:	0101f404 	movi	r4,2000
10005e24:	001fb080 	call	1001fb08 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10005e28:	d0a8658b 	ldhu	r2,-24170(gp)
10005e2c:	e0fffb0b 	ldhu	r3,-20(fp)
10005e30:	1884703a 	and	r2,r3,r2
10005e34:	10bfffcc 	andi	r2,r2,65535
10005e38:	103fee26 	beq	r2,zero,10005df4 <__alt_data_end+0xf8005df4>
10005e3c:	00000c06 	br	10005e70 <main_lab8+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10005e40:	e0fffb0b 	ldhu	r3,-20(fp)
10005e44:	e0bffc0b 	ldhu	r2,-16(fp)
10005e48:	1884703a 	and	r2,r3,r2
10005e4c:	10bfffcc 	andi	r2,r2,65535
10005e50:	10000426 	beq	r2,zero,10005e64 <main_lab8+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10005e54:	010400b4 	movhi	r4,4098
10005e58:	21088804 	addi	r4,r4,8736
10005e5c:	0009f640 	call	10009f64 <puts>
10005e60:	00000306 	br	10005e70 <main_lab8+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10005e64:	010400b4 	movhi	r4,4098
10005e68:	21088f04 	addi	r4,r4,8764
10005e6c:	0009f640 	call	10009f64 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10005e70:	0007ecc0 	call	10007ecc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005e74:	00000306 	br	10005e84 <main_lab8+0x3ec>
	{
		UsbSetAddress();
10005e78:	0007ecc0 	call	10007ecc <UsbSetAddress>
		usleep(10*1000);
10005e7c:	0109c404 	movi	r4,10000
10005e80:	001fb080 	call	1001fb08 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005e84:	010000c4 	movi	r4,3
10005e88:	00003640 	call	10000364 <IO_read>
10005e8c:	10bfffcc 	andi	r2,r2,65535
10005e90:	1080040c 	andi	r2,r2,16
10005e94:	103ff826 	beq	r2,zero,10005e78 <__alt_data_end+0xf8005e78>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005e98:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10005e9c:	01414184 	movi	r5,1286
10005ea0:	01000084 	movi	r4,2
10005ea4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005ea8:	0009883a 	mov	r4,zero
10005eac:	00003640 	call	10000364 <IO_read>
10005eb0:	10bfffcc 	andi	r2,r2,65535
10005eb4:	100b883a 	mov	r5,r2
10005eb8:	010400b4 	movhi	r4,4098
10005ebc:	21089604 	addi	r4,r4,8792
10005ec0:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10005ec4:	01414204 	movi	r5,1288
10005ec8:	01000084 	movi	r4,2
10005ecc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005ed0:	0009883a 	mov	r4,zero
10005ed4:	00003640 	call	10000364 <IO_read>
10005ed8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10005edc:	e0bffb0b 	ldhu	r2,-20(fp)
10005ee0:	100b883a 	mov	r5,r2
10005ee4:	010400b4 	movhi	r4,4098
10005ee8:	2108a104 	addi	r4,r4,8836
10005eec:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10005ef0:	e0bffb0b 	ldhu	r2,-20(fp)
10005ef4:	108000e0 	cmpeqi	r2,r2,3
10005ef8:	1000031e 	bne	r2,zero,10005f08 <main_lab8+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005efc:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10005f00:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10005f04:	003eef06 	br	10005ac4 <__alt_data_end+0xf8005ac4>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10005f08:	010400b4 	movhi	r4,4098
10005f0c:	2108ad04 	addi	r4,r4,8884
10005f10:	0009f640 	call	10009f64 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10005f14:	0007fcc0 	call	10007fcc <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005f18:	00000306 	br	10005f28 <main_lab8+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10005f1c:	0007fcc0 	call	10007fcc <UsbGetDeviceDesc1>
		usleep(10*1000);
10005f20:	0109c404 	movi	r4,10000
10005f24:	001fb080 	call	1001fb08 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005f28:	010000c4 	movi	r4,3
10005f2c:	00003640 	call	10000364 <IO_read>
10005f30:	10bfffcc 	andi	r2,r2,65535
10005f34:	1080040c 	andi	r2,r2,16
10005f38:	103ff826 	beq	r2,zero,10005f1c <__alt_data_end+0xf8005f1c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005f3c:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005f40:	01414184 	movi	r5,1286
10005f44:	01000084 	movi	r4,2
10005f48:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005f4c:	0009883a 	mov	r4,zero
10005f50:	00003640 	call	10000364 <IO_read>
10005f54:	10bfffcc 	andi	r2,r2,65535
10005f58:	100b883a 	mov	r5,r2
10005f5c:	010400b4 	movhi	r4,4098
10005f60:	2108bc04 	addi	r4,r4,8944
10005f64:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10005f68:	01414204 	movi	r5,1288
10005f6c:	01000084 	movi	r4,2
10005f70:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005f74:	0009883a 	mov	r4,zero
10005f78:	00003640 	call	10000364 <IO_read>
10005f7c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10005f80:	e0bffb0b 	ldhu	r2,-20(fp)
10005f84:	100b883a 	mov	r5,r2
10005f88:	010400b4 	movhi	r4,4098
10005f8c:	2108c704 	addi	r4,r4,8988
10005f90:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10005f94:	00000206 	br	10005fa0 <main_lab8+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005f98:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10005f9c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005fa0:	e0bffb0b 	ldhu	r2,-20(fp)
10005fa4:	108000d8 	cmpnei	r2,r2,3
10005fa8:	103ffb1e 	bne	r2,zero,10005f98 <__alt_data_end+0xf8005f98>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10005fac:	010400b4 	movhi	r4,4098
10005fb0:	2108d304 	addi	r4,r4,9036
10005fb4:	0009f640 	call	10009f64 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10005fb8:	00081140 	call	10008114 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005fbc:	00000306 	br	10005fcc <main_lab8+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10005fc0:	00081140 	call	10008114 <UsbGetDeviceDesc2>
		usleep(10*1000);
10005fc4:	0109c404 	movi	r4,10000
10005fc8:	001fb080 	call	1001fb08 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005fcc:	010000c4 	movi	r4,3
10005fd0:	00003640 	call	10000364 <IO_read>
10005fd4:	10bfffcc 	andi	r2,r2,65535
10005fd8:	1080040c 	andi	r2,r2,16
10005fdc:	103ff826 	beq	r2,zero,10005fc0 <__alt_data_end+0xf8005fc0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005fe0:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005fe4:	01414184 	movi	r5,1286
10005fe8:	01000084 	movi	r4,2
10005fec:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005ff0:	0009883a 	mov	r4,zero
10005ff4:	00003640 	call	10000364 <IO_read>
10005ff8:	10bfffcc 	andi	r2,r2,65535
10005ffc:	100b883a 	mov	r5,r2
10006000:	010400b4 	movhi	r4,4098
10006004:	2108bc04 	addi	r4,r4,8944
10006008:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
1000600c:	01414204 	movi	r5,1288
10006010:	01000084 	movi	r4,2
10006014:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006018:	0009883a 	mov	r4,zero
1000601c:	00003640 	call	10000364 <IO_read>
10006020:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10006024:	e0bffb0b 	ldhu	r2,-20(fp)
10006028:	100b883a 	mov	r5,r2
1000602c:	010400b4 	movhi	r4,4098
10006030:	2108c704 	addi	r4,r4,8988
10006034:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10006038:	00000206 	br	10006044 <main_lab8+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000603c:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10006040:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006044:	e0bffb0b 	ldhu	r2,-20(fp)
10006048:	108000d8 	cmpnei	r2,r2,3
1000604c:	103ffb1e 	bne	r2,zero,1000603c <__alt_data_end+0xf800603c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10006050:	010400b4 	movhi	r4,4098
10006054:	2108e704 	addi	r4,r4,9116
10006058:	0009f640 	call	10009f64 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
1000605c:	00082ec0 	call	100082ec <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006060:	00000306 	br	10006070 <main_lab8+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10006064:	00082ec0 	call	100082ec <UsbGetConfigDesc1>
		usleep(10*1000);
10006068:	0109c404 	movi	r4,10000
1000606c:	001fb080 	call	1001fb08 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006070:	010000c4 	movi	r4,3
10006074:	00003640 	call	10000364 <IO_read>
10006078:	10bfffcc 	andi	r2,r2,65535
1000607c:	1080040c 	andi	r2,r2,16
10006080:	103ff826 	beq	r2,zero,10006064 <__alt_data_end+0xf8006064>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006084:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006088:	01414184 	movi	r5,1286
1000608c:	01000084 	movi	r4,2
10006090:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006094:	0009883a 	mov	r4,zero
10006098:	00003640 	call	10000364 <IO_read>
1000609c:	10bfffcc 	andi	r2,r2,65535
100060a0:	100b883a 	mov	r5,r2
100060a4:	010400b4 	movhi	r4,4098
100060a8:	2108f904 	addi	r4,r4,9188
100060ac:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
100060b0:	01414204 	movi	r5,1288
100060b4:	01000084 	movi	r4,2
100060b8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100060bc:	0009883a 	mov	r4,zero
100060c0:	00003640 	call	10000364 <IO_read>
100060c4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100060c8:	e0bffb0b 	ldhu	r2,-20(fp)
100060cc:	100b883a 	mov	r5,r2
100060d0:	010400b4 	movhi	r4,4098
100060d4:	21090404 	addi	r4,r4,9232
100060d8:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
100060dc:	00000206 	br	100060e8 <main_lab8+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
100060e0:	0008df00 	call	10008df0 <UsbGetRetryCnt>
100060e4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100060e8:	e0bffb0b 	ldhu	r2,-20(fp)
100060ec:	108000d8 	cmpnei	r2,r2,3
100060f0:	103ffb1e 	bne	r2,zero,100060e0 <__alt_data_end+0xf80060e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100060f4:	010400b4 	movhi	r4,4098
100060f8:	21091004 	addi	r4,r4,9280
100060fc:	0009f640 	call	10009f64 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10006100:	000847c0 	call	1000847c <UsbGetConfigDesc2>

	usleep(100*1000);
10006104:	010000b4 	movhi	r4,2
10006108:	2121a804 	addi	r4,r4,-31072
1000610c:	001fb080 	call	1001fb08 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006110:	00000306 	br	10006120 <main_lab8+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10006114:	000847c0 	call	1000847c <UsbGetConfigDesc2>
		usleep(10*1000);
10006118:	0109c404 	movi	r4,10000
1000611c:	001fb080 	call	1001fb08 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006120:	010000c4 	movi	r4,3
10006124:	00003640 	call	10000364 <IO_read>
10006128:	10bfffcc 	andi	r2,r2,65535
1000612c:	1080040c 	andi	r2,r2,16
10006130:	103ff826 	beq	r2,zero,10006114 <__alt_data_end+0xf8006114>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006134:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006138:	01414184 	movi	r5,1286
1000613c:	01000084 	movi	r4,2
10006140:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006144:	0009883a 	mov	r4,zero
10006148:	00003640 	call	10000364 <IO_read>
1000614c:	10bfffcc 	andi	r2,r2,65535
10006150:	100b883a 	mov	r5,r2
10006154:	010400b4 	movhi	r4,4098
10006158:	21092304 	addi	r4,r4,9356
1000615c:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10006160:	01414204 	movi	r5,1288
10006164:	01000084 	movi	r4,2
10006168:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000616c:	0009883a 	mov	r4,zero
10006170:	00003640 	call	10000364 <IO_read>
10006174:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10006178:	e0bffb0b 	ldhu	r2,-20(fp)
1000617c:	100b883a 	mov	r5,r2
10006180:	010400b4 	movhi	r4,4098
10006184:	21092e04 	addi	r4,r4,9400
10006188:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
1000618c:	00000206 	br	10006198 <main_lab8+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006190:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10006194:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006198:	e0bffb0b 	ldhu	r2,-20(fp)
1000619c:	108000d8 	cmpnei	r2,r2,3
100061a0:	103ffb1e 	bne	r2,zero,10006190 <__alt_data_end+0xf8006190>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
100061a4:	010400b4 	movhi	r4,4098
100061a8:	21093a04 	addi	r4,r4,9448
100061ac:	0009f640 	call	10009f64 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
100061b0:	01415b04 	movi	r5,1388
100061b4:	01000084 	movi	r4,2
100061b8:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
100061bc:	0009883a 	mov	r4,zero
100061c0:	00003640 	call	10000364 <IO_read>
100061c4:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
100061c8:	e0bffe8b 	ldhu	r2,-6(fp)
100061cc:	108000cc 	andi	r2,r2,3
100061d0:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
100061d4:	e0bffe8b 	ldhu	r2,-6(fp)
100061d8:	100b883a 	mov	r5,r2
100061dc:	010400b4 	movhi	r4,4098
100061e0:	21094d04 	addi	r4,r4,9524
100061e4:	0009e480 	call	10009e48 <printf>

	if (code == 0x01)
100061e8:	e0bffe8b 	ldhu	r2,-6(fp)
100061ec:	10800058 	cmpnei	r2,r2,1
100061f0:	1000041e 	bne	r2,zero,10006204 <main_lab8+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
100061f4:	010400b4 	movhi	r4,4098
100061f8:	21095004 	addi	r4,r4,9536
100061fc:	0009f640 	call	10009f64 <puts>
10006200:	00000306 	br	10006210 <main_lab8+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10006204:	010400b4 	movhi	r4,4098
10006208:	21095f04 	addi	r4,r4,9596
1000620c:	0009f640 	call	10009f64 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10006210:	01415d84 	movi	r5,1398
10006214:	01000084 	movi	r4,2
10006218:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
1000621c:	0141cfc4 	movi	r5,1855
10006220:	0009883a 	mov	r4,zero
10006224:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10006228:	01604154 	movui	r5,33029
1000622c:	0009883a 	mov	r4,zero
10006230:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10006234:	014000c4 	movi	r5,3
10006238:	0009883a 	mov	r4,zero
1000623c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10006240:	01400204 	movi	r5,8
10006244:	0009883a 	mov	r4,zero
10006248:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
1000624c:	016b0294 	movui	r5,44042
10006250:	0009883a 	mov	r4,zero
10006254:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10006258:	01415d84 	movi	r5,1398
1000625c:	01006c04 	movi	r4,432
10006260:	0007d7c0 	call	10007d7c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10006264:	01415f04 	movi	r5,1404
10006268:	01000084 	movi	r4,2
1000626c:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10006270:	0009883a 	mov	r4,zero
10006274:	00003640 	call	10000364 <IO_read>
10006278:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
1000627c:	e0bfff03 	ldbu	r2,-4(fp)
10006280:	100b883a 	mov	r5,r2
10006284:	010400b4 	movhi	r4,4098
10006288:	21096804 	addi	r4,r4,9632
1000628c:	0009e480 	call	10009e48 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10006290:	00086e40 	call	100086e4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006294:	00000306 	br	100062a4 <main_lab8+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10006298:	00086e40 	call	100086e4 <UsbSetConfig>
		usleep(10*1000);
1000629c:	0109c404 	movi	r4,10000
100062a0:	001fb080 	call	1001fb08 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100062a4:	010000c4 	movi	r4,3
100062a8:	00003640 	call	10000364 <IO_read>
100062ac:	10bfffcc 	andi	r2,r2,65535
100062b0:	1080040c 	andi	r2,r2,16
100062b4:	103ff826 	beq	r2,zero,10006298 <__alt_data_end+0xf8006298>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100062b8:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100062bc:	01414184 	movi	r5,1286
100062c0:	01000084 	movi	r4,2
100062c4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
100062c8:	0009883a 	mov	r4,zero
100062cc:	00003640 	call	10000364 <IO_read>
100062d0:	10bfffcc 	andi	r2,r2,65535
100062d4:	100b883a 	mov	r5,r2
100062d8:	010400b4 	movhi	r4,4098
100062dc:	21097204 	addi	r4,r4,9672
100062e0:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
100062e4:	01414204 	movi	r5,1288
100062e8:	01000084 	movi	r4,2
100062ec:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100062f0:	0009883a 	mov	r4,zero
100062f4:	00003640 	call	10000364 <IO_read>
100062f8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
100062fc:	e0bffb0b 	ldhu	r2,-20(fp)
10006300:	100b883a 	mov	r5,r2
10006304:	010400b4 	movhi	r4,4098
10006308:	21097d04 	addi	r4,r4,9716
1000630c:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10006310:	00000206 	br	1000631c <main_lab8+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006314:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10006318:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000631c:	e0bffb0b 	ldhu	r2,-20(fp)
10006320:	108000d8 	cmpnei	r2,r2,3
10006324:	103ffb1e 	bne	r2,zero,10006314 <__alt_data_end+0xf8006314>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10006328:	010400b4 	movhi	r4,4098
1000632c:	21098904 	addi	r4,r4,9764
10006330:	0009f640 	call	10009f64 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10006334:	00087e40 	call	100087e4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006338:	00000306 	br	10006348 <main_lab8+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
1000633c:	00087e40 	call	100087e4 <UsbClassRequest>
		usleep(10*1000);
10006340:	0109c404 	movi	r4,10000
10006344:	001fb080 	call	1001fb08 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006348:	010000c4 	movi	r4,3
1000634c:	00003640 	call	10000364 <IO_read>
10006350:	10bfffcc 	andi	r2,r2,65535
10006354:	1080040c 	andi	r2,r2,16
10006358:	103ff826 	beq	r2,zero,1000633c <__alt_data_end+0xf800633c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000635c:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006360:	01414184 	movi	r5,1286
10006364:	01000084 	movi	r4,2
10006368:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000636c:	0009883a 	mov	r4,zero
10006370:	00003640 	call	10000364 <IO_read>
10006374:	10bfffcc 	andi	r2,r2,65535
10006378:	100b883a 	mov	r5,r2
1000637c:	010400b4 	movhi	r4,4098
10006380:	21099b04 	addi	r4,r4,9836
10006384:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
10006388:	01414204 	movi	r5,1288
1000638c:	01000084 	movi	r4,2
10006390:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006394:	0009883a 	mov	r4,zero
10006398:	00003640 	call	10000364 <IO_read>
1000639c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100063a0:	e0bffb0b 	ldhu	r2,-20(fp)
100063a4:	100b883a 	mov	r5,r2
100063a8:	010400b4 	movhi	r4,4098
100063ac:	2109a604 	addi	r4,r4,9880
100063b0:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
100063b4:	00000206 	br	100063c0 <main_lab8+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
100063b8:	0008df00 	call	10008df0 <UsbGetRetryCnt>
100063bc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100063c0:	e0bffb0b 	ldhu	r2,-20(fp)
100063c4:	108000d8 	cmpnei	r2,r2,3
100063c8:	103ffb1e 	bne	r2,zero,100063b8 <__alt_data_end+0xf80063b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
100063cc:	010400b4 	movhi	r4,4098
100063d0:	2109b204 	addi	r4,r4,9928
100063d4:	0009f640 	call	10009f64 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
100063d8:	00088e40 	call	100088e4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100063dc:	00000306 	br	100063ec <main_lab8+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
100063e0:	00088e40 	call	100088e4 <UsbGetHidDesc>
		usleep(10*1000);
100063e4:	0109c404 	movi	r4,10000
100063e8:	001fb080 	call	1001fb08 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100063ec:	010000c4 	movi	r4,3
100063f0:	00003640 	call	10000364 <IO_read>
100063f4:	10bfffcc 	andi	r2,r2,65535
100063f8:	1080040c 	andi	r2,r2,16
100063fc:	103ff826 	beq	r2,zero,100063e0 <__alt_data_end+0xf80063e0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006400:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006404:	01414184 	movi	r5,1286
10006408:	01000084 	movi	r4,2
1000640c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006410:	0009883a 	mov	r4,zero
10006414:	00003640 	call	10000364 <IO_read>
10006418:	10bfffcc 	andi	r2,r2,65535
1000641c:	100b883a 	mov	r5,r2
10006420:	010400b4 	movhi	r4,4098
10006424:	21099b04 	addi	r4,r4,9836
10006428:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
1000642c:	01414204 	movi	r5,1288
10006430:	01000084 	movi	r4,2
10006434:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006438:	0009883a 	mov	r4,zero
1000643c:	00003640 	call	10000364 <IO_read>
10006440:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10006444:	e0bffb0b 	ldhu	r2,-20(fp)
10006448:	100b883a 	mov	r5,r2
1000644c:	010400b4 	movhi	r4,4098
10006450:	2109a604 	addi	r4,r4,9880
10006454:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
10006458:	00000206 	br	10006464 <main_lab8+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000645c:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10006460:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006464:	e0bffb0b 	ldhu	r2,-20(fp)
10006468:	108000d8 	cmpnei	r2,r2,3
1000646c:	103ffb1e 	bne	r2,zero,1000645c <__alt_data_end+0xf800645c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10006470:	010400b4 	movhi	r4,4098
10006474:	2109c404 	addi	r4,r4,10000
10006478:	0009f640 	call	10009f64 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
1000647c:	0008a2c0 	call	10008a2c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006480:	00000306 	br	10006490 <main_lab8+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10006484:	0008a2c0 	call	10008a2c <UsbGetReportDesc>
		usleep(10*1000);
10006488:	0109c404 	movi	r4,10000
1000648c:	001fb080 	call	1001fb08 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006490:	010000c4 	movi	r4,3
10006494:	00003640 	call	10000364 <IO_read>
10006498:	10bfffcc 	andi	r2,r2,65535
1000649c:	1080040c 	andi	r2,r2,16
100064a0:	103ff826 	beq	r2,zero,10006484 <__alt_data_end+0xf8006484>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100064a4:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100064a8:	01414184 	movi	r5,1286
100064ac:	01000084 	movi	r4,2
100064b0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
100064b4:	0009883a 	mov	r4,zero
100064b8:	00003640 	call	10000364 <IO_read>
100064bc:	10bfffcc 	andi	r2,r2,65535
100064c0:	100b883a 	mov	r5,r2
100064c4:	010400b4 	movhi	r4,4098
100064c8:	2109d804 	addi	r4,r4,10080
100064cc:	0009e480 	call	10009e48 <printf>

	IO_write(HPI_ADDR,0x0508);
100064d0:	01414204 	movi	r5,1288
100064d4:	01000084 	movi	r4,2
100064d8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100064dc:	0009883a 	mov	r4,zero
100064e0:	00003640 	call	10000364 <IO_read>
100064e4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
100064e8:	e0bffb0b 	ldhu	r2,-20(fp)
100064ec:	100b883a 	mov	r5,r2
100064f0:	010400b4 	movhi	r4,4098
100064f4:	2109e404 	addi	r4,r4,10128
100064f8:	0009e480 	call	10009e48 <printf>
	while (usb_ctl_val != 0x03)
100064fc:	00000206 	br	10006508 <main_lab8+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006500:	0008df00 	call	10008df0 <UsbGetRetryCnt>
10006504:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006508:	e0bffb0b 	ldhu	r2,-20(fp)
1000650c:	108000d8 	cmpnei	r2,r2,3
10006510:	103ffb1e 	bne	r2,zero,10006500 <__alt_data_end+0xf8006500>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10006514:	010400b4 	movhi	r4,4098
10006518:	2109f004 	addi	r4,r4,10176
1000651c:	0009f640 	call	10009f64 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10006520:	0109c404 	movi	r4,10000
10006524:	001fb080 	call	1001fb08 <usleep>
	while(1)
	{
		toggle++;
10006528:	e0bffb83 	ldbu	r2,-18(fp)
1000652c:	10800044 	addi	r2,r2,1
10006530:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10006534:	01414004 	movi	r5,1280
10006538:	01000084 	movi	r4,2
1000653c:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10006540:	01414704 	movi	r5,1308
10006544:	0009883a 	mov	r4,zero
10006548:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
1000654c:	e0bfff03 	ldbu	r2,-4(fp)
10006550:	108003cc 	andi	r2,r2,15
10006554:	100b883a 	mov	r5,r2
10006558:	0009883a 	mov	r4,zero
1000655c:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10006560:	0140a444 	movi	r5,657
10006564:	0009883a 	mov	r4,zero
10006568:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
1000656c:	e0bffb83 	ldbu	r2,-18(fp)
10006570:	1080004c 	andi	r2,r2,1
10006574:	10803fcc 	andi	r2,r2,255
10006578:	10000426 	beq	r2,zero,1000658c <main_lab8+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
1000657c:	01400044 	movi	r5,1
10006580:	0009883a 	mov	r4,zero
10006584:	00002f40 	call	100002f4 <IO_write>
10006588:	00000306 	br	10006598 <main_lab8+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
1000658c:	01401044 	movi	r5,65
10006590:	0009883a 	mov	r4,zero
10006594:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10006598:	014004c4 	movi	r5,19
1000659c:	0009883a 	mov	r4,zero
100065a0:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
100065a4:	000b883a 	mov	r5,zero
100065a8:	0009883a 	mov	r4,zero
100065ac:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100065b0:	01414004 	movi	r5,1280
100065b4:	01006c04 	movi	r4,432
100065b8:	0007d7c0 	call	10007d7c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100065bc:	00002406 	br	10006650 <main_lab8+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
100065c0:	01414004 	movi	r5,1280
100065c4:	01000084 	movi	r4,2
100065c8:	00002f40 	call	100002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
100065cc:	01414704 	movi	r5,1308
100065d0:	0009883a 	mov	r4,zero
100065d4:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
100065d8:	e0bfff03 	ldbu	r2,-4(fp)
100065dc:	108003cc 	andi	r2,r2,15
100065e0:	100b883a 	mov	r5,r2
100065e4:	0009883a 	mov	r4,zero
100065e8:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100065ec:	0140a444 	movi	r5,657
100065f0:	0009883a 	mov	r4,zero
100065f4:	00002f40 	call	100002f4 <IO_write>
			if(toggle%2)
100065f8:	e0bffb83 	ldbu	r2,-18(fp)
100065fc:	1080004c 	andi	r2,r2,1
10006600:	10803fcc 	andi	r2,r2,255
10006604:	10000426 	beq	r2,zero,10006618 <main_lab8+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10006608:	01400044 	movi	r5,1
1000660c:	0009883a 	mov	r4,zero
10006610:	00002f40 	call	100002f4 <IO_write>
10006614:	00000306 	br	10006624 <main_lab8+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10006618:	01401044 	movi	r5,65
1000661c:	0009883a 	mov	r4,zero
10006620:	00002f40 	call	100002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10006624:	014004c4 	movi	r5,19
10006628:	0009883a 	mov	r4,zero
1000662c:	00002f40 	call	100002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10006630:	000b883a 	mov	r5,zero
10006634:	0009883a 	mov	r4,zero
10006638:	00002f40 	call	100002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000663c:	01414004 	movi	r5,1280
10006640:	01006c04 	movi	r4,432
10006644:	0007d7c0 	call	10007d7c <UsbWrite>
			usleep(10*1000);
10006648:	0109c404 	movi	r4,10000
1000664c:	001fb080 	call	1001fb08 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006650:	010000c4 	movi	r4,3
10006654:	00003640 	call	10000364 <IO_read>
10006658:	10bfffcc 	andi	r2,r2,65535
1000665c:	1080040c 	andi	r2,r2,16
10006660:	103fd726 	beq	r2,zero,100065c0 <__alt_data_end+0xf80065c0>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10006664:	0008d6c0 	call	10008d6c <UsbWaitTDListDone>
10006668:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
1000666c:	01014784 	movi	r4,1310
10006670:	0007dd40 	call	10007dd4 <UsbRead>
10006674:	10bfffcc 	andi	r2,r2,65535
10006678:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
1000667c:	e17ffd17 	ldw	r5,-12(fp)
10006680:	010400b4 	movhi	r4,4098
10006684:	210a0404 	addi	r4,r4,10256
10006688:	0009e480 	call	10009e48 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
1000668c:	00802004 	movi	r2,128
10006690:	e0fffd17 	ldw	r3,-12(fp)
10006694:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
10006698:	01003204 	movi	r4,200
1000669c:	001fb080 	call	1001fb08 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100066a0:	d0a8650b 	ldhu	r2,-24172(gp)
100066a4:	10bfffcc 	andi	r2,r2,65535
100066a8:	1009883a 	mov	r4,r2
100066ac:	0007dd40 	call	10007dd4 <UsbRead>
100066b0:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
100066b4:	d0a8658b 	ldhu	r2,-24170(gp)
100066b8:	e0fffb0b 	ldhu	r3,-20(fp)
100066bc:	1884703a 	and	r2,r3,r2
100066c0:	10bfffcc 	andi	r2,r2,65535
100066c4:	10003f1e 	bne	r2,zero,100067c4 <main_lab8+0xd2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100066c8:	e03ffbc5 	stb	zero,-17(fp)
100066cc:	00000f06 	br	1000670c <main_lab8+0xc74>
			{
				usleep(5*1000);
100066d0:	0104e204 	movi	r4,5000
100066d4:	001fb080 	call	1001fb08 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
100066d8:	d0a8650b 	ldhu	r2,-24172(gp)
100066dc:	10bfffcc 	andi	r2,r2,65535
100066e0:	1009883a 	mov	r4,r2
100066e4:	0007dd40 	call	10007dd4 <UsbRead>
100066e8:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
100066ec:	d0a8658b 	ldhu	r2,-24170(gp)
100066f0:	e0fffb0b 	ldhu	r3,-20(fp)
100066f4:	1884703a 	and	r2,r3,r2
100066f8:	10bfffcc 	andi	r2,r2,65535
100066fc:	1000071e 	bne	r2,zero,1000671c <main_lab8+0xc84>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10006700:	e0bffbc3 	ldbu	r2,-17(fp)
10006704:	10800044 	addi	r2,r2,1
10006708:	e0bffbc5 	stb	r2,-17(fp)
1000670c:	e0bffbc3 	ldbu	r2,-17(fp)
10006710:	108001f0 	cmpltui	r2,r2,7
10006714:	103fee1e 	bne	r2,zero,100066d0 <__alt_data_end+0xf80066d0>
10006718:	00000106 	br	10006720 <main_lab8+0xc88>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
1000671c:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10006720:	d0a8658b 	ldhu	r2,-24170(gp)
10006724:	e0fffb0b 	ldhu	r3,-20(fp)
10006728:	1884703a 	and	r2,r3,r2
1000672c:	10bfffcc 	andi	r2,r2,65535
10006730:	1000241e 	bne	r2,zero,100067c4 <main_lab8+0xd2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10006734:	010400b4 	movhi	r4,4098
10006738:	210a0d04 	addi	r4,r4,10292
1000673c:	0009f640 	call	10009f64 <puts>
				printf("[INFO]: please insert again!!! \n");
10006740:	010400b4 	movhi	r4,4098
10006744:	210a1804 	addi	r4,r4,10336
10006748:	0009f640 	call	10009f64 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
1000674c:	00001d06 	br	100067c4 <main_lab8+0xd2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10006750:	d0a8650b 	ldhu	r2,-24172(gp)
10006754:	10bfffcc 	andi	r2,r2,65535
10006758:	1009883a 	mov	r4,r2
1000675c:	0007dd40 	call	10007dd4 <UsbRead>
10006760:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10006764:	0104e204 	movi	r4,5000
10006768:	001fb080 	call	1001fb08 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000676c:	d0a8650b 	ldhu	r2,-24172(gp)
10006770:	10bfffcc 	andi	r2,r2,65535
10006774:	1009883a 	mov	r4,r2
10006778:	0007dd40 	call	10007dd4 <UsbRead>
1000677c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10006780:	0104e204 	movi	r4,5000
10006784:	001fb080 	call	1001fb08 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10006788:	d0a8650b 	ldhu	r2,-24172(gp)
1000678c:	10bfffcc 	andi	r2,r2,65535
10006790:	1009883a 	mov	r4,r2
10006794:	0007dd40 	call	10007dd4 <UsbRead>
10006798:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000679c:	0104e204 	movi	r4,5000
100067a0:	001fb080 	call	1001fb08 <usleep>

			if(usb_ctl_val & no_device)
100067a4:	d0a8658b 	ldhu	r2,-24170(gp)
100067a8:	e0fffb0b 	ldhu	r3,-20(fp)
100067ac:	1884703a 	and	r2,r3,r2
100067b0:	10bfffcc 	andi	r2,r2,65535
100067b4:	10000126 	beq	r2,zero,100067bc <main_lab8+0xd24>
				goto USB_HOT_PLUG;
100067b8:	003cc206 	br	10005ac4 <__alt_data_end+0xf8005ac4>

			usleep(200);
100067bc:	01003204 	movi	r4,200
100067c0:	001fb080 	call	1001fb08 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100067c4:	d0a8658b 	ldhu	r2,-24170(gp)
100067c8:	e0fffb0b 	ldhu	r3,-20(fp)
100067cc:	1884703a 	and	r2,r3,r2
100067d0:	10bfffcc 	andi	r2,r2,65535
100067d4:	103fde26 	beq	r2,zero,10006750 <__alt_data_end+0xf8006750>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
100067d8:	003f5306 	br	10006528 <__alt_data_end+0xf8006528>

100067dc <charToHex>:
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
100067dc:	defffd04 	addi	sp,sp,-12
100067e0:	df000215 	stw	fp,8(sp)
100067e4:	df000204 	addi	fp,sp,8
100067e8:	2005883a 	mov	r2,r4
100067ec:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
100067f0:	e0bfff03 	ldbu	r2,-4(fp)
100067f4:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
100067f8:	e0bffe07 	ldb	r2,-8(fp)
100067fc:	10800c10 	cmplti	r2,r2,48
10006800:	1000071e 	bne	r2,zero,10006820 <charToHex+0x44>
10006804:	e0bffe07 	ldb	r2,-8(fp)
10006808:	10800e88 	cmpgei	r2,r2,58
1000680c:	1000041e 	bne	r2,zero,10006820 <charToHex+0x44>
		hex -= '0';
10006810:	e0bffe03 	ldbu	r2,-8(fp)
10006814:	10bff404 	addi	r2,r2,-48
10006818:	e0bffe05 	stb	r2,-8(fp)
1000681c:	00001906 	br	10006884 <charToHex+0xa8>
	else if (hex >= 'A' && hex <= 'F')
10006820:	e0bffe07 	ldb	r2,-8(fp)
10006824:	10801050 	cmplti	r2,r2,65
10006828:	10000a1e 	bne	r2,zero,10006854 <charToHex+0x78>
1000682c:	e0bffe07 	ldb	r2,-8(fp)
10006830:	108011c8 	cmpgei	r2,r2,71
10006834:	1000071e 	bne	r2,zero,10006854 <charToHex+0x78>
	{
		hex -= 'A';
10006838:	e0bffe03 	ldbu	r2,-8(fp)
1000683c:	10bfefc4 	addi	r2,r2,-65
10006840:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10006844:	e0bffe03 	ldbu	r2,-8(fp)
10006848:	10800284 	addi	r2,r2,10
1000684c:	e0bffe05 	stb	r2,-8(fp)
10006850:	00000c06 	br	10006884 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <= 'f')
10006854:	e0bffe07 	ldb	r2,-8(fp)
10006858:	10801850 	cmplti	r2,r2,97
1000685c:	1000091e 	bne	r2,zero,10006884 <charToHex+0xa8>
10006860:	e0bffe07 	ldb	r2,-8(fp)
10006864:	108019c8 	cmpgei	r2,r2,103
10006868:	1000061e 	bne	r2,zero,10006884 <charToHex+0xa8>
	{
		hex -= 'a';
1000686c:	e0bffe03 	ldbu	r2,-8(fp)
10006870:	10bfe7c4 	addi	r2,r2,-97
10006874:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10006878:	e0bffe03 	ldbu	r2,-8(fp)
1000687c:	10800284 	addi	r2,r2,10
10006880:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
10006884:	e0bffe03 	ldbu	r2,-8(fp)
}
10006888:	e037883a 	mov	sp,fp
1000688c:	df000017 	ldw	fp,0(sp)
10006890:	dec00104 	addi	sp,sp,4
10006894:	f800283a 	ret

10006898 <charsToHex>:
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
10006898:	defffb04 	addi	sp,sp,-20
1000689c:	dfc00415 	stw	ra,16(sp)
100068a0:	df000315 	stw	fp,12(sp)
100068a4:	df000304 	addi	fp,sp,12
100068a8:	2007883a 	mov	r3,r4
100068ac:	2805883a 	mov	r2,r5
100068b0:	e0fffe05 	stb	r3,-8(fp)
100068b4:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
100068b8:	e0bffe07 	ldb	r2,-8(fp)
100068bc:	1009883a 	mov	r4,r2
100068c0:	00067dc0 	call	100067dc <charToHex>
100068c4:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
100068c8:	e0bfff07 	ldb	r2,-4(fp)
100068cc:	1009883a 	mov	r4,r2
100068d0:	00067dc0 	call	100067dc <charToHex>
100068d4:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
100068d8:	e0bffd03 	ldbu	r2,-12(fp)
100068dc:	1004913a 	slli	r2,r2,4
100068e0:	1007883a 	mov	r3,r2
100068e4:	e0bffd43 	ldbu	r2,-11(fp)
100068e8:	1885883a 	add	r2,r3,r2
}
100068ec:	e037883a 	mov	sp,fp
100068f0:	dfc00117 	ldw	ra,4(sp)
100068f4:	df000017 	ldw	fp,0(sp)
100068f8:	dec00204 	addi	sp,sp,8
100068fc:	f800283a 	ret

10006900 <printstate>:
void ShiftRows(uchar state[][4]);
void MixColumns(uchar state[][4]);
void KeyExpansion(uchar * key, uint * w);
uint SubWord(uint word);
uint RotWord(uint word);
void printstate(uchar state[][4]){
10006900:	defffb04 	addi	sp,sp,-20
10006904:	dfc00415 	stw	ra,16(sp)
10006908:	df000315 	stw	fp,12(sp)
1000690c:	df000304 	addi	fp,sp,12
10006910:	e13fff15 	stw	r4,-4(fp)
	printf("\nstate:\n");
10006914:	010400b4 	movhi	r4,4098
10006918:	210aa004 	addi	r4,r4,10880
1000691c:	0009f640 	call	10009f64 <puts>
	int i, j;
	for(i = 0; i < 4; i++){
10006920:	e03ffd15 	stw	zero,-12(fp)
10006924:	00001b06 	br	10006994 <printstate+0x94>
		for(j = 0; j < 4; j++){
10006928:	e03ffe15 	stw	zero,-8(fp)
1000692c:	00001106 	br	10006974 <printstate+0x74>
			printf("%02x ", state[i][j]);
10006930:	e0bffd17 	ldw	r2,-12(fp)
10006934:	1085883a 	add	r2,r2,r2
10006938:	1085883a 	add	r2,r2,r2
1000693c:	1007883a 	mov	r3,r2
10006940:	e0bfff17 	ldw	r2,-4(fp)
10006944:	10c7883a 	add	r3,r2,r3
10006948:	e0bffe17 	ldw	r2,-8(fp)
1000694c:	1885883a 	add	r2,r3,r2
10006950:	10800003 	ldbu	r2,0(r2)
10006954:	10803fcc 	andi	r2,r2,255
10006958:	100b883a 	mov	r5,r2
1000695c:	010400b4 	movhi	r4,4098
10006960:	210aa204 	addi	r4,r4,10888
10006964:	0009e480 	call	10009e48 <printf>
uint RotWord(uint word);
void printstate(uchar state[][4]){
	printf("\nstate:\n");
	int i, j;
	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
10006968:	e0bffe17 	ldw	r2,-8(fp)
1000696c:	10800044 	addi	r2,r2,1
10006970:	e0bffe15 	stw	r2,-8(fp)
10006974:	e0bffe17 	ldw	r2,-8(fp)
10006978:	10800110 	cmplti	r2,r2,4
1000697c:	103fec1e 	bne	r2,zero,10006930 <__alt_data_end+0xf8006930>
			printf("%02x ", state[i][j]);
		}
		printf("\n");
10006980:	01000284 	movi	r4,10
10006984:	0009e8c0 	call	10009e8c <putchar>
uint SubWord(uint word);
uint RotWord(uint word);
void printstate(uchar state[][4]){
	printf("\nstate:\n");
	int i, j;
	for(i = 0; i < 4; i++){
10006988:	e0bffd17 	ldw	r2,-12(fp)
1000698c:	10800044 	addi	r2,r2,1
10006990:	e0bffd15 	stw	r2,-12(fp)
10006994:	e0bffd17 	ldw	r2,-12(fp)
10006998:	10800110 	cmplti	r2,r2,4
1000699c:	103fe21e 	bne	r2,zero,10006928 <__alt_data_end+0xf8006928>
		for(j = 0; j < 4; j++){
			printf("%02x ", state[i][j]);
		}
		printf("\n");
	}
	printf("\n");
100069a0:	01000284 	movi	r4,10
100069a4:	0009e8c0 	call	10009e8c <putchar>
}
100069a8:	0001883a 	nop
100069ac:	e037883a 	mov	sp,fp
100069b0:	dfc00117 	ldw	ra,4(sp)
100069b4:	df000017 	ldw	fp,0(sp)
100069b8:	dec00204 	addi	sp,sp,8
100069bc:	f800283a 	ret

100069c0 <printbyte>:
void printbyte(uchar* byte){
100069c0:	defffc04 	addi	sp,sp,-16
100069c4:	dfc00315 	stw	ra,12(sp)
100069c8:	df000215 	stw	fp,8(sp)
100069cc:	df000204 	addi	fp,sp,8
100069d0:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 16; i++){
100069d4:	e03ffe15 	stw	zero,-8(fp)
100069d8:	00000c06 	br	10006a0c <printbyte+0x4c>
		printf("%02x", byte[i]);
100069dc:	e0bffe17 	ldw	r2,-8(fp)
100069e0:	e0ffff17 	ldw	r3,-4(fp)
100069e4:	1885883a 	add	r2,r3,r2
100069e8:	10800003 	ldbu	r2,0(r2)
100069ec:	10803fcc 	andi	r2,r2,255
100069f0:	100b883a 	mov	r5,r2
100069f4:	010400b4 	movhi	r4,4098
100069f8:	210aa404 	addi	r4,r4,10896
100069fc:	0009e480 	call	10009e48 <printf>
	}
	printf("\n");
}
void printbyte(uchar* byte){
	int i;
	for(i = 0; i < 16; i++){
10006a00:	e0bffe17 	ldw	r2,-8(fp)
10006a04:	10800044 	addi	r2,r2,1
10006a08:	e0bffe15 	stw	r2,-8(fp)
10006a0c:	e0bffe17 	ldw	r2,-8(fp)
10006a10:	10800410 	cmplti	r2,r2,16
10006a14:	103ff11e 	bne	r2,zero,100069dc <__alt_data_end+0xf80069dc>
		printf("%02x", byte[i]);
	}
	printf("\n");
10006a18:	01000284 	movi	r4,10
10006a1c:	0009e8c0 	call	10009e8c <putchar>
}
10006a20:	0001883a 	nop
10006a24:	e037883a 	mov	sp,fp
10006a28:	dfc00117 	ldw	ra,4(sp)
10006a2c:	df000017 	ldw	fp,0(sp)
10006a30:	dec00204 	addi	sp,sp,8
10006a34:	f800283a 	ret

10006a38 <printword>:
void printword(uint* word){
10006a38:	defffc04 	addi	sp,sp,-16
10006a3c:	dfc00315 	stw	ra,12(sp)
10006a40:	df000215 	stw	fp,8(sp)
10006a44:	df000204 	addi	fp,sp,8
10006a48:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 4; i++){
10006a4c:	e03ffe15 	stw	zero,-8(fp)
10006a50:	00000e06 	br	10006a8c <printword+0x54>
		printf("%08x", word[i]);
10006a54:	e0bffe17 	ldw	r2,-8(fp)
10006a58:	1085883a 	add	r2,r2,r2
10006a5c:	1085883a 	add	r2,r2,r2
10006a60:	1007883a 	mov	r3,r2
10006a64:	e0bfff17 	ldw	r2,-4(fp)
10006a68:	10c5883a 	add	r2,r2,r3
10006a6c:	10800017 	ldw	r2,0(r2)
10006a70:	100b883a 	mov	r5,r2
10006a74:	010400b4 	movhi	r4,4098
10006a78:	210aa604 	addi	r4,r4,10904
10006a7c:	0009e480 	call	10009e48 <printf>
	}
	printf("\n");
}
void printword(uint* word){
	int i;
	for(i = 0; i < 4; i++){
10006a80:	e0bffe17 	ldw	r2,-8(fp)
10006a84:	10800044 	addi	r2,r2,1
10006a88:	e0bffe15 	stw	r2,-8(fp)
10006a8c:	e0bffe17 	ldw	r2,-8(fp)
10006a90:	10800110 	cmplti	r2,r2,4
10006a94:	103fef1e 	bne	r2,zero,10006a54 <__alt_data_end+0xf8006a54>
		printf("%08x", word[i]);
	}
	printf("\n");
10006a98:	01000284 	movi	r4,10
10006a9c:	0009e8c0 	call	10009e8c <putchar>
}
10006aa0:	0001883a 	nop
10006aa4:	e037883a 	mov	sp,fp
10006aa8:	dfc00117 	ldw	ra,4(sp)
10006aac:	df000017 	ldw	fp,0(sp)
10006ab0:	dec00204 	addi	sp,sp,8
10006ab4:	f800283a 	ret

10006ab8 <encrypt>:
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
10006ab8:	deffc104 	addi	sp,sp,-252
10006abc:	dfc03e15 	stw	ra,248(sp)
10006ac0:	df003d15 	stw	fp,244(sp)
10006ac4:	df003d04 	addi	fp,sp,244
10006ac8:	e13ffc15 	stw	r4,-16(fp)
10006acc:	e17ffd15 	stw	r5,-12(fp)
10006ad0:	e1bffe15 	stw	r6,-8(fp)
10006ad4:	e1ffff15 	stw	r7,-4(fp)
	int i, j;
	uchar in[16], out[16], key_byte[16];
	uint w_word[44];

	for (i = 0; i < 16; i++){
10006ad8:	e03fc315 	stw	zero,-244(fp)
10006adc:	00003506 	br	10006bb4 <encrypt+0xfc>
		in[i] = (uchar)charsToHex(*(msg_ascii + 2 * i), *(msg_ascii + 2 * i + 1));
10006ae0:	e0bfc317 	ldw	r2,-244(fp)
10006ae4:	1085883a 	add	r2,r2,r2
10006ae8:	1007883a 	mov	r3,r2
10006aec:	e0bffc17 	ldw	r2,-16(fp)
10006af0:	10c5883a 	add	r2,r2,r3
10006af4:	10800003 	ldbu	r2,0(r2)
10006af8:	11003fcc 	andi	r4,r2,255
10006afc:	2100201c 	xori	r4,r4,128
10006b00:	213fe004 	addi	r4,r4,-128
10006b04:	e0bfc317 	ldw	r2,-244(fp)
10006b08:	1085883a 	add	r2,r2,r2
10006b0c:	10800044 	addi	r2,r2,1
10006b10:	e0fffc17 	ldw	r3,-16(fp)
10006b14:	1885883a 	add	r2,r3,r2
10006b18:	10800003 	ldbu	r2,0(r2)
10006b1c:	10803fcc 	andi	r2,r2,255
10006b20:	1080201c 	xori	r2,r2,128
10006b24:	10bfe004 	addi	r2,r2,-128
10006b28:	100b883a 	mov	r5,r2
10006b2c:	00068980 	call	10006898 <charsToHex>
10006b30:	1009883a 	mov	r4,r2
10006b34:	e0ffc404 	addi	r3,fp,-240
10006b38:	e0bfc317 	ldw	r2,-244(fp)
10006b3c:	1885883a 	add	r2,r3,r2
10006b40:	11000005 	stb	r4,0(r2)
		key_byte[i] = (uchar)charsToHex(*(key_ascii + 2 * i), *(key_ascii + 2 * i + 1));
10006b44:	e0bfc317 	ldw	r2,-244(fp)
10006b48:	1085883a 	add	r2,r2,r2
10006b4c:	1007883a 	mov	r3,r2
10006b50:	e0bffd17 	ldw	r2,-12(fp)
10006b54:	10c5883a 	add	r2,r2,r3
10006b58:	10800003 	ldbu	r2,0(r2)
10006b5c:	11003fcc 	andi	r4,r2,255
10006b60:	2100201c 	xori	r4,r4,128
10006b64:	213fe004 	addi	r4,r4,-128
10006b68:	e0bfc317 	ldw	r2,-244(fp)
10006b6c:	1085883a 	add	r2,r2,r2
10006b70:	10800044 	addi	r2,r2,1
10006b74:	e0fffd17 	ldw	r3,-12(fp)
10006b78:	1885883a 	add	r2,r3,r2
10006b7c:	10800003 	ldbu	r2,0(r2)
10006b80:	10803fcc 	andi	r2,r2,255
10006b84:	1080201c 	xori	r2,r2,128
10006b88:	10bfe004 	addi	r2,r2,-128
10006b8c:	100b883a 	mov	r5,r2
10006b90:	00068980 	call	10006898 <charsToHex>
10006b94:	1009883a 	mov	r4,r2
10006b98:	e0ffcc04 	addi	r3,fp,-208
10006b9c:	e0bfc317 	ldw	r2,-244(fp)
10006ba0:	1885883a 	add	r2,r3,r2
10006ba4:	11000005 	stb	r4,0(r2)
{
	int i, j;
	uchar in[16], out[16], key_byte[16];
	uint w_word[44];

	for (i = 0; i < 16; i++){
10006ba8:	e0bfc317 	ldw	r2,-244(fp)
10006bac:	10800044 	addi	r2,r2,1
10006bb0:	e0bfc315 	stw	r2,-244(fp)
10006bb4:	e0bfc317 	ldw	r2,-244(fp)
10006bb8:	10800410 	cmplti	r2,r2,16
10006bbc:	103fc81e 	bne	r2,zero,10006ae0 <__alt_data_end+0xf8006ae0>
		in[i] = (uchar)charsToHex(*(msg_ascii + 2 * i), *(msg_ascii + 2 * i + 1));
		key_byte[i] = (uchar)charsToHex(*(key_ascii + 2 * i), *(key_ascii + 2 * i + 1));
	}
	//printf("\nIn Encrypt:\n");
	KeyExpansion(key_byte, w_word);
10006bc0:	e0ffd004 	addi	r3,fp,-192
10006bc4:	e0bfcc04 	addi	r2,fp,-208
10006bc8:	180b883a 	mov	r5,r3
10006bcc:	1009883a 	mov	r4,r2
10006bd0:	0006f980 	call	10006f98 <KeyExpansion>
	AES(in, out, w_word);
10006bd4:	e13fd004 	addi	r4,fp,-192
10006bd8:	e0ffc804 	addi	r3,fp,-224
10006bdc:	e0bfc404 	addi	r2,fp,-240
10006be0:	200d883a 	mov	r6,r4
10006be4:	180b883a 	mov	r5,r3
10006be8:	1009883a 	mov	r4,r2
10006bec:	0006da00 	call	10006da0 <AES>
		}
		printf("\n");
	}
	printf("\n");
	*/
	for(i = 0; i < 4; i++){
10006bf0:	e03fc315 	stw	zero,-244(fp)
10006bf4:	00006106 	br	10006d7c <encrypt+0x2c4>
		msg_enc[i] = ((uint)out[4 * i] << 24 & 0xff000000)
10006bf8:	e0bfc317 	ldw	r2,-244(fp)
10006bfc:	1085883a 	add	r2,r2,r2
10006c00:	1085883a 	add	r2,r2,r2
10006c04:	1007883a 	mov	r3,r2
10006c08:	e0bffe17 	ldw	r2,-8(fp)
10006c0c:	10c7883a 	add	r3,r2,r3
10006c10:	e0bfc317 	ldw	r2,-244(fp)
10006c14:	1085883a 	add	r2,r2,r2
10006c18:	1085883a 	add	r2,r2,r2
10006c1c:	1009883a 	mov	r4,r2
10006c20:	e0bfc804 	addi	r2,fp,-224
10006c24:	1105883a 	add	r2,r2,r4
10006c28:	10800003 	ldbu	r2,0(r2)
10006c2c:	10803fcc 	andi	r2,r2,255
10006c30:	1008963a 	slli	r4,r2,24
					+ ((uint)out[4 * i + 1] << 16 & 0x00ff0000)
10006c34:	e0bfc317 	ldw	r2,-244(fp)
10006c38:	1085883a 	add	r2,r2,r2
10006c3c:	1085883a 	add	r2,r2,r2
10006c40:	10800044 	addi	r2,r2,1
10006c44:	e17fc804 	addi	r5,fp,-224
10006c48:	2885883a 	add	r2,r5,r2
10006c4c:	10800003 	ldbu	r2,0(r2)
10006c50:	10803fcc 	andi	r2,r2,255
10006c54:	1004943a 	slli	r2,r2,16
10006c58:	10803fec 	andhi	r2,r2,255
10006c5c:	2089883a 	add	r4,r4,r2
					+ ((uint)out[4 * i + 2] << 8 & 0x0000ff00)
10006c60:	e0bfc317 	ldw	r2,-244(fp)
10006c64:	1085883a 	add	r2,r2,r2
10006c68:	1085883a 	add	r2,r2,r2
10006c6c:	10800084 	addi	r2,r2,2
10006c70:	e17fc804 	addi	r5,fp,-224
10006c74:	2885883a 	add	r2,r5,r2
10006c78:	10800003 	ldbu	r2,0(r2)
10006c7c:	10803fcc 	andi	r2,r2,255
10006c80:	1004923a 	slli	r2,r2,8
10006c84:	10bfffcc 	andi	r2,r2,65535
10006c88:	2089883a 	add	r4,r4,r2
					+ ((uint)out[4 * i + 3] & 0x000000ff);
10006c8c:	e0bfc317 	ldw	r2,-244(fp)
10006c90:	1085883a 	add	r2,r2,r2
10006c94:	1085883a 	add	r2,r2,r2
10006c98:	108000c4 	addi	r2,r2,3
10006c9c:	e17fc804 	addi	r5,fp,-224
10006ca0:	2885883a 	add	r2,r5,r2
10006ca4:	10800003 	ldbu	r2,0(r2)
10006ca8:	10803fcc 	andi	r2,r2,255
10006cac:	2085883a 	add	r2,r4,r2
		printf("\n");
	}
	printf("\n");
	*/
	for(i = 0; i < 4; i++){
		msg_enc[i] = ((uint)out[4 * i] << 24 & 0xff000000)
10006cb0:	18800015 	stw	r2,0(r3)
					+ ((uint)out[4 * i + 1] << 16 & 0x00ff0000)
					+ ((uint)out[4 * i + 2] << 8 & 0x0000ff00)
					+ ((uint)out[4 * i + 3] & 0x000000ff);
		key[i] = ((uint)key_byte[4 * i] << 24 & 0xff000000)
10006cb4:	e0bfc317 	ldw	r2,-244(fp)
10006cb8:	1085883a 	add	r2,r2,r2
10006cbc:	1085883a 	add	r2,r2,r2
10006cc0:	1007883a 	mov	r3,r2
10006cc4:	e0bfff17 	ldw	r2,-4(fp)
10006cc8:	10c7883a 	add	r3,r2,r3
10006ccc:	e0bfc317 	ldw	r2,-244(fp)
10006cd0:	1085883a 	add	r2,r2,r2
10006cd4:	1085883a 	add	r2,r2,r2
10006cd8:	1009883a 	mov	r4,r2
10006cdc:	e0bfcc04 	addi	r2,fp,-208
10006ce0:	1105883a 	add	r2,r2,r4
10006ce4:	10800003 	ldbu	r2,0(r2)
10006ce8:	10803fcc 	andi	r2,r2,255
10006cec:	1008963a 	slli	r4,r2,24
					+ ((uint)key_byte[4 * i + 1] << 16 & 0x00ff0000)
10006cf0:	e0bfc317 	ldw	r2,-244(fp)
10006cf4:	1085883a 	add	r2,r2,r2
10006cf8:	1085883a 	add	r2,r2,r2
10006cfc:	10800044 	addi	r2,r2,1
10006d00:	e17fcc04 	addi	r5,fp,-208
10006d04:	2885883a 	add	r2,r5,r2
10006d08:	10800003 	ldbu	r2,0(r2)
10006d0c:	10803fcc 	andi	r2,r2,255
10006d10:	1004943a 	slli	r2,r2,16
10006d14:	10803fec 	andhi	r2,r2,255
10006d18:	2089883a 	add	r4,r4,r2
					+ ((uint)key_byte[4 * i + 2] << 8 & 0x0000ff00)
10006d1c:	e0bfc317 	ldw	r2,-244(fp)
10006d20:	1085883a 	add	r2,r2,r2
10006d24:	1085883a 	add	r2,r2,r2
10006d28:	10800084 	addi	r2,r2,2
10006d2c:	e17fcc04 	addi	r5,fp,-208
10006d30:	2885883a 	add	r2,r5,r2
10006d34:	10800003 	ldbu	r2,0(r2)
10006d38:	10803fcc 	andi	r2,r2,255
10006d3c:	1004923a 	slli	r2,r2,8
10006d40:	10bfffcc 	andi	r2,r2,65535
10006d44:	2089883a 	add	r4,r4,r2
					+ ((uint)key_byte[4 * i + 3] & 0x000000ff);
10006d48:	e0bfc317 	ldw	r2,-244(fp)
10006d4c:	1085883a 	add	r2,r2,r2
10006d50:	1085883a 	add	r2,r2,r2
10006d54:	108000c4 	addi	r2,r2,3
10006d58:	e17fcc04 	addi	r5,fp,-208
10006d5c:	2885883a 	add	r2,r5,r2
10006d60:	10800003 	ldbu	r2,0(r2)
10006d64:	10803fcc 	andi	r2,r2,255
10006d68:	2085883a 	add	r2,r4,r2
	for(i = 0; i < 4; i++){
		msg_enc[i] = ((uint)out[4 * i] << 24 & 0xff000000)
					+ ((uint)out[4 * i + 1] << 16 & 0x00ff0000)
					+ ((uint)out[4 * i + 2] << 8 & 0x0000ff00)
					+ ((uint)out[4 * i + 3] & 0x000000ff);
		key[i] = ((uint)key_byte[4 * i] << 24 & 0xff000000)
10006d6c:	18800015 	stw	r2,0(r3)
		}
		printf("\n");
	}
	printf("\n");
	*/
	for(i = 0; i < 4; i++){
10006d70:	e0bfc317 	ldw	r2,-244(fp)
10006d74:	10800044 	addi	r2,r2,1
10006d78:	e0bfc315 	stw	r2,-244(fp)
10006d7c:	e0bfc317 	ldw	r2,-244(fp)
10006d80:	10800110 	cmplti	r2,r2,4
10006d84:	103f9c1e 	bne	r2,zero,10006bf8 <__alt_data_end+0xf8006bf8>
		key[i] = ((uint)key_byte[4 * i] << 24 & 0xff000000)
					+ ((uint)key_byte[4 * i + 1] << 16 & 0x00ff0000)
					+ ((uint)key_byte[4 * i + 2] << 8 & 0x0000ff00)
					+ ((uint)key_byte[4 * i + 3] & 0x000000ff);
	}
}
10006d88:	0001883a 	nop
10006d8c:	e037883a 	mov	sp,fp
10006d90:	dfc00117 	ldw	ra,4(sp)
10006d94:	df000017 	ldw	fp,0(sp)
10006d98:	dec00204 	addi	sp,sp,8
10006d9c:	f800283a 	ret

10006da0 <AES>:
void AES(uchar * in, uchar * out, uint * w){
10006da0:	defff404 	addi	sp,sp,-48
10006da4:	dfc00b15 	stw	ra,44(sp)
10006da8:	df000a15 	stw	fp,40(sp)
10006dac:	df000a04 	addi	fp,sp,40
10006db0:	e13ffd15 	stw	r4,-12(fp)
10006db4:	e17ffe15 	stw	r5,-8(fp)
10006db8:	e1bfff15 	stw	r6,-4(fp)
	int i, j;
	int round;
	uchar state[4][4];
	//printf("\nAES:\n");
	for (j = 0; j < 4; j++){
10006dbc:	e03ff715 	stw	zero,-36(fp)
10006dc0:	00001e06 	br	10006e3c <AES+0x9c>
		for (i = 0; i < 4; i++){
10006dc4:	e03ff615 	stw	zero,-40(fp)
10006dc8:	00001606 	br	10006e24 <AES+0x84>
			state[i][j] = in[j * 4 + i];
10006dcc:	e0bff717 	ldw	r2,-36(fp)
10006dd0:	1085883a 	add	r2,r2,r2
10006dd4:	1085883a 	add	r2,r2,r2
10006dd8:	1007883a 	mov	r3,r2
10006ddc:	e0bff617 	ldw	r2,-40(fp)
10006de0:	1885883a 	add	r2,r3,r2
10006de4:	1007883a 	mov	r3,r2
10006de8:	e0bffd17 	ldw	r2,-12(fp)
10006dec:	10c5883a 	add	r2,r2,r3
10006df0:	10c00003 	ldbu	r3,0(r2)
10006df4:	e0bff617 	ldw	r2,-40(fp)
10006df8:	1085883a 	add	r2,r2,r2
10006dfc:	1085883a 	add	r2,r2,r2
10006e00:	e17ff604 	addi	r5,fp,-40
10006e04:	2889883a 	add	r4,r5,r2
10006e08:	e0bff717 	ldw	r2,-36(fp)
10006e0c:	2085883a 	add	r2,r4,r2
10006e10:	10800304 	addi	r2,r2,12
10006e14:	10c00005 	stb	r3,0(r2)
	int i, j;
	int round;
	uchar state[4][4];
	//printf("\nAES:\n");
	for (j = 0; j < 4; j++){
		for (i = 0; i < 4; i++){
10006e18:	e0bff617 	ldw	r2,-40(fp)
10006e1c:	10800044 	addi	r2,r2,1
10006e20:	e0bff615 	stw	r2,-40(fp)
10006e24:	e0bff617 	ldw	r2,-40(fp)
10006e28:	10800110 	cmplti	r2,r2,4
10006e2c:	103fe71e 	bne	r2,zero,10006dcc <__alt_data_end+0xf8006dcc>
void AES(uchar * in, uchar * out, uint * w){
	int i, j;
	int round;
	uchar state[4][4];
	//printf("\nAES:\n");
	for (j = 0; j < 4; j++){
10006e30:	e0bff717 	ldw	r2,-36(fp)
10006e34:	10800044 	addi	r2,r2,1
10006e38:	e0bff715 	stw	r2,-36(fp)
10006e3c:	e0bff717 	ldw	r2,-36(fp)
10006e40:	10800110 	cmplti	r2,r2,4
10006e44:	103fdf1e 	bne	r2,zero,10006dc4 <__alt_data_end+0xf8006dc4>
		for (i = 0; i < 4; i++){
			state[i][j] = in[j * 4 + i];
		}
	}
	AddRoundKey(state, w);
10006e48:	e0bff904 	addi	r2,fp,-28
10006e4c:	e17fff17 	ldw	r5,-4(fp)
10006e50:	1009883a 	mov	r4,r2
10006e54:	00072880 	call	10007288 <AddRoundKey>
	for(round = 1; round < 10; round++){
10006e58:	00800044 	movi	r2,1
10006e5c:	e0bff815 	stw	r2,-32(fp)
10006e60:	00001506 	br	10006eb8 <AES+0x118>
		SubBytes(state);
10006e64:	e0bff904 	addi	r2,fp,-28
10006e68:	1009883a 	mov	r4,r2
10006e6c:	00073700 	call	10007370 <SubBytes>
		ShiftRows(state);
10006e70:	e0bff904 	addi	r2,fp,-28
10006e74:	1009883a 	mov	r4,r2
10006e78:	00074300 	call	10007430 <ShiftRows>
		MixColumns(state);
10006e7c:	e0bff904 	addi	r2,fp,-28
10006e80:	1009883a 	mov	r4,r2
10006e84:	00075940 	call	10007594 <MixColumns>
		AddRoundKey(state, w + round * 4);
10006e88:	e0bff817 	ldw	r2,-32(fp)
10006e8c:	1004913a 	slli	r2,r2,4
10006e90:	1007883a 	mov	r3,r2
10006e94:	e0bfff17 	ldw	r2,-4(fp)
10006e98:	10c7883a 	add	r3,r2,r3
10006e9c:	e0bff904 	addi	r2,fp,-28
10006ea0:	180b883a 	mov	r5,r3
10006ea4:	1009883a 	mov	r4,r2
10006ea8:	00072880 	call	10007288 <AddRoundKey>
		for (i = 0; i < 4; i++){
			state[i][j] = in[j * 4 + i];
		}
	}
	AddRoundKey(state, w);
	for(round = 1; round < 10; round++){
10006eac:	e0bff817 	ldw	r2,-32(fp)
10006eb0:	10800044 	addi	r2,r2,1
10006eb4:	e0bff815 	stw	r2,-32(fp)
10006eb8:	e0bff817 	ldw	r2,-32(fp)
10006ebc:	10800290 	cmplti	r2,r2,10
10006ec0:	103fe81e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
		SubBytes(state);
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, w + round * 4);
	}
	SubBytes(state);
10006ec4:	e0bff904 	addi	r2,fp,-28
10006ec8:	1009883a 	mov	r4,r2
10006ecc:	00073700 	call	10007370 <SubBytes>
	ShiftRows(state);
10006ed0:	e0bff904 	addi	r2,fp,-28
10006ed4:	1009883a 	mov	r4,r2
10006ed8:	00074300 	call	10007430 <ShiftRows>
	AddRoundKey(state, w + 40);
10006edc:	e0bfff17 	ldw	r2,-4(fp)
10006ee0:	10c02804 	addi	r3,r2,160
10006ee4:	e0bff904 	addi	r2,fp,-28
10006ee8:	180b883a 	mov	r5,r3
10006eec:	1009883a 	mov	r4,r2
10006ef0:	00072880 	call	10007288 <AddRoundKey>
	for (j = 0; j < 4; j++){
10006ef4:	e03ff715 	stw	zero,-36(fp)
10006ef8:	00001e06 	br	10006f74 <AES+0x1d4>
		for (i = 0; i < 4; i++){
10006efc:	e03ff615 	stw	zero,-40(fp)
10006f00:	00001606 	br	10006f5c <AES+0x1bc>
			out[j * 4 + i] = state[i][j];
10006f04:	e0bff717 	ldw	r2,-36(fp)
10006f08:	1085883a 	add	r2,r2,r2
10006f0c:	1085883a 	add	r2,r2,r2
10006f10:	1007883a 	mov	r3,r2
10006f14:	e0bff617 	ldw	r2,-40(fp)
10006f18:	1885883a 	add	r2,r3,r2
10006f1c:	1007883a 	mov	r3,r2
10006f20:	e0bffe17 	ldw	r2,-8(fp)
10006f24:	10c7883a 	add	r3,r2,r3
10006f28:	e0bff617 	ldw	r2,-40(fp)
10006f2c:	1085883a 	add	r2,r2,r2
10006f30:	1085883a 	add	r2,r2,r2
10006f34:	e17ff604 	addi	r5,fp,-40
10006f38:	2889883a 	add	r4,r5,r2
10006f3c:	e0bff717 	ldw	r2,-36(fp)
10006f40:	2085883a 	add	r2,r4,r2
10006f44:	10800304 	addi	r2,r2,12
10006f48:	10800003 	ldbu	r2,0(r2)
10006f4c:	18800005 	stb	r2,0(r3)
	}
	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, w + 40);
	for (j = 0; j < 4; j++){
		for (i = 0; i < 4; i++){
10006f50:	e0bff617 	ldw	r2,-40(fp)
10006f54:	10800044 	addi	r2,r2,1
10006f58:	e0bff615 	stw	r2,-40(fp)
10006f5c:	e0bff617 	ldw	r2,-40(fp)
10006f60:	10800110 	cmplti	r2,r2,4
10006f64:	103fe71e 	bne	r2,zero,10006f04 <__alt_data_end+0xf8006f04>
		AddRoundKey(state, w + round * 4);
	}
	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, w + 40);
	for (j = 0; j < 4; j++){
10006f68:	e0bff717 	ldw	r2,-36(fp)
10006f6c:	10800044 	addi	r2,r2,1
10006f70:	e0bff715 	stw	r2,-36(fp)
10006f74:	e0bff717 	ldw	r2,-36(fp)
10006f78:	10800110 	cmplti	r2,r2,4
10006f7c:	103fdf1e 	bne	r2,zero,10006efc <__alt_data_end+0xf8006efc>
		for (i = 0; i < 4; i++){
			out[j * 4 + i] = state[i][j];
		}
	}
}
10006f80:	0001883a 	nop
10006f84:	e037883a 	mov	sp,fp
10006f88:	dfc00117 	ldw	ra,4(sp)
10006f8c:	df000017 	ldw	fp,0(sp)
10006f90:	dec00204 	addi	sp,sp,8
10006f94:	f800283a 	ret

10006f98 <KeyExpansion>:
void KeyExpansion(uchar * key, uint * w){
10006f98:	defffa04 	addi	sp,sp,-24
10006f9c:	dfc00515 	stw	ra,20(sp)
10006fa0:	df000415 	stw	fp,16(sp)
10006fa4:	df000404 	addi	fp,sp,16
10006fa8:	e13ffe15 	stw	r4,-8(fp)
10006fac:	e17fff15 	stw	r5,-4(fp)
	uint temp;
	int i;
	for(i = 0; i < 4; i++){
10006fb0:	e03ffd15 	stw	zero,-12(fp)
10006fb4:	00003206 	br	10007080 <KeyExpansion+0xe8>
		w[i] = ((uint)key[4 * i] << 24 & 0xff000000)
10006fb8:	e0bffd17 	ldw	r2,-12(fp)
10006fbc:	1085883a 	add	r2,r2,r2
10006fc0:	1085883a 	add	r2,r2,r2
10006fc4:	1007883a 	mov	r3,r2
10006fc8:	e0bfff17 	ldw	r2,-4(fp)
10006fcc:	10c7883a 	add	r3,r2,r3
10006fd0:	e0bffd17 	ldw	r2,-12(fp)
10006fd4:	1085883a 	add	r2,r2,r2
10006fd8:	1085883a 	add	r2,r2,r2
10006fdc:	1009883a 	mov	r4,r2
10006fe0:	e0bffe17 	ldw	r2,-8(fp)
10006fe4:	1105883a 	add	r2,r2,r4
10006fe8:	10800003 	ldbu	r2,0(r2)
10006fec:	10803fcc 	andi	r2,r2,255
10006ff0:	1008963a 	slli	r4,r2,24
				+ ((uint)key[4 * i + 1] << 16 & 0x00ff0000)
10006ff4:	e0bffd17 	ldw	r2,-12(fp)
10006ff8:	1085883a 	add	r2,r2,r2
10006ffc:	1085883a 	add	r2,r2,r2
10007000:	10800044 	addi	r2,r2,1
10007004:	e17ffe17 	ldw	r5,-8(fp)
10007008:	2885883a 	add	r2,r5,r2
1000700c:	10800003 	ldbu	r2,0(r2)
10007010:	10803fcc 	andi	r2,r2,255
10007014:	1004943a 	slli	r2,r2,16
10007018:	10803fec 	andhi	r2,r2,255
1000701c:	2089883a 	add	r4,r4,r2
				+ ((uint)key[4 * i + 2] << 8 & 0x0000ff00)
10007020:	e0bffd17 	ldw	r2,-12(fp)
10007024:	1085883a 	add	r2,r2,r2
10007028:	1085883a 	add	r2,r2,r2
1000702c:	10800084 	addi	r2,r2,2
10007030:	e17ffe17 	ldw	r5,-8(fp)
10007034:	2885883a 	add	r2,r5,r2
10007038:	10800003 	ldbu	r2,0(r2)
1000703c:	10803fcc 	andi	r2,r2,255
10007040:	1004923a 	slli	r2,r2,8
10007044:	10bfffcc 	andi	r2,r2,65535
10007048:	2089883a 	add	r4,r4,r2
				+ ((uint)key[4 * i + 3] & 0x000000ff);
1000704c:	e0bffd17 	ldw	r2,-12(fp)
10007050:	1085883a 	add	r2,r2,r2
10007054:	1085883a 	add	r2,r2,r2
10007058:	108000c4 	addi	r2,r2,3
1000705c:	e17ffe17 	ldw	r5,-8(fp)
10007060:	2885883a 	add	r2,r5,r2
10007064:	10800003 	ldbu	r2,0(r2)
10007068:	10803fcc 	andi	r2,r2,255
1000706c:	2085883a 	add	r2,r4,r2
}
void KeyExpansion(uchar * key, uint * w){
	uint temp;
	int i;
	for(i = 0; i < 4; i++){
		w[i] = ((uint)key[4 * i] << 24 & 0xff000000)
10007070:	18800015 	stw	r2,0(r3)
	}
}
void KeyExpansion(uchar * key, uint * w){
	uint temp;
	int i;
	for(i = 0; i < 4; i++){
10007074:	e0bffd17 	ldw	r2,-12(fp)
10007078:	10800044 	addi	r2,r2,1
1000707c:	e0bffd15 	stw	r2,-12(fp)
10007080:	e0bffd17 	ldw	r2,-12(fp)
10007084:	10800110 	cmplti	r2,r2,4
10007088:	103fcb1e 	bne	r2,zero,10006fb8 <__alt_data_end+0xf8006fb8>
		w[i] = ((uint)key[4 * i] << 24 & 0xff000000)
				+ ((uint)key[4 * i + 1] << 16 & 0x00ff0000)
				+ ((uint)key[4 * i + 2] << 8 & 0x0000ff00)
				+ ((uint)key[4 * i + 3] & 0x000000ff);
	}
	for(i = 4; i < 44; i++){
1000708c:	00800104 	movi	r2,4
10007090:	e0bffd15 	stw	r2,-12(fp)
10007094:	00003606 	br	10007170 <KeyExpansion+0x1d8>
		temp = w[i - 1];
10007098:	e0fffd17 	ldw	r3,-12(fp)
1000709c:	00900034 	movhi	r2,16384
100070a0:	10bfffc4 	addi	r2,r2,-1
100070a4:	1885883a 	add	r2,r3,r2
100070a8:	1085883a 	add	r2,r2,r2
100070ac:	1085883a 	add	r2,r2,r2
100070b0:	1007883a 	mov	r3,r2
100070b4:	e0bfff17 	ldw	r2,-4(fp)
100070b8:	10c5883a 	add	r2,r2,r3
100070bc:	10800017 	ldw	r2,0(r2)
100070c0:	e0bffc15 	stw	r2,-16(fp)
		if (0 == i % 4){
100070c4:	e0bffd17 	ldw	r2,-12(fp)
100070c8:	108000cc 	andi	r2,r2,3
100070cc:	1000121e 	bne	r2,zero,10007118 <KeyExpansion+0x180>
			temp = SubWord(RotWord(temp)) ^ Rcon[i / 4];
100070d0:	e13ffc17 	ldw	r4,-16(fp)
100070d4:	00072580 	call	10007258 <RotWord>
100070d8:	1009883a 	mov	r4,r2
100070dc:	00071940 	call	10007194 <SubWord>
100070e0:	1009883a 	mov	r4,r2
100070e4:	e0bffd17 	ldw	r2,-12(fp)
100070e8:	1000010e 	bge	r2,zero,100070f0 <KeyExpansion+0x158>
100070ec:	108000c4 	addi	r2,r2,3
100070f0:	1005d0ba 	srai	r2,r2,2
100070f4:	1007883a 	mov	r3,r2
100070f8:	008400b4 	movhi	r2,4098
100070fc:	108e5804 	addi	r2,r2,14688
10007100:	18c7883a 	add	r3,r3,r3
10007104:	18c7883a 	add	r3,r3,r3
10007108:	10c5883a 	add	r2,r2,r3
1000710c:	10800017 	ldw	r2,0(r2)
10007110:	2084f03a 	xor	r2,r4,r2
10007114:	e0bffc15 	stw	r2,-16(fp)
		}
		w[i] = w[i - 4] ^ temp;
10007118:	e0bffd17 	ldw	r2,-12(fp)
1000711c:	1085883a 	add	r2,r2,r2
10007120:	1085883a 	add	r2,r2,r2
10007124:	1007883a 	mov	r3,r2
10007128:	e0bfff17 	ldw	r2,-4(fp)
1000712c:	10c7883a 	add	r3,r2,r3
10007130:	e13ffd17 	ldw	r4,-12(fp)
10007134:	00900034 	movhi	r2,16384
10007138:	10bfff04 	addi	r2,r2,-4
1000713c:	2085883a 	add	r2,r4,r2
10007140:	1085883a 	add	r2,r2,r2
10007144:	1085883a 	add	r2,r2,r2
10007148:	1009883a 	mov	r4,r2
1000714c:	e0bfff17 	ldw	r2,-4(fp)
10007150:	1105883a 	add	r2,r2,r4
10007154:	11000017 	ldw	r4,0(r2)
10007158:	e0bffc17 	ldw	r2,-16(fp)
1000715c:	2084f03a 	xor	r2,r4,r2
10007160:	18800015 	stw	r2,0(r3)
		w[i] = ((uint)key[4 * i] << 24 & 0xff000000)
				+ ((uint)key[4 * i + 1] << 16 & 0x00ff0000)
				+ ((uint)key[4 * i + 2] << 8 & 0x0000ff00)
				+ ((uint)key[4 * i + 3] & 0x000000ff);
	}
	for(i = 4; i < 44; i++){
10007164:	e0bffd17 	ldw	r2,-12(fp)
10007168:	10800044 	addi	r2,r2,1
1000716c:	e0bffd15 	stw	r2,-12(fp)
10007170:	e0bffd17 	ldw	r2,-12(fp)
10007174:	10800b10 	cmplti	r2,r2,44
10007178:	103fc71e 	bne	r2,zero,10007098 <__alt_data_end+0xf8007098>
		if (0 == i % 4){
			temp = SubWord(RotWord(temp)) ^ Rcon[i / 4];
		}
		w[i] = w[i - 4] ^ temp;
	}
}
1000717c:	0001883a 	nop
10007180:	e037883a 	mov	sp,fp
10007184:	dfc00117 	ldw	ra,4(sp)
10007188:	df000017 	ldw	fp,0(sp)
1000718c:	dec00204 	addi	sp,sp,8
10007190:	f800283a 	ret

10007194 <SubWord>:
uint SubWord(uint word){
10007194:	defffd04 	addi	sp,sp,-12
10007198:	df000215 	stw	fp,8(sp)
1000719c:	df000204 	addi	fp,sp,8
100071a0:	e13fff15 	stw	r4,-4(fp)
	uint out_word;
	out_word = ((uint)aes_sbox[(uchar)(word >> 24)] << 24 & 0xff000000)
100071a4:	e0bfff17 	ldw	r2,-4(fp)
100071a8:	1004d63a 	srli	r2,r2,24
100071ac:	1007883a 	mov	r3,r2
100071b0:	008400b4 	movhi	r2,4098
100071b4:	108a2004 	addi	r2,r2,10368
100071b8:	10c5883a 	add	r2,r2,r3
100071bc:	10800003 	ldbu	r2,0(r2)
100071c0:	10803fcc 	andi	r2,r2,255
100071c4:	1006963a 	slli	r3,r2,24
					| ((uint)aes_sbox[(uchar)(word >> 16)] << 16 & 0x00ff0000)
100071c8:	e0bfff17 	ldw	r2,-4(fp)
100071cc:	1004d43a 	srli	r2,r2,16
100071d0:	11003fcc 	andi	r4,r2,255
100071d4:	008400b4 	movhi	r2,4098
100071d8:	108a2004 	addi	r2,r2,10368
100071dc:	1105883a 	add	r2,r2,r4
100071e0:	10800003 	ldbu	r2,0(r2)
100071e4:	10803fcc 	andi	r2,r2,255
100071e8:	1004943a 	slli	r2,r2,16
100071ec:	10803fec 	andhi	r2,r2,255
100071f0:	1886b03a 	or	r3,r3,r2
					| ((uint)aes_sbox[(uchar)(word >> 8)] << 8 & 0x0000ff00)
100071f4:	e0bfff17 	ldw	r2,-4(fp)
100071f8:	1004d23a 	srli	r2,r2,8
100071fc:	11003fcc 	andi	r4,r2,255
10007200:	008400b4 	movhi	r2,4098
10007204:	108a2004 	addi	r2,r2,10368
10007208:	1105883a 	add	r2,r2,r4
1000720c:	10800003 	ldbu	r2,0(r2)
10007210:	10803fcc 	andi	r2,r2,255
10007214:	1004923a 	slli	r2,r2,8
10007218:	10bfffcc 	andi	r2,r2,65535
1000721c:	1886b03a 	or	r3,r3,r2
					| ((uint)aes_sbox[(uchar)(word)] & 0x000000ff);
10007220:	e0bfff17 	ldw	r2,-4(fp)
10007224:	11003fcc 	andi	r4,r2,255
10007228:	008400b4 	movhi	r2,4098
1000722c:	108a2004 	addi	r2,r2,10368
10007230:	1105883a 	add	r2,r2,r4
10007234:	10800003 	ldbu	r2,0(r2)
10007238:	10803fcc 	andi	r2,r2,255
		w[i] = w[i - 4] ^ temp;
	}
}
uint SubWord(uint word){
	uint out_word;
	out_word = ((uint)aes_sbox[(uchar)(word >> 24)] << 24 & 0xff000000)
1000723c:	1884b03a 	or	r2,r3,r2
10007240:	e0bffe15 	stw	r2,-8(fp)
					| ((uint)aes_sbox[(uchar)(word >> 16)] << 16 & 0x00ff0000)
					| ((uint)aes_sbox[(uchar)(word >> 8)] << 8 & 0x0000ff00)
					| ((uint)aes_sbox[(uchar)(word)] & 0x000000ff);
	return out_word;
10007244:	e0bffe17 	ldw	r2,-8(fp)
}
10007248:	e037883a 	mov	sp,fp
1000724c:	df000017 	ldw	fp,0(sp)
10007250:	dec00104 	addi	sp,sp,4
10007254:	f800283a 	ret

10007258 <RotWord>:
uint RotWord(uint word){
10007258:	defffd04 	addi	sp,sp,-12
1000725c:	df000215 	stw	fp,8(sp)
10007260:	df000204 	addi	fp,sp,8
10007264:	e13fff15 	stw	r4,-4(fp)
	uint out_word;
	out_word = (word << 8) | (word >> 24);
10007268:	e0bfff17 	ldw	r2,-4(fp)
1000726c:	1004123a 	roli	r2,r2,8
10007270:	e0bffe15 	stw	r2,-8(fp)
	return out_word;
10007274:	e0bffe17 	ldw	r2,-8(fp)
}
10007278:	e037883a 	mov	sp,fp
1000727c:	df000017 	ldw	fp,0(sp)
10007280:	dec00104 	addi	sp,sp,4
10007284:	f800283a 	ret

10007288 <AddRoundKey>:
void AddRoundKey(uchar state[][4], uint * word){
10007288:	defffa04 	addi	sp,sp,-24
1000728c:	df000515 	stw	fp,20(sp)
10007290:	df000504 	addi	fp,sp,20
10007294:	e13ffe15 	stw	r4,-8(fp)
10007298:	e17fff15 	stw	r5,-4(fp)
	int i, j;
	uchar *inv_word_byte = (uchar*) word;
1000729c:	e0bfff17 	ldw	r2,-4(fp)
100072a0:	e0bffd15 	stw	r2,-12(fp)
	for (j = 0; j < 4; j++){
100072a4:	e03ffc15 	stw	zero,-16(fp)
100072a8:	00002906 	br	10007350 <AddRoundKey+0xc8>
		for (i = 0; i < 4; i++){
100072ac:	e03ffb15 	stw	zero,-20(fp)
100072b0:	00002106 	br	10007338 <AddRoundKey+0xb0>
			state[i][j] ^= *(inv_word_byte + 3 - i + 4 * j);
100072b4:	e0bffb17 	ldw	r2,-20(fp)
100072b8:	1085883a 	add	r2,r2,r2
100072bc:	1085883a 	add	r2,r2,r2
100072c0:	1007883a 	mov	r3,r2
100072c4:	e0bffe17 	ldw	r2,-8(fp)
100072c8:	10c7883a 	add	r3,r2,r3
100072cc:	e0bffb17 	ldw	r2,-20(fp)
100072d0:	1085883a 	add	r2,r2,r2
100072d4:	1085883a 	add	r2,r2,r2
100072d8:	1009883a 	mov	r4,r2
100072dc:	e0bffe17 	ldw	r2,-8(fp)
100072e0:	1109883a 	add	r4,r2,r4
100072e4:	e0bffc17 	ldw	r2,-16(fp)
100072e8:	2085883a 	add	r2,r4,r2
100072ec:	11000003 	ldbu	r4,0(r2)
100072f0:	e0bffc17 	ldw	r2,-16(fp)
100072f4:	1085883a 	add	r2,r2,r2
100072f8:	1085883a 	add	r2,r2,r2
100072fc:	100b883a 	mov	r5,r2
10007300:	e0bffb17 	ldw	r2,-20(fp)
10007304:	2885c83a 	sub	r2,r5,r2
10007308:	108000c4 	addi	r2,r2,3
1000730c:	e17ffd17 	ldw	r5,-12(fp)
10007310:	2885883a 	add	r2,r5,r2
10007314:	10800003 	ldbu	r2,0(r2)
10007318:	2084f03a 	xor	r2,r4,r2
1000731c:	1009883a 	mov	r4,r2
10007320:	e0bffc17 	ldw	r2,-16(fp)
10007324:	1885883a 	add	r2,r3,r2
10007328:	11000005 	stb	r4,0(r2)
}
void AddRoundKey(uchar state[][4], uint * word){
	int i, j;
	uchar *inv_word_byte = (uchar*) word;
	for (j = 0; j < 4; j++){
		for (i = 0; i < 4; i++){
1000732c:	e0bffb17 	ldw	r2,-20(fp)
10007330:	10800044 	addi	r2,r2,1
10007334:	e0bffb15 	stw	r2,-20(fp)
10007338:	e0bffb17 	ldw	r2,-20(fp)
1000733c:	10800110 	cmplti	r2,r2,4
10007340:	103fdc1e 	bne	r2,zero,100072b4 <__alt_data_end+0xf80072b4>
	return out_word;
}
void AddRoundKey(uchar state[][4], uint * word){
	int i, j;
	uchar *inv_word_byte = (uchar*) word;
	for (j = 0; j < 4; j++){
10007344:	e0bffc17 	ldw	r2,-16(fp)
10007348:	10800044 	addi	r2,r2,1
1000734c:	e0bffc15 	stw	r2,-16(fp)
10007350:	e0bffc17 	ldw	r2,-16(fp)
10007354:	10800110 	cmplti	r2,r2,4
10007358:	103fd41e 	bne	r2,zero,100072ac <__alt_data_end+0xf80072ac>
		for (i = 0; i < 4; i++){
			state[i][j] ^= *(inv_word_byte + 3 - i + 4 * j);
		}
	}
}
1000735c:	0001883a 	nop
10007360:	e037883a 	mov	sp,fp
10007364:	df000017 	ldw	fp,0(sp)
10007368:	dec00104 	addi	sp,sp,4
1000736c:	f800283a 	ret

10007370 <SubBytes>:
void SubBytes(uchar state[][4]){
10007370:	defffc04 	addi	sp,sp,-16
10007374:	df000315 	stw	fp,12(sp)
10007378:	df000304 	addi	fp,sp,12
1000737c:	e13fff15 	stw	r4,-4(fp)
	int i, j;
	for(j = 0; j < 4; j++){
10007380:	e03ffe15 	stw	zero,-8(fp)
10007384:	00002206 	br	10007410 <SubBytes+0xa0>
		for(i = 0; i < 4; i++){
10007388:	e03ffd15 	stw	zero,-12(fp)
1000738c:	00001a06 	br	100073f8 <SubBytes+0x88>
			state[i][j] = aes_sbox[state[i][j]];
10007390:	e0bffd17 	ldw	r2,-12(fp)
10007394:	1085883a 	add	r2,r2,r2
10007398:	1085883a 	add	r2,r2,r2
1000739c:	1007883a 	mov	r3,r2
100073a0:	e0bfff17 	ldw	r2,-4(fp)
100073a4:	10c9883a 	add	r4,r2,r3
100073a8:	e0bffd17 	ldw	r2,-12(fp)
100073ac:	1085883a 	add	r2,r2,r2
100073b0:	1085883a 	add	r2,r2,r2
100073b4:	1007883a 	mov	r3,r2
100073b8:	e0bfff17 	ldw	r2,-4(fp)
100073bc:	10c7883a 	add	r3,r2,r3
100073c0:	e0bffe17 	ldw	r2,-8(fp)
100073c4:	1885883a 	add	r2,r3,r2
100073c8:	10800003 	ldbu	r2,0(r2)
100073cc:	10c03fcc 	andi	r3,r2,255
100073d0:	008400b4 	movhi	r2,4098
100073d4:	108a2004 	addi	r2,r2,10368
100073d8:	10c5883a 	add	r2,r2,r3
100073dc:	10c00003 	ldbu	r3,0(r2)
100073e0:	e0bffe17 	ldw	r2,-8(fp)
100073e4:	2085883a 	add	r2,r4,r2
100073e8:	10c00005 	stb	r3,0(r2)
	}
}
void SubBytes(uchar state[][4]){
	int i, j;
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++){
100073ec:	e0bffd17 	ldw	r2,-12(fp)
100073f0:	10800044 	addi	r2,r2,1
100073f4:	e0bffd15 	stw	r2,-12(fp)
100073f8:	e0bffd17 	ldw	r2,-12(fp)
100073fc:	10800110 	cmplti	r2,r2,4
10007400:	103fe31e 	bne	r2,zero,10007390 <__alt_data_end+0xf8007390>
		}
	}
}
void SubBytes(uchar state[][4]){
	int i, j;
	for(j = 0; j < 4; j++){
10007404:	e0bffe17 	ldw	r2,-8(fp)
10007408:	10800044 	addi	r2,r2,1
1000740c:	e0bffe15 	stw	r2,-8(fp)
10007410:	e0bffe17 	ldw	r2,-8(fp)
10007414:	10800110 	cmplti	r2,r2,4
10007418:	103fdb1e 	bne	r2,zero,10007388 <__alt_data_end+0xf8007388>
		for(i = 0; i < 4; i++){
			state[i][j] = aes_sbox[state[i][j]];
		}
	}
}
1000741c:	0001883a 	nop
10007420:	e037883a 	mov	sp,fp
10007424:	df000017 	ldw	fp,0(sp)
10007428:	dec00104 	addi	sp,sp,4
1000742c:	f800283a 	ret

10007430 <ShiftRows>:
void ShiftRows(uchar state[][4]){
10007430:	defffd04 	addi	sp,sp,-12
10007434:	df000215 	stw	fp,8(sp)
10007438:	df000204 	addi	fp,sp,8
1000743c:	e13fff15 	stw	r4,-4(fp)
	uchar temp;
	temp = state[1][0];
10007440:	e0bfff17 	ldw	r2,-4(fp)
10007444:	10800104 	addi	r2,r2,4
10007448:	10800003 	ldbu	r2,0(r2)
1000744c:	e0bffe05 	stb	r2,-8(fp)
	state[1][0] = state[1][1];
10007450:	e0bfff17 	ldw	r2,-4(fp)
10007454:	10800104 	addi	r2,r2,4
10007458:	e0ffff17 	ldw	r3,-4(fp)
1000745c:	18c00104 	addi	r3,r3,4
10007460:	18c00043 	ldbu	r3,1(r3)
10007464:	10c00005 	stb	r3,0(r2)
	state[1][1] = state[1][2];
10007468:	e0bfff17 	ldw	r2,-4(fp)
1000746c:	10800104 	addi	r2,r2,4
10007470:	e0ffff17 	ldw	r3,-4(fp)
10007474:	18c00104 	addi	r3,r3,4
10007478:	18c00083 	ldbu	r3,2(r3)
1000747c:	10c00045 	stb	r3,1(r2)
	state[1][2] = state[1][3];
10007480:	e0bfff17 	ldw	r2,-4(fp)
10007484:	10800104 	addi	r2,r2,4
10007488:	e0ffff17 	ldw	r3,-4(fp)
1000748c:	18c00104 	addi	r3,r3,4
10007490:	18c000c3 	ldbu	r3,3(r3)
10007494:	10c00085 	stb	r3,2(r2)
	state[1][3] = temp;
10007498:	e0bfff17 	ldw	r2,-4(fp)
1000749c:	10800104 	addi	r2,r2,4
100074a0:	e0fffe03 	ldbu	r3,-8(fp)
100074a4:	10c000c5 	stb	r3,3(r2)

	temp = state[2][0];
100074a8:	e0bfff17 	ldw	r2,-4(fp)
100074ac:	10800204 	addi	r2,r2,8
100074b0:	10800003 	ldbu	r2,0(r2)
100074b4:	e0bffe05 	stb	r2,-8(fp)
	state[2][0] = state[2][2];
100074b8:	e0bfff17 	ldw	r2,-4(fp)
100074bc:	10800204 	addi	r2,r2,8
100074c0:	e0ffff17 	ldw	r3,-4(fp)
100074c4:	18c00204 	addi	r3,r3,8
100074c8:	18c00083 	ldbu	r3,2(r3)
100074cc:	10c00005 	stb	r3,0(r2)
	state[2][2] = temp;
100074d0:	e0bfff17 	ldw	r2,-4(fp)
100074d4:	10800204 	addi	r2,r2,8
100074d8:	e0fffe03 	ldbu	r3,-8(fp)
100074dc:	10c00085 	stb	r3,2(r2)
	temp = state[2][1];
100074e0:	e0bfff17 	ldw	r2,-4(fp)
100074e4:	10800204 	addi	r2,r2,8
100074e8:	10800043 	ldbu	r2,1(r2)
100074ec:	e0bffe05 	stb	r2,-8(fp)
	state[2][1] = state[2][3];
100074f0:	e0bfff17 	ldw	r2,-4(fp)
100074f4:	10800204 	addi	r2,r2,8
100074f8:	e0ffff17 	ldw	r3,-4(fp)
100074fc:	18c00204 	addi	r3,r3,8
10007500:	18c000c3 	ldbu	r3,3(r3)
10007504:	10c00045 	stb	r3,1(r2)
	state[2][3] = temp;
10007508:	e0bfff17 	ldw	r2,-4(fp)
1000750c:	10800204 	addi	r2,r2,8
10007510:	e0fffe03 	ldbu	r3,-8(fp)
10007514:	10c000c5 	stb	r3,3(r2)

	temp = state[3][0];
10007518:	e0bfff17 	ldw	r2,-4(fp)
1000751c:	10800304 	addi	r2,r2,12
10007520:	10800003 	ldbu	r2,0(r2)
10007524:	e0bffe05 	stb	r2,-8(fp)
	state[3][0] = state[3][3];
10007528:	e0bfff17 	ldw	r2,-4(fp)
1000752c:	10800304 	addi	r2,r2,12
10007530:	e0ffff17 	ldw	r3,-4(fp)
10007534:	18c00304 	addi	r3,r3,12
10007538:	18c000c3 	ldbu	r3,3(r3)
1000753c:	10c00005 	stb	r3,0(r2)
	state[3][3] = state[3][2];
10007540:	e0bfff17 	ldw	r2,-4(fp)
10007544:	10800304 	addi	r2,r2,12
10007548:	e0ffff17 	ldw	r3,-4(fp)
1000754c:	18c00304 	addi	r3,r3,12
10007550:	18c00083 	ldbu	r3,2(r3)
10007554:	10c000c5 	stb	r3,3(r2)
	state[3][2] = state[3][1];
10007558:	e0bfff17 	ldw	r2,-4(fp)
1000755c:	10800304 	addi	r2,r2,12
10007560:	e0ffff17 	ldw	r3,-4(fp)
10007564:	18c00304 	addi	r3,r3,12
10007568:	18c00043 	ldbu	r3,1(r3)
1000756c:	10c00085 	stb	r3,2(r2)
	state[3][1] = temp;
10007570:	e0bfff17 	ldw	r2,-4(fp)
10007574:	10800304 	addi	r2,r2,12
10007578:	e0fffe03 	ldbu	r3,-8(fp)
1000757c:	10c00045 	stb	r3,1(r2)
}
10007580:	0001883a 	nop
10007584:	e037883a 	mov	sp,fp
10007588:	df000017 	ldw	fp,0(sp)
1000758c:	dec00104 	addi	sp,sp,4
10007590:	f800283a 	ret

10007594 <MixColumns>:
void MixColumns(uchar state[][4]){
10007594:	defff504 	addi	sp,sp,-44
10007598:	dfc00a15 	stw	ra,40(sp)
1000759c:	df000915 	stw	fp,36(sp)
100075a0:	dc400815 	stw	r17,32(sp)
100075a4:	dc000715 	stw	r16,28(sp)
100075a8:	df000904 	addi	fp,sp,36
100075ac:	e13ffd15 	stw	r4,-12(fp)
	uchar newstate[4][4];
	int i, j;
	for(j = 0; j < 4; j++){
100075b0:	e03ff815 	stw	zero,-32(fp)
100075b4:	00006a06 	br	10007760 <MixColumns+0x1cc>
		for(i = 0; i < 4; i++){
100075b8:	e03ff715 	stw	zero,-36(fp)
100075bc:	00006206 	br	10007748 <MixColumns+0x1b4>
			newstate[i][j] = gf_mul[state[i][j]][0] ^ gf_mul[state[(i + 1) % 4][j]][1] ^ state[(i + 2) % 4][j] ^ state[(i + 3) % 4][j];
100075c0:	e0bff717 	ldw	r2,-36(fp)
100075c4:	1085883a 	add	r2,r2,r2
100075c8:	1085883a 	add	r2,r2,r2
100075cc:	1007883a 	mov	r3,r2
100075d0:	e0bffd17 	ldw	r2,-12(fp)
100075d4:	10c7883a 	add	r3,r2,r3
100075d8:	e0bff817 	ldw	r2,-32(fp)
100075dc:	1885883a 	add	r2,r3,r2
100075e0:	10800003 	ldbu	r2,0(r2)
100075e4:	10803fcc 	andi	r2,r2,255
100075e8:	040400b4 	movhi	r16,4098
100075ec:	840cd804 	addi	r16,r16,13152
100075f0:	01400184 	movi	r5,6
100075f4:	1009883a 	mov	r4,r2
100075f8:	0008ef00 	call	10008ef0 <__mulsi3>
100075fc:	8085883a 	add	r2,r16,r2
10007600:	14400003 	ldbu	r17,0(r2)
10007604:	e0bff717 	ldw	r2,-36(fp)
10007608:	10c00044 	addi	r3,r2,1
1000760c:	00a00034 	movhi	r2,32768
10007610:	108000c4 	addi	r2,r2,3
10007614:	1884703a 	and	r2,r3,r2
10007618:	1000040e 	bge	r2,zero,1000762c <MixColumns+0x98>
1000761c:	10bfffc4 	addi	r2,r2,-1
10007620:	00ffff04 	movi	r3,-4
10007624:	10c4b03a 	or	r2,r2,r3
10007628:	10800044 	addi	r2,r2,1
1000762c:	1085883a 	add	r2,r2,r2
10007630:	1085883a 	add	r2,r2,r2
10007634:	1007883a 	mov	r3,r2
10007638:	e0bffd17 	ldw	r2,-12(fp)
1000763c:	10c7883a 	add	r3,r2,r3
10007640:	e0bff817 	ldw	r2,-32(fp)
10007644:	1885883a 	add	r2,r3,r2
10007648:	10800003 	ldbu	r2,0(r2)
1000764c:	10803fcc 	andi	r2,r2,255
10007650:	040400b4 	movhi	r16,4098
10007654:	840cd804 	addi	r16,r16,13152
10007658:	01400184 	movi	r5,6
1000765c:	1009883a 	mov	r4,r2
10007660:	0008ef00 	call	10008ef0 <__mulsi3>
10007664:	8085883a 	add	r2,r16,r2
10007668:	10800044 	addi	r2,r2,1
1000766c:	10800003 	ldbu	r2,0(r2)
10007670:	8884f03a 	xor	r2,r17,r2
10007674:	1009883a 	mov	r4,r2
10007678:	e0bff717 	ldw	r2,-36(fp)
1000767c:	10c00084 	addi	r3,r2,2
10007680:	00a00034 	movhi	r2,32768
10007684:	108000c4 	addi	r2,r2,3
10007688:	1884703a 	and	r2,r3,r2
1000768c:	1000040e 	bge	r2,zero,100076a0 <MixColumns+0x10c>
10007690:	10bfffc4 	addi	r2,r2,-1
10007694:	00ffff04 	movi	r3,-4
10007698:	10c4b03a 	or	r2,r2,r3
1000769c:	10800044 	addi	r2,r2,1
100076a0:	1085883a 	add	r2,r2,r2
100076a4:	1085883a 	add	r2,r2,r2
100076a8:	1007883a 	mov	r3,r2
100076ac:	e0bffd17 	ldw	r2,-12(fp)
100076b0:	10c7883a 	add	r3,r2,r3
100076b4:	e0bff817 	ldw	r2,-32(fp)
100076b8:	1885883a 	add	r2,r3,r2
100076bc:	10800003 	ldbu	r2,0(r2)
100076c0:	2084f03a 	xor	r2,r4,r2
100076c4:	1009883a 	mov	r4,r2
100076c8:	e0bff717 	ldw	r2,-36(fp)
100076cc:	10c000c4 	addi	r3,r2,3
100076d0:	00a00034 	movhi	r2,32768
100076d4:	108000c4 	addi	r2,r2,3
100076d8:	1884703a 	and	r2,r3,r2
100076dc:	1000040e 	bge	r2,zero,100076f0 <MixColumns+0x15c>
100076e0:	10bfffc4 	addi	r2,r2,-1
100076e4:	00ffff04 	movi	r3,-4
100076e8:	10c4b03a 	or	r2,r2,r3
100076ec:	10800044 	addi	r2,r2,1
100076f0:	1085883a 	add	r2,r2,r2
100076f4:	1085883a 	add	r2,r2,r2
100076f8:	1007883a 	mov	r3,r2
100076fc:	e0bffd17 	ldw	r2,-12(fp)
10007700:	10c7883a 	add	r3,r2,r3
10007704:	e0bff817 	ldw	r2,-32(fp)
10007708:	1885883a 	add	r2,r3,r2
1000770c:	10800003 	ldbu	r2,0(r2)
10007710:	2084f03a 	xor	r2,r4,r2
10007714:	1009883a 	mov	r4,r2
10007718:	e0bff717 	ldw	r2,-36(fp)
1000771c:	1085883a 	add	r2,r2,r2
10007720:	1085883a 	add	r2,r2,r2
10007724:	e17ff704 	addi	r5,fp,-36
10007728:	2887883a 	add	r3,r5,r2
1000772c:	e0bff817 	ldw	r2,-32(fp)
10007730:	1885883a 	add	r2,r3,r2
10007734:	10800204 	addi	r2,r2,8
10007738:	11000005 	stb	r4,0(r2)
}
void MixColumns(uchar state[][4]){
	uchar newstate[4][4];
	int i, j;
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++){
1000773c:	e0bff717 	ldw	r2,-36(fp)
10007740:	10800044 	addi	r2,r2,1
10007744:	e0bff715 	stw	r2,-36(fp)
10007748:	e0bff717 	ldw	r2,-36(fp)
1000774c:	10800110 	cmplti	r2,r2,4
10007750:	103f9b1e 	bne	r2,zero,100075c0 <__alt_data_end+0xf80075c0>
	state[3][1] = temp;
}
void MixColumns(uchar state[][4]){
	uchar newstate[4][4];
	int i, j;
	for(j = 0; j < 4; j++){
10007754:	e0bff817 	ldw	r2,-32(fp)
10007758:	10800044 	addi	r2,r2,1
1000775c:	e0bff815 	stw	r2,-32(fp)
10007760:	e0bff817 	ldw	r2,-32(fp)
10007764:	10800110 	cmplti	r2,r2,4
10007768:	103f931e 	bne	r2,zero,100075b8 <__alt_data_end+0xf80075b8>
		for(i = 0; i < 4; i++){
			newstate[i][j] = gf_mul[state[i][j]][0] ^ gf_mul[state[(i + 1) % 4][j]][1] ^ state[(i + 2) % 4][j] ^ state[(i + 3) % 4][j];
		}
	}
	for(j = 0; j < 4; j++){
1000776c:	e03ff815 	stw	zero,-32(fp)
10007770:	00001d06 	br	100077e8 <MixColumns+0x254>
		for(i = 0; i < 4; i++){
10007774:	e03ff715 	stw	zero,-36(fp)
10007778:	00001506 	br	100077d0 <MixColumns+0x23c>
			state[i][j] = newstate[i][j];
1000777c:	e0bff717 	ldw	r2,-36(fp)
10007780:	1085883a 	add	r2,r2,r2
10007784:	1085883a 	add	r2,r2,r2
10007788:	1007883a 	mov	r3,r2
1000778c:	e0bffd17 	ldw	r2,-12(fp)
10007790:	10c9883a 	add	r4,r2,r3
10007794:	e0bff717 	ldw	r2,-36(fp)
10007798:	1085883a 	add	r2,r2,r2
1000779c:	1085883a 	add	r2,r2,r2
100077a0:	e17ff704 	addi	r5,fp,-36
100077a4:	2887883a 	add	r3,r5,r2
100077a8:	e0bff817 	ldw	r2,-32(fp)
100077ac:	1885883a 	add	r2,r3,r2
100077b0:	10800204 	addi	r2,r2,8
100077b4:	10c00003 	ldbu	r3,0(r2)
100077b8:	e0bff817 	ldw	r2,-32(fp)
100077bc:	2085883a 	add	r2,r4,r2
100077c0:	10c00005 	stb	r3,0(r2)
		for(i = 0; i < 4; i++){
			newstate[i][j] = gf_mul[state[i][j]][0] ^ gf_mul[state[(i + 1) % 4][j]][1] ^ state[(i + 2) % 4][j] ^ state[(i + 3) % 4][j];
		}
	}
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++){
100077c4:	e0bff717 	ldw	r2,-36(fp)
100077c8:	10800044 	addi	r2,r2,1
100077cc:	e0bff715 	stw	r2,-36(fp)
100077d0:	e0bff717 	ldw	r2,-36(fp)
100077d4:	10800110 	cmplti	r2,r2,4
100077d8:	103fe81e 	bne	r2,zero,1000777c <__alt_data_end+0xf800777c>
	for(j = 0; j < 4; j++){
		for(i = 0; i < 4; i++){
			newstate[i][j] = gf_mul[state[i][j]][0] ^ gf_mul[state[(i + 1) % 4][j]][1] ^ state[(i + 2) % 4][j] ^ state[(i + 3) % 4][j];
		}
	}
	for(j = 0; j < 4; j++){
100077dc:	e0bff817 	ldw	r2,-32(fp)
100077e0:	10800044 	addi	r2,r2,1
100077e4:	e0bff815 	stw	r2,-32(fp)
100077e8:	e0bff817 	ldw	r2,-32(fp)
100077ec:	10800110 	cmplti	r2,r2,4
100077f0:	103fe01e 	bne	r2,zero,10007774 <__alt_data_end+0xf8007774>
		for(i = 0; i < 4; i++){
			state[i][j] = newstate[i][j];
		}
	}
}
100077f4:	0001883a 	nop
100077f8:	e6fffe04 	addi	sp,fp,-8
100077fc:	dfc00317 	ldw	ra,12(sp)
10007800:	df000217 	ldw	fp,8(sp)
10007804:	dc400117 	ldw	r17,4(sp)
10007808:	dc000017 	ldw	r16,0(sp)
1000780c:	dec00404 	addi	sp,sp,16
10007810:	f800283a 	ret

10007814 <decrypt>:
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
10007814:	defffb04 	addi	sp,sp,-20
10007818:	df000415 	stw	fp,16(sp)
1000781c:	df000404 	addi	fp,sp,16
10007820:	e13ffd15 	stw	r4,-12(fp)
10007824:	e17ffe15 	stw	r5,-8(fp)
10007828:	e1bfff15 	stw	r6,-4(fp)
	printf("key:\n");
	printword(key);
	printf("msg_dec:\n");
	printword(msg_dec);
	*/
	for(i = 0; i < 4; i++){
1000782c:	e03ffc15 	stw	zero,-16(fp)
10007830:	00001e06 	br	100078ac <decrypt+0x98>
		AES_PTR[i] = key[i];
10007834:	d0e00117 	ldw	r3,-32764(gp)
10007838:	e0bffc17 	ldw	r2,-16(fp)
1000783c:	1085883a 	add	r2,r2,r2
10007840:	1085883a 	add	r2,r2,r2
10007844:	1887883a 	add	r3,r3,r2
10007848:	e0bffc17 	ldw	r2,-16(fp)
1000784c:	1085883a 	add	r2,r2,r2
10007850:	1085883a 	add	r2,r2,r2
10007854:	1009883a 	mov	r4,r2
10007858:	e0bfff17 	ldw	r2,-4(fp)
1000785c:	1105883a 	add	r2,r2,r4
10007860:	10800017 	ldw	r2,0(r2)
10007864:	18800015 	stw	r2,0(r3)
		AES_PTR[i + 4] = msg_enc[i];
10007868:	d0e00117 	ldw	r3,-32764(gp)
1000786c:	e0bffc17 	ldw	r2,-16(fp)
10007870:	10800104 	addi	r2,r2,4
10007874:	1085883a 	add	r2,r2,r2
10007878:	1085883a 	add	r2,r2,r2
1000787c:	1887883a 	add	r3,r3,r2
10007880:	e0bffc17 	ldw	r2,-16(fp)
10007884:	1085883a 	add	r2,r2,r2
10007888:	1085883a 	add	r2,r2,r2
1000788c:	1009883a 	mov	r4,r2
10007890:	e0bffd17 	ldw	r2,-12(fp)
10007894:	1105883a 	add	r2,r2,r4
10007898:	10800017 	ldw	r2,0(r2)
1000789c:	18800015 	stw	r2,0(r3)
	printf("key:\n");
	printword(key);
	printf("msg_dec:\n");
	printword(msg_dec);
	*/
	for(i = 0; i < 4; i++){
100078a0:	e0bffc17 	ldw	r2,-16(fp)
100078a4:	10800044 	addi	r2,r2,1
100078a8:	e0bffc15 	stw	r2,-16(fp)
100078ac:	e0bffc17 	ldw	r2,-16(fp)
100078b0:	10800110 	cmplti	r2,r2,4
100078b4:	103fdf1e 	bne	r2,zero,10007834 <__alt_data_end+0xf8007834>
		AES_PTR[i] = key[i];
		AES_PTR[i + 4] = msg_enc[i];
	}
	AES_PTR[14] = 1;
100078b8:	d0a00117 	ldw	r2,-32764(gp)
100078bc:	10800e04 	addi	r2,r2,56
100078c0:	00c00044 	movi	r3,1
100078c4:	10c00015 	stw	r3,0(r2)
	while(1){
		if(AES_PTR[15] == 1){
100078c8:	d0a00117 	ldw	r2,-32764(gp)
100078cc:	10800f04 	addi	r2,r2,60
100078d0:	10800017 	ldw	r2,0(r2)
100078d4:	10800058 	cmpnei	r2,r2,1
100078d8:	10000126 	beq	r2,zero,100078e0 <decrypt+0xcc>
			//printf("Done");
			break;
		}
	}
100078dc:	003ffa06 	br	100078c8 <__alt_data_end+0xf80078c8>
	}
	AES_PTR[14] = 1;
	while(1){
		if(AES_PTR[15] == 1){
			//printf("Done");
			break;
100078e0:	0001883a 	nop
		}
	}
	AES_PTR[14] = 0;
100078e4:	d0a00117 	ldw	r2,-32764(gp)
100078e8:	10800e04 	addi	r2,r2,56
100078ec:	10000015 	stw	zero,0(r2)
	for(i = 0; i < 4; i++){
100078f0:	e03ffc15 	stw	zero,-16(fp)
100078f4:	00001106 	br	1000793c <decrypt+0x128>
		msg_dec[i] = AES_PTR[i + 8];
100078f8:	e0bffc17 	ldw	r2,-16(fp)
100078fc:	1085883a 	add	r2,r2,r2
10007900:	1085883a 	add	r2,r2,r2
10007904:	1007883a 	mov	r3,r2
10007908:	e0bffe17 	ldw	r2,-8(fp)
1000790c:	10c7883a 	add	r3,r2,r3
10007910:	d1200117 	ldw	r4,-32764(gp)
10007914:	e0bffc17 	ldw	r2,-16(fp)
10007918:	10800204 	addi	r2,r2,8
1000791c:	1085883a 	add	r2,r2,r2
10007920:	1085883a 	add	r2,r2,r2
10007924:	2085883a 	add	r2,r4,r2
10007928:	10800017 	ldw	r2,0(r2)
1000792c:	18800015 	stw	r2,0(r3)
			//printf("Done");
			break;
		}
	}
	AES_PTR[14] = 0;
	for(i = 0; i < 4; i++){
10007930:	e0bffc17 	ldw	r2,-16(fp)
10007934:	10800044 	addi	r2,r2,1
10007938:	e0bffc15 	stw	r2,-16(fp)
1000793c:	e0bffc17 	ldw	r2,-16(fp)
10007940:	10800110 	cmplti	r2,r2,4
10007944:	103fec1e 	bne	r2,zero,100078f8 <__alt_data_end+0xf80078f8>
	if (AES_PTR[12] != 0xDEADBEEF){
		printf("Error\n");
		//return;
	}
	*/
}
10007948:	0001883a 	nop
1000794c:	e037883a 	mov	sp,fp
10007950:	df000017 	ldw	fp,0(sp)
10007954:	dec00104 	addi	sp,sp,4
10007958:	f800283a 	ret

1000795c <main_lab9>:
/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main_lab9()
{
1000795c:	deffd804 	addi	sp,sp,-160
10007960:	dfc02715 	stw	ra,156(sp)
10007964:	df002615 	stw	fp,152(sp)
10007968:	df002604 	addi	fp,sp,152
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33] = "ece298dcece298dcece298dcece298dc";
1000796c:	008c9974 	movhi	r2,12901
10007970:	1098d944 	addi	r2,r2,25445
10007974:	e0bfe315 	stw	r2,-116(fp)
10007978:	0098d934 	movhi	r2,25444
1000797c:	108e0e44 	addi	r2,r2,14393
10007980:	e0bfe415 	stw	r2,-112(fp)
10007984:	008c9974 	movhi	r2,12901
10007988:	1098d944 	addi	r2,r2,25445
1000798c:	e0bfe515 	stw	r2,-108(fp)
10007990:	0098d934 	movhi	r2,25444
10007994:	108e0e44 	addi	r2,r2,14393
10007998:	e0bfe615 	stw	r2,-104(fp)
1000799c:	008c9974 	movhi	r2,12901
100079a0:	1098d944 	addi	r2,r2,25445
100079a4:	e0bfe715 	stw	r2,-100(fp)
100079a8:	0098d934 	movhi	r2,25444
100079ac:	108e0e44 	addi	r2,r2,14393
100079b0:	e0bfe815 	stw	r2,-96(fp)
100079b4:	008c9974 	movhi	r2,12901
100079b8:	1098d944 	addi	r2,r2,25445
100079bc:	e0bfe915 	stw	r2,-92(fp)
100079c0:	0098d934 	movhi	r2,25444
100079c4:	108e0e44 	addi	r2,r2,14393
100079c8:	e0bfea15 	stw	r2,-88(fp)
100079cc:	e03feb05 	stb	zero,-84(fp)
	unsigned char key_ascii[33] = "000102030405060708090a0b0c0d0e0f";
100079d0:	008400b4 	movhi	r2,4098
100079d4:	108adf04 	addi	r2,r2,11132
100079d8:	e0ffeb44 	addi	r3,fp,-83
100079dc:	1009883a 	mov	r4,r2
100079e0:	00800844 	movi	r2,33
100079e4:	100d883a 	mov	r6,r2
100079e8:	200b883a 	mov	r5,r4
100079ec:	1809883a 	mov	r4,r3
100079f0:	0009cd00 	call	10009cd0 <memcpy>
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
100079f4:	010400b4 	movhi	r4,4098
100079f8:	210aa804 	addi	r4,r4,10912
100079fc:	0009e480 	call	10009e48 <printf>
	scanf("%d", &run_mode);
10007a00:	d1686604 	addi	r5,gp,-24168
10007a04:	010400b4 	movhi	r4,4098
10007a08:	210ab704 	addi	r4,r4,10972
10007a0c:	0009f780 	call	10009f78 <scanf>
	//int run_mode = 0;
	if (run_mode == 0) {
10007a10:	d0a86617 	ldw	r2,-24168(gp)
10007a14:	10004e1e 	bne	r2,zero,10007b50 <main_lab9+0x1f4>
			}
			printf("\n");
		}
		*/

			int i = 0;
10007a18:	e03fda15 	stw	zero,-152(fp)
			printf("\nEnter Message:\n");
10007a1c:	010400b4 	movhi	r4,4098
10007a20:	210ab804 	addi	r4,r4,10976
10007a24:	0009f640 	call	10009f64 <puts>
			printf("%s\n", msg_ascii);
10007a28:	e0bfe304 	addi	r2,fp,-116
10007a2c:	1009883a 	mov	r4,r2
10007a30:	0009f640 	call	10009f64 <puts>
			printf("\nEnter Key:\n");
10007a34:	010400b4 	movhi	r4,4098
10007a38:	210abc04 	addi	r4,r4,10992
10007a3c:	0009f640 	call	10009f64 <puts>
			printf("%s\n", key_ascii);
10007a40:	e0bfeb44 	addi	r2,fp,-83
10007a44:	1009883a 	mov	r4,r2
10007a48:	0009f640 	call	10009f64 <puts>
			encrypt(msg_ascii, key_ascii, msg_enc, key);
10007a4c:	e17ff404 	addi	r5,fp,-48
10007a50:	e13ff804 	addi	r4,fp,-32
10007a54:	e0ffeb44 	addi	r3,fp,-83
10007a58:	e0bfe304 	addi	r2,fp,-116
10007a5c:	280f883a 	mov	r7,r5
10007a60:	200d883a 	mov	r6,r4
10007a64:	180b883a 	mov	r5,r3
10007a68:	1009883a 	mov	r4,r2
10007a6c:	0006ab80 	call	10006ab8 <encrypt>
			printf("\nEncrpted message is: \n");
10007a70:	010400b4 	movhi	r4,4098
10007a74:	210abf04 	addi	r4,r4,11004
10007a78:	0009f640 	call	10009f64 <puts>
			for(i = 0; i < 4; i++){
10007a7c:	e03fda15 	stw	zero,-152(fp)
10007a80:	00000e06 	br	10007abc <main_lab9+0x160>
				printf("%08x", msg_enc[i]);
10007a84:	e0bfda17 	ldw	r2,-152(fp)
10007a88:	1085883a 	add	r2,r2,r2
10007a8c:	1085883a 	add	r2,r2,r2
10007a90:	e0ffda04 	addi	r3,fp,-152
10007a94:	1885883a 	add	r2,r3,r2
10007a98:	10801e04 	addi	r2,r2,120
10007a9c:	10800017 	ldw	r2,0(r2)
10007aa0:	100b883a 	mov	r5,r2
10007aa4:	010400b4 	movhi	r4,4098
10007aa8:	210aa604 	addi	r4,r4,10904
10007aac:	0009e480 	call	10009e48 <printf>
			printf("%s\n", msg_ascii);
			printf("\nEnter Key:\n");
			printf("%s\n", key_ascii);
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
10007ab0:	e0bfda17 	ldw	r2,-152(fp)
10007ab4:	10800044 	addi	r2,r2,1
10007ab8:	e0bfda15 	stw	r2,-152(fp)
10007abc:	e0bfda17 	ldw	r2,-152(fp)
10007ac0:	10800110 	cmplti	r2,r2,4
10007ac4:	103fef1e 	bne	r2,zero,10007a84 <__alt_data_end+0xf8007a84>
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
10007ac8:	01000284 	movi	r4,10
10007acc:	0009e8c0 	call	10009e8c <putchar>
			decrypt(msg_enc, msg_dec, key);
10007ad0:	e13ff404 	addi	r4,fp,-48
10007ad4:	e0fffc04 	addi	r3,fp,-16
10007ad8:	e0bff804 	addi	r2,fp,-32
10007adc:	200d883a 	mov	r6,r4
10007ae0:	180b883a 	mov	r5,r3
10007ae4:	1009883a 	mov	r4,r2
10007ae8:	00078140 	call	10007814 <decrypt>
			printf("\nDecrypted message is: \n");
10007aec:	010400b4 	movhi	r4,4098
10007af0:	210ac504 	addi	r4,r4,11028
10007af4:	0009f640 	call	10009f64 <puts>
			for(i = 0; i < 4; i++){
10007af8:	e03fda15 	stw	zero,-152(fp)
10007afc:	00000e06 	br	10007b38 <main_lab9+0x1dc>
				printf("%08x", msg_dec[i]);
10007b00:	e0bfda17 	ldw	r2,-152(fp)
10007b04:	1085883a 	add	r2,r2,r2
10007b08:	1085883a 	add	r2,r2,r2
10007b0c:	e0ffda04 	addi	r3,fp,-152
10007b10:	1885883a 	add	r2,r3,r2
10007b14:	10802204 	addi	r2,r2,136
10007b18:	10800017 	ldw	r2,0(r2)
10007b1c:	100b883a 	mov	r5,r2
10007b20:	010400b4 	movhi	r4,4098
10007b24:	210aa604 	addi	r4,r4,10904
10007b28:	0009e480 	call	10009e48 <printf>
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
10007b2c:	e0bfda17 	ldw	r2,-152(fp)
10007b30:	10800044 	addi	r2,r2,1
10007b34:	e0bfda15 	stw	r2,-152(fp)
10007b38:	e0bfda17 	ldw	r2,-152(fp)
10007b3c:	10800110 	cmplti	r2,r2,4
10007b40:	103fef1e 	bne	r2,zero,10007b00 <__alt_data_end+0xf8007b00>
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
10007b44:	01000284 	movi	r4,10
10007b48:	0009e8c0 	call	10009e8c <putchar>
10007b4c:	00008506 	br	10007d64 <main_lab9+0x408>

	}
	else {
		// Run the Benchmark
		int i = 0;
10007b50:	e03fdb15 	stw	zero,-148(fp)
		int size_KB = 2;
10007b54:	00800084 	movi	r2,2
10007b58:	e0bfdc15 	stw	r2,-144(fp)
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
10007b5c:	e03fdb15 	stw	zero,-148(fp)
10007b60:	00000d06 	br	10007b98 <main_lab9+0x23c>
			msg_ascii[i] = 'a';
10007b64:	e0ffe304 	addi	r3,fp,-116
10007b68:	e0bfdb17 	ldw	r2,-148(fp)
10007b6c:	1885883a 	add	r2,r3,r2
10007b70:	00c01844 	movi	r3,97
10007b74:	10c00005 	stb	r3,0(r2)
			key_ascii[i] = 'b';
10007b78:	e0ffeb44 	addi	r3,fp,-83
10007b7c:	e0bfdb17 	ldw	r2,-148(fp)
10007b80:	1885883a 	add	r2,r3,r2
10007b84:	00c01884 	movi	r3,98
10007b88:	10c00005 	stb	r3,0(r2)
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
10007b8c:	e0bfdb17 	ldw	r2,-148(fp)
10007b90:	10800044 	addi	r2,r2,1
10007b94:	e0bfdb15 	stw	r2,-148(fp)
10007b98:	e0bfdb17 	ldw	r2,-148(fp)
10007b9c:	10800810 	cmplti	r2,r2,32
10007ba0:	103ff01e 	bne	r2,zero,10007b64 <__alt_data_end+0xf8007b64>
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
10007ba4:	0009c840 	call	10009c84 <clock>
10007ba8:	e0bfdd15 	stw	r2,-140(fp)
		for (i = 0; i < size_KB * 64; i++)
10007bac:	e03fdb15 	stw	zero,-148(fp)
10007bb0:	00000c06 	br	10007be4 <main_lab9+0x288>
			encrypt(msg_ascii, key_ascii, msg_enc, key);
10007bb4:	e17ff404 	addi	r5,fp,-48
10007bb8:	e13ff804 	addi	r4,fp,-32
10007bbc:	e0ffeb44 	addi	r3,fp,-83
10007bc0:	e0bfe304 	addi	r2,fp,-116
10007bc4:	280f883a 	mov	r7,r5
10007bc8:	200d883a 	mov	r6,r4
10007bcc:	180b883a 	mov	r5,r3
10007bd0:	1009883a 	mov	r4,r2
10007bd4:	0006ab80 	call	10006ab8 <encrypt>
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
10007bd8:	e0bfdb17 	ldw	r2,-148(fp)
10007bdc:	10800044 	addi	r2,r2,1
10007be0:	e0bfdb15 	stw	r2,-148(fp)
10007be4:	e0bfdc17 	ldw	r2,-144(fp)
10007be8:	100491ba 	slli	r2,r2,6
10007bec:	e0ffdb17 	ldw	r3,-148(fp)
10007bf0:	18bff016 	blt	r3,r2,10007bb4 <__alt_data_end+0xf8007bb4>
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
10007bf4:	0009c840 	call	10009c84 <clock>
10007bf8:	e0bfde15 	stw	r2,-136(fp)
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
10007bfc:	e0ffde17 	ldw	r3,-136(fp)
10007c00:	e0bfdd17 	ldw	r2,-140(fp)
10007c04:	1885c83a 	sub	r2,r3,r2
10007c08:	1009883a 	mov	r4,r2
10007c0c:	00099c40 	call	100099c4 <__floatunsidf>
10007c10:	1011883a 	mov	r8,r2
10007c14:	1813883a 	mov	r9,r3
10007c18:	000d883a 	mov	r6,zero
10007c1c:	01d023f4 	movhi	r7,16527
10007c20:	39d00004 	addi	r7,r7,16384
10007c24:	4009883a 	mov	r4,r8
10007c28:	480b883a 	mov	r5,r9
10007c2c:	0008f180 	call	10008f18 <__divdf3>
10007c30:	1009883a 	mov	r4,r2
10007c34:	180b883a 	mov	r5,r3
10007c38:	e13fdf15 	stw	r4,-132(fp)
10007c3c:	e17fe015 	stw	r5,-128(fp)
		double speed = size_KB / time_spent;
10007c40:	e13fdc17 	ldw	r4,-144(fp)
10007c44:	00098e80 	call	100098e8 <__floatsidf>
10007c48:	1011883a 	mov	r8,r2
10007c4c:	1813883a 	mov	r9,r3
10007c50:	e1bfdf17 	ldw	r6,-132(fp)
10007c54:	e1ffe017 	ldw	r7,-128(fp)
10007c58:	4009883a 	mov	r4,r8
10007c5c:	480b883a 	mov	r5,r9
10007c60:	0008f180 	call	10008f18 <__divdf3>
10007c64:	1009883a 	mov	r4,r2
10007c68:	180b883a 	mov	r5,r3
10007c6c:	e13fe115 	stw	r4,-124(fp)
10007c70:	e17fe215 	stw	r5,-120(fp)
		printf("Software Encryption Speed: %f KB/s \n", speed);
10007c74:	e17fe117 	ldw	r5,-124(fp)
10007c78:	e1bfe217 	ldw	r6,-120(fp)
10007c7c:	010400b4 	movhi	r4,4098
10007c80:	210acb04 	addi	r4,r4,11052
10007c84:	0009e480 	call	10009e48 <printf>
		// Run Decryption
		begin = clock();
10007c88:	0009c840 	call	10009c84 <clock>
10007c8c:	e0bfdd15 	stw	r2,-140(fp)
		for (i = 0; i < size_KB * 64; i++)
10007c90:	e03fdb15 	stw	zero,-148(fp)
10007c94:	00000a06 	br	10007cc0 <main_lab9+0x364>
			decrypt(msg_enc, msg_dec, key);
10007c98:	e13ff404 	addi	r4,fp,-48
10007c9c:	e0fffc04 	addi	r3,fp,-16
10007ca0:	e0bff804 	addi	r2,fp,-32
10007ca4:	200d883a 	mov	r6,r4
10007ca8:	180b883a 	mov	r5,r3
10007cac:	1009883a 	mov	r4,r2
10007cb0:	00078140 	call	10007814 <decrypt>
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
10007cb4:	e0bfdb17 	ldw	r2,-148(fp)
10007cb8:	10800044 	addi	r2,r2,1
10007cbc:	e0bfdb15 	stw	r2,-148(fp)
10007cc0:	e0bfdc17 	ldw	r2,-144(fp)
10007cc4:	100491ba 	slli	r2,r2,6
10007cc8:	e0ffdb17 	ldw	r3,-148(fp)
10007ccc:	18bff216 	blt	r3,r2,10007c98 <__alt_data_end+0xf8007c98>
			decrypt(msg_enc, msg_dec, key);
		end = clock();
10007cd0:	0009c840 	call	10009c84 <clock>
10007cd4:	e0bfde15 	stw	r2,-136(fp)
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
10007cd8:	e0ffde17 	ldw	r3,-136(fp)
10007cdc:	e0bfdd17 	ldw	r2,-140(fp)
10007ce0:	1885c83a 	sub	r2,r3,r2
10007ce4:	1009883a 	mov	r4,r2
10007ce8:	00099c40 	call	100099c4 <__floatunsidf>
10007cec:	1011883a 	mov	r8,r2
10007cf0:	1813883a 	mov	r9,r3
10007cf4:	000d883a 	mov	r6,zero
10007cf8:	01d023f4 	movhi	r7,16527
10007cfc:	39d00004 	addi	r7,r7,16384
10007d00:	4009883a 	mov	r4,r8
10007d04:	480b883a 	mov	r5,r9
10007d08:	0008f180 	call	10008f18 <__divdf3>
10007d0c:	1009883a 	mov	r4,r2
10007d10:	180b883a 	mov	r5,r3
10007d14:	e13fdf15 	stw	r4,-132(fp)
10007d18:	e17fe015 	stw	r5,-128(fp)
		speed = size_KB / time_spent;
10007d1c:	e13fdc17 	ldw	r4,-144(fp)
10007d20:	00098e80 	call	100098e8 <__floatsidf>
10007d24:	1011883a 	mov	r8,r2
10007d28:	1813883a 	mov	r9,r3
10007d2c:	e1bfdf17 	ldw	r6,-132(fp)
10007d30:	e1ffe017 	ldw	r7,-128(fp)
10007d34:	4009883a 	mov	r4,r8
10007d38:	480b883a 	mov	r5,r9
10007d3c:	0008f180 	call	10008f18 <__divdf3>
10007d40:	1009883a 	mov	r4,r2
10007d44:	180b883a 	mov	r5,r3
10007d48:	e13fe115 	stw	r4,-124(fp)
10007d4c:	e17fe215 	stw	r5,-120(fp)
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
10007d50:	e17fe117 	ldw	r5,-124(fp)
10007d54:	e1bfe217 	ldw	r6,-120(fp)
10007d58:	010400b4 	movhi	r4,4098
10007d5c:	210ad504 	addi	r4,r4,11092
10007d60:	0009e480 	call	10009e48 <printf>
	}
	return 0;
10007d64:	0005883a 	mov	r2,zero
}
10007d68:	e037883a 	mov	sp,fp
10007d6c:	dfc00117 	ldw	ra,4(sp)
10007d70:	df000017 	ldw	fp,0(sp)
10007d74:	dec00204 	addi	sp,sp,8
10007d78:	f800283a 	ret

10007d7c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10007d7c:	defffc04 	addi	sp,sp,-16
10007d80:	dfc00315 	stw	ra,12(sp)
10007d84:	df000215 	stw	fp,8(sp)
10007d88:	df000204 	addi	fp,sp,8
10007d8c:	2007883a 	mov	r3,r4
10007d90:	2805883a 	mov	r2,r5
10007d94:	e0fffe0d 	sth	r3,-8(fp)
10007d98:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10007d9c:	e0bffe0b 	ldhu	r2,-8(fp)
10007da0:	100b883a 	mov	r5,r2
10007da4:	01000084 	movi	r4,2
10007da8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,Data);
10007dac:	e0bfff0b 	ldhu	r2,-4(fp)
10007db0:	100b883a 	mov	r5,r2
10007db4:	0009883a 	mov	r4,zero
10007db8:	00002f40 	call	100002f4 <IO_write>
}
10007dbc:	0001883a 	nop
10007dc0:	e037883a 	mov	sp,fp
10007dc4:	dfc00117 	ldw	ra,4(sp)
10007dc8:	df000017 	ldw	fp,0(sp)
10007dcc:	dec00204 	addi	sp,sp,8
10007dd0:	f800283a 	ret

10007dd4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10007dd4:	defffd04 	addi	sp,sp,-12
10007dd8:	dfc00215 	stw	ra,8(sp)
10007ddc:	df000115 	stw	fp,4(sp)
10007de0:	df000104 	addi	fp,sp,4
10007de4:	2005883a 	mov	r2,r4
10007de8:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10007dec:	e0bfff0b 	ldhu	r2,-4(fp)
10007df0:	100b883a 	mov	r5,r2
10007df4:	01000084 	movi	r4,2
10007df8:	00002f40 	call	100002f4 <IO_write>
	return IO_read(HPI_DATA);
10007dfc:	0009883a 	mov	r4,zero
10007e00:	00003640 	call	10000364 <IO_read>
}
10007e04:	e037883a 	mov	sp,fp
10007e08:	dfc00117 	ldw	ra,4(sp)
10007e0c:	df000017 	ldw	fp,0(sp)
10007e10:	dec00204 	addi	sp,sp,8
10007e14:	f800283a 	ret

10007e18 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10007e18:	defffe04 	addi	sp,sp,-8
10007e1c:	dfc00115 	stw	ra,4(sp)
10007e20:	df000015 	stw	fp,0(sp)
10007e24:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10007e28:	017e9414 	movui	r5,64080
10007e2c:	01000044 	movi	r4,1
10007e30:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
10007e34:	010000b4 	movhi	r4,2
10007e38:	2121a804 	addi	r4,r4,-31072
10007e3c:	001fb080 	call	1001fb08 <usleep>
	printf("[USB INIT]:reset finished!\n");
10007e40:	010400b4 	movhi	r4,4098
10007e44:	210ae804 	addi	r4,r4,11168
10007e48:	0009f640 	call	10009f64 <puts>

	usleep(500000);
10007e4c:	01000234 	movhi	r4,8
10007e50:	21284804 	addi	r4,r4,-24288
10007e54:	001fb080 	call	1001fb08 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10007e58:	010400b4 	movhi	r4,4098
10007e5c:	210aef04 	addi	r4,r4,11196
10007e60:	0009f640 	call	10009f64 <puts>
	IO_read(HPI_MAILBOX);
10007e64:	01000044 	movi	r4,1
10007e68:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
10007e6c:	010000c4 	movi	r4,3
10007e70:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10007e74:	01005104 	movi	r4,324
10007e78:	0007dd40 	call	10007dd4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10007e7c:	000b883a 	mov	r5,zero
10007e80:	01005104 	movi	r4,324
10007e84:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10007e88:	01005204 	movi	r4,328
10007e8c:	0007dd40 	call	10007dd4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10007e90:	000b883a 	mov	r5,zero
10007e94:	01005204 	movi	r4,328
10007e98:	0007d7c0 	call	10007d7c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10007e9c:	017fffd4 	movui	r5,65535
10007ea0:	01302414 	movui	r4,49296
10007ea4:	0007d7c0 	call	10007d7c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10007ea8:	017fffd4 	movui	r5,65535
10007eac:	01302c14 	movui	r4,49328
10007eb0:	0007d7c0 	call	10007d7c <UsbWrite>
}
10007eb4:	0001883a 	nop
10007eb8:	e037883a 	mov	sp,fp
10007ebc:	dfc00117 	ldw	ra,4(sp)
10007ec0:	df000017 	ldw	fp,0(sp)
10007ec4:	dec00204 	addi	sp,sp,8
10007ec8:	f800283a 	ret

10007ecc <UsbSetAddress>:


void UsbSetAddress()
{
10007ecc:	defffe04 	addi	sp,sp,-8
10007ed0:	dfc00115 	stw	ra,4(sp)
10007ed4:	df000015 	stw	fp,0(sp)
10007ed8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10007edc:	01414004 	movi	r5,1280
10007ee0:	01000084 	movi	r4,2
10007ee4:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10007ee8:	01414304 	movi	r5,1292
10007eec:	0009883a 	mov	r4,zero
10007ef0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10007ef4:	01400204 	movi	r5,8
10007ef8:	0009883a 	mov	r4,zero
10007efc:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10007f00:	01403404 	movi	r5,208
10007f04:	0009883a 	mov	r4,zero
10007f08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10007f0c:	01400044 	movi	r5,1
10007f10:	0009883a 	mov	r4,zero
10007f14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10007f18:	014004c4 	movi	r5,19
10007f1c:	0009883a 	mov	r4,zero
10007f20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10007f24:	01414504 	movi	r5,1300
10007f28:	0009883a 	mov	r4,zero
10007f2c:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10007f30:	01414004 	movi	r5,1280
10007f34:	0009883a 	mov	r4,zero
10007f38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10007f3c:	01400084 	movi	r5,2
10007f40:	0009883a 	mov	r4,zero
10007f44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10007f48:	000b883a 	mov	r5,zero
10007f4c:	0009883a 	mov	r4,zero
10007f50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10007f54:	000b883a 	mov	r5,zero
10007f58:	0009883a 	mov	r4,zero
10007f5c:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10007f60:	000b883a 	mov	r5,zero
10007f64:	0009883a 	mov	r4,zero
10007f68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10007f6c:	000b883a 	mov	r5,zero
10007f70:	0009883a 	mov	r4,zero
10007f74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10007f78:	01402404 	movi	r5,144
10007f7c:	0009883a 	mov	r4,zero
10007f80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10007f84:	01401044 	movi	r5,65
10007f88:	0009883a 	mov	r4,zero
10007f8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10007f90:	014004c4 	movi	r5,19
10007f94:	0009883a 	mov	r4,zero
10007f98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10007f9c:	000b883a 	mov	r5,zero
10007fa0:	0009883a 	mov	r4,zero
10007fa4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10007fa8:	01414004 	movi	r5,1280
10007fac:	01006c04 	movi	r4,432
10007fb0:	0007d7c0 	call	10007d7c <UsbWrite>
}
10007fb4:	0001883a 	nop
10007fb8:	e037883a 	mov	sp,fp
10007fbc:	dfc00117 	ldw	ra,4(sp)
10007fc0:	df000017 	ldw	fp,0(sp)
10007fc4:	dec00204 	addi	sp,sp,8
10007fc8:	f800283a 	ret

10007fcc <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10007fcc:	defffe04 	addi	sp,sp,-8
10007fd0:	dfc00115 	stw	ra,4(sp)
10007fd4:	df000015 	stw	fp,0(sp)
10007fd8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10007fdc:	01414004 	movi	r5,1280
10007fe0:	01000084 	movi	r4,2
10007fe4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10007fe8:	01414304 	movi	r5,1292
10007fec:	0009883a 	mov	r4,zero
10007ff0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10007ff4:	01400204 	movi	r5,8
10007ff8:	0009883a 	mov	r4,zero
10007ffc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10008000:	0140b404 	movi	r5,720
10008004:	0009883a 	mov	r4,zero
10008008:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000800c:	01400044 	movi	r5,1
10008010:	0009883a 	mov	r4,zero
10008014:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008018:	014004c4 	movi	r5,19
1000801c:	0009883a 	mov	r4,zero
10008020:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10008024:	01414504 	movi	r5,1300
10008028:	0009883a 	mov	r4,zero
1000802c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10008030:	0141a004 	movi	r5,1664
10008034:	0009883a 	mov	r4,zero
10008038:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
1000803c:	01404004 	movi	r5,256
10008040:	0009883a 	mov	r4,zero
10008044:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10008048:	000b883a 	mov	r5,zero
1000804c:	0009883a 	mov	r4,zero
10008050:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10008054:	01400204 	movi	r5,8
10008058:	0009883a 	mov	r4,zero
1000805c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10008060:	01414b04 	movi	r5,1324
10008064:	0009883a 	mov	r4,zero
10008068:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
1000806c:	01400204 	movi	r5,8
10008070:	0009883a 	mov	r4,zero
10008074:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10008078:	0140a404 	movi	r5,656
1000807c:	0009883a 	mov	r4,zero
10008080:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10008084:	01401044 	movi	r5,65
10008088:	0009883a 	mov	r4,zero
1000808c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008090:	014004c4 	movi	r5,19
10008094:	0009883a 	mov	r4,zero
10008098:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000809c:	01414804 	movi	r5,1312
100080a0:	0009883a 	mov	r4,zero
100080a4:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100080a8:	000b883a 	mov	r5,zero
100080ac:	0009883a 	mov	r4,zero
100080b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100080b4:	000b883a 	mov	r5,zero
100080b8:	0009883a 	mov	r4,zero
100080bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100080c0:	01408404 	movi	r5,528
100080c4:	0009883a 	mov	r4,zero
100080c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100080cc:	01401044 	movi	r5,65
100080d0:	0009883a 	mov	r4,zero
100080d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100080d8:	014004c4 	movi	r5,19
100080dc:	0009883a 	mov	r4,zero
100080e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100080e4:	000b883a 	mov	r5,zero
100080e8:	0009883a 	mov	r4,zero
100080ec:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100080f0:	01414004 	movi	r5,1280
100080f4:	01006c04 	movi	r4,432
100080f8:	0007d7c0 	call	10007d7c <UsbWrite>
}
100080fc:	0001883a 	nop
10008100:	e037883a 	mov	sp,fp
10008104:	dfc00117 	ldw	ra,4(sp)
10008108:	df000017 	ldw	fp,0(sp)
1000810c:	dec00204 	addi	sp,sp,8
10008110:	f800283a 	ret

10008114 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10008114:	defffe04 	addi	sp,sp,-8
10008118:	dfc00115 	stw	ra,4(sp)
1000811c:	df000015 	stw	fp,0(sp)
10008120:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10008124:	01414004 	movi	r5,1280
10008128:	01000084 	movi	r4,2
1000812c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008130:	01414304 	movi	r5,1292
10008134:	0009883a 	mov	r4,zero
10008138:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000813c:	01400204 	movi	r5,8
10008140:	0009883a 	mov	r4,zero
10008144:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10008148:	0140b404 	movi	r5,720
1000814c:	0009883a 	mov	r4,zero
10008150:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10008154:	01400044 	movi	r5,1
10008158:	0009883a 	mov	r4,zero
1000815c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008160:	014004c4 	movi	r5,19
10008164:	0009883a 	mov	r4,zero
10008168:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000816c:	01414504 	movi	r5,1300
10008170:	0009883a 	mov	r4,zero
10008174:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10008178:	0141a004 	movi	r5,1664
1000817c:	0009883a 	mov	r4,zero
10008180:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10008184:	01404004 	movi	r5,256
10008188:	0009883a 	mov	r4,zero
1000818c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10008190:	000b883a 	mov	r5,zero
10008194:	0009883a 	mov	r4,zero
10008198:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000819c:	01400484 	movi	r5,18
100081a0:	0009883a 	mov	r4,zero
100081a4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100081a8:	01415104 	movi	r5,1348
100081ac:	0009883a 	mov	r4,zero
100081b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100081b4:	01400204 	movi	r5,8
100081b8:	0009883a 	mov	r4,zero
100081bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100081c0:	0140a404 	movi	r5,656
100081c4:	0009883a 	mov	r4,zero
100081c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100081cc:	01401044 	movi	r5,65
100081d0:	0009883a 	mov	r4,zero
100081d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100081d8:	014004c4 	movi	r5,19
100081dc:	0009883a 	mov	r4,zero
100081e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100081e4:	01414804 	movi	r5,1312
100081e8:	0009883a 	mov	r4,zero
100081ec:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100081f0:	01415304 	movi	r5,1356
100081f4:	0009883a 	mov	r4,zero
100081f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100081fc:	01400204 	movi	r5,8
10008200:	0009883a 	mov	r4,zero
10008204:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10008208:	0140a404 	movi	r5,656
1000820c:	0009883a 	mov	r4,zero
10008210:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10008214:	01400044 	movi	r5,1
10008218:	0009883a 	mov	r4,zero
1000821c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10008220:	014004c4 	movi	r5,19
10008224:	0009883a 	mov	r4,zero
10008228:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000822c:	01414b04 	movi	r5,1324
10008230:	0009883a 	mov	r4,zero
10008234:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10008238:	01415504 	movi	r5,1364
1000823c:	0009883a 	mov	r4,zero
10008240:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10008244:	01400084 	movi	r5,2
10008248:	0009883a 	mov	r4,zero
1000824c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10008250:	0140a404 	movi	r5,656
10008254:	0009883a 	mov	r4,zero
10008258:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000825c:	01401044 	movi	r5,65
10008260:	0009883a 	mov	r4,zero
10008264:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10008268:	014004c4 	movi	r5,19
1000826c:	0009883a 	mov	r4,zero
10008270:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10008274:	01414e04 	movi	r5,1336
10008278:	0009883a 	mov	r4,zero
1000827c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10008280:	000b883a 	mov	r5,zero
10008284:	0009883a 	mov	r4,zero
10008288:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000828c:	000b883a 	mov	r5,zero
10008290:	0009883a 	mov	r4,zero
10008294:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10008298:	01408404 	movi	r5,528
1000829c:	0009883a 	mov	r4,zero
100082a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100082a4:	01401044 	movi	r5,65
100082a8:	0009883a 	mov	r4,zero
100082ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100082b0:	014004c4 	movi	r5,19
100082b4:	0009883a 	mov	r4,zero
100082b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100082bc:	000b883a 	mov	r5,zero
100082c0:	0009883a 	mov	r4,zero
100082c4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100082c8:	01414004 	movi	r5,1280
100082cc:	01006c04 	movi	r4,432
100082d0:	0007d7c0 	call	10007d7c <UsbWrite>
}
100082d4:	0001883a 	nop
100082d8:	e037883a 	mov	sp,fp
100082dc:	dfc00117 	ldw	ra,4(sp)
100082e0:	df000017 	ldw	fp,0(sp)
100082e4:	dec00204 	addi	sp,sp,8
100082e8:	f800283a 	ret

100082ec <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100082ec:	defffe04 	addi	sp,sp,-8
100082f0:	dfc00115 	stw	ra,4(sp)
100082f4:	df000015 	stw	fp,0(sp)
100082f8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100082fc:	01414004 	movi	r5,1280
10008300:	01000084 	movi	r4,2
10008304:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008308:	01414304 	movi	r5,1292
1000830c:	0009883a 	mov	r4,zero
10008310:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10008314:	01400204 	movi	r5,8
10008318:	0009883a 	mov	r4,zero
1000831c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10008320:	0140b404 	movi	r5,720
10008324:	0009883a 	mov	r4,zero
10008328:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000832c:	01400044 	movi	r5,1
10008330:	0009883a 	mov	r4,zero
10008334:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008338:	014004c4 	movi	r5,19
1000833c:	0009883a 	mov	r4,zero
10008340:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10008344:	01414504 	movi	r5,1300
10008348:	0009883a 	mov	r4,zero
1000834c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10008350:	0141a004 	movi	r5,1664
10008354:	0009883a 	mov	r4,zero
10008358:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000835c:	01408004 	movi	r5,512
10008360:	0009883a 	mov	r4,zero
10008364:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10008368:	000b883a 	mov	r5,zero
1000836c:	0009883a 	mov	r4,zero
10008370:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10008374:	01400244 	movi	r5,9
10008378:	0009883a 	mov	r4,zero
1000837c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10008380:	01415104 	movi	r5,1348
10008384:	0009883a 	mov	r4,zero
10008388:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000838c:	01400204 	movi	r5,8
10008390:	0009883a 	mov	r4,zero
10008394:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10008398:	0140a404 	movi	r5,656
1000839c:	0009883a 	mov	r4,zero
100083a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100083a4:	01401044 	movi	r5,65
100083a8:	0009883a 	mov	r4,zero
100083ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100083b0:	014004c4 	movi	r5,19
100083b4:	0009883a 	mov	r4,zero
100083b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100083bc:	01414804 	movi	r5,1312
100083c0:	0009883a 	mov	r4,zero
100083c4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100083c8:	01415304 	movi	r5,1356
100083cc:	0009883a 	mov	r4,zero
100083d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100083d4:	01400044 	movi	r5,1
100083d8:	0009883a 	mov	r4,zero
100083dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100083e0:	0140a404 	movi	r5,656
100083e4:	0009883a 	mov	r4,zero
100083e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100083ec:	01400044 	movi	r5,1
100083f0:	0009883a 	mov	r4,zero
100083f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100083f8:	014004c4 	movi	r5,19
100083fc:	0009883a 	mov	r4,zero
10008400:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10008404:	01414b04 	movi	r5,1324
10008408:	0009883a 	mov	r4,zero
1000840c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10008410:	000b883a 	mov	r5,zero
10008414:	0009883a 	mov	r4,zero
10008418:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000841c:	000b883a 	mov	r5,zero
10008420:	0009883a 	mov	r4,zero
10008424:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10008428:	01408404 	movi	r5,528
1000842c:	0009883a 	mov	r4,zero
10008430:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10008434:	01401044 	movi	r5,65
10008438:	0009883a 	mov	r4,zero
1000843c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10008440:	014004c4 	movi	r5,19
10008444:	0009883a 	mov	r4,zero
10008448:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000844c:	000b883a 	mov	r5,zero
10008450:	0009883a 	mov	r4,zero
10008454:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10008458:	01414004 	movi	r5,1280
1000845c:	01006c04 	movi	r4,432
10008460:	0007d7c0 	call	10007d7c <UsbWrite>
}
10008464:	0001883a 	nop
10008468:	e037883a 	mov	sp,fp
1000846c:	dfc00117 	ldw	ra,4(sp)
10008470:	df000017 	ldw	fp,0(sp)
10008474:	dec00204 	addi	sp,sp,8
10008478:	f800283a 	ret

1000847c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
1000847c:	defffe04 	addi	sp,sp,-8
10008480:	dfc00115 	stw	ra,4(sp)
10008484:	df000015 	stw	fp,0(sp)
10008488:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000848c:	01414004 	movi	r5,1280
10008490:	01000084 	movi	r4,2
10008494:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008498:	01414304 	movi	r5,1292
1000849c:	0009883a 	mov	r4,zero
100084a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100084a4:	01400204 	movi	r5,8
100084a8:	0009883a 	mov	r4,zero
100084ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100084b0:	0140b404 	movi	r5,720
100084b4:	0009883a 	mov	r4,zero
100084b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100084bc:	01400044 	movi	r5,1
100084c0:	0009883a 	mov	r4,zero
100084c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100084c8:	014004c4 	movi	r5,19
100084cc:	0009883a 	mov	r4,zero
100084d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100084d4:	01414504 	movi	r5,1300
100084d8:	0009883a 	mov	r4,zero
100084dc:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100084e0:	0141a004 	movi	r5,1664
100084e4:	0009883a 	mov	r4,zero
100084e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100084ec:	01408004 	movi	r5,512
100084f0:	0009883a 	mov	r4,zero
100084f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100084f8:	000b883a 	mov	r5,zero
100084fc:	0009883a 	mov	r4,zero
10008500:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10008504:	01403fc4 	movi	r5,255
10008508:	0009883a 	mov	r4,zero
1000850c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10008510:	01415704 	movi	r5,1372
10008514:	0009883a 	mov	r4,zero
10008518:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000851c:	01400204 	movi	r5,8
10008520:	0009883a 	mov	r4,zero
10008524:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10008528:	0140a404 	movi	r5,656
1000852c:	0009883a 	mov	r4,zero
10008530:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10008534:	01401044 	movi	r5,65
10008538:	0009883a 	mov	r4,zero
1000853c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10008540:	014004c4 	movi	r5,19
10008544:	0009883a 	mov	r4,zero
10008548:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000854c:	01414804 	movi	r5,1312
10008550:	0009883a 	mov	r4,zero
10008554:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10008558:	01415904 	movi	r5,1380
1000855c:	0009883a 	mov	r4,zero
10008560:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10008564:	01400204 	movi	r5,8
10008568:	0009883a 	mov	r4,zero
1000856c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10008570:	0140a404 	movi	r5,656
10008574:	0009883a 	mov	r4,zero
10008578:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000857c:	01400044 	movi	r5,1
10008580:	0009883a 	mov	r4,zero
10008584:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10008588:	014004c4 	movi	r5,19
1000858c:	0009883a 	mov	r4,zero
10008590:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10008594:	01414b04 	movi	r5,1324
10008598:	0009883a 	mov	r4,zero
1000859c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100085a0:	01415b04 	movi	r5,1388
100085a4:	0009883a 	mov	r4,zero
100085a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100085ac:	01400204 	movi	r5,8
100085b0:	0009883a 	mov	r4,zero
100085b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100085b8:	0140a404 	movi	r5,656
100085bc:	0009883a 	mov	r4,zero
100085c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100085c4:	01401044 	movi	r5,65
100085c8:	0009883a 	mov	r4,zero
100085cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100085d0:	014004c4 	movi	r5,19
100085d4:	0009883a 	mov	r4,zero
100085d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100085dc:	01414e04 	movi	r5,1336
100085e0:	0009883a 	mov	r4,zero
100085e4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100085e8:	01415d04 	movi	r5,1396
100085ec:	0009883a 	mov	r4,zero
100085f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100085f4:	01400204 	movi	r5,8
100085f8:	0009883a 	mov	r4,zero
100085fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10008600:	0140a404 	movi	r5,656
10008604:	0009883a 	mov	r4,zero
10008608:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000860c:	01400044 	movi	r5,1
10008610:	0009883a 	mov	r4,zero
10008614:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10008618:	014004c4 	movi	r5,19
1000861c:	0009883a 	mov	r4,zero
10008620:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10008624:	01415104 	movi	r5,1348
10008628:	0009883a 	mov	r4,zero
1000862c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10008630:	01415f04 	movi	r5,1404
10008634:	0009883a 	mov	r4,zero
10008638:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
1000863c:	01400084 	movi	r5,2
10008640:	0009883a 	mov	r4,zero
10008644:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10008648:	0140a404 	movi	r5,656
1000864c:	0009883a 	mov	r4,zero
10008650:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10008654:	01401044 	movi	r5,65
10008658:	0009883a 	mov	r4,zero
1000865c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10008660:	014004c4 	movi	r5,19
10008664:	0009883a 	mov	r4,zero
10008668:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1000866c:	01415404 	movi	r5,1360
10008670:	0009883a 	mov	r4,zero
10008674:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10008678:	000b883a 	mov	r5,zero
1000867c:	0009883a 	mov	r4,zero
10008680:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10008684:	000b883a 	mov	r5,zero
10008688:	0009883a 	mov	r4,zero
1000868c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10008690:	01408404 	movi	r5,528
10008694:	0009883a 	mov	r4,zero
10008698:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
1000869c:	01401044 	movi	r5,65
100086a0:	0009883a 	mov	r4,zero
100086a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100086a8:	014004c4 	movi	r5,19
100086ac:	0009883a 	mov	r4,zero
100086b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100086b4:	000b883a 	mov	r5,zero
100086b8:	0009883a 	mov	r4,zero
100086bc:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100086c0:	01414004 	movi	r5,1280
100086c4:	01006c04 	movi	r4,432
100086c8:	0007d7c0 	call	10007d7c <UsbWrite>
}
100086cc:	0001883a 	nop
100086d0:	e037883a 	mov	sp,fp
100086d4:	dfc00117 	ldw	ra,4(sp)
100086d8:	df000017 	ldw	fp,0(sp)
100086dc:	dec00204 	addi	sp,sp,8
100086e0:	f800283a 	ret

100086e4 <UsbSetConfig>:

void UsbSetConfig()
{
100086e4:	defffe04 	addi	sp,sp,-8
100086e8:	dfc00115 	stw	ra,4(sp)
100086ec:	df000015 	stw	fp,0(sp)
100086f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100086f4:	01414004 	movi	r5,1280
100086f8:	01000084 	movi	r4,2
100086fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008700:	01414304 	movi	r5,1292
10008704:	0009883a 	mov	r4,zero
10008708:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000870c:	01400204 	movi	r5,8
10008710:	0009883a 	mov	r4,zero
10008714:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10008718:	0140b404 	movi	r5,720
1000871c:	0009883a 	mov	r4,zero
10008720:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10008724:	01400044 	movi	r5,1
10008728:	0009883a 	mov	r4,zero
1000872c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008730:	014004c4 	movi	r5,19
10008734:	0009883a 	mov	r4,zero
10008738:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000873c:	01414504 	movi	r5,1300
10008740:	0009883a 	mov	r4,zero
10008744:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10008748:	01424004 	movi	r5,2304
1000874c:	0009883a 	mov	r4,zero
10008750:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10008754:	01400044 	movi	r5,1
10008758:	0009883a 	mov	r4,zero
1000875c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10008760:	000b883a 	mov	r5,zero
10008764:	0009883a 	mov	r4,zero
10008768:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000876c:	000b883a 	mov	r5,zero
10008770:	0009883a 	mov	r4,zero
10008774:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10008778:	000b883a 	mov	r5,zero
1000877c:	0009883a 	mov	r4,zero
10008780:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10008784:	000b883a 	mov	r5,zero
10008788:	0009883a 	mov	r4,zero
1000878c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10008790:	0140a404 	movi	r5,656
10008794:	0009883a 	mov	r4,zero
10008798:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1000879c:	01401044 	movi	r5,65
100087a0:	0009883a 	mov	r4,zero
100087a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100087a8:	014004c4 	movi	r5,19
100087ac:	0009883a 	mov	r4,zero
100087b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100087b4:	000b883a 	mov	r5,zero
100087b8:	0009883a 	mov	r4,zero
100087bc:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100087c0:	01414004 	movi	r5,1280
100087c4:	01006c04 	movi	r4,432
100087c8:	0007d7c0 	call	10007d7c <UsbWrite>

}
100087cc:	0001883a 	nop
100087d0:	e037883a 	mov	sp,fp
100087d4:	dfc00117 	ldw	ra,4(sp)
100087d8:	df000017 	ldw	fp,0(sp)
100087dc:	dec00204 	addi	sp,sp,8
100087e0:	f800283a 	ret

100087e4 <UsbClassRequest>:

void UsbClassRequest()
{
100087e4:	defffe04 	addi	sp,sp,-8
100087e8:	dfc00115 	stw	ra,4(sp)
100087ec:	df000015 	stw	fp,0(sp)
100087f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100087f4:	01414004 	movi	r5,1280
100087f8:	01000084 	movi	r4,2
100087fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008800:	01414304 	movi	r5,1292
10008804:	0009883a 	mov	r4,zero
10008808:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000880c:	01400204 	movi	r5,8
10008810:	0009883a 	mov	r4,zero
10008814:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10008818:	0140b404 	movi	r5,720
1000881c:	0009883a 	mov	r4,zero
10008820:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10008824:	01400044 	movi	r5,1
10008828:	0009883a 	mov	r4,zero
1000882c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008830:	014004c4 	movi	r5,19
10008834:	0009883a 	mov	r4,zero
10008838:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000883c:	01414504 	movi	r5,1300
10008840:	0009883a 	mov	r4,zero
10008844:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10008848:	01428844 	movi	r5,2593
1000884c:	0009883a 	mov	r4,zero
10008850:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10008854:	000b883a 	mov	r5,zero
10008858:	0009883a 	mov	r4,zero
1000885c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10008860:	000b883a 	mov	r5,zero
10008864:	0009883a 	mov	r4,zero
10008868:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000886c:	000b883a 	mov	r5,zero
10008870:	0009883a 	mov	r4,zero
10008874:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10008878:	000b883a 	mov	r5,zero
1000887c:	0009883a 	mov	r4,zero
10008880:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10008884:	000b883a 	mov	r5,zero
10008888:	0009883a 	mov	r4,zero
1000888c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10008890:	0140a404 	movi	r5,656
10008894:	0009883a 	mov	r4,zero
10008898:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1000889c:	01401044 	movi	r5,65
100088a0:	0009883a 	mov	r4,zero
100088a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100088a8:	014004c4 	movi	r5,19
100088ac:	0009883a 	mov	r4,zero
100088b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100088b4:	000b883a 	mov	r5,zero
100088b8:	0009883a 	mov	r4,zero
100088bc:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100088c0:	01414004 	movi	r5,1280
100088c4:	01006c04 	movi	r4,432
100088c8:	0007d7c0 	call	10007d7c <UsbWrite>
}
100088cc:	0001883a 	nop
100088d0:	e037883a 	mov	sp,fp
100088d4:	dfc00117 	ldw	ra,4(sp)
100088d8:	df000017 	ldw	fp,0(sp)
100088dc:	dec00204 	addi	sp,sp,8
100088e0:	f800283a 	ret

100088e4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100088e4:	defffe04 	addi	sp,sp,-8
100088e8:	dfc00115 	stw	ra,4(sp)
100088ec:	df000015 	stw	fp,0(sp)
100088f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100088f4:	01414004 	movi	r5,1280
100088f8:	01000084 	movi	r4,2
100088fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008900:	01414304 	movi	r5,1292
10008904:	0009883a 	mov	r4,zero
10008908:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000890c:	01400204 	movi	r5,8
10008910:	0009883a 	mov	r4,zero
10008914:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10008918:	0140b404 	movi	r5,720
1000891c:	0009883a 	mov	r4,zero
10008920:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10008924:	01400044 	movi	r5,1
10008928:	0009883a 	mov	r4,zero
1000892c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008930:	014004c4 	movi	r5,19
10008934:	0009883a 	mov	r4,zero
10008938:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000893c:	01414504 	movi	r5,1300
10008940:	0009883a 	mov	r4,zero
10008944:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10008948:	0141a044 	movi	r5,1665
1000894c:	0009883a 	mov	r4,zero
10008950:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10008954:	01484004 	movi	r5,8448
10008958:	0009883a 	mov	r4,zero
1000895c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10008960:	000b883a 	mov	r5,zero
10008964:	0009883a 	mov	r4,zero
10008968:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000896c:	01401ec4 	movi	r5,123
10008970:	0009883a 	mov	r4,zero
10008974:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10008978:	01415104 	movi	r5,1348
1000897c:	0009883a 	mov	r4,zero
10008980:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10008984:	01400204 	movi	r5,8
10008988:	0009883a 	mov	r4,zero
1000898c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10008990:	0140a404 	movi	r5,656
10008994:	0009883a 	mov	r4,zero
10008998:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000899c:	01401044 	movi	r5,65
100089a0:	0009883a 	mov	r4,zero
100089a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100089a8:	014004c4 	movi	r5,19
100089ac:	0009883a 	mov	r4,zero
100089b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100089b4:	01414804 	movi	r5,1312
100089b8:	0009883a 	mov	r4,zero
100089bc:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100089c0:	000b883a 	mov	r5,zero
100089c4:	0009883a 	mov	r4,zero
100089c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100089cc:	000b883a 	mov	r5,zero
100089d0:	0009883a 	mov	r4,zero
100089d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100089d8:	01408404 	movi	r5,528
100089dc:	0009883a 	mov	r4,zero
100089e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100089e4:	01401044 	movi	r5,65
100089e8:	0009883a 	mov	r4,zero
100089ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100089f0:	014004c4 	movi	r5,19
100089f4:	0009883a 	mov	r4,zero
100089f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100089fc:	000b883a 	mov	r5,zero
10008a00:	0009883a 	mov	r4,zero
10008a04:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10008a08:	01414004 	movi	r5,1280
10008a0c:	01006c04 	movi	r4,432
10008a10:	0007d7c0 	call	10007d7c <UsbWrite>

}
10008a14:	0001883a 	nop
10008a18:	e037883a 	mov	sp,fp
10008a1c:	dfc00117 	ldw	ra,4(sp)
10008a20:	df000017 	ldw	fp,0(sp)
10008a24:	dec00204 	addi	sp,sp,8
10008a28:	f800283a 	ret

10008a2c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10008a2c:	defffe04 	addi	sp,sp,-8
10008a30:	dfc00115 	stw	ra,4(sp)
10008a34:	df000015 	stw	fp,0(sp)
10008a38:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10008a3c:	01414004 	movi	r5,1280
10008a40:	01000084 	movi	r4,2
10008a44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10008a48:	01414304 	movi	r5,1292
10008a4c:	0009883a 	mov	r4,zero
10008a50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10008a54:	01400204 	movi	r5,8
10008a58:	0009883a 	mov	r4,zero
10008a5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10008a60:	0140b404 	movi	r5,720
10008a64:	0009883a 	mov	r4,zero
10008a68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10008a6c:	01400044 	movi	r5,1
10008a70:	0009883a 	mov	r4,zero
10008a74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10008a78:	014004c4 	movi	r5,19
10008a7c:	0009883a 	mov	r4,zero
10008a80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10008a84:	01414504 	movi	r5,1300
10008a88:	0009883a 	mov	r4,zero
10008a8c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10008a90:	0141a044 	movi	r5,1665
10008a94:	0009883a 	mov	r4,zero
10008a98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10008a9c:	01488004 	movi	r5,8704
10008aa0:	0009883a 	mov	r4,zero
10008aa4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10008aa8:	000b883a 	mov	r5,zero
10008aac:	0009883a 	mov	r4,zero
10008ab0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10008ab4:	01401ec4 	movi	r5,123
10008ab8:	0009883a 	mov	r4,zero
10008abc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10008ac0:	01416004 	movi	r5,1408
10008ac4:	0009883a 	mov	r4,zero
10008ac8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10008acc:	01400204 	movi	r5,8
10008ad0:	0009883a 	mov	r4,zero
10008ad4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10008ad8:	0140a404 	movi	r5,656
10008adc:	0009883a 	mov	r4,zero
10008ae0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10008ae4:	01401044 	movi	r5,65
10008ae8:	0009883a 	mov	r4,zero
10008aec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10008af0:	014004c4 	movi	r5,19
10008af4:	0009883a 	mov	r4,zero
10008af8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10008afc:	01414804 	movi	r5,1312
10008b00:	0009883a 	mov	r4,zero
10008b04:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10008b08:	01416204 	movi	r5,1416
10008b0c:	0009883a 	mov	r4,zero
10008b10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10008b14:	01400204 	movi	r5,8
10008b18:	0009883a 	mov	r4,zero
10008b1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10008b20:	0140a404 	movi	r5,656
10008b24:	0009883a 	mov	r4,zero
10008b28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10008b2c:	01400044 	movi	r5,1
10008b30:	0009883a 	mov	r4,zero
10008b34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10008b38:	014004c4 	movi	r5,19
10008b3c:	0009883a 	mov	r4,zero
10008b40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10008b44:	01414b04 	movi	r5,1324
10008b48:	0009883a 	mov	r4,zero
10008b4c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10008b50:	01416404 	movi	r5,1424
10008b54:	0009883a 	mov	r4,zero
10008b58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10008b5c:	01400204 	movi	r5,8
10008b60:	0009883a 	mov	r4,zero
10008b64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10008b68:	0140a404 	movi	r5,656
10008b6c:	0009883a 	mov	r4,zero
10008b70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10008b74:	01401044 	movi	r5,65
10008b78:	0009883a 	mov	r4,zero
10008b7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10008b80:	014004c4 	movi	r5,19
10008b84:	0009883a 	mov	r4,zero
10008b88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10008b8c:	01414e04 	movi	r5,1336
10008b90:	0009883a 	mov	r4,zero
10008b94:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10008b98:	01416604 	movi	r5,1432
10008b9c:	0009883a 	mov	r4,zero
10008ba0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10008ba4:	01400204 	movi	r5,8
10008ba8:	0009883a 	mov	r4,zero
10008bac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10008bb0:	0140a404 	movi	r5,656
10008bb4:	0009883a 	mov	r4,zero
10008bb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10008bbc:	01400044 	movi	r5,1
10008bc0:	0009883a 	mov	r4,zero
10008bc4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10008bc8:	014004c4 	movi	r5,19
10008bcc:	0009883a 	mov	r4,zero
10008bd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10008bd4:	01415104 	movi	r5,1348
10008bd8:	0009883a 	mov	r4,zero
10008bdc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10008be0:	01416804 	movi	r5,1440
10008be4:	0009883a 	mov	r4,zero
10008be8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10008bec:	01400204 	movi	r5,8
10008bf0:	0009883a 	mov	r4,zero
10008bf4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10008bf8:	0140a404 	movi	r5,656
10008bfc:	0009883a 	mov	r4,zero
10008c00:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10008c04:	01401044 	movi	r5,65
10008c08:	0009883a 	mov	r4,zero
10008c0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10008c10:	014004c4 	movi	r5,19
10008c14:	0009883a 	mov	r4,zero
10008c18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10008c1c:	01415404 	movi	r5,1360
10008c20:	0009883a 	mov	r4,zero
10008c24:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10008c28:	01416a04 	movi	r5,1448
10008c2c:	0009883a 	mov	r4,zero
10008c30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10008c34:	01400204 	movi	r5,8
10008c38:	0009883a 	mov	r4,zero
10008c3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10008c40:	0140a404 	movi	r5,656
10008c44:	0009883a 	mov	r4,zero
10008c48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10008c4c:	01400044 	movi	r5,1
10008c50:	0009883a 	mov	r4,zero
10008c54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10008c58:	014004c4 	movi	r5,19
10008c5c:	0009883a 	mov	r4,zero
10008c60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10008c64:	01415704 	movi	r5,1372
10008c68:	0009883a 	mov	r4,zero
10008c6c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10008c70:	01416c04 	movi	r5,1456
10008c74:	0009883a 	mov	r4,zero
10008c78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10008c7c:	01400204 	movi	r5,8
10008c80:	0009883a 	mov	r4,zero
10008c84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10008c88:	0140a404 	movi	r5,656
10008c8c:	0009883a 	mov	r4,zero
10008c90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10008c94:	01401044 	movi	r5,65
10008c98:	0009883a 	mov	r4,zero
10008c9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10008ca0:	014004c4 	movi	r5,19
10008ca4:	0009883a 	mov	r4,zero
10008ca8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10008cac:	01415a04 	movi	r5,1384
10008cb0:	0009883a 	mov	r4,zero
10008cb4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10008cb8:	01416e04 	movi	r5,1464
10008cbc:	0009883a 	mov	r4,zero
10008cc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10008cc4:	014000c4 	movi	r5,3
10008cc8:	0009883a 	mov	r4,zero
10008ccc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10008cd0:	0140a404 	movi	r5,656
10008cd4:	0009883a 	mov	r4,zero
10008cd8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10008cdc:	01400044 	movi	r5,1
10008ce0:	0009883a 	mov	r4,zero
10008ce4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10008ce8:	014004c4 	movi	r5,19
10008cec:	0009883a 	mov	r4,zero
10008cf0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10008cf4:	01415d04 	movi	r5,1396
10008cf8:	0009883a 	mov	r4,zero
10008cfc:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10008d00:	000b883a 	mov	r5,zero
10008d04:	0009883a 	mov	r4,zero
10008d08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10008d0c:	000b883a 	mov	r5,zero
10008d10:	0009883a 	mov	r4,zero
10008d14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10008d18:	01408404 	movi	r5,528
10008d1c:	0009883a 	mov	r4,zero
10008d20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10008d24:	01401044 	movi	r5,65
10008d28:	0009883a 	mov	r4,zero
10008d2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10008d30:	014004c4 	movi	r5,19
10008d34:	0009883a 	mov	r4,zero
10008d38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10008d3c:	000b883a 	mov	r5,zero
10008d40:	0009883a 	mov	r4,zero
10008d44:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10008d48:	01414004 	movi	r5,1280
10008d4c:	01006c04 	movi	r4,432
10008d50:	0007d7c0 	call	10007d7c <UsbWrite>

}
10008d54:	0001883a 	nop
10008d58:	e037883a 	mov	sp,fp
10008d5c:	dfc00117 	ldw	ra,4(sp)
10008d60:	df000017 	ldw	fp,0(sp)
10008d64:	dec00204 	addi	sp,sp,8
10008d68:	f800283a 	ret

10008d6c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10008d6c:	defffd04 	addi	sp,sp,-12
10008d70:	dfc00215 	stw	ra,8(sp)
10008d74:	df000115 	stw	fp,4(sp)
10008d78:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10008d7c:	01005104 	movi	r4,324
10008d80:	0007dd40 	call	10007dd4 <UsbRead>
10008d84:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10008d88:	000b883a 	mov	r5,zero
10008d8c:	01005104 	movi	r4,324
10008d90:	0007d7c0 	call	10007d7c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10008d94:	00000d06 	br	10008dcc <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10008d98:	e0bfff0b 	ldhu	r2,-4(fp)
10008d9c:	10000526 	beq	r2,zero,10008db4 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10008da0:	e0bfff0b 	ldhu	r2,-4(fp)
10008da4:	100b883a 	mov	r5,r2
10008da8:	010400b4 	movhi	r4,4098
10008dac:	210af804 	addi	r4,r4,11232
10008db0:	0009e480 	call	10009e48 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10008db4:	01005104 	movi	r4,324
10008db8:	0007dd40 	call	10007dd4 <UsbRead>
10008dbc:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10008dc0:	000b883a 	mov	r5,zero
10008dc4:	01005104 	movi	r4,324
10008dc8:	0007d7c0 	call	10007d7c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10008dcc:	e0bfff0b 	ldhu	r2,-4(fp)
10008dd0:	10840018 	cmpnei	r2,r2,4096
10008dd4:	103ff01e 	bne	r2,zero,10008d98 <__alt_data_end+0xf8008d98>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10008dd8:	e0bfff0b 	ldhu	r2,-4(fp)
}
10008ddc:	e037883a 	mov	sp,fp
10008de0:	dfc00117 	ldw	ra,4(sp)
10008de4:	df000017 	ldw	fp,0(sp)
10008de8:	dec00204 	addi	sp,sp,8
10008dec:	f800283a 	ret

10008df0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10008df0:	defffd04 	addi	sp,sp,-12
10008df4:	dfc00215 	stw	ra,8(sp)
10008df8:	df000115 	stw	fp,4(sp)
10008dfc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10008e00:	010000c4 	movi	r4,3
10008e04:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10008e08:	01005104 	movi	r4,324
10008e0c:	0007dd40 	call	10007dd4 <UsbRead>
10008e10:	10bfffcc 	andi	r2,r2,65535
10008e14:	10840018 	cmpnei	r2,r2,4096
10008e18:	1000091e 	bne	r2,zero,10008e40 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10008e1c:	000b883a 	mov	r5,zero
10008e20:	01005104 	movi	r4,324
10008e24:	0007d7c0 	call	10007d7c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10008e28:	0001883a 	nop
10008e2c:	010000c4 	movi	r4,3
10008e30:	00003640 	call	10000364 <IO_read>
10008e34:	10bfffcc 	andi	r2,r2,65535
10008e38:	1080040c 	andi	r2,r2,16
10008e3c:	103ffb26 	beq	r2,zero,10008e2c <__alt_data_end+0xf8008e2c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10008e40:	01414204 	movi	r5,1288
10008e44:	01000084 	movi	r4,2
10008e48:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10008e4c:	0009883a 	mov	r4,zero
10008e50:	00003640 	call	10000364 <IO_read>
10008e54:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10008e58:	e0bfff0b 	ldhu	r2,-4(fp)
}
10008e5c:	e037883a 	mov	sp,fp
10008e60:	dfc00117 	ldw	ra,4(sp)
10008e64:	df000017 	ldw	fp,0(sp)
10008e68:	dec00204 	addi	sp,sp,8
10008e6c:	f800283a 	ret

10008e70 <UsbPrintMem>:


void UsbPrintMem()
{
10008e70:	defffc04 	addi	sp,sp,-16
10008e74:	dfc00315 	stw	ra,12(sp)
10008e78:	df000215 	stw	fp,8(sp)
10008e7c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10008e80:	01414004 	movi	r5,1280
10008e84:	01000084 	movi	r4,2
10008e88:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
10008e8c:	e03ffe15 	stw	zero,-8(fp)
10008e90:	00000e06 	br	10008ecc <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10008e94:	0009883a 	mov	r4,zero
10008e98:	00003640 	call	10000364 <IO_read>
10008e9c:	10bfffcc 	andi	r2,r2,65535
10008ea0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10008ea4:	e0bffe17 	ldw	r2,-8(fp)
10008ea8:	10814004 	addi	r2,r2,1280
10008eac:	e1bfff17 	ldw	r6,-4(fp)
10008eb0:	100b883a 	mov	r5,r2
10008eb4:	010400b4 	movhi	r4,4098
10008eb8:	210b0004 	addi	r4,r4,11264
10008ebc:	0009e480 	call	10009e48 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10008ec0:	e0bffe17 	ldw	r2,-8(fp)
10008ec4:	10800084 	addi	r2,r2,2
10008ec8:	e0bffe15 	stw	r2,-8(fp)
10008ecc:	e0bffe17 	ldw	r2,-8(fp)
10008ed0:	10803250 	cmplti	r2,r2,201
10008ed4:	103fef1e 	bne	r2,zero,10008e94 <__alt_data_end+0xf8008e94>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10008ed8:	0001883a 	nop
10008edc:	e037883a 	mov	sp,fp
10008ee0:	dfc00117 	ldw	ra,4(sp)
10008ee4:	df000017 	ldw	fp,0(sp)
10008ee8:	dec00204 	addi	sp,sp,8
10008eec:	f800283a 	ret

10008ef0 <__mulsi3>:
10008ef0:	0005883a 	mov	r2,zero
10008ef4:	20000726 	beq	r4,zero,10008f14 <__mulsi3+0x24>
10008ef8:	20c0004c 	andi	r3,r4,1
10008efc:	2008d07a 	srli	r4,r4,1
10008f00:	18000126 	beq	r3,zero,10008f08 <__mulsi3+0x18>
10008f04:	1145883a 	add	r2,r2,r5
10008f08:	294b883a 	add	r5,r5,r5
10008f0c:	203ffa1e 	bne	r4,zero,10008ef8 <__alt_data_end+0xf8008ef8>
10008f10:	f800283a 	ret
10008f14:	f800283a 	ret

10008f18 <__divdf3>:
10008f18:	defff004 	addi	sp,sp,-64
10008f1c:	dc800815 	stw	r18,32(sp)
10008f20:	2824d53a 	srli	r18,r5,20
10008f24:	dd800c15 	stw	r22,48(sp)
10008f28:	282cd7fa 	srli	r22,r5,31
10008f2c:	dc000615 	stw	r16,24(sp)
10008f30:	04000434 	movhi	r16,16
10008f34:	843fffc4 	addi	r16,r16,-1
10008f38:	dfc00f15 	stw	ra,60(sp)
10008f3c:	df000e15 	stw	fp,56(sp)
10008f40:	ddc00d15 	stw	r23,52(sp)
10008f44:	dd400b15 	stw	r21,44(sp)
10008f48:	dd000a15 	stw	r20,40(sp)
10008f4c:	dcc00915 	stw	r19,36(sp)
10008f50:	dc400715 	stw	r17,28(sp)
10008f54:	9481ffcc 	andi	r18,r18,2047
10008f58:	2c20703a 	and	r16,r5,r16
10008f5c:	b2003fcc 	andi	r8,r22,255
10008f60:	90006126 	beq	r18,zero,100090e8 <__divdf3+0x1d0>
10008f64:	0081ffc4 	movi	r2,2047
10008f68:	202b883a 	mov	r21,r4
10008f6c:	90803726 	beq	r18,r2,1000904c <__divdf3+0x134>
10008f70:	80800434 	orhi	r2,r16,16
10008f74:	100490fa 	slli	r2,r2,3
10008f78:	2020d77a 	srli	r16,r4,29
10008f7c:	202a90fa 	slli	r21,r4,3
10008f80:	94bf0044 	addi	r18,r18,-1023
10008f84:	80a0b03a 	or	r16,r16,r2
10008f88:	0013883a 	mov	r9,zero
10008f8c:	000b883a 	mov	r5,zero
10008f90:	3806d53a 	srli	r3,r7,20
10008f94:	382ed7fa 	srli	r23,r7,31
10008f98:	04400434 	movhi	r17,16
10008f9c:	8c7fffc4 	addi	r17,r17,-1
10008fa0:	18c1ffcc 	andi	r3,r3,2047
10008fa4:	3029883a 	mov	r20,r6
10008fa8:	3c62703a 	and	r17,r7,r17
10008fac:	bf003fcc 	andi	fp,r23,255
10008fb0:	18006e26 	beq	r3,zero,1000916c <__divdf3+0x254>
10008fb4:	0081ffc4 	movi	r2,2047
10008fb8:	18806626 	beq	r3,r2,10009154 <__divdf3+0x23c>
10008fbc:	88800434 	orhi	r2,r17,16
10008fc0:	100490fa 	slli	r2,r2,3
10008fc4:	3022d77a 	srli	r17,r6,29
10008fc8:	302890fa 	slli	r20,r6,3
10008fcc:	18ff0044 	addi	r3,r3,-1023
10008fd0:	88a2b03a 	or	r17,r17,r2
10008fd4:	000f883a 	mov	r7,zero
10008fd8:	b5e6f03a 	xor	r19,r22,r23
10008fdc:	3a4cb03a 	or	r6,r7,r9
10008fe0:	008003c4 	movi	r2,15
10008fe4:	9809883a 	mov	r4,r19
10008fe8:	90c7c83a 	sub	r3,r18,r3
10008fec:	9cc03fcc 	andi	r19,r19,255
10008ff0:	11809636 	bltu	r2,r6,1000924c <__divdf3+0x334>
10008ff4:	300c90ba 	slli	r6,r6,2
10008ff8:	00840074 	movhi	r2,4097
10008ffc:	10a40304 	addi	r2,r2,-28660
10009000:	308d883a 	add	r6,r6,r2
10009004:	30800017 	ldw	r2,0(r6)
10009008:	1000683a 	jmp	r2
1000900c:	1000924c 	andi	zero,r2,585
10009010:	10009084 	addi	zero,r2,578
10009014:	1000923c 	xorhi	zero,r2,584
10009018:	10009078 	rdprs	zero,r2,577
1000901c:	1000923c 	xorhi	zero,r2,584
10009020:	10009210 	cmplti	zero,r2,584
10009024:	1000923c 	xorhi	zero,r2,584
10009028:	10009078 	rdprs	zero,r2,577
1000902c:	10009084 	addi	zero,r2,578
10009030:	10009084 	addi	zero,r2,578
10009034:	10009210 	cmplti	zero,r2,584
10009038:	10009078 	rdprs	zero,r2,577
1000903c:	10009068 	cmpgeui	zero,r2,577
10009040:	10009068 	cmpgeui	zero,r2,577
10009044:	10009068 	cmpgeui	zero,r2,577
10009048:	100095d4 	ori	zero,r2,599
1000904c:	2404b03a 	or	r2,r4,r16
10009050:	10006c1e 	bne	r2,zero,10009204 <__divdf3+0x2ec>
10009054:	02400204 	movi	r9,8
10009058:	0021883a 	mov	r16,zero
1000905c:	002b883a 	mov	r21,zero
10009060:	01400084 	movi	r5,2
10009064:	003fca06 	br	10008f90 <__alt_data_end+0xf8008f90>
10009068:	8023883a 	mov	r17,r16
1000906c:	a829883a 	mov	r20,r21
10009070:	4039883a 	mov	fp,r8
10009074:	280f883a 	mov	r7,r5
10009078:	00800084 	movi	r2,2
1000907c:	3881601e 	bne	r7,r2,10009600 <__divdf3+0x6e8>
10009080:	e027883a 	mov	r19,fp
10009084:	9900004c 	andi	r4,r19,1
10009088:	0081ffc4 	movi	r2,2047
1000908c:	0021883a 	mov	r16,zero
10009090:	002b883a 	mov	r21,zero
10009094:	1004953a 	slli	r2,r2,20
10009098:	20c03fcc 	andi	r3,r4,255
1000909c:	01400434 	movhi	r5,16
100090a0:	297fffc4 	addi	r5,r5,-1
100090a4:	180697fa 	slli	r3,r3,31
100090a8:	8160703a 	and	r16,r16,r5
100090ac:	80a0b03a 	or	r16,r16,r2
100090b0:	80c6b03a 	or	r3,r16,r3
100090b4:	a805883a 	mov	r2,r21
100090b8:	dfc00f17 	ldw	ra,60(sp)
100090bc:	df000e17 	ldw	fp,56(sp)
100090c0:	ddc00d17 	ldw	r23,52(sp)
100090c4:	dd800c17 	ldw	r22,48(sp)
100090c8:	dd400b17 	ldw	r21,44(sp)
100090cc:	dd000a17 	ldw	r20,40(sp)
100090d0:	dcc00917 	ldw	r19,36(sp)
100090d4:	dc800817 	ldw	r18,32(sp)
100090d8:	dc400717 	ldw	r17,28(sp)
100090dc:	dc000617 	ldw	r16,24(sp)
100090e0:	dec01004 	addi	sp,sp,64
100090e4:	f800283a 	ret
100090e8:	2404b03a 	or	r2,r4,r16
100090ec:	2023883a 	mov	r17,r4
100090f0:	10003f26 	beq	r2,zero,100091f0 <__divdf3+0x2d8>
100090f4:	80015e26 	beq	r16,zero,10009670 <__divdf3+0x758>
100090f8:	8009883a 	mov	r4,r16
100090fc:	d9800215 	stw	r6,8(sp)
10009100:	d9c00515 	stw	r7,20(sp)
10009104:	da000415 	stw	r8,16(sp)
10009108:	0009a6c0 	call	10009a6c <__clzsi2>
1000910c:	d9800217 	ldw	r6,8(sp)
10009110:	d9c00517 	ldw	r7,20(sp)
10009114:	da000417 	ldw	r8,16(sp)
10009118:	113ffd44 	addi	r4,r2,-11
1000911c:	00c00704 	movi	r3,28
10009120:	19014f16 	blt	r3,r4,10009660 <__divdf3+0x748>
10009124:	00c00744 	movi	r3,29
10009128:	157ffe04 	addi	r21,r2,-8
1000912c:	1907c83a 	sub	r3,r3,r4
10009130:	8560983a 	sll	r16,r16,r21
10009134:	88c6d83a 	srl	r3,r17,r3
10009138:	8d6a983a 	sll	r21,r17,r21
1000913c:	1c20b03a 	or	r16,r3,r16
10009140:	1080fcc4 	addi	r2,r2,1011
10009144:	00a5c83a 	sub	r18,zero,r2
10009148:	0013883a 	mov	r9,zero
1000914c:	000b883a 	mov	r5,zero
10009150:	003f8f06 	br	10008f90 <__alt_data_end+0xf8008f90>
10009154:	3444b03a 	or	r2,r6,r17
10009158:	1000231e 	bne	r2,zero,100091e8 <__divdf3+0x2d0>
1000915c:	0023883a 	mov	r17,zero
10009160:	0029883a 	mov	r20,zero
10009164:	01c00084 	movi	r7,2
10009168:	003f9b06 	br	10008fd8 <__alt_data_end+0xf8008fd8>
1000916c:	3444b03a 	or	r2,r6,r17
10009170:	10001926 	beq	r2,zero,100091d8 <__divdf3+0x2c0>
10009174:	88014b26 	beq	r17,zero,100096a4 <__divdf3+0x78c>
10009178:	8809883a 	mov	r4,r17
1000917c:	d9400115 	stw	r5,4(sp)
10009180:	d9800215 	stw	r6,8(sp)
10009184:	da000415 	stw	r8,16(sp)
10009188:	da400315 	stw	r9,12(sp)
1000918c:	0009a6c0 	call	10009a6c <__clzsi2>
10009190:	d9400117 	ldw	r5,4(sp)
10009194:	d9800217 	ldw	r6,8(sp)
10009198:	da000417 	ldw	r8,16(sp)
1000919c:	da400317 	ldw	r9,12(sp)
100091a0:	113ffd44 	addi	r4,r2,-11
100091a4:	00c00704 	movi	r3,28
100091a8:	19013a16 	blt	r3,r4,10009694 <__divdf3+0x77c>
100091ac:	00c00744 	movi	r3,29
100091b0:	153ffe04 	addi	r20,r2,-8
100091b4:	1907c83a 	sub	r3,r3,r4
100091b8:	8d22983a 	sll	r17,r17,r20
100091bc:	30c6d83a 	srl	r3,r6,r3
100091c0:	3528983a 	sll	r20,r6,r20
100091c4:	1c62b03a 	or	r17,r3,r17
100091c8:	1080fcc4 	addi	r2,r2,1011
100091cc:	0087c83a 	sub	r3,zero,r2
100091d0:	000f883a 	mov	r7,zero
100091d4:	003f8006 	br	10008fd8 <__alt_data_end+0xf8008fd8>
100091d8:	0023883a 	mov	r17,zero
100091dc:	0029883a 	mov	r20,zero
100091e0:	01c00044 	movi	r7,1
100091e4:	003f7c06 	br	10008fd8 <__alt_data_end+0xf8008fd8>
100091e8:	01c000c4 	movi	r7,3
100091ec:	003f7a06 	br	10008fd8 <__alt_data_end+0xf8008fd8>
100091f0:	02400104 	movi	r9,4
100091f4:	0021883a 	mov	r16,zero
100091f8:	002b883a 	mov	r21,zero
100091fc:	01400044 	movi	r5,1
10009200:	003f6306 	br	10008f90 <__alt_data_end+0xf8008f90>
10009204:	02400304 	movi	r9,12
10009208:	014000c4 	movi	r5,3
1000920c:	003f6006 	br	10008f90 <__alt_data_end+0xf8008f90>
10009210:	04000434 	movhi	r16,16
10009214:	0009883a 	mov	r4,zero
10009218:	843fffc4 	addi	r16,r16,-1
1000921c:	057fffc4 	movi	r21,-1
10009220:	0081ffc4 	movi	r2,2047
10009224:	003f9b06 	br	10009094 <__alt_data_end+0xf8009094>
10009228:	00c00044 	movi	r3,1
1000922c:	1887c83a 	sub	r3,r3,r2
10009230:	01000e04 	movi	r4,56
10009234:	20c1530e 	bge	r4,r3,10009784 <__divdf3+0x86c>
10009238:	9900004c 	andi	r4,r19,1
1000923c:	0005883a 	mov	r2,zero
10009240:	0021883a 	mov	r16,zero
10009244:	002b883a 	mov	r21,zero
10009248:	003f9206 	br	10009094 <__alt_data_end+0xf8009094>
1000924c:	8c012e36 	bltu	r17,r16,10009708 <__divdf3+0x7f0>
10009250:	84412c26 	beq	r16,r17,10009704 <__divdf3+0x7ec>
10009254:	a82f883a 	mov	r23,r21
10009258:	18ffffc4 	addi	r3,r3,-1
1000925c:	002b883a 	mov	r21,zero
10009260:	a004d63a 	srli	r2,r20,24
10009264:	8822923a 	slli	r17,r17,8
10009268:	a028923a 	slli	r20,r20,8
1000926c:	8009883a 	mov	r4,r16
10009270:	88acb03a 	or	r22,r17,r2
10009274:	dd000015 	stw	r20,0(sp)
10009278:	b028d43a 	srli	r20,r22,16
1000927c:	d8c00215 	stw	r3,8(sp)
10009280:	b4bfffcc 	andi	r18,r22,65535
10009284:	a00b883a 	mov	r5,r20
10009288:	0009bc80 	call	10009bc8 <__udivsi3>
1000928c:	100b883a 	mov	r5,r2
10009290:	9009883a 	mov	r4,r18
10009294:	1023883a 	mov	r17,r2
10009298:	0008ef00 	call	10008ef0 <__mulsi3>
1000929c:	8009883a 	mov	r4,r16
100092a0:	a00b883a 	mov	r5,r20
100092a4:	1039883a 	mov	fp,r2
100092a8:	0009c2c0 	call	10009c2c <__umodsi3>
100092ac:	1004943a 	slli	r2,r2,16
100092b0:	b808d43a 	srli	r4,r23,16
100092b4:	d8c00217 	ldw	r3,8(sp)
100092b8:	2084b03a 	or	r2,r4,r2
100092bc:	1700062e 	bgeu	r2,fp,100092d8 <__divdf3+0x3c0>
100092c0:	1585883a 	add	r2,r2,r22
100092c4:	893fffc4 	addi	r4,r17,-1
100092c8:	15811d36 	bltu	r2,r22,10009740 <__divdf3+0x828>
100092cc:	17011c2e 	bgeu	r2,fp,10009740 <__divdf3+0x828>
100092d0:	8c7fff84 	addi	r17,r17,-2
100092d4:	1585883a 	add	r2,r2,r22
100092d8:	1739c83a 	sub	fp,r2,fp
100092dc:	a00b883a 	mov	r5,r20
100092e0:	e009883a 	mov	r4,fp
100092e4:	d8c00215 	stw	r3,8(sp)
100092e8:	0009bc80 	call	10009bc8 <__udivsi3>
100092ec:	100b883a 	mov	r5,r2
100092f0:	9009883a 	mov	r4,r18
100092f4:	1021883a 	mov	r16,r2
100092f8:	0008ef00 	call	10008ef0 <__mulsi3>
100092fc:	a00b883a 	mov	r5,r20
10009300:	e009883a 	mov	r4,fp
10009304:	d8800415 	stw	r2,16(sp)
10009308:	0009c2c0 	call	10009c2c <__umodsi3>
1000930c:	1004943a 	slli	r2,r2,16
10009310:	da000417 	ldw	r8,16(sp)
10009314:	bdffffcc 	andi	r23,r23,65535
10009318:	b884b03a 	or	r2,r23,r2
1000931c:	d8c00217 	ldw	r3,8(sp)
10009320:	1200062e 	bgeu	r2,r8,1000933c <__divdf3+0x424>
10009324:	1585883a 	add	r2,r2,r22
10009328:	813fffc4 	addi	r4,r16,-1
1000932c:	15810236 	bltu	r2,r22,10009738 <__divdf3+0x820>
10009330:	1201012e 	bgeu	r2,r8,10009738 <__divdf3+0x820>
10009334:	843fff84 	addi	r16,r16,-2
10009338:	1585883a 	add	r2,r2,r22
1000933c:	8822943a 	slli	r17,r17,16
10009340:	d9800017 	ldw	r6,0(sp)
10009344:	1211c83a 	sub	r8,r2,r8
10009348:	8c22b03a 	or	r17,r17,r16
1000934c:	373fffcc 	andi	fp,r6,65535
10009350:	8abfffcc 	andi	r10,r17,65535
10009354:	8820d43a 	srli	r16,r17,16
10009358:	5009883a 	mov	r4,r10
1000935c:	e00b883a 	mov	r5,fp
10009360:	302ed43a 	srli	r23,r6,16
10009364:	d8c00215 	stw	r3,8(sp)
10009368:	da000415 	stw	r8,16(sp)
1000936c:	da800115 	stw	r10,4(sp)
10009370:	0008ef00 	call	10008ef0 <__mulsi3>
10009374:	800b883a 	mov	r5,r16
10009378:	e009883a 	mov	r4,fp
1000937c:	d8800515 	stw	r2,20(sp)
10009380:	0008ef00 	call	10008ef0 <__mulsi3>
10009384:	8009883a 	mov	r4,r16
10009388:	b80b883a 	mov	r5,r23
1000938c:	d8800315 	stw	r2,12(sp)
10009390:	0008ef00 	call	10008ef0 <__mulsi3>
10009394:	da800117 	ldw	r10,4(sp)
10009398:	b80b883a 	mov	r5,r23
1000939c:	1021883a 	mov	r16,r2
100093a0:	5009883a 	mov	r4,r10
100093a4:	0008ef00 	call	10008ef0 <__mulsi3>
100093a8:	d9c00517 	ldw	r7,20(sp)
100093ac:	da400317 	ldw	r9,12(sp)
100093b0:	d8c00217 	ldw	r3,8(sp)
100093b4:	3808d43a 	srli	r4,r7,16
100093b8:	1245883a 	add	r2,r2,r9
100093bc:	da000417 	ldw	r8,16(sp)
100093c0:	2085883a 	add	r2,r4,r2
100093c4:	1240022e 	bgeu	r2,r9,100093d0 <__divdf3+0x4b8>
100093c8:	01000074 	movhi	r4,1
100093cc:	8121883a 	add	r16,r16,r4
100093d0:	1008d43a 	srli	r4,r2,16
100093d4:	1004943a 	slli	r2,r2,16
100093d8:	39ffffcc 	andi	r7,r7,65535
100093dc:	2409883a 	add	r4,r4,r16
100093e0:	11c5883a 	add	r2,r2,r7
100093e4:	4100bb36 	bltu	r8,r4,100096d4 <__divdf3+0x7bc>
100093e8:	4100d726 	beq	r8,r4,10009748 <__divdf3+0x830>
100093ec:	4109c83a 	sub	r4,r8,r4
100093f0:	a8a1c83a 	sub	r16,r21,r2
100093f4:	ac2b803a 	cmpltu	r21,r21,r16
100093f8:	256bc83a 	sub	r21,r4,r21
100093fc:	b540d926 	beq	r22,r21,10009764 <__divdf3+0x84c>
10009400:	a00b883a 	mov	r5,r20
10009404:	a809883a 	mov	r4,r21
10009408:	d8c00215 	stw	r3,8(sp)
1000940c:	0009bc80 	call	10009bc8 <__udivsi3>
10009410:	100b883a 	mov	r5,r2
10009414:	9009883a 	mov	r4,r18
10009418:	d8800515 	stw	r2,20(sp)
1000941c:	0008ef00 	call	10008ef0 <__mulsi3>
10009420:	a809883a 	mov	r4,r21
10009424:	a00b883a 	mov	r5,r20
10009428:	d8800415 	stw	r2,16(sp)
1000942c:	0009c2c0 	call	10009c2c <__umodsi3>
10009430:	1004943a 	slli	r2,r2,16
10009434:	8008d43a 	srli	r4,r16,16
10009438:	da000417 	ldw	r8,16(sp)
1000943c:	d8c00217 	ldw	r3,8(sp)
10009440:	2084b03a 	or	r2,r4,r2
10009444:	d9c00517 	ldw	r7,20(sp)
10009448:	1200062e 	bgeu	r2,r8,10009464 <__divdf3+0x54c>
1000944c:	1585883a 	add	r2,r2,r22
10009450:	393fffc4 	addi	r4,r7,-1
10009454:	1580c536 	bltu	r2,r22,1000976c <__divdf3+0x854>
10009458:	1200c42e 	bgeu	r2,r8,1000976c <__divdf3+0x854>
1000945c:	39ffff84 	addi	r7,r7,-2
10009460:	1585883a 	add	r2,r2,r22
10009464:	122bc83a 	sub	r21,r2,r8
10009468:	a00b883a 	mov	r5,r20
1000946c:	a809883a 	mov	r4,r21
10009470:	d8c00215 	stw	r3,8(sp)
10009474:	d9c00515 	stw	r7,20(sp)
10009478:	0009bc80 	call	10009bc8 <__udivsi3>
1000947c:	9009883a 	mov	r4,r18
10009480:	100b883a 	mov	r5,r2
10009484:	d8800415 	stw	r2,16(sp)
10009488:	0008ef00 	call	10008ef0 <__mulsi3>
1000948c:	a809883a 	mov	r4,r21
10009490:	a00b883a 	mov	r5,r20
10009494:	1025883a 	mov	r18,r2
10009498:	0009c2c0 	call	10009c2c <__umodsi3>
1000949c:	1004943a 	slli	r2,r2,16
100094a0:	813fffcc 	andi	r4,r16,65535
100094a4:	d8c00217 	ldw	r3,8(sp)
100094a8:	20a0b03a 	or	r16,r4,r2
100094ac:	d9c00517 	ldw	r7,20(sp)
100094b0:	da000417 	ldw	r8,16(sp)
100094b4:	8480062e 	bgeu	r16,r18,100094d0 <__divdf3+0x5b8>
100094b8:	85a1883a 	add	r16,r16,r22
100094bc:	40bfffc4 	addi	r2,r8,-1
100094c0:	8580ac36 	bltu	r16,r22,10009774 <__divdf3+0x85c>
100094c4:	8480ab2e 	bgeu	r16,r18,10009774 <__divdf3+0x85c>
100094c8:	423fff84 	addi	r8,r8,-2
100094cc:	85a1883a 	add	r16,r16,r22
100094d0:	3804943a 	slli	r2,r7,16
100094d4:	84a1c83a 	sub	r16,r16,r18
100094d8:	e009883a 	mov	r4,fp
100094dc:	1228b03a 	or	r20,r2,r8
100094e0:	a1ffffcc 	andi	r7,r20,65535
100094e4:	a024d43a 	srli	r18,r20,16
100094e8:	380b883a 	mov	r5,r7
100094ec:	d8c00215 	stw	r3,8(sp)
100094f0:	d9c00515 	stw	r7,20(sp)
100094f4:	0008ef00 	call	10008ef0 <__mulsi3>
100094f8:	900b883a 	mov	r5,r18
100094fc:	e009883a 	mov	r4,fp
10009500:	102b883a 	mov	r21,r2
10009504:	0008ef00 	call	10008ef0 <__mulsi3>
10009508:	900b883a 	mov	r5,r18
1000950c:	b809883a 	mov	r4,r23
10009510:	1039883a 	mov	fp,r2
10009514:	0008ef00 	call	10008ef0 <__mulsi3>
10009518:	d9c00517 	ldw	r7,20(sp)
1000951c:	b80b883a 	mov	r5,r23
10009520:	1025883a 	mov	r18,r2
10009524:	3809883a 	mov	r4,r7
10009528:	0008ef00 	call	10008ef0 <__mulsi3>
1000952c:	a808d43a 	srli	r4,r21,16
10009530:	1705883a 	add	r2,r2,fp
10009534:	d8c00217 	ldw	r3,8(sp)
10009538:	2085883a 	add	r2,r4,r2
1000953c:	1700022e 	bgeu	r2,fp,10009548 <__divdf3+0x630>
10009540:	01000074 	movhi	r4,1
10009544:	9125883a 	add	r18,r18,r4
10009548:	1008d43a 	srli	r4,r2,16
1000954c:	1004943a 	slli	r2,r2,16
10009550:	ad7fffcc 	andi	r21,r21,65535
10009554:	2489883a 	add	r4,r4,r18
10009558:	1545883a 	add	r2,r2,r21
1000955c:	81003836 	bltu	r16,r4,10009640 <__divdf3+0x728>
10009560:	81003626 	beq	r16,r4,1000963c <__divdf3+0x724>
10009564:	a5000054 	ori	r20,r20,1
10009568:	1880ffc4 	addi	r2,r3,1023
1000956c:	00bf2e0e 	bge	zero,r2,10009228 <__alt_data_end+0xf8009228>
10009570:	a10001cc 	andi	r4,r20,7
10009574:	20000726 	beq	r4,zero,10009594 <__divdf3+0x67c>
10009578:	a10003cc 	andi	r4,r20,15
1000957c:	01400104 	movi	r5,4
10009580:	21400426 	beq	r4,r5,10009594 <__divdf3+0x67c>
10009584:	a149883a 	add	r4,r20,r5
10009588:	2529803a 	cmpltu	r20,r4,r20
1000958c:	8d23883a 	add	r17,r17,r20
10009590:	2029883a 	mov	r20,r4
10009594:	8900402c 	andhi	r4,r17,256
10009598:	20000426 	beq	r4,zero,100095ac <__divdf3+0x694>
1000959c:	18810004 	addi	r2,r3,1024
100095a0:	00ffc034 	movhi	r3,65280
100095a4:	18ffffc4 	addi	r3,r3,-1
100095a8:	88e2703a 	and	r17,r17,r3
100095ac:	00c1ff84 	movi	r3,2046
100095b0:	18beb416 	blt	r3,r2,10009084 <__alt_data_end+0xf8009084>
100095b4:	a028d0fa 	srli	r20,r20,3
100095b8:	882a977a 	slli	r21,r17,29
100095bc:	8820927a 	slli	r16,r17,9
100095c0:	1081ffcc 	andi	r2,r2,2047
100095c4:	ad2ab03a 	or	r21,r21,r20
100095c8:	8020d33a 	srli	r16,r16,12
100095cc:	9900004c 	andi	r4,r19,1
100095d0:	003eb006 	br	10009094 <__alt_data_end+0xf8009094>
100095d4:	8080022c 	andhi	r2,r16,8
100095d8:	10001226 	beq	r2,zero,10009624 <__divdf3+0x70c>
100095dc:	8880022c 	andhi	r2,r17,8
100095e0:	1000101e 	bne	r2,zero,10009624 <__divdf3+0x70c>
100095e4:	00800434 	movhi	r2,16
100095e8:	8c000234 	orhi	r16,r17,8
100095ec:	10bfffc4 	addi	r2,r2,-1
100095f0:	b809883a 	mov	r4,r23
100095f4:	80a0703a 	and	r16,r16,r2
100095f8:	a02b883a 	mov	r21,r20
100095fc:	003f0806 	br	10009220 <__alt_data_end+0xf8009220>
10009600:	008000c4 	movi	r2,3
10009604:	3880b126 	beq	r7,r2,100098cc <__divdf3+0x9b4>
10009608:	00800044 	movi	r2,1
1000960c:	38805b1e 	bne	r7,r2,1000977c <__divdf3+0x864>
10009610:	e009883a 	mov	r4,fp
10009614:	0005883a 	mov	r2,zero
10009618:	0021883a 	mov	r16,zero
1000961c:	002b883a 	mov	r21,zero
10009620:	003e9c06 	br	10009094 <__alt_data_end+0xf8009094>
10009624:	00800434 	movhi	r2,16
10009628:	84000234 	orhi	r16,r16,8
1000962c:	10bfffc4 	addi	r2,r2,-1
10009630:	b009883a 	mov	r4,r22
10009634:	80a0703a 	and	r16,r16,r2
10009638:	003ef906 	br	10009220 <__alt_data_end+0xf8009220>
1000963c:	103fca26 	beq	r2,zero,10009568 <__alt_data_end+0xf8009568>
10009640:	b421883a 	add	r16,r22,r16
10009644:	a17fffc4 	addi	r5,r20,-1
10009648:	8580422e 	bgeu	r16,r22,10009754 <__divdf3+0x83c>
1000964c:	2829883a 	mov	r20,r5
10009650:	813fc41e 	bne	r16,r4,10009564 <__alt_data_end+0xf8009564>
10009654:	d9800017 	ldw	r6,0(sp)
10009658:	30bfc21e 	bne	r6,r2,10009564 <__alt_data_end+0xf8009564>
1000965c:	003fc206 	br	10009568 <__alt_data_end+0xf8009568>
10009660:	143ff604 	addi	r16,r2,-40
10009664:	8c20983a 	sll	r16,r17,r16
10009668:	002b883a 	mov	r21,zero
1000966c:	003eb406 	br	10009140 <__alt_data_end+0xf8009140>
10009670:	d9800215 	stw	r6,8(sp)
10009674:	d9c00515 	stw	r7,20(sp)
10009678:	da000415 	stw	r8,16(sp)
1000967c:	0009a6c0 	call	10009a6c <__clzsi2>
10009680:	10800804 	addi	r2,r2,32
10009684:	da000417 	ldw	r8,16(sp)
10009688:	d9c00517 	ldw	r7,20(sp)
1000968c:	d9800217 	ldw	r6,8(sp)
10009690:	003ea106 	br	10009118 <__alt_data_end+0xf8009118>
10009694:	147ff604 	addi	r17,r2,-40
10009698:	3462983a 	sll	r17,r6,r17
1000969c:	0029883a 	mov	r20,zero
100096a0:	003ec906 	br	100091c8 <__alt_data_end+0xf80091c8>
100096a4:	3009883a 	mov	r4,r6
100096a8:	d9400115 	stw	r5,4(sp)
100096ac:	d9800215 	stw	r6,8(sp)
100096b0:	da000415 	stw	r8,16(sp)
100096b4:	da400315 	stw	r9,12(sp)
100096b8:	0009a6c0 	call	10009a6c <__clzsi2>
100096bc:	10800804 	addi	r2,r2,32
100096c0:	da400317 	ldw	r9,12(sp)
100096c4:	da000417 	ldw	r8,16(sp)
100096c8:	d9800217 	ldw	r6,8(sp)
100096cc:	d9400117 	ldw	r5,4(sp)
100096d0:	003eb306 	br	100091a0 <__alt_data_end+0xf80091a0>
100096d4:	d9800017 	ldw	r6,0(sp)
100096d8:	a9ab883a 	add	r21,r21,r6
100096dc:	a98b803a 	cmpltu	r5,r21,r6
100096e0:	2d8b883a 	add	r5,r5,r22
100096e4:	2a11883a 	add	r8,r5,r8
100096e8:	897fffc4 	addi	r5,r17,-1
100096ec:	b2000c2e 	bgeu	r22,r8,10009720 <__divdf3+0x808>
100096f0:	41003f36 	bltu	r8,r4,100097f0 <__divdf3+0x8d8>
100096f4:	22006c26 	beq	r4,r8,100098a8 <__divdf3+0x990>
100096f8:	4109c83a 	sub	r4,r8,r4
100096fc:	2823883a 	mov	r17,r5
10009700:	003f3b06 	br	100093f0 <__alt_data_end+0xf80093f0>
10009704:	ad3ed336 	bltu	r21,r20,10009254 <__alt_data_end+0xf8009254>
10009708:	a804d07a 	srli	r2,r21,1
1000970c:	802e97fa 	slli	r23,r16,31
10009710:	a82a97fa 	slli	r21,r21,31
10009714:	8020d07a 	srli	r16,r16,1
10009718:	b8aeb03a 	or	r23,r23,r2
1000971c:	003ed006 	br	10009260 <__alt_data_end+0xf8009260>
10009720:	b23ff51e 	bne	r22,r8,100096f8 <__alt_data_end+0xf80096f8>
10009724:	d9800017 	ldw	r6,0(sp)
10009728:	a9bff12e 	bgeu	r21,r6,100096f0 <__alt_data_end+0xf80096f0>
1000972c:	b109c83a 	sub	r4,r22,r4
10009730:	2823883a 	mov	r17,r5
10009734:	003f2e06 	br	100093f0 <__alt_data_end+0xf80093f0>
10009738:	2021883a 	mov	r16,r4
1000973c:	003eff06 	br	1000933c <__alt_data_end+0xf800933c>
10009740:	2023883a 	mov	r17,r4
10009744:	003ee406 	br	100092d8 <__alt_data_end+0xf80092d8>
10009748:	a8bfe236 	bltu	r21,r2,100096d4 <__alt_data_end+0xf80096d4>
1000974c:	0009883a 	mov	r4,zero
10009750:	003f2706 	br	100093f0 <__alt_data_end+0xf80093f0>
10009754:	81002d36 	bltu	r16,r4,1000980c <__divdf3+0x8f4>
10009758:	24005626 	beq	r4,r16,100098b4 <__divdf3+0x99c>
1000975c:	2829883a 	mov	r20,r5
10009760:	003f8006 	br	10009564 <__alt_data_end+0xf8009564>
10009764:	053fffc4 	movi	r20,-1
10009768:	003f7f06 	br	10009568 <__alt_data_end+0xf8009568>
1000976c:	200f883a 	mov	r7,r4
10009770:	003f3c06 	br	10009464 <__alt_data_end+0xf8009464>
10009774:	1011883a 	mov	r8,r2
10009778:	003f5506 	br	100094d0 <__alt_data_end+0xf80094d0>
1000977c:	e027883a 	mov	r19,fp
10009780:	003f7906 	br	10009568 <__alt_data_end+0xf8009568>
10009784:	010007c4 	movi	r4,31
10009788:	20c02816 	blt	r4,r3,1000982c <__divdf3+0x914>
1000978c:	00800804 	movi	r2,32
10009790:	10c5c83a 	sub	r2,r2,r3
10009794:	888a983a 	sll	r5,r17,r2
10009798:	a0c8d83a 	srl	r4,r20,r3
1000979c:	a084983a 	sll	r2,r20,r2
100097a0:	88e2d83a 	srl	r17,r17,r3
100097a4:	2906b03a 	or	r3,r5,r4
100097a8:	1004c03a 	cmpne	r2,r2,zero
100097ac:	1886b03a 	or	r3,r3,r2
100097b0:	188001cc 	andi	r2,r3,7
100097b4:	10000726 	beq	r2,zero,100097d4 <__divdf3+0x8bc>
100097b8:	188003cc 	andi	r2,r3,15
100097bc:	01000104 	movi	r4,4
100097c0:	11000426 	beq	r2,r4,100097d4 <__divdf3+0x8bc>
100097c4:	1805883a 	mov	r2,r3
100097c8:	10c00104 	addi	r3,r2,4
100097cc:	1885803a 	cmpltu	r2,r3,r2
100097d0:	88a3883a 	add	r17,r17,r2
100097d4:	8880202c 	andhi	r2,r17,128
100097d8:	10002926 	beq	r2,zero,10009880 <__divdf3+0x968>
100097dc:	9900004c 	andi	r4,r19,1
100097e0:	00800044 	movi	r2,1
100097e4:	0021883a 	mov	r16,zero
100097e8:	002b883a 	mov	r21,zero
100097ec:	003e2906 	br	10009094 <__alt_data_end+0xf8009094>
100097f0:	d9800017 	ldw	r6,0(sp)
100097f4:	8c7fff84 	addi	r17,r17,-2
100097f8:	a9ab883a 	add	r21,r21,r6
100097fc:	a98b803a 	cmpltu	r5,r21,r6
10009800:	2d8b883a 	add	r5,r5,r22
10009804:	2a11883a 	add	r8,r5,r8
10009808:	003ef806 	br	100093ec <__alt_data_end+0xf80093ec>
1000980c:	d9800017 	ldw	r6,0(sp)
10009810:	318f883a 	add	r7,r6,r6
10009814:	398b803a 	cmpltu	r5,r7,r6
10009818:	2d8d883a 	add	r6,r5,r22
1000981c:	81a1883a 	add	r16,r16,r6
10009820:	a17fff84 	addi	r5,r20,-2
10009824:	d9c00015 	stw	r7,0(sp)
10009828:	003f8806 	br	1000964c <__alt_data_end+0xf800964c>
1000982c:	013ff844 	movi	r4,-31
10009830:	2085c83a 	sub	r2,r4,r2
10009834:	8888d83a 	srl	r4,r17,r2
10009838:	00800804 	movi	r2,32
1000983c:	18802126 	beq	r3,r2,100098c4 <__divdf3+0x9ac>
10009840:	04001004 	movi	r16,64
10009844:	80c7c83a 	sub	r3,r16,r3
10009848:	88e0983a 	sll	r16,r17,r3
1000984c:	8504b03a 	or	r2,r16,r20
10009850:	1004c03a 	cmpne	r2,r2,zero
10009854:	2084b03a 	or	r2,r4,r2
10009858:	144001cc 	andi	r17,r2,7
1000985c:	88000d1e 	bne	r17,zero,10009894 <__divdf3+0x97c>
10009860:	0021883a 	mov	r16,zero
10009864:	102ad0fa 	srli	r21,r2,3
10009868:	9900004c 	andi	r4,r19,1
1000986c:	0005883a 	mov	r2,zero
10009870:	ac6ab03a 	or	r21,r21,r17
10009874:	003e0706 	br	10009094 <__alt_data_end+0xf8009094>
10009878:	1007883a 	mov	r3,r2
1000987c:	0023883a 	mov	r17,zero
10009880:	8820927a 	slli	r16,r17,9
10009884:	1805883a 	mov	r2,r3
10009888:	8822977a 	slli	r17,r17,29
1000988c:	8020d33a 	srli	r16,r16,12
10009890:	003ff406 	br	10009864 <__alt_data_end+0xf8009864>
10009894:	10c003cc 	andi	r3,r2,15
10009898:	01000104 	movi	r4,4
1000989c:	193ff626 	beq	r3,r4,10009878 <__alt_data_end+0xf8009878>
100098a0:	0023883a 	mov	r17,zero
100098a4:	003fc806 	br	100097c8 <__alt_data_end+0xf80097c8>
100098a8:	a8bfd136 	bltu	r21,r2,100097f0 <__alt_data_end+0xf80097f0>
100098ac:	2823883a 	mov	r17,r5
100098b0:	003fa606 	br	1000974c <__alt_data_end+0xf800974c>
100098b4:	d9800017 	ldw	r6,0(sp)
100098b8:	30bfd436 	bltu	r6,r2,1000980c <__alt_data_end+0xf800980c>
100098bc:	2829883a 	mov	r20,r5
100098c0:	003f6406 	br	10009654 <__alt_data_end+0xf8009654>
100098c4:	0021883a 	mov	r16,zero
100098c8:	003fe006 	br	1000984c <__alt_data_end+0xf800984c>
100098cc:	00800434 	movhi	r2,16
100098d0:	8c000234 	orhi	r16,r17,8
100098d4:	10bfffc4 	addi	r2,r2,-1
100098d8:	e009883a 	mov	r4,fp
100098dc:	80a0703a 	and	r16,r16,r2
100098e0:	a02b883a 	mov	r21,r20
100098e4:	003e4e06 	br	10009220 <__alt_data_end+0xf8009220>

100098e8 <__floatsidf>:
100098e8:	defffd04 	addi	sp,sp,-12
100098ec:	dfc00215 	stw	ra,8(sp)
100098f0:	dc400115 	stw	r17,4(sp)
100098f4:	dc000015 	stw	r16,0(sp)
100098f8:	20002b26 	beq	r4,zero,100099a8 <__floatsidf+0xc0>
100098fc:	2023883a 	mov	r17,r4
10009900:	2020d7fa 	srli	r16,r4,31
10009904:	20002d16 	blt	r4,zero,100099bc <__floatsidf+0xd4>
10009908:	8809883a 	mov	r4,r17
1000990c:	0009a6c0 	call	10009a6c <__clzsi2>
10009910:	01410784 	movi	r5,1054
10009914:	288bc83a 	sub	r5,r5,r2
10009918:	01010cc4 	movi	r4,1075
1000991c:	2149c83a 	sub	r4,r4,r5
10009920:	00c007c4 	movi	r3,31
10009924:	1900160e 	bge	r3,r4,10009980 <__floatsidf+0x98>
10009928:	00c104c4 	movi	r3,1043
1000992c:	1947c83a 	sub	r3,r3,r5
10009930:	88c6983a 	sll	r3,r17,r3
10009934:	00800434 	movhi	r2,16
10009938:	10bfffc4 	addi	r2,r2,-1
1000993c:	1886703a 	and	r3,r3,r2
10009940:	2941ffcc 	andi	r5,r5,2047
10009944:	800d883a 	mov	r6,r16
10009948:	0005883a 	mov	r2,zero
1000994c:	280a953a 	slli	r5,r5,20
10009950:	31803fcc 	andi	r6,r6,255
10009954:	01000434 	movhi	r4,16
10009958:	300c97fa 	slli	r6,r6,31
1000995c:	213fffc4 	addi	r4,r4,-1
10009960:	1906703a 	and	r3,r3,r4
10009964:	1946b03a 	or	r3,r3,r5
10009968:	1986b03a 	or	r3,r3,r6
1000996c:	dfc00217 	ldw	ra,8(sp)
10009970:	dc400117 	ldw	r17,4(sp)
10009974:	dc000017 	ldw	r16,0(sp)
10009978:	dec00304 	addi	sp,sp,12
1000997c:	f800283a 	ret
10009980:	00c002c4 	movi	r3,11
10009984:	1887c83a 	sub	r3,r3,r2
10009988:	88c6d83a 	srl	r3,r17,r3
1000998c:	8904983a 	sll	r2,r17,r4
10009990:	01000434 	movhi	r4,16
10009994:	213fffc4 	addi	r4,r4,-1
10009998:	2941ffcc 	andi	r5,r5,2047
1000999c:	1906703a 	and	r3,r3,r4
100099a0:	800d883a 	mov	r6,r16
100099a4:	003fe906 	br	1000994c <__alt_data_end+0xf800994c>
100099a8:	000d883a 	mov	r6,zero
100099ac:	000b883a 	mov	r5,zero
100099b0:	0007883a 	mov	r3,zero
100099b4:	0005883a 	mov	r2,zero
100099b8:	003fe406 	br	1000994c <__alt_data_end+0xf800994c>
100099bc:	0123c83a 	sub	r17,zero,r4
100099c0:	003fd106 	br	10009908 <__alt_data_end+0xf8009908>

100099c4 <__floatunsidf>:
100099c4:	defffe04 	addi	sp,sp,-8
100099c8:	dc000015 	stw	r16,0(sp)
100099cc:	dfc00115 	stw	ra,4(sp)
100099d0:	2021883a 	mov	r16,r4
100099d4:	20002226 	beq	r4,zero,10009a60 <__floatunsidf+0x9c>
100099d8:	0009a6c0 	call	10009a6c <__clzsi2>
100099dc:	01010784 	movi	r4,1054
100099e0:	2089c83a 	sub	r4,r4,r2
100099e4:	01810cc4 	movi	r6,1075
100099e8:	310dc83a 	sub	r6,r6,r4
100099ec:	00c007c4 	movi	r3,31
100099f0:	1980120e 	bge	r3,r6,10009a3c <__floatunsidf+0x78>
100099f4:	00c104c4 	movi	r3,1043
100099f8:	1907c83a 	sub	r3,r3,r4
100099fc:	80ca983a 	sll	r5,r16,r3
10009a00:	00800434 	movhi	r2,16
10009a04:	10bfffc4 	addi	r2,r2,-1
10009a08:	2101ffcc 	andi	r4,r4,2047
10009a0c:	0021883a 	mov	r16,zero
10009a10:	288a703a 	and	r5,r5,r2
10009a14:	2008953a 	slli	r4,r4,20
10009a18:	00c00434 	movhi	r3,16
10009a1c:	18ffffc4 	addi	r3,r3,-1
10009a20:	28c6703a 	and	r3,r5,r3
10009a24:	8005883a 	mov	r2,r16
10009a28:	1906b03a 	or	r3,r3,r4
10009a2c:	dfc00117 	ldw	ra,4(sp)
10009a30:	dc000017 	ldw	r16,0(sp)
10009a34:	dec00204 	addi	sp,sp,8
10009a38:	f800283a 	ret
10009a3c:	00c002c4 	movi	r3,11
10009a40:	188bc83a 	sub	r5,r3,r2
10009a44:	814ad83a 	srl	r5,r16,r5
10009a48:	00c00434 	movhi	r3,16
10009a4c:	18ffffc4 	addi	r3,r3,-1
10009a50:	81a0983a 	sll	r16,r16,r6
10009a54:	2101ffcc 	andi	r4,r4,2047
10009a58:	28ca703a 	and	r5,r5,r3
10009a5c:	003fed06 	br	10009a14 <__alt_data_end+0xf8009a14>
10009a60:	0009883a 	mov	r4,zero
10009a64:	000b883a 	mov	r5,zero
10009a68:	003fea06 	br	10009a14 <__alt_data_end+0xf8009a14>

10009a6c <__clzsi2>:
10009a6c:	00bfffd4 	movui	r2,65535
10009a70:	11000536 	bltu	r2,r4,10009a88 <__clzsi2+0x1c>
10009a74:	00803fc4 	movi	r2,255
10009a78:	11000f36 	bltu	r2,r4,10009ab8 <__clzsi2+0x4c>
10009a7c:	00800804 	movi	r2,32
10009a80:	0007883a 	mov	r3,zero
10009a84:	00000506 	br	10009a9c <__clzsi2+0x30>
10009a88:	00804034 	movhi	r2,256
10009a8c:	10bfffc4 	addi	r2,r2,-1
10009a90:	11000c2e 	bgeu	r2,r4,10009ac4 <__clzsi2+0x58>
10009a94:	00800204 	movi	r2,8
10009a98:	00c00604 	movi	r3,24
10009a9c:	20c8d83a 	srl	r4,r4,r3
10009aa0:	00c400b4 	movhi	r3,4098
10009aa4:	18cb0444 	addi	r3,r3,11281
10009aa8:	1909883a 	add	r4,r3,r4
10009aac:	20c00003 	ldbu	r3,0(r4)
10009ab0:	10c5c83a 	sub	r2,r2,r3
10009ab4:	f800283a 	ret
10009ab8:	00800604 	movi	r2,24
10009abc:	00c00204 	movi	r3,8
10009ac0:	003ff606 	br	10009a9c <__alt_data_end+0xf8009a9c>
10009ac4:	00800404 	movi	r2,16
10009ac8:	1007883a 	mov	r3,r2
10009acc:	003ff306 	br	10009a9c <__alt_data_end+0xf8009a9c>

10009ad0 <__divsi3>:
10009ad0:	20001b16 	blt	r4,zero,10009b40 <__divsi3+0x70>
10009ad4:	000f883a 	mov	r7,zero
10009ad8:	28001616 	blt	r5,zero,10009b34 <__divsi3+0x64>
10009adc:	200d883a 	mov	r6,r4
10009ae0:	29001a2e 	bgeu	r5,r4,10009b4c <__divsi3+0x7c>
10009ae4:	00800804 	movi	r2,32
10009ae8:	00c00044 	movi	r3,1
10009aec:	00000106 	br	10009af4 <__divsi3+0x24>
10009af0:	10000d26 	beq	r2,zero,10009b28 <__divsi3+0x58>
10009af4:	294b883a 	add	r5,r5,r5
10009af8:	10bfffc4 	addi	r2,r2,-1
10009afc:	18c7883a 	add	r3,r3,r3
10009b00:	293ffb36 	bltu	r5,r4,10009af0 <__alt_data_end+0xf8009af0>
10009b04:	0005883a 	mov	r2,zero
10009b08:	18000726 	beq	r3,zero,10009b28 <__divsi3+0x58>
10009b0c:	0005883a 	mov	r2,zero
10009b10:	31400236 	bltu	r6,r5,10009b1c <__divsi3+0x4c>
10009b14:	314dc83a 	sub	r6,r6,r5
10009b18:	10c4b03a 	or	r2,r2,r3
10009b1c:	1806d07a 	srli	r3,r3,1
10009b20:	280ad07a 	srli	r5,r5,1
10009b24:	183ffa1e 	bne	r3,zero,10009b10 <__alt_data_end+0xf8009b10>
10009b28:	38000126 	beq	r7,zero,10009b30 <__divsi3+0x60>
10009b2c:	0085c83a 	sub	r2,zero,r2
10009b30:	f800283a 	ret
10009b34:	014bc83a 	sub	r5,zero,r5
10009b38:	39c0005c 	xori	r7,r7,1
10009b3c:	003fe706 	br	10009adc <__alt_data_end+0xf8009adc>
10009b40:	0109c83a 	sub	r4,zero,r4
10009b44:	01c00044 	movi	r7,1
10009b48:	003fe306 	br	10009ad8 <__alt_data_end+0xf8009ad8>
10009b4c:	00c00044 	movi	r3,1
10009b50:	003fee06 	br	10009b0c <__alt_data_end+0xf8009b0c>

10009b54 <__modsi3>:
10009b54:	20001716 	blt	r4,zero,10009bb4 <__modsi3+0x60>
10009b58:	000f883a 	mov	r7,zero
10009b5c:	2005883a 	mov	r2,r4
10009b60:	28001216 	blt	r5,zero,10009bac <__modsi3+0x58>
10009b64:	2900162e 	bgeu	r5,r4,10009bc0 <__modsi3+0x6c>
10009b68:	01800804 	movi	r6,32
10009b6c:	00c00044 	movi	r3,1
10009b70:	00000106 	br	10009b78 <__modsi3+0x24>
10009b74:	30000a26 	beq	r6,zero,10009ba0 <__modsi3+0x4c>
10009b78:	294b883a 	add	r5,r5,r5
10009b7c:	31bfffc4 	addi	r6,r6,-1
10009b80:	18c7883a 	add	r3,r3,r3
10009b84:	293ffb36 	bltu	r5,r4,10009b74 <__alt_data_end+0xf8009b74>
10009b88:	18000526 	beq	r3,zero,10009ba0 <__modsi3+0x4c>
10009b8c:	1806d07a 	srli	r3,r3,1
10009b90:	11400136 	bltu	r2,r5,10009b98 <__modsi3+0x44>
10009b94:	1145c83a 	sub	r2,r2,r5
10009b98:	280ad07a 	srli	r5,r5,1
10009b9c:	183ffb1e 	bne	r3,zero,10009b8c <__alt_data_end+0xf8009b8c>
10009ba0:	38000126 	beq	r7,zero,10009ba8 <__modsi3+0x54>
10009ba4:	0085c83a 	sub	r2,zero,r2
10009ba8:	f800283a 	ret
10009bac:	014bc83a 	sub	r5,zero,r5
10009bb0:	003fec06 	br	10009b64 <__alt_data_end+0xf8009b64>
10009bb4:	0109c83a 	sub	r4,zero,r4
10009bb8:	01c00044 	movi	r7,1
10009bbc:	003fe706 	br	10009b5c <__alt_data_end+0xf8009b5c>
10009bc0:	00c00044 	movi	r3,1
10009bc4:	003ff106 	br	10009b8c <__alt_data_end+0xf8009b8c>

10009bc8 <__udivsi3>:
10009bc8:	200d883a 	mov	r6,r4
10009bcc:	2900152e 	bgeu	r5,r4,10009c24 <__udivsi3+0x5c>
10009bd0:	28001416 	blt	r5,zero,10009c24 <__udivsi3+0x5c>
10009bd4:	00800804 	movi	r2,32
10009bd8:	00c00044 	movi	r3,1
10009bdc:	00000206 	br	10009be8 <__udivsi3+0x20>
10009be0:	10000e26 	beq	r2,zero,10009c1c <__udivsi3+0x54>
10009be4:	28000516 	blt	r5,zero,10009bfc <__udivsi3+0x34>
10009be8:	294b883a 	add	r5,r5,r5
10009bec:	10bfffc4 	addi	r2,r2,-1
10009bf0:	18c7883a 	add	r3,r3,r3
10009bf4:	293ffa36 	bltu	r5,r4,10009be0 <__alt_data_end+0xf8009be0>
10009bf8:	18000826 	beq	r3,zero,10009c1c <__udivsi3+0x54>
10009bfc:	0005883a 	mov	r2,zero
10009c00:	31400236 	bltu	r6,r5,10009c0c <__udivsi3+0x44>
10009c04:	314dc83a 	sub	r6,r6,r5
10009c08:	10c4b03a 	or	r2,r2,r3
10009c0c:	1806d07a 	srli	r3,r3,1
10009c10:	280ad07a 	srli	r5,r5,1
10009c14:	183ffa1e 	bne	r3,zero,10009c00 <__alt_data_end+0xf8009c00>
10009c18:	f800283a 	ret
10009c1c:	0005883a 	mov	r2,zero
10009c20:	f800283a 	ret
10009c24:	00c00044 	movi	r3,1
10009c28:	003ff406 	br	10009bfc <__alt_data_end+0xf8009bfc>

10009c2c <__umodsi3>:
10009c2c:	2005883a 	mov	r2,r4
10009c30:	2900122e 	bgeu	r5,r4,10009c7c <__umodsi3+0x50>
10009c34:	28001116 	blt	r5,zero,10009c7c <__umodsi3+0x50>
10009c38:	01800804 	movi	r6,32
10009c3c:	00c00044 	movi	r3,1
10009c40:	00000206 	br	10009c4c <__umodsi3+0x20>
10009c44:	30000c26 	beq	r6,zero,10009c78 <__umodsi3+0x4c>
10009c48:	28000516 	blt	r5,zero,10009c60 <__umodsi3+0x34>
10009c4c:	294b883a 	add	r5,r5,r5
10009c50:	31bfffc4 	addi	r6,r6,-1
10009c54:	18c7883a 	add	r3,r3,r3
10009c58:	293ffa36 	bltu	r5,r4,10009c44 <__alt_data_end+0xf8009c44>
10009c5c:	18000626 	beq	r3,zero,10009c78 <__umodsi3+0x4c>
10009c60:	1806d07a 	srli	r3,r3,1
10009c64:	11400136 	bltu	r2,r5,10009c6c <__umodsi3+0x40>
10009c68:	1145c83a 	sub	r2,r2,r5
10009c6c:	280ad07a 	srli	r5,r5,1
10009c70:	183ffb1e 	bne	r3,zero,10009c60 <__alt_data_end+0xf8009c60>
10009c74:	f800283a 	ret
10009c78:	f800283a 	ret
10009c7c:	00c00044 	movi	r3,1
10009c80:	003ff706 	br	10009c60 <__alt_data_end+0xf8009c60>

10009c84 <clock>:
10009c84:	008400b4 	movhi	r2,4098
10009c88:	10951604 	addi	r2,r2,21592
10009c8c:	11000017 	ldw	r4,0(r2)
10009c90:	defffb04 	addi	sp,sp,-20
10009c94:	d80b883a 	mov	r5,sp
10009c98:	dfc00415 	stw	ra,16(sp)
10009c9c:	000a07c0 	call	1000a07c <_times_r>
10009ca0:	00ffffc4 	movi	r3,-1
10009ca4:	10c00726 	beq	r2,r3,10009cc4 <clock+0x40>
10009ca8:	d8c00017 	ldw	r3,0(sp)
10009cac:	d8800117 	ldw	r2,4(sp)
10009cb0:	1885883a 	add	r2,r3,r2
10009cb4:	d8c00217 	ldw	r3,8(sp)
10009cb8:	10c7883a 	add	r3,r2,r3
10009cbc:	d8800317 	ldw	r2,12(sp)
10009cc0:	1885883a 	add	r2,r3,r2
10009cc4:	dfc00417 	ldw	ra,16(sp)
10009cc8:	dec00504 	addi	sp,sp,20
10009ccc:	f800283a 	ret

10009cd0 <memcpy>:
10009cd0:	defffd04 	addi	sp,sp,-12
10009cd4:	dfc00215 	stw	ra,8(sp)
10009cd8:	dc400115 	stw	r17,4(sp)
10009cdc:	dc000015 	stw	r16,0(sp)
10009ce0:	00c003c4 	movi	r3,15
10009ce4:	2005883a 	mov	r2,r4
10009ce8:	1980452e 	bgeu	r3,r6,10009e00 <memcpy+0x130>
10009cec:	2906b03a 	or	r3,r5,r4
10009cf0:	18c000cc 	andi	r3,r3,3
10009cf4:	1800441e 	bne	r3,zero,10009e08 <memcpy+0x138>
10009cf8:	347ffc04 	addi	r17,r6,-16
10009cfc:	8822d13a 	srli	r17,r17,4
10009d00:	28c00104 	addi	r3,r5,4
10009d04:	23400104 	addi	r13,r4,4
10009d08:	8820913a 	slli	r16,r17,4
10009d0c:	2b000204 	addi	r12,r5,8
10009d10:	22c00204 	addi	r11,r4,8
10009d14:	84000504 	addi	r16,r16,20
10009d18:	2a800304 	addi	r10,r5,12
10009d1c:	22400304 	addi	r9,r4,12
10009d20:	2c21883a 	add	r16,r5,r16
10009d24:	2811883a 	mov	r8,r5
10009d28:	200f883a 	mov	r7,r4
10009d2c:	41000017 	ldw	r4,0(r8)
10009d30:	1fc00017 	ldw	ra,0(r3)
10009d34:	63c00017 	ldw	r15,0(r12)
10009d38:	39000015 	stw	r4,0(r7)
10009d3c:	53800017 	ldw	r14,0(r10)
10009d40:	6fc00015 	stw	ra,0(r13)
10009d44:	5bc00015 	stw	r15,0(r11)
10009d48:	4b800015 	stw	r14,0(r9)
10009d4c:	18c00404 	addi	r3,r3,16
10009d50:	39c00404 	addi	r7,r7,16
10009d54:	42000404 	addi	r8,r8,16
10009d58:	6b400404 	addi	r13,r13,16
10009d5c:	63000404 	addi	r12,r12,16
10009d60:	5ac00404 	addi	r11,r11,16
10009d64:	52800404 	addi	r10,r10,16
10009d68:	4a400404 	addi	r9,r9,16
10009d6c:	1c3fef1e 	bne	r3,r16,10009d2c <__alt_data_end+0xf8009d2c>
10009d70:	89c00044 	addi	r7,r17,1
10009d74:	380e913a 	slli	r7,r7,4
10009d78:	310003cc 	andi	r4,r6,15
10009d7c:	02c000c4 	movi	r11,3
10009d80:	11c7883a 	add	r3,r2,r7
10009d84:	29cb883a 	add	r5,r5,r7
10009d88:	5900212e 	bgeu	r11,r4,10009e10 <memcpy+0x140>
10009d8c:	1813883a 	mov	r9,r3
10009d90:	2811883a 	mov	r8,r5
10009d94:	200f883a 	mov	r7,r4
10009d98:	42800017 	ldw	r10,0(r8)
10009d9c:	4a400104 	addi	r9,r9,4
10009da0:	39ffff04 	addi	r7,r7,-4
10009da4:	4abfff15 	stw	r10,-4(r9)
10009da8:	42000104 	addi	r8,r8,4
10009dac:	59fffa36 	bltu	r11,r7,10009d98 <__alt_data_end+0xf8009d98>
10009db0:	213fff04 	addi	r4,r4,-4
10009db4:	2008d0ba 	srli	r4,r4,2
10009db8:	318000cc 	andi	r6,r6,3
10009dbc:	21000044 	addi	r4,r4,1
10009dc0:	2109883a 	add	r4,r4,r4
10009dc4:	2109883a 	add	r4,r4,r4
10009dc8:	1907883a 	add	r3,r3,r4
10009dcc:	290b883a 	add	r5,r5,r4
10009dd0:	30000626 	beq	r6,zero,10009dec <memcpy+0x11c>
10009dd4:	198d883a 	add	r6,r3,r6
10009dd8:	29c00003 	ldbu	r7,0(r5)
10009ddc:	18c00044 	addi	r3,r3,1
10009de0:	29400044 	addi	r5,r5,1
10009de4:	19ffffc5 	stb	r7,-1(r3)
10009de8:	19bffb1e 	bne	r3,r6,10009dd8 <__alt_data_end+0xf8009dd8>
10009dec:	dfc00217 	ldw	ra,8(sp)
10009df0:	dc400117 	ldw	r17,4(sp)
10009df4:	dc000017 	ldw	r16,0(sp)
10009df8:	dec00304 	addi	sp,sp,12
10009dfc:	f800283a 	ret
10009e00:	2007883a 	mov	r3,r4
10009e04:	003ff206 	br	10009dd0 <__alt_data_end+0xf8009dd0>
10009e08:	2007883a 	mov	r3,r4
10009e0c:	003ff106 	br	10009dd4 <__alt_data_end+0xf8009dd4>
10009e10:	200d883a 	mov	r6,r4
10009e14:	003fee06 	br	10009dd0 <__alt_data_end+0xf8009dd0>

10009e18 <_printf_r>:
10009e18:	defffd04 	addi	sp,sp,-12
10009e1c:	2805883a 	mov	r2,r5
10009e20:	dfc00015 	stw	ra,0(sp)
10009e24:	d9800115 	stw	r6,4(sp)
10009e28:	d9c00215 	stw	r7,8(sp)
10009e2c:	21400217 	ldw	r5,8(r4)
10009e30:	d9c00104 	addi	r7,sp,4
10009e34:	100d883a 	mov	r6,r2
10009e38:	000a0840 	call	1000a084 <___vfprintf_internal_r>
10009e3c:	dfc00017 	ldw	ra,0(sp)
10009e40:	dec00304 	addi	sp,sp,12
10009e44:	f800283a 	ret

10009e48 <printf>:
10009e48:	defffc04 	addi	sp,sp,-16
10009e4c:	dfc00015 	stw	ra,0(sp)
10009e50:	d9400115 	stw	r5,4(sp)
10009e54:	d9800215 	stw	r6,8(sp)
10009e58:	d9c00315 	stw	r7,12(sp)
10009e5c:	008400b4 	movhi	r2,4098
10009e60:	10951604 	addi	r2,r2,21592
10009e64:	10800017 	ldw	r2,0(r2)
10009e68:	200b883a 	mov	r5,r4
10009e6c:	d9800104 	addi	r6,sp,4
10009e70:	11000217 	ldw	r4,8(r2)
10009e74:	000c3600 	call	1000c360 <__vfprintf_internal>
10009e78:	dfc00017 	ldw	ra,0(sp)
10009e7c:	dec00404 	addi	sp,sp,16
10009e80:	f800283a 	ret

10009e84 <_putchar_r>:
10009e84:	21800217 	ldw	r6,8(r4)
10009e88:	0012cfc1 	jmpi	10012cfc <_putc_r>

10009e8c <putchar>:
10009e8c:	008400b4 	movhi	r2,4098
10009e90:	10951604 	addi	r2,r2,21592
10009e94:	200b883a 	mov	r5,r4
10009e98:	11000017 	ldw	r4,0(r2)
10009e9c:	21800217 	ldw	r6,8(r4)
10009ea0:	0012cfc1 	jmpi	10012cfc <_putc_r>

10009ea4 <_puts_r>:
10009ea4:	defff604 	addi	sp,sp,-40
10009ea8:	dc000715 	stw	r16,28(sp)
10009eac:	2021883a 	mov	r16,r4
10009eb0:	2809883a 	mov	r4,r5
10009eb4:	dc400815 	stw	r17,32(sp)
10009eb8:	dfc00915 	stw	ra,36(sp)
10009ebc:	2823883a 	mov	r17,r5
10009ec0:	0009fe40 	call	10009fe4 <strlen>
10009ec4:	10c00044 	addi	r3,r2,1
10009ec8:	d8800115 	stw	r2,4(sp)
10009ecc:	008400b4 	movhi	r2,4098
10009ed0:	108b4604 	addi	r2,r2,11544
10009ed4:	d8800215 	stw	r2,8(sp)
10009ed8:	00800044 	movi	r2,1
10009edc:	d8800315 	stw	r2,12(sp)
10009ee0:	00800084 	movi	r2,2
10009ee4:	dc400015 	stw	r17,0(sp)
10009ee8:	d8c00615 	stw	r3,24(sp)
10009eec:	dec00415 	stw	sp,16(sp)
10009ef0:	d8800515 	stw	r2,20(sp)
10009ef4:	80000226 	beq	r16,zero,10009f00 <_puts_r+0x5c>
10009ef8:	80800e17 	ldw	r2,56(r16)
10009efc:	10001426 	beq	r2,zero,10009f50 <_puts_r+0xac>
10009f00:	81400217 	ldw	r5,8(r16)
10009f04:	2880030b 	ldhu	r2,12(r5)
10009f08:	10c8000c 	andi	r3,r2,8192
10009f0c:	1800061e 	bne	r3,zero,10009f28 <_puts_r+0x84>
10009f10:	29001917 	ldw	r4,100(r5)
10009f14:	00f7ffc4 	movi	r3,-8193
10009f18:	10880014 	ori	r2,r2,8192
10009f1c:	20c6703a 	and	r3,r4,r3
10009f20:	2880030d 	sth	r2,12(r5)
10009f24:	28c01915 	stw	r3,100(r5)
10009f28:	d9800404 	addi	r6,sp,16
10009f2c:	8009883a 	mov	r4,r16
10009f30:	00105940 	call	10010594 <__sfvwrite_r>
10009f34:	1000091e 	bne	r2,zero,10009f5c <_puts_r+0xb8>
10009f38:	00800284 	movi	r2,10
10009f3c:	dfc00917 	ldw	ra,36(sp)
10009f40:	dc400817 	ldw	r17,32(sp)
10009f44:	dc000717 	ldw	r16,28(sp)
10009f48:	dec00a04 	addi	sp,sp,40
10009f4c:	f800283a 	ret
10009f50:	8009883a 	mov	r4,r16
10009f54:	000fea00 	call	1000fea0 <__sinit>
10009f58:	003fe906 	br	10009f00 <__alt_data_end+0xf8009f00>
10009f5c:	00bfffc4 	movi	r2,-1
10009f60:	003ff606 	br	10009f3c <__alt_data_end+0xf8009f3c>

10009f64 <puts>:
10009f64:	008400b4 	movhi	r2,4098
10009f68:	10951604 	addi	r2,r2,21592
10009f6c:	200b883a 	mov	r5,r4
10009f70:	11000017 	ldw	r4,0(r2)
10009f74:	0009ea41 	jmpi	10009ea4 <_puts_r>

10009f78 <scanf>:
10009f78:	defffc04 	addi	sp,sp,-16
10009f7c:	dfc00015 	stw	ra,0(sp)
10009f80:	d9400115 	stw	r5,4(sp)
10009f84:	d9800215 	stw	r6,8(sp)
10009f88:	d9c00315 	stw	r7,12(sp)
10009f8c:	008400b4 	movhi	r2,4098
10009f90:	10951604 	addi	r2,r2,21592
10009f94:	200d883a 	mov	r6,r4
10009f98:	11000017 	ldw	r4,0(r2)
10009f9c:	d9c00104 	addi	r7,sp,4
10009fa0:	21400117 	ldw	r5,4(r4)
10009fa4:	000de480 	call	1000de48 <_vfscanf_r>
10009fa8:	dfc00017 	ldw	ra,0(sp)
10009fac:	dec00404 	addi	sp,sp,16
10009fb0:	f800283a 	ret

10009fb4 <_scanf_r>:
10009fb4:	defffd04 	addi	sp,sp,-12
10009fb8:	2805883a 	mov	r2,r5
10009fbc:	dfc00015 	stw	ra,0(sp)
10009fc0:	d9800115 	stw	r6,4(sp)
10009fc4:	d9c00215 	stw	r7,8(sp)
10009fc8:	21400117 	ldw	r5,4(r4)
10009fcc:	d9c00104 	addi	r7,sp,4
10009fd0:	100d883a 	mov	r6,r2
10009fd4:	000de480 	call	1000de48 <_vfscanf_r>
10009fd8:	dfc00017 	ldw	ra,0(sp)
10009fdc:	dec00304 	addi	sp,sp,12
10009fe0:	f800283a 	ret

10009fe4 <strlen>:
10009fe4:	208000cc 	andi	r2,r4,3
10009fe8:	10002026 	beq	r2,zero,1000a06c <strlen+0x88>
10009fec:	20800007 	ldb	r2,0(r4)
10009ff0:	10002026 	beq	r2,zero,1000a074 <strlen+0x90>
10009ff4:	2005883a 	mov	r2,r4
10009ff8:	00000206 	br	1000a004 <strlen+0x20>
10009ffc:	10c00007 	ldb	r3,0(r2)
1000a000:	18001826 	beq	r3,zero,1000a064 <strlen+0x80>
1000a004:	10800044 	addi	r2,r2,1
1000a008:	10c000cc 	andi	r3,r2,3
1000a00c:	183ffb1e 	bne	r3,zero,10009ffc <__alt_data_end+0xf8009ffc>
1000a010:	10c00017 	ldw	r3,0(r2)
1000a014:	01ffbff4 	movhi	r7,65279
1000a018:	39ffbfc4 	addi	r7,r7,-257
1000a01c:	00ca303a 	nor	r5,zero,r3
1000a020:	01a02074 	movhi	r6,32897
1000a024:	19c7883a 	add	r3,r3,r7
1000a028:	31a02004 	addi	r6,r6,-32640
1000a02c:	1946703a 	and	r3,r3,r5
1000a030:	1986703a 	and	r3,r3,r6
1000a034:	1800091e 	bne	r3,zero,1000a05c <strlen+0x78>
1000a038:	10800104 	addi	r2,r2,4
1000a03c:	10c00017 	ldw	r3,0(r2)
1000a040:	19cb883a 	add	r5,r3,r7
1000a044:	00c6303a 	nor	r3,zero,r3
1000a048:	28c6703a 	and	r3,r5,r3
1000a04c:	1986703a 	and	r3,r3,r6
1000a050:	183ff926 	beq	r3,zero,1000a038 <__alt_data_end+0xf800a038>
1000a054:	00000106 	br	1000a05c <strlen+0x78>
1000a058:	10800044 	addi	r2,r2,1
1000a05c:	10c00007 	ldb	r3,0(r2)
1000a060:	183ffd1e 	bne	r3,zero,1000a058 <__alt_data_end+0xf800a058>
1000a064:	1105c83a 	sub	r2,r2,r4
1000a068:	f800283a 	ret
1000a06c:	2005883a 	mov	r2,r4
1000a070:	003fe706 	br	1000a010 <__alt_data_end+0xf800a010>
1000a074:	0005883a 	mov	r2,zero
1000a078:	f800283a 	ret

1000a07c <_times_r>:
1000a07c:	2809883a 	mov	r4,r5
1000a080:	001fa901 	jmpi	1001fa90 <times>

1000a084 <___vfprintf_internal_r>:
1000a084:	deffb804 	addi	sp,sp,-288
1000a088:	dfc04715 	stw	ra,284(sp)
1000a08c:	ddc04515 	stw	r23,276(sp)
1000a090:	dd404315 	stw	r21,268(sp)
1000a094:	d9002d15 	stw	r4,180(sp)
1000a098:	282f883a 	mov	r23,r5
1000a09c:	302b883a 	mov	r21,r6
1000a0a0:	d9c02e15 	stw	r7,184(sp)
1000a0a4:	df004615 	stw	fp,280(sp)
1000a0a8:	dd804415 	stw	r22,272(sp)
1000a0ac:	dd004215 	stw	r20,264(sp)
1000a0b0:	dcc04115 	stw	r19,260(sp)
1000a0b4:	dc804015 	stw	r18,256(sp)
1000a0b8:	dc403f15 	stw	r17,252(sp)
1000a0bc:	dc003e15 	stw	r16,248(sp)
1000a0c0:	0010cc00 	call	10010cc0 <_localeconv_r>
1000a0c4:	10800017 	ldw	r2,0(r2)
1000a0c8:	1009883a 	mov	r4,r2
1000a0cc:	d8803415 	stw	r2,208(sp)
1000a0d0:	0009fe40 	call	10009fe4 <strlen>
1000a0d4:	d8803715 	stw	r2,220(sp)
1000a0d8:	d8802d17 	ldw	r2,180(sp)
1000a0dc:	10000226 	beq	r2,zero,1000a0e8 <___vfprintf_internal_r+0x64>
1000a0e0:	10800e17 	ldw	r2,56(r2)
1000a0e4:	1000fb26 	beq	r2,zero,1000a4d4 <___vfprintf_internal_r+0x450>
1000a0e8:	b880030b 	ldhu	r2,12(r23)
1000a0ec:	10c8000c 	andi	r3,r2,8192
1000a0f0:	1800061e 	bne	r3,zero,1000a10c <___vfprintf_internal_r+0x88>
1000a0f4:	b9001917 	ldw	r4,100(r23)
1000a0f8:	00f7ffc4 	movi	r3,-8193
1000a0fc:	10880014 	ori	r2,r2,8192
1000a100:	20c6703a 	and	r3,r4,r3
1000a104:	b880030d 	sth	r2,12(r23)
1000a108:	b8c01915 	stw	r3,100(r23)
1000a10c:	10c0020c 	andi	r3,r2,8
1000a110:	1800c326 	beq	r3,zero,1000a420 <___vfprintf_internal_r+0x39c>
1000a114:	b8c00417 	ldw	r3,16(r23)
1000a118:	1800c126 	beq	r3,zero,1000a420 <___vfprintf_internal_r+0x39c>
1000a11c:	1080068c 	andi	r2,r2,26
1000a120:	00c00284 	movi	r3,10
1000a124:	10c0c626 	beq	r2,r3,1000a440 <___vfprintf_internal_r+0x3bc>
1000a128:	d8c00404 	addi	r3,sp,16
1000a12c:	050400b4 	movhi	r20,4098
1000a130:	d9001e04 	addi	r4,sp,120
1000a134:	a50b5784 	addi	r20,r20,11614
1000a138:	d8c01e15 	stw	r3,120(sp)
1000a13c:	d8002015 	stw	zero,128(sp)
1000a140:	d8001f15 	stw	zero,124(sp)
1000a144:	d8003315 	stw	zero,204(sp)
1000a148:	d8003615 	stw	zero,216(sp)
1000a14c:	d8003815 	stw	zero,224(sp)
1000a150:	1811883a 	mov	r8,r3
1000a154:	d8003915 	stw	zero,228(sp)
1000a158:	d8003a15 	stw	zero,232(sp)
1000a15c:	d8002f15 	stw	zero,188(sp)
1000a160:	d9002815 	stw	r4,160(sp)
1000a164:	a8800007 	ldb	r2,0(r21)
1000a168:	10028b26 	beq	r2,zero,1000ab98 <___vfprintf_internal_r+0xb14>
1000a16c:	00c00944 	movi	r3,37
1000a170:	a823883a 	mov	r17,r21
1000a174:	10c0021e 	bne	r2,r3,1000a180 <___vfprintf_internal_r+0xfc>
1000a178:	00001406 	br	1000a1cc <___vfprintf_internal_r+0x148>
1000a17c:	10c00326 	beq	r2,r3,1000a18c <___vfprintf_internal_r+0x108>
1000a180:	8c400044 	addi	r17,r17,1
1000a184:	88800007 	ldb	r2,0(r17)
1000a188:	103ffc1e 	bne	r2,zero,1000a17c <__alt_data_end+0xf800a17c>
1000a18c:	8d61c83a 	sub	r16,r17,r21
1000a190:	80000e26 	beq	r16,zero,1000a1cc <___vfprintf_internal_r+0x148>
1000a194:	d8c02017 	ldw	r3,128(sp)
1000a198:	d8801f17 	ldw	r2,124(sp)
1000a19c:	45400015 	stw	r21,0(r8)
1000a1a0:	1c07883a 	add	r3,r3,r16
1000a1a4:	10800044 	addi	r2,r2,1
1000a1a8:	d8c02015 	stw	r3,128(sp)
1000a1ac:	44000115 	stw	r16,4(r8)
1000a1b0:	d8801f15 	stw	r2,124(sp)
1000a1b4:	00c001c4 	movi	r3,7
1000a1b8:	1880a916 	blt	r3,r2,1000a460 <___vfprintf_internal_r+0x3dc>
1000a1bc:	42000204 	addi	r8,r8,8
1000a1c0:	d9402f17 	ldw	r5,188(sp)
1000a1c4:	2c0b883a 	add	r5,r5,r16
1000a1c8:	d9402f15 	stw	r5,188(sp)
1000a1cc:	88800007 	ldb	r2,0(r17)
1000a1d0:	1000aa26 	beq	r2,zero,1000a47c <___vfprintf_internal_r+0x3f8>
1000a1d4:	8d400044 	addi	r21,r17,1
1000a1d8:	8c400047 	ldb	r17,1(r17)
1000a1dc:	0021883a 	mov	r16,zero
1000a1e0:	00bfffc4 	movi	r2,-1
1000a1e4:	0025883a 	mov	r18,zero
1000a1e8:	dc002905 	stb	r16,164(sp)
1000a1ec:	d8002785 	stb	zero,158(sp)
1000a1f0:	d8002b05 	stb	zero,172(sp)
1000a1f4:	d8802a15 	stw	r2,168(sp)
1000a1f8:	d8003115 	stw	zero,196(sp)
1000a1fc:	04c01604 	movi	r19,88
1000a200:	05800244 	movi	r22,9
1000a204:	9021883a 	mov	r16,r18
1000a208:	4039883a 	mov	fp,r8
1000a20c:	ad400044 	addi	r21,r21,1
1000a210:	88bff804 	addi	r2,r17,-32
1000a214:	98833236 	bltu	r19,r2,1000aee0 <___vfprintf_internal_r+0xe5c>
1000a218:	100490ba 	slli	r2,r2,2
1000a21c:	00c40074 	movhi	r3,4097
1000a220:	18e88c04 	addi	r3,r3,-24016
1000a224:	10c5883a 	add	r2,r2,r3
1000a228:	10800017 	ldw	r2,0(r2)
1000a22c:	1000683a 	jmp	r2
1000a230:	1000add8 	cmpnei	zero,r2,695
1000a234:	1000aee0 	cmpeqi	zero,r2,699
1000a238:	1000aee0 	cmpeqi	zero,r2,699
1000a23c:	1000adf8 	rdprs	zero,r2,695
1000a240:	1000aee0 	cmpeqi	zero,r2,699
1000a244:	1000aee0 	cmpeqi	zero,r2,699
1000a248:	1000aee0 	cmpeqi	zero,r2,699
1000a24c:	1000aee0 	cmpeqi	zero,r2,699
1000a250:	1000aee0 	cmpeqi	zero,r2,699
1000a254:	1000aee0 	cmpeqi	zero,r2,699
1000a258:	1000a4e0 	cmpeqi	zero,r2,659
1000a25c:	1000ace8 	cmpgeui	zero,r2,691
1000a260:	1000aee0 	cmpeqi	zero,r2,699
1000a264:	1000a3a4 	muli	zero,r2,654
1000a268:	1000a504 	addi	zero,r2,660
1000a26c:	1000aee0 	cmpeqi	zero,r2,699
1000a270:	1000a554 	ori	zero,r2,661
1000a274:	1000a560 	cmpeqi	zero,r2,661
1000a278:	1000a560 	cmpeqi	zero,r2,661
1000a27c:	1000a560 	cmpeqi	zero,r2,661
1000a280:	1000a560 	cmpeqi	zero,r2,661
1000a284:	1000a560 	cmpeqi	zero,r2,661
1000a288:	1000a560 	cmpeqi	zero,r2,661
1000a28c:	1000a560 	cmpeqi	zero,r2,661
1000a290:	1000a560 	cmpeqi	zero,r2,661
1000a294:	1000a560 	cmpeqi	zero,r2,661
1000a298:	1000aee0 	cmpeqi	zero,r2,699
1000a29c:	1000aee0 	cmpeqi	zero,r2,699
1000a2a0:	1000aee0 	cmpeqi	zero,r2,699
1000a2a4:	1000aee0 	cmpeqi	zero,r2,699
1000a2a8:	1000aee0 	cmpeqi	zero,r2,699
1000a2ac:	1000aee0 	cmpeqi	zero,r2,699
1000a2b0:	1000aee0 	cmpeqi	zero,r2,699
1000a2b4:	1000aee0 	cmpeqi	zero,r2,699
1000a2b8:	1000aee0 	cmpeqi	zero,r2,699
1000a2bc:	1000aee0 	cmpeqi	zero,r2,699
1000a2c0:	1000a59c 	xori	zero,r2,662
1000a2c4:	1000a664 	muli	zero,r2,665
1000a2c8:	1000aee0 	cmpeqi	zero,r2,699
1000a2cc:	1000a664 	muli	zero,r2,665
1000a2d0:	1000aee0 	cmpeqi	zero,r2,699
1000a2d4:	1000aee0 	cmpeqi	zero,r2,699
1000a2d8:	1000aee0 	cmpeqi	zero,r2,699
1000a2dc:	1000aee0 	cmpeqi	zero,r2,699
1000a2e0:	1000a710 	cmplti	zero,r2,668
1000a2e4:	1000aee0 	cmpeqi	zero,r2,699
1000a2e8:	1000aee0 	cmpeqi	zero,r2,699
1000a2ec:	1000a71c 	xori	zero,r2,668
1000a2f0:	1000aee0 	cmpeqi	zero,r2,699
1000a2f4:	1000aee0 	cmpeqi	zero,r2,699
1000a2f8:	1000aee0 	cmpeqi	zero,r2,699
1000a2fc:	1000aee0 	cmpeqi	zero,r2,699
1000a300:	1000aee0 	cmpeqi	zero,r2,699
1000a304:	1000aba0 	cmpeqi	zero,r2,686
1000a308:	1000aee0 	cmpeqi	zero,r2,699
1000a30c:	1000aee0 	cmpeqi	zero,r2,699
1000a310:	1000ac0c 	andi	zero,r2,688
1000a314:	1000aee0 	cmpeqi	zero,r2,699
1000a318:	1000aee0 	cmpeqi	zero,r2,699
1000a31c:	1000aee0 	cmpeqi	zero,r2,699
1000a320:	1000aee0 	cmpeqi	zero,r2,699
1000a324:	1000aee0 	cmpeqi	zero,r2,699
1000a328:	1000aee0 	cmpeqi	zero,r2,699
1000a32c:	1000aee0 	cmpeqi	zero,r2,699
1000a330:	1000aee0 	cmpeqi	zero,r2,699
1000a334:	1000aee0 	cmpeqi	zero,r2,699
1000a338:	1000aee0 	cmpeqi	zero,r2,699
1000a33c:	1000ae84 	addi	zero,r2,698
1000a340:	1000ae04 	addi	zero,r2,696
1000a344:	1000a664 	muli	zero,r2,665
1000a348:	1000a664 	muli	zero,r2,665
1000a34c:	1000a664 	muli	zero,r2,665
1000a350:	1000ae24 	muli	zero,r2,696
1000a354:	1000ae04 	addi	zero,r2,696
1000a358:	1000aee0 	cmpeqi	zero,r2,699
1000a35c:	1000aee0 	cmpeqi	zero,r2,699
1000a360:	1000ae30 	cmpltui	zero,r2,696
1000a364:	1000aee0 	cmpeqi	zero,r2,699
1000a368:	1000ae44 	addi	zero,r2,697
1000a36c:	1000acc8 	cmpgei	zero,r2,691
1000a370:	1000a3b0 	cmpltui	zero,r2,654
1000a374:	1000ad00 	call	11000ad0 <_gp+0xfd3684>
1000a378:	1000aee0 	cmpeqi	zero,r2,699
1000a37c:	1000ad0c 	andi	zero,r2,692
1000a380:	1000aee0 	cmpeqi	zero,r2,699
1000a384:	1000ad70 	cmpltui	zero,r2,693
1000a388:	1000aee0 	cmpeqi	zero,r2,699
1000a38c:	1000aee0 	cmpeqi	zero,r2,699
1000a390:	1000ad90 	cmplti	zero,r2,694
1000a394:	d8c03117 	ldw	r3,196(sp)
1000a398:	d8802e15 	stw	r2,184(sp)
1000a39c:	00c7c83a 	sub	r3,zero,r3
1000a3a0:	d8c03115 	stw	r3,196(sp)
1000a3a4:	84000114 	ori	r16,r16,4
1000a3a8:	ac400007 	ldb	r17,0(r21)
1000a3ac:	003f9706 	br	1000a20c <__alt_data_end+0xf800a20c>
1000a3b0:	00800c04 	movi	r2,48
1000a3b4:	d8802705 	stb	r2,156(sp)
1000a3b8:	00801e04 	movi	r2,120
1000a3bc:	d8802745 	stb	r2,157(sp)
1000a3c0:	d9002a17 	ldw	r4,168(sp)
1000a3c4:	d8802e17 	ldw	r2,184(sp)
1000a3c8:	d8002785 	stb	zero,158(sp)
1000a3cc:	e011883a 	mov	r8,fp
1000a3d0:	10c00104 	addi	r3,r2,4
1000a3d4:	14c00017 	ldw	r19,0(r2)
1000a3d8:	002d883a 	mov	r22,zero
1000a3dc:	80800094 	ori	r2,r16,2
1000a3e0:	2002ca16 	blt	r4,zero,1000af0c <___vfprintf_internal_r+0xe88>
1000a3e4:	00bfdfc4 	movi	r2,-129
1000a3e8:	80a4703a 	and	r18,r16,r2
1000a3ec:	d8c02e15 	stw	r3,184(sp)
1000a3f0:	94800094 	ori	r18,r18,2
1000a3f4:	9802b41e 	bne	r19,zero,1000aec8 <___vfprintf_internal_r+0xe44>
1000a3f8:	014400b4 	movhi	r5,4098
1000a3fc:	294b5004 	addi	r5,r5,11584
1000a400:	d9403915 	stw	r5,228(sp)
1000a404:	04401e04 	movi	r17,120
1000a408:	d8802a17 	ldw	r2,168(sp)
1000a40c:	0039883a 	mov	fp,zero
1000a410:	1001fa26 	beq	r2,zero,1000abfc <___vfprintf_internal_r+0xb78>
1000a414:	0027883a 	mov	r19,zero
1000a418:	002d883a 	mov	r22,zero
1000a41c:	00021906 	br	1000ac84 <___vfprintf_internal_r+0xc00>
1000a420:	d9002d17 	ldw	r4,180(sp)
1000a424:	b80b883a 	mov	r5,r23
1000a428:	000de940 	call	1000de94 <__swsetup_r>
1000a42c:	1005dc1e 	bne	r2,zero,1000bba0 <___vfprintf_internal_r+0x1b1c>
1000a430:	b880030b 	ldhu	r2,12(r23)
1000a434:	00c00284 	movi	r3,10
1000a438:	1080068c 	andi	r2,r2,26
1000a43c:	10ff3a1e 	bne	r2,r3,1000a128 <__alt_data_end+0xf800a128>
1000a440:	b880038f 	ldh	r2,14(r23)
1000a444:	103f3816 	blt	r2,zero,1000a128 <__alt_data_end+0xf800a128>
1000a448:	d9c02e17 	ldw	r7,184(sp)
1000a44c:	d9002d17 	ldw	r4,180(sp)
1000a450:	a80d883a 	mov	r6,r21
1000a454:	b80b883a 	mov	r5,r23
1000a458:	000c37c0 	call	1000c37c <__sbprintf>
1000a45c:	00001106 	br	1000a4a4 <___vfprintf_internal_r+0x420>
1000a460:	d9002d17 	ldw	r4,180(sp)
1000a464:	d9801e04 	addi	r6,sp,120
1000a468:	b80b883a 	mov	r5,r23
1000a46c:	00182f80 	call	100182f8 <__sprint_r>
1000a470:	1000081e 	bne	r2,zero,1000a494 <___vfprintf_internal_r+0x410>
1000a474:	da000404 	addi	r8,sp,16
1000a478:	003f5106 	br	1000a1c0 <__alt_data_end+0xf800a1c0>
1000a47c:	d8802017 	ldw	r2,128(sp)
1000a480:	10000426 	beq	r2,zero,1000a494 <___vfprintf_internal_r+0x410>
1000a484:	d9002d17 	ldw	r4,180(sp)
1000a488:	d9801e04 	addi	r6,sp,120
1000a48c:	b80b883a 	mov	r5,r23
1000a490:	00182f80 	call	100182f8 <__sprint_r>
1000a494:	b880030b 	ldhu	r2,12(r23)
1000a498:	1080100c 	andi	r2,r2,64
1000a49c:	1005c01e 	bne	r2,zero,1000bba0 <___vfprintf_internal_r+0x1b1c>
1000a4a0:	d8802f17 	ldw	r2,188(sp)
1000a4a4:	dfc04717 	ldw	ra,284(sp)
1000a4a8:	df004617 	ldw	fp,280(sp)
1000a4ac:	ddc04517 	ldw	r23,276(sp)
1000a4b0:	dd804417 	ldw	r22,272(sp)
1000a4b4:	dd404317 	ldw	r21,268(sp)
1000a4b8:	dd004217 	ldw	r20,264(sp)
1000a4bc:	dcc04117 	ldw	r19,260(sp)
1000a4c0:	dc804017 	ldw	r18,256(sp)
1000a4c4:	dc403f17 	ldw	r17,252(sp)
1000a4c8:	dc003e17 	ldw	r16,248(sp)
1000a4cc:	dec04804 	addi	sp,sp,288
1000a4d0:	f800283a 	ret
1000a4d4:	d9002d17 	ldw	r4,180(sp)
1000a4d8:	000fea00 	call	1000fea0 <__sinit>
1000a4dc:	003f0206 	br	1000a0e8 <__alt_data_end+0xf800a0e8>
1000a4e0:	d9002e17 	ldw	r4,184(sp)
1000a4e4:	d9402e17 	ldw	r5,184(sp)
1000a4e8:	21000017 	ldw	r4,0(r4)
1000a4ec:	28800104 	addi	r2,r5,4
1000a4f0:	d9003115 	stw	r4,196(sp)
1000a4f4:	203fa716 	blt	r4,zero,1000a394 <__alt_data_end+0xf800a394>
1000a4f8:	d8802e15 	stw	r2,184(sp)
1000a4fc:	ac400007 	ldb	r17,0(r21)
1000a500:	003f4206 	br	1000a20c <__alt_data_end+0xf800a20c>
1000a504:	ac400007 	ldb	r17,0(r21)
1000a508:	01000a84 	movi	r4,42
1000a50c:	a8c00044 	addi	r3,r21,1
1000a510:	89075826 	beq	r17,r4,1000c274 <___vfprintf_internal_r+0x21f0>
1000a514:	8cbff404 	addi	r18,r17,-48
1000a518:	b486ae36 	bltu	r22,r18,1000bfd4 <___vfprintf_internal_r+0x1f50>
1000a51c:	0009883a 	mov	r4,zero
1000a520:	1823883a 	mov	r17,r3
1000a524:	01400284 	movi	r5,10
1000a528:	0008ef00 	call	10008ef0 <__mulsi3>
1000a52c:	88c00007 	ldb	r3,0(r17)
1000a530:	1489883a 	add	r4,r2,r18
1000a534:	8d400044 	addi	r21,r17,1
1000a538:	1cbff404 	addi	r18,r3,-48
1000a53c:	a823883a 	mov	r17,r21
1000a540:	b4bff82e 	bgeu	r22,r18,1000a524 <__alt_data_end+0xf800a524>
1000a544:	1823883a 	mov	r17,r3
1000a548:	2005f616 	blt	r4,zero,1000bd24 <___vfprintf_internal_r+0x1ca0>
1000a54c:	d9002a15 	stw	r4,168(sp)
1000a550:	003f2f06 	br	1000a210 <__alt_data_end+0xf800a210>
1000a554:	84002014 	ori	r16,r16,128
1000a558:	ac400007 	ldb	r17,0(r21)
1000a55c:	003f2b06 	br	1000a20c <__alt_data_end+0xf800a20c>
1000a560:	8cbff404 	addi	r18,r17,-48
1000a564:	d8003115 	stw	zero,196(sp)
1000a568:	0009883a 	mov	r4,zero
1000a56c:	a823883a 	mov	r17,r21
1000a570:	01400284 	movi	r5,10
1000a574:	0008ef00 	call	10008ef0 <__mulsi3>
1000a578:	88c00007 	ldb	r3,0(r17)
1000a57c:	9089883a 	add	r4,r18,r2
1000a580:	ad400044 	addi	r21,r21,1
1000a584:	1cbff404 	addi	r18,r3,-48
1000a588:	a823883a 	mov	r17,r21
1000a58c:	b4bff82e 	bgeu	r22,r18,1000a570 <__alt_data_end+0xf800a570>
1000a590:	1823883a 	mov	r17,r3
1000a594:	d9003115 	stw	r4,196(sp)
1000a598:	003f1d06 	br	1000a210 <__alt_data_end+0xf800a210>
1000a59c:	8025883a 	mov	r18,r16
1000a5a0:	dc002903 	ldbu	r16,164(sp)
1000a5a4:	e011883a 	mov	r8,fp
1000a5a8:	84003fcc 	andi	r16,r16,255
1000a5ac:	8007531e 	bne	r16,zero,1000c2fc <___vfprintf_internal_r+0x2278>
1000a5b0:	94800414 	ori	r18,r18,16
1000a5b4:	9080080c 	andi	r2,r18,32
1000a5b8:	1003a326 	beq	r2,zero,1000b448 <___vfprintf_internal_r+0x13c4>
1000a5bc:	d9002e17 	ldw	r4,184(sp)
1000a5c0:	20800117 	ldw	r2,4(r4)
1000a5c4:	24c00017 	ldw	r19,0(r4)
1000a5c8:	21000204 	addi	r4,r4,8
1000a5cc:	d9002e15 	stw	r4,184(sp)
1000a5d0:	102d883a 	mov	r22,r2
1000a5d4:	10047316 	blt	r2,zero,1000b7a4 <___vfprintf_internal_r+0x1720>
1000a5d8:	d9002a17 	ldw	r4,168(sp)
1000a5dc:	df002783 	ldbu	fp,158(sp)
1000a5e0:	2003e416 	blt	r4,zero,1000b574 <___vfprintf_internal_r+0x14f0>
1000a5e4:	00ffdfc4 	movi	r3,-129
1000a5e8:	9d84b03a 	or	r2,r19,r22
1000a5ec:	90e4703a 	and	r18,r18,r3
1000a5f0:	10018026 	beq	r2,zero,1000abf4 <___vfprintf_internal_r+0xb70>
1000a5f4:	b003ab26 	beq	r22,zero,1000b4a4 <___vfprintf_internal_r+0x1420>
1000a5f8:	dc402915 	stw	r17,164(sp)
1000a5fc:	dc001e04 	addi	r16,sp,120
1000a600:	b023883a 	mov	r17,r22
1000a604:	402d883a 	mov	r22,r8
1000a608:	9809883a 	mov	r4,r19
1000a60c:	880b883a 	mov	r5,r17
1000a610:	01800284 	movi	r6,10
1000a614:	000f883a 	mov	r7,zero
1000a618:	001cba80 	call	1001cba8 <__umoddi3>
1000a61c:	10800c04 	addi	r2,r2,48
1000a620:	843fffc4 	addi	r16,r16,-1
1000a624:	9809883a 	mov	r4,r19
1000a628:	880b883a 	mov	r5,r17
1000a62c:	80800005 	stb	r2,0(r16)
1000a630:	01800284 	movi	r6,10
1000a634:	000f883a 	mov	r7,zero
1000a638:	001c5ac0 	call	1001c5ac <__udivdi3>
1000a63c:	1027883a 	mov	r19,r2
1000a640:	10c4b03a 	or	r2,r2,r3
1000a644:	1823883a 	mov	r17,r3
1000a648:	103fef1e 	bne	r2,zero,1000a608 <__alt_data_end+0xf800a608>
1000a64c:	d8c02817 	ldw	r3,160(sp)
1000a650:	dc402917 	ldw	r17,164(sp)
1000a654:	b011883a 	mov	r8,r22
1000a658:	1c07c83a 	sub	r3,r3,r16
1000a65c:	d8c02b15 	stw	r3,172(sp)
1000a660:	00005f06 	br	1000a7e0 <___vfprintf_internal_r+0x75c>
1000a664:	8025883a 	mov	r18,r16
1000a668:	dc002903 	ldbu	r16,164(sp)
1000a66c:	e011883a 	mov	r8,fp
1000a670:	84003fcc 	andi	r16,r16,255
1000a674:	80071e1e 	bne	r16,zero,1000c2f0 <___vfprintf_internal_r+0x226c>
1000a678:	9080020c 	andi	r2,r18,8
1000a67c:	1004af26 	beq	r2,zero,1000b93c <___vfprintf_internal_r+0x18b8>
1000a680:	d9002e17 	ldw	r4,184(sp)
1000a684:	d9402e17 	ldw	r5,184(sp)
1000a688:	d8802e17 	ldw	r2,184(sp)
1000a68c:	21000017 	ldw	r4,0(r4)
1000a690:	29400117 	ldw	r5,4(r5)
1000a694:	10800204 	addi	r2,r2,8
1000a698:	d9003615 	stw	r4,216(sp)
1000a69c:	d9403815 	stw	r5,224(sp)
1000a6a0:	d8802e15 	stw	r2,184(sp)
1000a6a4:	d9003617 	ldw	r4,216(sp)
1000a6a8:	d9403817 	ldw	r5,224(sp)
1000a6ac:	da003d15 	stw	r8,244(sp)
1000a6b0:	04000044 	movi	r16,1
1000a6b4:	00135b80 	call	100135b8 <__fpclassifyd>
1000a6b8:	da003d17 	ldw	r8,244(sp)
1000a6bc:	1404441e 	bne	r2,r16,1000b7d0 <___vfprintf_internal_r+0x174c>
1000a6c0:	d9003617 	ldw	r4,216(sp)
1000a6c4:	d9403817 	ldw	r5,224(sp)
1000a6c8:	000d883a 	mov	r6,zero
1000a6cc:	000f883a 	mov	r7,zero
1000a6d0:	001dd780 	call	1001dd78 <__ledf2>
1000a6d4:	da003d17 	ldw	r8,244(sp)
1000a6d8:	1005e316 	blt	r2,zero,1000be68 <___vfprintf_internal_r+0x1de4>
1000a6dc:	df002783 	ldbu	fp,158(sp)
1000a6e0:	008011c4 	movi	r2,71
1000a6e4:	1445580e 	bge	r2,r17,1000bc48 <___vfprintf_internal_r+0x1bc4>
1000a6e8:	040400b4 	movhi	r16,4098
1000a6ec:	840b4804 	addi	r16,r16,11552
1000a6f0:	00c000c4 	movi	r3,3
1000a6f4:	00bfdfc4 	movi	r2,-129
1000a6f8:	d8c02915 	stw	r3,164(sp)
1000a6fc:	90a4703a 	and	r18,r18,r2
1000a700:	d8c02b15 	stw	r3,172(sp)
1000a704:	d8002a15 	stw	zero,168(sp)
1000a708:	d8003215 	stw	zero,200(sp)
1000a70c:	00003a06 	br	1000a7f8 <___vfprintf_internal_r+0x774>
1000a710:	84000214 	ori	r16,r16,8
1000a714:	ac400007 	ldb	r17,0(r21)
1000a718:	003ebc06 	br	1000a20c <__alt_data_end+0xf800a20c>
1000a71c:	8025883a 	mov	r18,r16
1000a720:	dc002903 	ldbu	r16,164(sp)
1000a724:	e011883a 	mov	r8,fp
1000a728:	84003fcc 	andi	r16,r16,255
1000a72c:	8007001e 	bne	r16,zero,1000c330 <___vfprintf_internal_r+0x22ac>
1000a730:	94800414 	ori	r18,r18,16
1000a734:	9080080c 	andi	r2,r18,32
1000a738:	1002fa26 	beq	r2,zero,1000b324 <___vfprintf_internal_r+0x12a0>
1000a73c:	d9002e17 	ldw	r4,184(sp)
1000a740:	d9402a17 	ldw	r5,168(sp)
1000a744:	d8002785 	stb	zero,158(sp)
1000a748:	20800204 	addi	r2,r4,8
1000a74c:	24c00017 	ldw	r19,0(r4)
1000a750:	25800117 	ldw	r22,4(r4)
1000a754:	2804b116 	blt	r5,zero,1000ba1c <___vfprintf_internal_r+0x1998>
1000a758:	013fdfc4 	movi	r4,-129
1000a75c:	9d86b03a 	or	r3,r19,r22
1000a760:	d8802e15 	stw	r2,184(sp)
1000a764:	9124703a 	and	r18,r18,r4
1000a768:	1802fb1e 	bne	r3,zero,1000b358 <___vfprintf_internal_r+0x12d4>
1000a76c:	d8c02a17 	ldw	r3,168(sp)
1000a770:	0039883a 	mov	fp,zero
1000a774:	1805e526 	beq	r3,zero,1000bf0c <___vfprintf_internal_r+0x1e88>
1000a778:	0027883a 	mov	r19,zero
1000a77c:	002d883a 	mov	r22,zero
1000a780:	dc001e04 	addi	r16,sp,120
1000a784:	9806d0fa 	srli	r3,r19,3
1000a788:	b008977a 	slli	r4,r22,29
1000a78c:	b02cd0fa 	srli	r22,r22,3
1000a790:	9cc001cc 	andi	r19,r19,7
1000a794:	98800c04 	addi	r2,r19,48
1000a798:	843fffc4 	addi	r16,r16,-1
1000a79c:	20e6b03a 	or	r19,r4,r3
1000a7a0:	80800005 	stb	r2,0(r16)
1000a7a4:	9d86b03a 	or	r3,r19,r22
1000a7a8:	183ff61e 	bne	r3,zero,1000a784 <__alt_data_end+0xf800a784>
1000a7ac:	90c0004c 	andi	r3,r18,1
1000a7b0:	18014126 	beq	r3,zero,1000acb8 <___vfprintf_internal_r+0xc34>
1000a7b4:	10803fcc 	andi	r2,r2,255
1000a7b8:	1080201c 	xori	r2,r2,128
1000a7bc:	10bfe004 	addi	r2,r2,-128
1000a7c0:	00c00c04 	movi	r3,48
1000a7c4:	10c13c26 	beq	r2,r3,1000acb8 <___vfprintf_internal_r+0xc34>
1000a7c8:	80ffffc5 	stb	r3,-1(r16)
1000a7cc:	d8c02817 	ldw	r3,160(sp)
1000a7d0:	80bfffc4 	addi	r2,r16,-1
1000a7d4:	1021883a 	mov	r16,r2
1000a7d8:	1887c83a 	sub	r3,r3,r2
1000a7dc:	d8c02b15 	stw	r3,172(sp)
1000a7e0:	d8802b17 	ldw	r2,172(sp)
1000a7e4:	d9002a17 	ldw	r4,168(sp)
1000a7e8:	1100010e 	bge	r2,r4,1000a7f0 <___vfprintf_internal_r+0x76c>
1000a7ec:	2005883a 	mov	r2,r4
1000a7f0:	d8802915 	stw	r2,164(sp)
1000a7f4:	d8003215 	stw	zero,200(sp)
1000a7f8:	e7003fcc 	andi	fp,fp,255
1000a7fc:	e700201c 	xori	fp,fp,128
1000a800:	e73fe004 	addi	fp,fp,-128
1000a804:	e0000326 	beq	fp,zero,1000a814 <___vfprintf_internal_r+0x790>
1000a808:	d8c02917 	ldw	r3,164(sp)
1000a80c:	18c00044 	addi	r3,r3,1
1000a810:	d8c02915 	stw	r3,164(sp)
1000a814:	90c0008c 	andi	r3,r18,2
1000a818:	d8c02c15 	stw	r3,176(sp)
1000a81c:	18000326 	beq	r3,zero,1000a82c <___vfprintf_internal_r+0x7a8>
1000a820:	d8c02917 	ldw	r3,164(sp)
1000a824:	18c00084 	addi	r3,r3,2
1000a828:	d8c02915 	stw	r3,164(sp)
1000a82c:	90c0210c 	andi	r3,r18,132
1000a830:	d8c03015 	stw	r3,192(sp)
1000a834:	1801c51e 	bne	r3,zero,1000af4c <___vfprintf_internal_r+0xec8>
1000a838:	d9003117 	ldw	r4,196(sp)
1000a83c:	d8c02917 	ldw	r3,164(sp)
1000a840:	20e7c83a 	sub	r19,r4,r3
1000a844:	04c1c10e 	bge	zero,r19,1000af4c <___vfprintf_internal_r+0xec8>
1000a848:	02400404 	movi	r9,16
1000a84c:	d8c02017 	ldw	r3,128(sp)
1000a850:	d8801f17 	ldw	r2,124(sp)
1000a854:	4cc52f0e 	bge	r9,r19,1000bd14 <___vfprintf_internal_r+0x1c90>
1000a858:	014400b4 	movhi	r5,4098
1000a85c:	294b5b84 	addi	r5,r5,11630
1000a860:	dc403b15 	stw	r17,236(sp)
1000a864:	d9403515 	stw	r5,212(sp)
1000a868:	9823883a 	mov	r17,r19
1000a86c:	482d883a 	mov	r22,r9
1000a870:	9027883a 	mov	r19,r18
1000a874:	070001c4 	movi	fp,7
1000a878:	8025883a 	mov	r18,r16
1000a87c:	dc002d17 	ldw	r16,180(sp)
1000a880:	00000306 	br	1000a890 <___vfprintf_internal_r+0x80c>
1000a884:	8c7ffc04 	addi	r17,r17,-16
1000a888:	42000204 	addi	r8,r8,8
1000a88c:	b440130e 	bge	r22,r17,1000a8dc <___vfprintf_internal_r+0x858>
1000a890:	010400b4 	movhi	r4,4098
1000a894:	18c00404 	addi	r3,r3,16
1000a898:	10800044 	addi	r2,r2,1
1000a89c:	210b5b84 	addi	r4,r4,11630
1000a8a0:	41000015 	stw	r4,0(r8)
1000a8a4:	45800115 	stw	r22,4(r8)
1000a8a8:	d8c02015 	stw	r3,128(sp)
1000a8ac:	d8801f15 	stw	r2,124(sp)
1000a8b0:	e0bff40e 	bge	fp,r2,1000a884 <__alt_data_end+0xf800a884>
1000a8b4:	d9801e04 	addi	r6,sp,120
1000a8b8:	b80b883a 	mov	r5,r23
1000a8bc:	8009883a 	mov	r4,r16
1000a8c0:	00182f80 	call	100182f8 <__sprint_r>
1000a8c4:	103ef31e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000a8c8:	8c7ffc04 	addi	r17,r17,-16
1000a8cc:	d8c02017 	ldw	r3,128(sp)
1000a8d0:	d8801f17 	ldw	r2,124(sp)
1000a8d4:	da000404 	addi	r8,sp,16
1000a8d8:	b47fed16 	blt	r22,r17,1000a890 <__alt_data_end+0xf800a890>
1000a8dc:	9021883a 	mov	r16,r18
1000a8e0:	9825883a 	mov	r18,r19
1000a8e4:	8827883a 	mov	r19,r17
1000a8e8:	dc403b17 	ldw	r17,236(sp)
1000a8ec:	d9403517 	ldw	r5,212(sp)
1000a8f0:	98c7883a 	add	r3,r19,r3
1000a8f4:	10800044 	addi	r2,r2,1
1000a8f8:	41400015 	stw	r5,0(r8)
1000a8fc:	44c00115 	stw	r19,4(r8)
1000a900:	d8c02015 	stw	r3,128(sp)
1000a904:	d8801f15 	stw	r2,124(sp)
1000a908:	010001c4 	movi	r4,7
1000a90c:	2082c516 	blt	r4,r2,1000b424 <___vfprintf_internal_r+0x13a0>
1000a910:	df002787 	ldb	fp,158(sp)
1000a914:	42000204 	addi	r8,r8,8
1000a918:	e0000c26 	beq	fp,zero,1000a94c <___vfprintf_internal_r+0x8c8>
1000a91c:	d8801f17 	ldw	r2,124(sp)
1000a920:	d9002784 	addi	r4,sp,158
1000a924:	18c00044 	addi	r3,r3,1
1000a928:	10800044 	addi	r2,r2,1
1000a92c:	41000015 	stw	r4,0(r8)
1000a930:	01000044 	movi	r4,1
1000a934:	41000115 	stw	r4,4(r8)
1000a938:	d8c02015 	stw	r3,128(sp)
1000a93c:	d8801f15 	stw	r2,124(sp)
1000a940:	010001c4 	movi	r4,7
1000a944:	20825e16 	blt	r4,r2,1000b2c0 <___vfprintf_internal_r+0x123c>
1000a948:	42000204 	addi	r8,r8,8
1000a94c:	d8802c17 	ldw	r2,176(sp)
1000a950:	10000c26 	beq	r2,zero,1000a984 <___vfprintf_internal_r+0x900>
1000a954:	d8801f17 	ldw	r2,124(sp)
1000a958:	d9002704 	addi	r4,sp,156
1000a95c:	18c00084 	addi	r3,r3,2
1000a960:	10800044 	addi	r2,r2,1
1000a964:	41000015 	stw	r4,0(r8)
1000a968:	01000084 	movi	r4,2
1000a96c:	41000115 	stw	r4,4(r8)
1000a970:	d8c02015 	stw	r3,128(sp)
1000a974:	d8801f15 	stw	r2,124(sp)
1000a978:	010001c4 	movi	r4,7
1000a97c:	20825816 	blt	r4,r2,1000b2e0 <___vfprintf_internal_r+0x125c>
1000a980:	42000204 	addi	r8,r8,8
1000a984:	d9003017 	ldw	r4,192(sp)
1000a988:	00802004 	movi	r2,128
1000a98c:	2081bb26 	beq	r4,r2,1000b07c <___vfprintf_internal_r+0xff8>
1000a990:	d9402a17 	ldw	r5,168(sp)
1000a994:	d8802b17 	ldw	r2,172(sp)
1000a998:	28adc83a 	sub	r22,r5,r2
1000a99c:	0580310e 	bge	zero,r22,1000aa64 <___vfprintf_internal_r+0x9e0>
1000a9a0:	07000404 	movi	fp,16
1000a9a4:	d8801f17 	ldw	r2,124(sp)
1000a9a8:	e584360e 	bge	fp,r22,1000ba84 <___vfprintf_internal_r+0x1a00>
1000a9ac:	014400b4 	movhi	r5,4098
1000a9b0:	294b5784 	addi	r5,r5,11614
1000a9b4:	dc402a15 	stw	r17,168(sp)
1000a9b8:	d9402c15 	stw	r5,176(sp)
1000a9bc:	b023883a 	mov	r17,r22
1000a9c0:	04c001c4 	movi	r19,7
1000a9c4:	a82d883a 	mov	r22,r21
1000a9c8:	902b883a 	mov	r21,r18
1000a9cc:	8025883a 	mov	r18,r16
1000a9d0:	dc002d17 	ldw	r16,180(sp)
1000a9d4:	00000306 	br	1000a9e4 <___vfprintf_internal_r+0x960>
1000a9d8:	8c7ffc04 	addi	r17,r17,-16
1000a9dc:	42000204 	addi	r8,r8,8
1000a9e0:	e440110e 	bge	fp,r17,1000aa28 <___vfprintf_internal_r+0x9a4>
1000a9e4:	18c00404 	addi	r3,r3,16
1000a9e8:	10800044 	addi	r2,r2,1
1000a9ec:	45000015 	stw	r20,0(r8)
1000a9f0:	47000115 	stw	fp,4(r8)
1000a9f4:	d8c02015 	stw	r3,128(sp)
1000a9f8:	d8801f15 	stw	r2,124(sp)
1000a9fc:	98bff60e 	bge	r19,r2,1000a9d8 <__alt_data_end+0xf800a9d8>
1000aa00:	d9801e04 	addi	r6,sp,120
1000aa04:	b80b883a 	mov	r5,r23
1000aa08:	8009883a 	mov	r4,r16
1000aa0c:	00182f80 	call	100182f8 <__sprint_r>
1000aa10:	103ea01e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000aa14:	8c7ffc04 	addi	r17,r17,-16
1000aa18:	d8c02017 	ldw	r3,128(sp)
1000aa1c:	d8801f17 	ldw	r2,124(sp)
1000aa20:	da000404 	addi	r8,sp,16
1000aa24:	e47fef16 	blt	fp,r17,1000a9e4 <__alt_data_end+0xf800a9e4>
1000aa28:	9021883a 	mov	r16,r18
1000aa2c:	a825883a 	mov	r18,r21
1000aa30:	b02b883a 	mov	r21,r22
1000aa34:	882d883a 	mov	r22,r17
1000aa38:	dc402a17 	ldw	r17,168(sp)
1000aa3c:	d9002c17 	ldw	r4,176(sp)
1000aa40:	1d87883a 	add	r3,r3,r22
1000aa44:	10800044 	addi	r2,r2,1
1000aa48:	41000015 	stw	r4,0(r8)
1000aa4c:	45800115 	stw	r22,4(r8)
1000aa50:	d8c02015 	stw	r3,128(sp)
1000aa54:	d8801f15 	stw	r2,124(sp)
1000aa58:	010001c4 	movi	r4,7
1000aa5c:	20821016 	blt	r4,r2,1000b2a0 <___vfprintf_internal_r+0x121c>
1000aa60:	42000204 	addi	r8,r8,8
1000aa64:	9080400c 	andi	r2,r18,256
1000aa68:	10013a1e 	bne	r2,zero,1000af54 <___vfprintf_internal_r+0xed0>
1000aa6c:	d9402b17 	ldw	r5,172(sp)
1000aa70:	d8801f17 	ldw	r2,124(sp)
1000aa74:	44000015 	stw	r16,0(r8)
1000aa78:	1947883a 	add	r3,r3,r5
1000aa7c:	10800044 	addi	r2,r2,1
1000aa80:	41400115 	stw	r5,4(r8)
1000aa84:	d8c02015 	stw	r3,128(sp)
1000aa88:	d8801f15 	stw	r2,124(sp)
1000aa8c:	010001c4 	movi	r4,7
1000aa90:	2081f516 	blt	r4,r2,1000b268 <___vfprintf_internal_r+0x11e4>
1000aa94:	42000204 	addi	r8,r8,8
1000aa98:	9480010c 	andi	r18,r18,4
1000aa9c:	90003226 	beq	r18,zero,1000ab68 <___vfprintf_internal_r+0xae4>
1000aaa0:	d9403117 	ldw	r5,196(sp)
1000aaa4:	d8802917 	ldw	r2,164(sp)
1000aaa8:	28a1c83a 	sub	r16,r5,r2
1000aaac:	04002e0e 	bge	zero,r16,1000ab68 <___vfprintf_internal_r+0xae4>
1000aab0:	04400404 	movi	r17,16
1000aab4:	d8801f17 	ldw	r2,124(sp)
1000aab8:	8c04c40e 	bge	r17,r16,1000bdcc <___vfprintf_internal_r+0x1d48>
1000aabc:	014400b4 	movhi	r5,4098
1000aac0:	294b5b84 	addi	r5,r5,11630
1000aac4:	d9403515 	stw	r5,212(sp)
1000aac8:	048001c4 	movi	r18,7
1000aacc:	dcc02d17 	ldw	r19,180(sp)
1000aad0:	00000306 	br	1000aae0 <___vfprintf_internal_r+0xa5c>
1000aad4:	843ffc04 	addi	r16,r16,-16
1000aad8:	42000204 	addi	r8,r8,8
1000aadc:	8c00130e 	bge	r17,r16,1000ab2c <___vfprintf_internal_r+0xaa8>
1000aae0:	010400b4 	movhi	r4,4098
1000aae4:	18c00404 	addi	r3,r3,16
1000aae8:	10800044 	addi	r2,r2,1
1000aaec:	210b5b84 	addi	r4,r4,11630
1000aaf0:	41000015 	stw	r4,0(r8)
1000aaf4:	44400115 	stw	r17,4(r8)
1000aaf8:	d8c02015 	stw	r3,128(sp)
1000aafc:	d8801f15 	stw	r2,124(sp)
1000ab00:	90bff40e 	bge	r18,r2,1000aad4 <__alt_data_end+0xf800aad4>
1000ab04:	d9801e04 	addi	r6,sp,120
1000ab08:	b80b883a 	mov	r5,r23
1000ab0c:	9809883a 	mov	r4,r19
1000ab10:	00182f80 	call	100182f8 <__sprint_r>
1000ab14:	103e5f1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000ab18:	843ffc04 	addi	r16,r16,-16
1000ab1c:	d8c02017 	ldw	r3,128(sp)
1000ab20:	d8801f17 	ldw	r2,124(sp)
1000ab24:	da000404 	addi	r8,sp,16
1000ab28:	8c3fed16 	blt	r17,r16,1000aae0 <__alt_data_end+0xf800aae0>
1000ab2c:	d9403517 	ldw	r5,212(sp)
1000ab30:	1c07883a 	add	r3,r3,r16
1000ab34:	10800044 	addi	r2,r2,1
1000ab38:	41400015 	stw	r5,0(r8)
1000ab3c:	44000115 	stw	r16,4(r8)
1000ab40:	d8c02015 	stw	r3,128(sp)
1000ab44:	d8801f15 	stw	r2,124(sp)
1000ab48:	010001c4 	movi	r4,7
1000ab4c:	2080060e 	bge	r4,r2,1000ab68 <___vfprintf_internal_r+0xae4>
1000ab50:	d9002d17 	ldw	r4,180(sp)
1000ab54:	d9801e04 	addi	r6,sp,120
1000ab58:	b80b883a 	mov	r5,r23
1000ab5c:	00182f80 	call	100182f8 <__sprint_r>
1000ab60:	103e4c1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000ab64:	d8c02017 	ldw	r3,128(sp)
1000ab68:	d8803117 	ldw	r2,196(sp)
1000ab6c:	d9002917 	ldw	r4,164(sp)
1000ab70:	1100010e 	bge	r2,r4,1000ab78 <___vfprintf_internal_r+0xaf4>
1000ab74:	2005883a 	mov	r2,r4
1000ab78:	d9402f17 	ldw	r5,188(sp)
1000ab7c:	288b883a 	add	r5,r5,r2
1000ab80:	d9402f15 	stw	r5,188(sp)
1000ab84:	1801c01e 	bne	r3,zero,1000b288 <___vfprintf_internal_r+0x1204>
1000ab88:	a8800007 	ldb	r2,0(r21)
1000ab8c:	d8001f15 	stw	zero,124(sp)
1000ab90:	da000404 	addi	r8,sp,16
1000ab94:	103d751e 	bne	r2,zero,1000a16c <__alt_data_end+0xf800a16c>
1000ab98:	a823883a 	mov	r17,r21
1000ab9c:	003d8b06 	br	1000a1cc <__alt_data_end+0xf800a1cc>
1000aba0:	8025883a 	mov	r18,r16
1000aba4:	dc002903 	ldbu	r16,164(sp)
1000aba8:	e011883a 	mov	r8,fp
1000abac:	84003fcc 	andi	r16,r16,255
1000abb0:	8005e51e 	bne	r16,zero,1000c348 <___vfprintf_internal_r+0x22c4>
1000abb4:	94800414 	ori	r18,r18,16
1000abb8:	9080080c 	andi	r2,r18,32
1000abbc:	10022b26 	beq	r2,zero,1000b46c <___vfprintf_internal_r+0x13e8>
1000abc0:	d9002e17 	ldw	r4,184(sp)
1000abc4:	d9402a17 	ldw	r5,168(sp)
1000abc8:	d8002785 	stb	zero,158(sp)
1000abcc:	20c00204 	addi	r3,r4,8
1000abd0:	24c00017 	ldw	r19,0(r4)
1000abd4:	25800117 	ldw	r22,4(r4)
1000abd8:	28042e16 	blt	r5,zero,1000bc94 <___vfprintf_internal_r+0x1c10>
1000abdc:	013fdfc4 	movi	r4,-129
1000abe0:	9d84b03a 	or	r2,r19,r22
1000abe4:	d8c02e15 	stw	r3,184(sp)
1000abe8:	9124703a 	and	r18,r18,r4
1000abec:	0039883a 	mov	fp,zero
1000abf0:	103e801e 	bne	r2,zero,1000a5f4 <__alt_data_end+0xf800a5f4>
1000abf4:	d9002a17 	ldw	r4,168(sp)
1000abf8:	2002e01e 	bne	r4,zero,1000b77c <___vfprintf_internal_r+0x16f8>
1000abfc:	d8002a15 	stw	zero,168(sp)
1000ac00:	d8002b15 	stw	zero,172(sp)
1000ac04:	dc001e04 	addi	r16,sp,120
1000ac08:	003ef506 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000ac0c:	8025883a 	mov	r18,r16
1000ac10:	dc002903 	ldbu	r16,164(sp)
1000ac14:	e011883a 	mov	r8,fp
1000ac18:	84003fcc 	andi	r16,r16,255
1000ac1c:	8005ba1e 	bne	r16,zero,1000c308 <___vfprintf_internal_r+0x2284>
1000ac20:	010400b4 	movhi	r4,4098
1000ac24:	210b4b04 	addi	r4,r4,11564
1000ac28:	d9003915 	stw	r4,228(sp)
1000ac2c:	9080080c 	andi	r2,r18,32
1000ac30:	10006126 	beq	r2,zero,1000adb8 <___vfprintf_internal_r+0xd34>
1000ac34:	d9402e17 	ldw	r5,184(sp)
1000ac38:	2cc00017 	ldw	r19,0(r5)
1000ac3c:	2d800117 	ldw	r22,4(r5)
1000ac40:	29400204 	addi	r5,r5,8
1000ac44:	d9402e15 	stw	r5,184(sp)
1000ac48:	9080004c 	andi	r2,r18,1
1000ac4c:	1001ac26 	beq	r2,zero,1000b300 <___vfprintf_internal_r+0x127c>
1000ac50:	9d84b03a 	or	r2,r19,r22
1000ac54:	10038526 	beq	r2,zero,1000ba6c <___vfprintf_internal_r+0x19e8>
1000ac58:	d8c02a17 	ldw	r3,168(sp)
1000ac5c:	00800c04 	movi	r2,48
1000ac60:	d8802705 	stb	r2,156(sp)
1000ac64:	dc402745 	stb	r17,157(sp)
1000ac68:	d8002785 	stb	zero,158(sp)
1000ac6c:	90800094 	ori	r2,r18,2
1000ac70:	18047916 	blt	r3,zero,1000be58 <___vfprintf_internal_r+0x1dd4>
1000ac74:	00bfdfc4 	movi	r2,-129
1000ac78:	90a4703a 	and	r18,r18,r2
1000ac7c:	94800094 	ori	r18,r18,2
1000ac80:	0039883a 	mov	fp,zero
1000ac84:	d9003917 	ldw	r4,228(sp)
1000ac88:	dc001e04 	addi	r16,sp,120
1000ac8c:	988003cc 	andi	r2,r19,15
1000ac90:	b006973a 	slli	r3,r22,28
1000ac94:	2085883a 	add	r2,r4,r2
1000ac98:	9826d13a 	srli	r19,r19,4
1000ac9c:	10800003 	ldbu	r2,0(r2)
1000aca0:	b02cd13a 	srli	r22,r22,4
1000aca4:	843fffc4 	addi	r16,r16,-1
1000aca8:	1ce6b03a 	or	r19,r3,r19
1000acac:	80800005 	stb	r2,0(r16)
1000acb0:	9d84b03a 	or	r2,r19,r22
1000acb4:	103ff51e 	bne	r2,zero,1000ac8c <__alt_data_end+0xf800ac8c>
1000acb8:	d8c02817 	ldw	r3,160(sp)
1000acbc:	1c07c83a 	sub	r3,r3,r16
1000acc0:	d8c02b15 	stw	r3,172(sp)
1000acc4:	003ec606 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000acc8:	8025883a 	mov	r18,r16
1000accc:	dc002903 	ldbu	r16,164(sp)
1000acd0:	e011883a 	mov	r8,fp
1000acd4:	84003fcc 	andi	r16,r16,255
1000acd8:	803e9626 	beq	r16,zero,1000a734 <__alt_data_end+0xf800a734>
1000acdc:	d8c02b03 	ldbu	r3,172(sp)
1000ace0:	d8c02785 	stb	r3,158(sp)
1000ace4:	003e9306 	br	1000a734 <__alt_data_end+0xf800a734>
1000ace8:	00c00044 	movi	r3,1
1000acec:	d8c02905 	stb	r3,164(sp)
1000acf0:	00c00ac4 	movi	r3,43
1000acf4:	d8c02b05 	stb	r3,172(sp)
1000acf8:	ac400007 	ldb	r17,0(r21)
1000acfc:	003d4306 	br	1000a20c <__alt_data_end+0xf800a20c>
1000ad00:	84000814 	ori	r16,r16,32
1000ad04:	ac400007 	ldb	r17,0(r21)
1000ad08:	003d4006 	br	1000a20c <__alt_data_end+0xf800a20c>
1000ad0c:	d8802e17 	ldw	r2,184(sp)
1000ad10:	8025883a 	mov	r18,r16
1000ad14:	d8002785 	stb	zero,158(sp)
1000ad18:	14000017 	ldw	r16,0(r2)
1000ad1c:	e011883a 	mov	r8,fp
1000ad20:	14c00104 	addi	r19,r2,4
1000ad24:	80042d26 	beq	r16,zero,1000bddc <___vfprintf_internal_r+0x1d58>
1000ad28:	d8c02a17 	ldw	r3,168(sp)
1000ad2c:	1803e416 	blt	r3,zero,1000bcc0 <___vfprintf_internal_r+0x1c3c>
1000ad30:	180d883a 	mov	r6,r3
1000ad34:	000b883a 	mov	r5,zero
1000ad38:	8009883a 	mov	r4,r16
1000ad3c:	df003d15 	stw	fp,244(sp)
1000ad40:	00118dc0 	call	100118dc <memchr>
1000ad44:	da003d17 	ldw	r8,244(sp)
1000ad48:	10046826 	beq	r2,zero,1000beec <___vfprintf_internal_r+0x1e68>
1000ad4c:	1405c83a 	sub	r2,r2,r16
1000ad50:	d8802b15 	stw	r2,172(sp)
1000ad54:	1003e016 	blt	r2,zero,1000bcd8 <___vfprintf_internal_r+0x1c54>
1000ad58:	df002783 	ldbu	fp,158(sp)
1000ad5c:	d8802915 	stw	r2,164(sp)
1000ad60:	dcc02e15 	stw	r19,184(sp)
1000ad64:	d8002a15 	stw	zero,168(sp)
1000ad68:	d8003215 	stw	zero,200(sp)
1000ad6c:	003ea206 	br	1000a7f8 <__alt_data_end+0xf800a7f8>
1000ad70:	8025883a 	mov	r18,r16
1000ad74:	dc002903 	ldbu	r16,164(sp)
1000ad78:	e011883a 	mov	r8,fp
1000ad7c:	84003fcc 	andi	r16,r16,255
1000ad80:	803f8d26 	beq	r16,zero,1000abb8 <__alt_data_end+0xf800abb8>
1000ad84:	d8c02b03 	ldbu	r3,172(sp)
1000ad88:	d8c02785 	stb	r3,158(sp)
1000ad8c:	003f8a06 	br	1000abb8 <__alt_data_end+0xf800abb8>
1000ad90:	8025883a 	mov	r18,r16
1000ad94:	dc002903 	ldbu	r16,164(sp)
1000ad98:	e011883a 	mov	r8,fp
1000ad9c:	84003fcc 	andi	r16,r16,255
1000ada0:	8005661e 	bne	r16,zero,1000c33c <___vfprintf_internal_r+0x22b8>
1000ada4:	010400b4 	movhi	r4,4098
1000ada8:	210b5004 	addi	r4,r4,11584
1000adac:	d9003915 	stw	r4,228(sp)
1000adb0:	9080080c 	andi	r2,r18,32
1000adb4:	103f9f1e 	bne	r2,zero,1000ac34 <__alt_data_end+0xf800ac34>
1000adb8:	9080040c 	andi	r2,r18,16
1000adbc:	1002eb26 	beq	r2,zero,1000b96c <___vfprintf_internal_r+0x18e8>
1000adc0:	d8802e17 	ldw	r2,184(sp)
1000adc4:	002d883a 	mov	r22,zero
1000adc8:	14c00017 	ldw	r19,0(r2)
1000adcc:	10800104 	addi	r2,r2,4
1000add0:	d8802e15 	stw	r2,184(sp)
1000add4:	003f9c06 	br	1000ac48 <__alt_data_end+0xf800ac48>
1000add8:	d8802b07 	ldb	r2,172(sp)
1000addc:	1002e11e 	bne	r2,zero,1000b964 <___vfprintf_internal_r+0x18e0>
1000ade0:	00c00044 	movi	r3,1
1000ade4:	d8c02905 	stb	r3,164(sp)
1000ade8:	00c00804 	movi	r3,32
1000adec:	d8c02b05 	stb	r3,172(sp)
1000adf0:	ac400007 	ldb	r17,0(r21)
1000adf4:	003d0506 	br	1000a20c <__alt_data_end+0xf800a20c>
1000adf8:	84000054 	ori	r16,r16,1
1000adfc:	ac400007 	ldb	r17,0(r21)
1000ae00:	003d0206 	br	1000a20c <__alt_data_end+0xf800a20c>
1000ae04:	8025883a 	mov	r18,r16
1000ae08:	dc002903 	ldbu	r16,164(sp)
1000ae0c:	e011883a 	mov	r8,fp
1000ae10:	84003fcc 	andi	r16,r16,255
1000ae14:	803de726 	beq	r16,zero,1000a5b4 <__alt_data_end+0xf800a5b4>
1000ae18:	d8c02b03 	ldbu	r3,172(sp)
1000ae1c:	d8c02785 	stb	r3,158(sp)
1000ae20:	003de406 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000ae24:	84001014 	ori	r16,r16,64
1000ae28:	ac400007 	ldb	r17,0(r21)
1000ae2c:	003cf706 	br	1000a20c <__alt_data_end+0xf800a20c>
1000ae30:	ac400007 	ldb	r17,0(r21)
1000ae34:	00801b04 	movi	r2,108
1000ae38:	88838f26 	beq	r17,r2,1000bc78 <___vfprintf_internal_r+0x1bf4>
1000ae3c:	84000414 	ori	r16,r16,16
1000ae40:	003cf206 	br	1000a20c <__alt_data_end+0xf800a20c>
1000ae44:	8025883a 	mov	r18,r16
1000ae48:	dc002903 	ldbu	r16,164(sp)
1000ae4c:	e011883a 	mov	r8,fp
1000ae50:	84003fcc 	andi	r16,r16,255
1000ae54:	80053f1e 	bne	r16,zero,1000c354 <___vfprintf_internal_r+0x22d0>
1000ae58:	9080080c 	andi	r2,r18,32
1000ae5c:	1002d226 	beq	r2,zero,1000b9a8 <___vfprintf_internal_r+0x1924>
1000ae60:	d9002e17 	ldw	r4,184(sp)
1000ae64:	d9402f17 	ldw	r5,188(sp)
1000ae68:	20800017 	ldw	r2,0(r4)
1000ae6c:	2807d7fa 	srai	r3,r5,31
1000ae70:	21000104 	addi	r4,r4,4
1000ae74:	d9002e15 	stw	r4,184(sp)
1000ae78:	11400015 	stw	r5,0(r2)
1000ae7c:	10c00115 	stw	r3,4(r2)
1000ae80:	003cb806 	br	1000a164 <__alt_data_end+0xf800a164>
1000ae84:	d8c02e17 	ldw	r3,184(sp)
1000ae88:	d9002e17 	ldw	r4,184(sp)
1000ae8c:	8025883a 	mov	r18,r16
1000ae90:	18800017 	ldw	r2,0(r3)
1000ae94:	21000104 	addi	r4,r4,4
1000ae98:	00c00044 	movi	r3,1
1000ae9c:	e011883a 	mov	r8,fp
1000aea0:	d8c02915 	stw	r3,164(sp)
1000aea4:	d8002785 	stb	zero,158(sp)
1000aea8:	d8801405 	stb	r2,80(sp)
1000aeac:	d9002e15 	stw	r4,184(sp)
1000aeb0:	d8c02b15 	stw	r3,172(sp)
1000aeb4:	d8002a15 	stw	zero,168(sp)
1000aeb8:	d8003215 	stw	zero,200(sp)
1000aebc:	dc001404 	addi	r16,sp,80
1000aec0:	0039883a 	mov	fp,zero
1000aec4:	003e5306 	br	1000a814 <__alt_data_end+0xf800a814>
1000aec8:	010400b4 	movhi	r4,4098
1000aecc:	210b5004 	addi	r4,r4,11584
1000aed0:	0039883a 	mov	fp,zero
1000aed4:	d9003915 	stw	r4,228(sp)
1000aed8:	04401e04 	movi	r17,120
1000aedc:	003f6906 	br	1000ac84 <__alt_data_end+0xf800ac84>
1000aee0:	8025883a 	mov	r18,r16
1000aee4:	dc002903 	ldbu	r16,164(sp)
1000aee8:	e011883a 	mov	r8,fp
1000aeec:	84003fcc 	andi	r16,r16,255
1000aef0:	8005081e 	bne	r16,zero,1000c314 <___vfprintf_internal_r+0x2290>
1000aef4:	883d6126 	beq	r17,zero,1000a47c <__alt_data_end+0xf800a47c>
1000aef8:	00c00044 	movi	r3,1
1000aefc:	d8c02915 	stw	r3,164(sp)
1000af00:	dc401405 	stb	r17,80(sp)
1000af04:	d8002785 	stb	zero,158(sp)
1000af08:	003fe906 	br	1000aeb0 <__alt_data_end+0xf800aeb0>
1000af0c:	014400b4 	movhi	r5,4098
1000af10:	294b5004 	addi	r5,r5,11584
1000af14:	d9403915 	stw	r5,228(sp)
1000af18:	d8c02e15 	stw	r3,184(sp)
1000af1c:	1025883a 	mov	r18,r2
1000af20:	04401e04 	movi	r17,120
1000af24:	9d84b03a 	or	r2,r19,r22
1000af28:	1000fc1e 	bne	r2,zero,1000b31c <___vfprintf_internal_r+0x1298>
1000af2c:	0039883a 	mov	fp,zero
1000af30:	00800084 	movi	r2,2
1000af34:	10803fcc 	andi	r2,r2,255
1000af38:	00c00044 	movi	r3,1
1000af3c:	10c20f26 	beq	r2,r3,1000b77c <___vfprintf_internal_r+0x16f8>
1000af40:	00c00084 	movi	r3,2
1000af44:	10fd3326 	beq	r2,r3,1000a414 <__alt_data_end+0xf800a414>
1000af48:	003e0b06 	br	1000a778 <__alt_data_end+0xf800a778>
1000af4c:	d8c02017 	ldw	r3,128(sp)
1000af50:	003e7106 	br	1000a918 <__alt_data_end+0xf800a918>
1000af54:	00801944 	movi	r2,101
1000af58:	14407e0e 	bge	r2,r17,1000b154 <___vfprintf_internal_r+0x10d0>
1000af5c:	d9003617 	ldw	r4,216(sp)
1000af60:	d9403817 	ldw	r5,224(sp)
1000af64:	000d883a 	mov	r6,zero
1000af68:	000f883a 	mov	r7,zero
1000af6c:	d8c03c15 	stw	r3,240(sp)
1000af70:	da003d15 	stw	r8,244(sp)
1000af74:	001dc140 	call	1001dc14 <__eqdf2>
1000af78:	d8c03c17 	ldw	r3,240(sp)
1000af7c:	da003d17 	ldw	r8,244(sp)
1000af80:	1000f71e 	bne	r2,zero,1000b360 <___vfprintf_internal_r+0x12dc>
1000af84:	d8801f17 	ldw	r2,124(sp)
1000af88:	010400b4 	movhi	r4,4098
1000af8c:	210b5704 	addi	r4,r4,11612
1000af90:	18c00044 	addi	r3,r3,1
1000af94:	10800044 	addi	r2,r2,1
1000af98:	41000015 	stw	r4,0(r8)
1000af9c:	01000044 	movi	r4,1
1000afa0:	41000115 	stw	r4,4(r8)
1000afa4:	d8c02015 	stw	r3,128(sp)
1000afa8:	d8801f15 	stw	r2,124(sp)
1000afac:	010001c4 	movi	r4,7
1000afb0:	2082b816 	blt	r4,r2,1000ba94 <___vfprintf_internal_r+0x1a10>
1000afb4:	42000204 	addi	r8,r8,8
1000afb8:	d8802617 	ldw	r2,152(sp)
1000afbc:	d9403317 	ldw	r5,204(sp)
1000afc0:	11400216 	blt	r2,r5,1000afcc <___vfprintf_internal_r+0xf48>
1000afc4:	9080004c 	andi	r2,r18,1
1000afc8:	103eb326 	beq	r2,zero,1000aa98 <__alt_data_end+0xf800aa98>
1000afcc:	d8803717 	ldw	r2,220(sp)
1000afd0:	d9003417 	ldw	r4,208(sp)
1000afd4:	d9403717 	ldw	r5,220(sp)
1000afd8:	1887883a 	add	r3,r3,r2
1000afdc:	d8801f17 	ldw	r2,124(sp)
1000afe0:	41000015 	stw	r4,0(r8)
1000afe4:	41400115 	stw	r5,4(r8)
1000afe8:	10800044 	addi	r2,r2,1
1000afec:	d8c02015 	stw	r3,128(sp)
1000aff0:	d8801f15 	stw	r2,124(sp)
1000aff4:	010001c4 	movi	r4,7
1000aff8:	20832916 	blt	r4,r2,1000bca0 <___vfprintf_internal_r+0x1c1c>
1000affc:	42000204 	addi	r8,r8,8
1000b000:	d8803317 	ldw	r2,204(sp)
1000b004:	143fffc4 	addi	r16,r2,-1
1000b008:	043ea30e 	bge	zero,r16,1000aa98 <__alt_data_end+0xf800aa98>
1000b00c:	04400404 	movi	r17,16
1000b010:	d8801f17 	ldw	r2,124(sp)
1000b014:	8c00880e 	bge	r17,r16,1000b238 <___vfprintf_internal_r+0x11b4>
1000b018:	014400b4 	movhi	r5,4098
1000b01c:	294b5784 	addi	r5,r5,11614
1000b020:	d9402c15 	stw	r5,176(sp)
1000b024:	058001c4 	movi	r22,7
1000b028:	dcc02d17 	ldw	r19,180(sp)
1000b02c:	00000306 	br	1000b03c <___vfprintf_internal_r+0xfb8>
1000b030:	42000204 	addi	r8,r8,8
1000b034:	843ffc04 	addi	r16,r16,-16
1000b038:	8c00820e 	bge	r17,r16,1000b244 <___vfprintf_internal_r+0x11c0>
1000b03c:	18c00404 	addi	r3,r3,16
1000b040:	10800044 	addi	r2,r2,1
1000b044:	45000015 	stw	r20,0(r8)
1000b048:	44400115 	stw	r17,4(r8)
1000b04c:	d8c02015 	stw	r3,128(sp)
1000b050:	d8801f15 	stw	r2,124(sp)
1000b054:	b0bff60e 	bge	r22,r2,1000b030 <__alt_data_end+0xf800b030>
1000b058:	d9801e04 	addi	r6,sp,120
1000b05c:	b80b883a 	mov	r5,r23
1000b060:	9809883a 	mov	r4,r19
1000b064:	00182f80 	call	100182f8 <__sprint_r>
1000b068:	103d0a1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b06c:	d8c02017 	ldw	r3,128(sp)
1000b070:	d8801f17 	ldw	r2,124(sp)
1000b074:	da000404 	addi	r8,sp,16
1000b078:	003fee06 	br	1000b034 <__alt_data_end+0xf800b034>
1000b07c:	d9403117 	ldw	r5,196(sp)
1000b080:	d8802917 	ldw	r2,164(sp)
1000b084:	28adc83a 	sub	r22,r5,r2
1000b088:	05be410e 	bge	zero,r22,1000a990 <__alt_data_end+0xf800a990>
1000b08c:	07000404 	movi	fp,16
1000b090:	d8801f17 	ldw	r2,124(sp)
1000b094:	e5838f0e 	bge	fp,r22,1000bed4 <___vfprintf_internal_r+0x1e50>
1000b098:	014400b4 	movhi	r5,4098
1000b09c:	294b5784 	addi	r5,r5,11614
1000b0a0:	dc403015 	stw	r17,192(sp)
1000b0a4:	d9402c15 	stw	r5,176(sp)
1000b0a8:	b023883a 	mov	r17,r22
1000b0ac:	04c001c4 	movi	r19,7
1000b0b0:	a82d883a 	mov	r22,r21
1000b0b4:	902b883a 	mov	r21,r18
1000b0b8:	8025883a 	mov	r18,r16
1000b0bc:	dc002d17 	ldw	r16,180(sp)
1000b0c0:	00000306 	br	1000b0d0 <___vfprintf_internal_r+0x104c>
1000b0c4:	8c7ffc04 	addi	r17,r17,-16
1000b0c8:	42000204 	addi	r8,r8,8
1000b0cc:	e440110e 	bge	fp,r17,1000b114 <___vfprintf_internal_r+0x1090>
1000b0d0:	18c00404 	addi	r3,r3,16
1000b0d4:	10800044 	addi	r2,r2,1
1000b0d8:	45000015 	stw	r20,0(r8)
1000b0dc:	47000115 	stw	fp,4(r8)
1000b0e0:	d8c02015 	stw	r3,128(sp)
1000b0e4:	d8801f15 	stw	r2,124(sp)
1000b0e8:	98bff60e 	bge	r19,r2,1000b0c4 <__alt_data_end+0xf800b0c4>
1000b0ec:	d9801e04 	addi	r6,sp,120
1000b0f0:	b80b883a 	mov	r5,r23
1000b0f4:	8009883a 	mov	r4,r16
1000b0f8:	00182f80 	call	100182f8 <__sprint_r>
1000b0fc:	103ce51e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b100:	8c7ffc04 	addi	r17,r17,-16
1000b104:	d8c02017 	ldw	r3,128(sp)
1000b108:	d8801f17 	ldw	r2,124(sp)
1000b10c:	da000404 	addi	r8,sp,16
1000b110:	e47fef16 	blt	fp,r17,1000b0d0 <__alt_data_end+0xf800b0d0>
1000b114:	9021883a 	mov	r16,r18
1000b118:	a825883a 	mov	r18,r21
1000b11c:	b02b883a 	mov	r21,r22
1000b120:	882d883a 	mov	r22,r17
1000b124:	dc403017 	ldw	r17,192(sp)
1000b128:	d9002c17 	ldw	r4,176(sp)
1000b12c:	1d87883a 	add	r3,r3,r22
1000b130:	10800044 	addi	r2,r2,1
1000b134:	41000015 	stw	r4,0(r8)
1000b138:	45800115 	stw	r22,4(r8)
1000b13c:	d8c02015 	stw	r3,128(sp)
1000b140:	d8801f15 	stw	r2,124(sp)
1000b144:	010001c4 	movi	r4,7
1000b148:	20818e16 	blt	r4,r2,1000b784 <___vfprintf_internal_r+0x1700>
1000b14c:	42000204 	addi	r8,r8,8
1000b150:	003e0f06 	br	1000a990 <__alt_data_end+0xf800a990>
1000b154:	d9403317 	ldw	r5,204(sp)
1000b158:	00800044 	movi	r2,1
1000b15c:	18c00044 	addi	r3,r3,1
1000b160:	1141530e 	bge	r2,r5,1000b6b0 <___vfprintf_internal_r+0x162c>
1000b164:	dc401f17 	ldw	r17,124(sp)
1000b168:	00800044 	movi	r2,1
1000b16c:	40800115 	stw	r2,4(r8)
1000b170:	8c400044 	addi	r17,r17,1
1000b174:	44000015 	stw	r16,0(r8)
1000b178:	d8c02015 	stw	r3,128(sp)
1000b17c:	dc401f15 	stw	r17,124(sp)
1000b180:	008001c4 	movi	r2,7
1000b184:	14416b16 	blt	r2,r17,1000b734 <___vfprintf_internal_r+0x16b0>
1000b188:	42000204 	addi	r8,r8,8
1000b18c:	d8803717 	ldw	r2,220(sp)
1000b190:	d9003417 	ldw	r4,208(sp)
1000b194:	8c400044 	addi	r17,r17,1
1000b198:	10c7883a 	add	r3,r2,r3
1000b19c:	40800115 	stw	r2,4(r8)
1000b1a0:	41000015 	stw	r4,0(r8)
1000b1a4:	d8c02015 	stw	r3,128(sp)
1000b1a8:	dc401f15 	stw	r17,124(sp)
1000b1ac:	008001c4 	movi	r2,7
1000b1b0:	14416916 	blt	r2,r17,1000b758 <___vfprintf_internal_r+0x16d4>
1000b1b4:	45800204 	addi	r22,r8,8
1000b1b8:	d9003617 	ldw	r4,216(sp)
1000b1bc:	d9403817 	ldw	r5,224(sp)
1000b1c0:	000d883a 	mov	r6,zero
1000b1c4:	000f883a 	mov	r7,zero
1000b1c8:	d8c03c15 	stw	r3,240(sp)
1000b1cc:	001dc140 	call	1001dc14 <__eqdf2>
1000b1d0:	d8c03c17 	ldw	r3,240(sp)
1000b1d4:	1000bc26 	beq	r2,zero,1000b4c8 <___vfprintf_internal_r+0x1444>
1000b1d8:	d9403317 	ldw	r5,204(sp)
1000b1dc:	84000044 	addi	r16,r16,1
1000b1e0:	8c400044 	addi	r17,r17,1
1000b1e4:	28bfffc4 	addi	r2,r5,-1
1000b1e8:	1887883a 	add	r3,r3,r2
1000b1ec:	b0800115 	stw	r2,4(r22)
1000b1f0:	b4000015 	stw	r16,0(r22)
1000b1f4:	d8c02015 	stw	r3,128(sp)
1000b1f8:	dc401f15 	stw	r17,124(sp)
1000b1fc:	008001c4 	movi	r2,7
1000b200:	14414316 	blt	r2,r17,1000b710 <___vfprintf_internal_r+0x168c>
1000b204:	b5800204 	addi	r22,r22,8
1000b208:	d9003a17 	ldw	r4,232(sp)
1000b20c:	df0022c4 	addi	fp,sp,139
1000b210:	8c400044 	addi	r17,r17,1
1000b214:	20c7883a 	add	r3,r4,r3
1000b218:	b7000015 	stw	fp,0(r22)
1000b21c:	b1000115 	stw	r4,4(r22)
1000b220:	d8c02015 	stw	r3,128(sp)
1000b224:	dc401f15 	stw	r17,124(sp)
1000b228:	008001c4 	movi	r2,7
1000b22c:	14400e16 	blt	r2,r17,1000b268 <___vfprintf_internal_r+0x11e4>
1000b230:	b2000204 	addi	r8,r22,8
1000b234:	003e1806 	br	1000aa98 <__alt_data_end+0xf800aa98>
1000b238:	010400b4 	movhi	r4,4098
1000b23c:	210b5784 	addi	r4,r4,11614
1000b240:	d9002c15 	stw	r4,176(sp)
1000b244:	d9002c17 	ldw	r4,176(sp)
1000b248:	1c07883a 	add	r3,r3,r16
1000b24c:	44000115 	stw	r16,4(r8)
1000b250:	41000015 	stw	r4,0(r8)
1000b254:	10800044 	addi	r2,r2,1
1000b258:	d8c02015 	stw	r3,128(sp)
1000b25c:	d8801f15 	stw	r2,124(sp)
1000b260:	010001c4 	movi	r4,7
1000b264:	20be0b0e 	bge	r4,r2,1000aa94 <__alt_data_end+0xf800aa94>
1000b268:	d9002d17 	ldw	r4,180(sp)
1000b26c:	d9801e04 	addi	r6,sp,120
1000b270:	b80b883a 	mov	r5,r23
1000b274:	00182f80 	call	100182f8 <__sprint_r>
1000b278:	103c861e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b27c:	d8c02017 	ldw	r3,128(sp)
1000b280:	da000404 	addi	r8,sp,16
1000b284:	003e0406 	br	1000aa98 <__alt_data_end+0xf800aa98>
1000b288:	d9002d17 	ldw	r4,180(sp)
1000b28c:	d9801e04 	addi	r6,sp,120
1000b290:	b80b883a 	mov	r5,r23
1000b294:	00182f80 	call	100182f8 <__sprint_r>
1000b298:	103e3b26 	beq	r2,zero,1000ab88 <__alt_data_end+0xf800ab88>
1000b29c:	003c7d06 	br	1000a494 <__alt_data_end+0xf800a494>
1000b2a0:	d9002d17 	ldw	r4,180(sp)
1000b2a4:	d9801e04 	addi	r6,sp,120
1000b2a8:	b80b883a 	mov	r5,r23
1000b2ac:	00182f80 	call	100182f8 <__sprint_r>
1000b2b0:	103c781e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b2b4:	d8c02017 	ldw	r3,128(sp)
1000b2b8:	da000404 	addi	r8,sp,16
1000b2bc:	003de906 	br	1000aa64 <__alt_data_end+0xf800aa64>
1000b2c0:	d9002d17 	ldw	r4,180(sp)
1000b2c4:	d9801e04 	addi	r6,sp,120
1000b2c8:	b80b883a 	mov	r5,r23
1000b2cc:	00182f80 	call	100182f8 <__sprint_r>
1000b2d0:	103c701e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b2d4:	d8c02017 	ldw	r3,128(sp)
1000b2d8:	da000404 	addi	r8,sp,16
1000b2dc:	003d9b06 	br	1000a94c <__alt_data_end+0xf800a94c>
1000b2e0:	d9002d17 	ldw	r4,180(sp)
1000b2e4:	d9801e04 	addi	r6,sp,120
1000b2e8:	b80b883a 	mov	r5,r23
1000b2ec:	00182f80 	call	100182f8 <__sprint_r>
1000b2f0:	103c681e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b2f4:	d8c02017 	ldw	r3,128(sp)
1000b2f8:	da000404 	addi	r8,sp,16
1000b2fc:	003da106 	br	1000a984 <__alt_data_end+0xf800a984>
1000b300:	d9402a17 	ldw	r5,168(sp)
1000b304:	d8002785 	stb	zero,158(sp)
1000b308:	283f0616 	blt	r5,zero,1000af24 <__alt_data_end+0xf800af24>
1000b30c:	00ffdfc4 	movi	r3,-129
1000b310:	9d84b03a 	or	r2,r19,r22
1000b314:	90e4703a 	and	r18,r18,r3
1000b318:	103c3b26 	beq	r2,zero,1000a408 <__alt_data_end+0xf800a408>
1000b31c:	0039883a 	mov	fp,zero
1000b320:	003e5806 	br	1000ac84 <__alt_data_end+0xf800ac84>
1000b324:	9080040c 	andi	r2,r18,16
1000b328:	1001b326 	beq	r2,zero,1000b9f8 <___vfprintf_internal_r+0x1974>
1000b32c:	d8c02e17 	ldw	r3,184(sp)
1000b330:	d9002a17 	ldw	r4,168(sp)
1000b334:	d8002785 	stb	zero,158(sp)
1000b338:	18800104 	addi	r2,r3,4
1000b33c:	1cc00017 	ldw	r19,0(r3)
1000b340:	002d883a 	mov	r22,zero
1000b344:	2001b516 	blt	r4,zero,1000ba1c <___vfprintf_internal_r+0x1998>
1000b348:	00ffdfc4 	movi	r3,-129
1000b34c:	d8802e15 	stw	r2,184(sp)
1000b350:	90e4703a 	and	r18,r18,r3
1000b354:	983d0526 	beq	r19,zero,1000a76c <__alt_data_end+0xf800a76c>
1000b358:	0039883a 	mov	fp,zero
1000b35c:	003d0806 	br	1000a780 <__alt_data_end+0xf800a780>
1000b360:	dc402617 	ldw	r17,152(sp)
1000b364:	0441d30e 	bge	zero,r17,1000bab4 <___vfprintf_internal_r+0x1a30>
1000b368:	dc403217 	ldw	r17,200(sp)
1000b36c:	d8803317 	ldw	r2,204(sp)
1000b370:	1440010e 	bge	r2,r17,1000b378 <___vfprintf_internal_r+0x12f4>
1000b374:	1023883a 	mov	r17,r2
1000b378:	04400a0e 	bge	zero,r17,1000b3a4 <___vfprintf_internal_r+0x1320>
1000b37c:	d8801f17 	ldw	r2,124(sp)
1000b380:	1c47883a 	add	r3,r3,r17
1000b384:	44000015 	stw	r16,0(r8)
1000b388:	10800044 	addi	r2,r2,1
1000b38c:	44400115 	stw	r17,4(r8)
1000b390:	d8c02015 	stw	r3,128(sp)
1000b394:	d8801f15 	stw	r2,124(sp)
1000b398:	010001c4 	movi	r4,7
1000b39c:	20826516 	blt	r4,r2,1000bd34 <___vfprintf_internal_r+0x1cb0>
1000b3a0:	42000204 	addi	r8,r8,8
1000b3a4:	88026116 	blt	r17,zero,1000bd2c <___vfprintf_internal_r+0x1ca8>
1000b3a8:	d9003217 	ldw	r4,200(sp)
1000b3ac:	2463c83a 	sub	r17,r4,r17
1000b3b0:	04407b0e 	bge	zero,r17,1000b5a0 <___vfprintf_internal_r+0x151c>
1000b3b4:	05800404 	movi	r22,16
1000b3b8:	d8801f17 	ldw	r2,124(sp)
1000b3bc:	b4419d0e 	bge	r22,r17,1000ba34 <___vfprintf_internal_r+0x19b0>
1000b3c0:	010400b4 	movhi	r4,4098
1000b3c4:	210b5784 	addi	r4,r4,11614
1000b3c8:	d9002c15 	stw	r4,176(sp)
1000b3cc:	070001c4 	movi	fp,7
1000b3d0:	dcc02d17 	ldw	r19,180(sp)
1000b3d4:	00000306 	br	1000b3e4 <___vfprintf_internal_r+0x1360>
1000b3d8:	42000204 	addi	r8,r8,8
1000b3dc:	8c7ffc04 	addi	r17,r17,-16
1000b3e0:	b441970e 	bge	r22,r17,1000ba40 <___vfprintf_internal_r+0x19bc>
1000b3e4:	18c00404 	addi	r3,r3,16
1000b3e8:	10800044 	addi	r2,r2,1
1000b3ec:	45000015 	stw	r20,0(r8)
1000b3f0:	45800115 	stw	r22,4(r8)
1000b3f4:	d8c02015 	stw	r3,128(sp)
1000b3f8:	d8801f15 	stw	r2,124(sp)
1000b3fc:	e0bff60e 	bge	fp,r2,1000b3d8 <__alt_data_end+0xf800b3d8>
1000b400:	d9801e04 	addi	r6,sp,120
1000b404:	b80b883a 	mov	r5,r23
1000b408:	9809883a 	mov	r4,r19
1000b40c:	00182f80 	call	100182f8 <__sprint_r>
1000b410:	103c201e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b414:	d8c02017 	ldw	r3,128(sp)
1000b418:	d8801f17 	ldw	r2,124(sp)
1000b41c:	da000404 	addi	r8,sp,16
1000b420:	003fee06 	br	1000b3dc <__alt_data_end+0xf800b3dc>
1000b424:	d9002d17 	ldw	r4,180(sp)
1000b428:	d9801e04 	addi	r6,sp,120
1000b42c:	b80b883a 	mov	r5,r23
1000b430:	00182f80 	call	100182f8 <__sprint_r>
1000b434:	103c171e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b438:	d8c02017 	ldw	r3,128(sp)
1000b43c:	df002787 	ldb	fp,158(sp)
1000b440:	da000404 	addi	r8,sp,16
1000b444:	003d3406 	br	1000a918 <__alt_data_end+0xf800a918>
1000b448:	9080040c 	andi	r2,r18,16
1000b44c:	10016126 	beq	r2,zero,1000b9d4 <___vfprintf_internal_r+0x1950>
1000b450:	d9402e17 	ldw	r5,184(sp)
1000b454:	2cc00017 	ldw	r19,0(r5)
1000b458:	29400104 	addi	r5,r5,4
1000b45c:	d9402e15 	stw	r5,184(sp)
1000b460:	982dd7fa 	srai	r22,r19,31
1000b464:	b005883a 	mov	r2,r22
1000b468:	003c5a06 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000b46c:	9080040c 	andi	r2,r18,16
1000b470:	10003526 	beq	r2,zero,1000b548 <___vfprintf_internal_r+0x14c4>
1000b474:	d8c02e17 	ldw	r3,184(sp)
1000b478:	d9002a17 	ldw	r4,168(sp)
1000b47c:	d8002785 	stb	zero,158(sp)
1000b480:	18800104 	addi	r2,r3,4
1000b484:	1cc00017 	ldw	r19,0(r3)
1000b488:	002d883a 	mov	r22,zero
1000b48c:	20003716 	blt	r4,zero,1000b56c <___vfprintf_internal_r+0x14e8>
1000b490:	00ffdfc4 	movi	r3,-129
1000b494:	d8802e15 	stw	r2,184(sp)
1000b498:	90e4703a 	and	r18,r18,r3
1000b49c:	0039883a 	mov	fp,zero
1000b4a0:	983dd426 	beq	r19,zero,1000abf4 <__alt_data_end+0xf800abf4>
1000b4a4:	00800244 	movi	r2,9
1000b4a8:	14fc5336 	bltu	r2,r19,1000a5f8 <__alt_data_end+0xf800a5f8>
1000b4ac:	d8c02817 	ldw	r3,160(sp)
1000b4b0:	dc001dc4 	addi	r16,sp,119
1000b4b4:	9cc00c04 	addi	r19,r19,48
1000b4b8:	1c07c83a 	sub	r3,r3,r16
1000b4bc:	dcc01dc5 	stb	r19,119(sp)
1000b4c0:	d8c02b15 	stw	r3,172(sp)
1000b4c4:	003cc606 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000b4c8:	d8803317 	ldw	r2,204(sp)
1000b4cc:	143fffc4 	addi	r16,r2,-1
1000b4d0:	043f4d0e 	bge	zero,r16,1000b208 <__alt_data_end+0xf800b208>
1000b4d4:	07000404 	movi	fp,16
1000b4d8:	e400810e 	bge	fp,r16,1000b6e0 <___vfprintf_internal_r+0x165c>
1000b4dc:	014400b4 	movhi	r5,4098
1000b4e0:	294b5784 	addi	r5,r5,11614
1000b4e4:	d9402c15 	stw	r5,176(sp)
1000b4e8:	01c001c4 	movi	r7,7
1000b4ec:	dcc02d17 	ldw	r19,180(sp)
1000b4f0:	00000306 	br	1000b500 <___vfprintf_internal_r+0x147c>
1000b4f4:	b5800204 	addi	r22,r22,8
1000b4f8:	843ffc04 	addi	r16,r16,-16
1000b4fc:	e4007b0e 	bge	fp,r16,1000b6ec <___vfprintf_internal_r+0x1668>
1000b500:	18c00404 	addi	r3,r3,16
1000b504:	8c400044 	addi	r17,r17,1
1000b508:	b5000015 	stw	r20,0(r22)
1000b50c:	b7000115 	stw	fp,4(r22)
1000b510:	d8c02015 	stw	r3,128(sp)
1000b514:	dc401f15 	stw	r17,124(sp)
1000b518:	3c7ff60e 	bge	r7,r17,1000b4f4 <__alt_data_end+0xf800b4f4>
1000b51c:	d9801e04 	addi	r6,sp,120
1000b520:	b80b883a 	mov	r5,r23
1000b524:	9809883a 	mov	r4,r19
1000b528:	d9c03c15 	stw	r7,240(sp)
1000b52c:	00182f80 	call	100182f8 <__sprint_r>
1000b530:	d9c03c17 	ldw	r7,240(sp)
1000b534:	103bd71e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b538:	d8c02017 	ldw	r3,128(sp)
1000b53c:	dc401f17 	ldw	r17,124(sp)
1000b540:	dd800404 	addi	r22,sp,16
1000b544:	003fec06 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b548:	9080100c 	andi	r2,r18,64
1000b54c:	d8002785 	stb	zero,158(sp)
1000b550:	10010e26 	beq	r2,zero,1000b98c <___vfprintf_internal_r+0x1908>
1000b554:	d9402e17 	ldw	r5,184(sp)
1000b558:	d8c02a17 	ldw	r3,168(sp)
1000b55c:	002d883a 	mov	r22,zero
1000b560:	28800104 	addi	r2,r5,4
1000b564:	2cc0000b 	ldhu	r19,0(r5)
1000b568:	183fc90e 	bge	r3,zero,1000b490 <__alt_data_end+0xf800b490>
1000b56c:	d8802e15 	stw	r2,184(sp)
1000b570:	0039883a 	mov	fp,zero
1000b574:	9d84b03a 	or	r2,r19,r22
1000b578:	103c1e1e 	bne	r2,zero,1000a5f4 <__alt_data_end+0xf800a5f4>
1000b57c:	00800044 	movi	r2,1
1000b580:	003e6c06 	br	1000af34 <__alt_data_end+0xf800af34>
1000b584:	d9002d17 	ldw	r4,180(sp)
1000b588:	d9801e04 	addi	r6,sp,120
1000b58c:	b80b883a 	mov	r5,r23
1000b590:	00182f80 	call	100182f8 <__sprint_r>
1000b594:	103bbf1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b598:	d8c02017 	ldw	r3,128(sp)
1000b59c:	da000404 	addi	r8,sp,16
1000b5a0:	d9003217 	ldw	r4,200(sp)
1000b5a4:	d8802617 	ldw	r2,152(sp)
1000b5a8:	d9403317 	ldw	r5,204(sp)
1000b5ac:	8123883a 	add	r17,r16,r4
1000b5b0:	11400216 	blt	r2,r5,1000b5bc <___vfprintf_internal_r+0x1538>
1000b5b4:	9100004c 	andi	r4,r18,1
1000b5b8:	20000d26 	beq	r4,zero,1000b5f0 <___vfprintf_internal_r+0x156c>
1000b5bc:	d9003717 	ldw	r4,220(sp)
1000b5c0:	d9403417 	ldw	r5,208(sp)
1000b5c4:	1907883a 	add	r3,r3,r4
1000b5c8:	d9001f17 	ldw	r4,124(sp)
1000b5cc:	41400015 	stw	r5,0(r8)
1000b5d0:	d9403717 	ldw	r5,220(sp)
1000b5d4:	21000044 	addi	r4,r4,1
1000b5d8:	d8c02015 	stw	r3,128(sp)
1000b5dc:	41400115 	stw	r5,4(r8)
1000b5e0:	d9001f15 	stw	r4,124(sp)
1000b5e4:	014001c4 	movi	r5,7
1000b5e8:	2901e816 	blt	r5,r4,1000bd8c <___vfprintf_internal_r+0x1d08>
1000b5ec:	42000204 	addi	r8,r8,8
1000b5f0:	d9003317 	ldw	r4,204(sp)
1000b5f4:	8121883a 	add	r16,r16,r4
1000b5f8:	2085c83a 	sub	r2,r4,r2
1000b5fc:	8461c83a 	sub	r16,r16,r17
1000b600:	1400010e 	bge	r2,r16,1000b608 <___vfprintf_internal_r+0x1584>
1000b604:	1021883a 	mov	r16,r2
1000b608:	04000a0e 	bge	zero,r16,1000b634 <___vfprintf_internal_r+0x15b0>
1000b60c:	d9001f17 	ldw	r4,124(sp)
1000b610:	1c07883a 	add	r3,r3,r16
1000b614:	44400015 	stw	r17,0(r8)
1000b618:	21000044 	addi	r4,r4,1
1000b61c:	44000115 	stw	r16,4(r8)
1000b620:	d8c02015 	stw	r3,128(sp)
1000b624:	d9001f15 	stw	r4,124(sp)
1000b628:	014001c4 	movi	r5,7
1000b62c:	2901fb16 	blt	r5,r4,1000be1c <___vfprintf_internal_r+0x1d98>
1000b630:	42000204 	addi	r8,r8,8
1000b634:	8001f716 	blt	r16,zero,1000be14 <___vfprintf_internal_r+0x1d90>
1000b638:	1421c83a 	sub	r16,r2,r16
1000b63c:	043d160e 	bge	zero,r16,1000aa98 <__alt_data_end+0xf800aa98>
1000b640:	04400404 	movi	r17,16
1000b644:	d8801f17 	ldw	r2,124(sp)
1000b648:	8c3efb0e 	bge	r17,r16,1000b238 <__alt_data_end+0xf800b238>
1000b64c:	014400b4 	movhi	r5,4098
1000b650:	294b5784 	addi	r5,r5,11614
1000b654:	d9402c15 	stw	r5,176(sp)
1000b658:	058001c4 	movi	r22,7
1000b65c:	dcc02d17 	ldw	r19,180(sp)
1000b660:	00000306 	br	1000b670 <___vfprintf_internal_r+0x15ec>
1000b664:	42000204 	addi	r8,r8,8
1000b668:	843ffc04 	addi	r16,r16,-16
1000b66c:	8c3ef50e 	bge	r17,r16,1000b244 <__alt_data_end+0xf800b244>
1000b670:	18c00404 	addi	r3,r3,16
1000b674:	10800044 	addi	r2,r2,1
1000b678:	45000015 	stw	r20,0(r8)
1000b67c:	44400115 	stw	r17,4(r8)
1000b680:	d8c02015 	stw	r3,128(sp)
1000b684:	d8801f15 	stw	r2,124(sp)
1000b688:	b0bff60e 	bge	r22,r2,1000b664 <__alt_data_end+0xf800b664>
1000b68c:	d9801e04 	addi	r6,sp,120
1000b690:	b80b883a 	mov	r5,r23
1000b694:	9809883a 	mov	r4,r19
1000b698:	00182f80 	call	100182f8 <__sprint_r>
1000b69c:	103b7d1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b6a0:	d8c02017 	ldw	r3,128(sp)
1000b6a4:	d8801f17 	ldw	r2,124(sp)
1000b6a8:	da000404 	addi	r8,sp,16
1000b6ac:	003fee06 	br	1000b668 <__alt_data_end+0xf800b668>
1000b6b0:	9088703a 	and	r4,r18,r2
1000b6b4:	203eab1e 	bne	r4,zero,1000b164 <__alt_data_end+0xf800b164>
1000b6b8:	dc401f17 	ldw	r17,124(sp)
1000b6bc:	40800115 	stw	r2,4(r8)
1000b6c0:	44000015 	stw	r16,0(r8)
1000b6c4:	8c400044 	addi	r17,r17,1
1000b6c8:	d8c02015 	stw	r3,128(sp)
1000b6cc:	dc401f15 	stw	r17,124(sp)
1000b6d0:	008001c4 	movi	r2,7
1000b6d4:	14400e16 	blt	r2,r17,1000b710 <___vfprintf_internal_r+0x168c>
1000b6d8:	45800204 	addi	r22,r8,8
1000b6dc:	003eca06 	br	1000b208 <__alt_data_end+0xf800b208>
1000b6e0:	010400b4 	movhi	r4,4098
1000b6e4:	210b5784 	addi	r4,r4,11614
1000b6e8:	d9002c15 	stw	r4,176(sp)
1000b6ec:	d8802c17 	ldw	r2,176(sp)
1000b6f0:	1c07883a 	add	r3,r3,r16
1000b6f4:	8c400044 	addi	r17,r17,1
1000b6f8:	b0800015 	stw	r2,0(r22)
1000b6fc:	b4000115 	stw	r16,4(r22)
1000b700:	d8c02015 	stw	r3,128(sp)
1000b704:	dc401f15 	stw	r17,124(sp)
1000b708:	008001c4 	movi	r2,7
1000b70c:	147ebd0e 	bge	r2,r17,1000b204 <__alt_data_end+0xf800b204>
1000b710:	d9002d17 	ldw	r4,180(sp)
1000b714:	d9801e04 	addi	r6,sp,120
1000b718:	b80b883a 	mov	r5,r23
1000b71c:	00182f80 	call	100182f8 <__sprint_r>
1000b720:	103b5c1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b724:	d8c02017 	ldw	r3,128(sp)
1000b728:	dc401f17 	ldw	r17,124(sp)
1000b72c:	dd800404 	addi	r22,sp,16
1000b730:	003eb506 	br	1000b208 <__alt_data_end+0xf800b208>
1000b734:	d9002d17 	ldw	r4,180(sp)
1000b738:	d9801e04 	addi	r6,sp,120
1000b73c:	b80b883a 	mov	r5,r23
1000b740:	00182f80 	call	100182f8 <__sprint_r>
1000b744:	103b531e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b748:	d8c02017 	ldw	r3,128(sp)
1000b74c:	dc401f17 	ldw	r17,124(sp)
1000b750:	da000404 	addi	r8,sp,16
1000b754:	003e8d06 	br	1000b18c <__alt_data_end+0xf800b18c>
1000b758:	d9002d17 	ldw	r4,180(sp)
1000b75c:	d9801e04 	addi	r6,sp,120
1000b760:	b80b883a 	mov	r5,r23
1000b764:	00182f80 	call	100182f8 <__sprint_r>
1000b768:	103b4a1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b76c:	d8c02017 	ldw	r3,128(sp)
1000b770:	dc401f17 	ldw	r17,124(sp)
1000b774:	dd800404 	addi	r22,sp,16
1000b778:	003e8f06 	br	1000b1b8 <__alt_data_end+0xf800b1b8>
1000b77c:	0027883a 	mov	r19,zero
1000b780:	003f4a06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b784:	d9002d17 	ldw	r4,180(sp)
1000b788:	d9801e04 	addi	r6,sp,120
1000b78c:	b80b883a 	mov	r5,r23
1000b790:	00182f80 	call	100182f8 <__sprint_r>
1000b794:	103b3f1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000b798:	d8c02017 	ldw	r3,128(sp)
1000b79c:	da000404 	addi	r8,sp,16
1000b7a0:	003c7b06 	br	1000a990 <__alt_data_end+0xf800a990>
1000b7a4:	d9402a17 	ldw	r5,168(sp)
1000b7a8:	04e7c83a 	sub	r19,zero,r19
1000b7ac:	07000b44 	movi	fp,45
1000b7b0:	9804c03a 	cmpne	r2,r19,zero
1000b7b4:	05adc83a 	sub	r22,zero,r22
1000b7b8:	df002785 	stb	fp,158(sp)
1000b7bc:	b0adc83a 	sub	r22,r22,r2
1000b7c0:	28017b16 	blt	r5,zero,1000bdb0 <___vfprintf_internal_r+0x1d2c>
1000b7c4:	00bfdfc4 	movi	r2,-129
1000b7c8:	90a4703a 	and	r18,r18,r2
1000b7cc:	003b8906 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000b7d0:	d9003617 	ldw	r4,216(sp)
1000b7d4:	d9403817 	ldw	r5,224(sp)
1000b7d8:	da003d15 	stw	r8,244(sp)
1000b7dc:	00135b80 	call	100135b8 <__fpclassifyd>
1000b7e0:	da003d17 	ldw	r8,244(sp)
1000b7e4:	1000f026 	beq	r2,zero,1000bba8 <___vfprintf_internal_r+0x1b24>
1000b7e8:	d9002a17 	ldw	r4,168(sp)
1000b7ec:	05bff7c4 	movi	r22,-33
1000b7f0:	00bfffc4 	movi	r2,-1
1000b7f4:	8dac703a 	and	r22,r17,r22
1000b7f8:	20820026 	beq	r4,r2,1000bffc <___vfprintf_internal_r+0x1f78>
1000b7fc:	008011c4 	movi	r2,71
1000b800:	b081f726 	beq	r22,r2,1000bfe0 <___vfprintf_internal_r+0x1f5c>
1000b804:	d9003817 	ldw	r4,224(sp)
1000b808:	90c04014 	ori	r3,r18,256
1000b80c:	d8c02c15 	stw	r3,176(sp)
1000b810:	20021516 	blt	r4,zero,1000c068 <___vfprintf_internal_r+0x1fe4>
1000b814:	dcc03817 	ldw	r19,224(sp)
1000b818:	d8002905 	stb	zero,164(sp)
1000b81c:	00801984 	movi	r2,102
1000b820:	8881f926 	beq	r17,r2,1000c008 <___vfprintf_internal_r+0x1f84>
1000b824:	00801184 	movi	r2,70
1000b828:	88821c26 	beq	r17,r2,1000c09c <___vfprintf_internal_r+0x2018>
1000b82c:	00801144 	movi	r2,69
1000b830:	b081ef26 	beq	r22,r2,1000bff0 <___vfprintf_internal_r+0x1f6c>
1000b834:	d8c02a17 	ldw	r3,168(sp)
1000b838:	d8802104 	addi	r2,sp,132
1000b83c:	d8800315 	stw	r2,12(sp)
1000b840:	d9403617 	ldw	r5,216(sp)
1000b844:	d8802504 	addi	r2,sp,148
1000b848:	d9002d17 	ldw	r4,180(sp)
1000b84c:	d8800215 	stw	r2,8(sp)
1000b850:	d8802604 	addi	r2,sp,152
1000b854:	d8c00015 	stw	r3,0(sp)
1000b858:	d8800115 	stw	r2,4(sp)
1000b85c:	01c00084 	movi	r7,2
1000b860:	980d883a 	mov	r6,r19
1000b864:	d8c03c15 	stw	r3,240(sp)
1000b868:	da003d15 	stw	r8,244(sp)
1000b86c:	000e2100 	call	1000e210 <_dtoa_r>
1000b870:	1021883a 	mov	r16,r2
1000b874:	008019c4 	movi	r2,103
1000b878:	d8c03c17 	ldw	r3,240(sp)
1000b87c:	da003d17 	ldw	r8,244(sp)
1000b880:	88817126 	beq	r17,r2,1000be48 <___vfprintf_internal_r+0x1dc4>
1000b884:	008011c4 	movi	r2,71
1000b888:	88829126 	beq	r17,r2,1000c2d0 <___vfprintf_internal_r+0x224c>
1000b88c:	80f9883a 	add	fp,r16,r3
1000b890:	d9003617 	ldw	r4,216(sp)
1000b894:	000d883a 	mov	r6,zero
1000b898:	000f883a 	mov	r7,zero
1000b89c:	980b883a 	mov	r5,r19
1000b8a0:	da003d15 	stw	r8,244(sp)
1000b8a4:	001dc140 	call	1001dc14 <__eqdf2>
1000b8a8:	da003d17 	ldw	r8,244(sp)
1000b8ac:	10018d26 	beq	r2,zero,1000bee4 <___vfprintf_internal_r+0x1e60>
1000b8b0:	d8802117 	ldw	r2,132(sp)
1000b8b4:	1700062e 	bgeu	r2,fp,1000b8d0 <___vfprintf_internal_r+0x184c>
1000b8b8:	01000c04 	movi	r4,48
1000b8bc:	10c00044 	addi	r3,r2,1
1000b8c0:	d8c02115 	stw	r3,132(sp)
1000b8c4:	11000005 	stb	r4,0(r2)
1000b8c8:	d8802117 	ldw	r2,132(sp)
1000b8cc:	173ffb36 	bltu	r2,fp,1000b8bc <__alt_data_end+0xf800b8bc>
1000b8d0:	1405c83a 	sub	r2,r2,r16
1000b8d4:	d8803315 	stw	r2,204(sp)
1000b8d8:	008011c4 	movi	r2,71
1000b8dc:	b0817626 	beq	r22,r2,1000beb8 <___vfprintf_internal_r+0x1e34>
1000b8e0:	00801944 	movi	r2,101
1000b8e4:	1442800e 	bge	r2,r17,1000c2e8 <___vfprintf_internal_r+0x2264>
1000b8e8:	d8c02617 	ldw	r3,152(sp)
1000b8ec:	00801984 	movi	r2,102
1000b8f0:	d8c03215 	stw	r3,200(sp)
1000b8f4:	8881fe26 	beq	r17,r2,1000c0f0 <___vfprintf_internal_r+0x206c>
1000b8f8:	d8c03217 	ldw	r3,200(sp)
1000b8fc:	d9003317 	ldw	r4,204(sp)
1000b900:	1901dd16 	blt	r3,r4,1000c078 <___vfprintf_internal_r+0x1ff4>
1000b904:	9480004c 	andi	r18,r18,1
1000b908:	90022b1e 	bne	r18,zero,1000c1b8 <___vfprintf_internal_r+0x2134>
1000b90c:	1805883a 	mov	r2,r3
1000b910:	18028316 	blt	r3,zero,1000c320 <___vfprintf_internal_r+0x229c>
1000b914:	d8c03217 	ldw	r3,200(sp)
1000b918:	044019c4 	movi	r17,103
1000b91c:	d8c02b15 	stw	r3,172(sp)
1000b920:	df002907 	ldb	fp,164(sp)
1000b924:	e001531e 	bne	fp,zero,1000be74 <___vfprintf_internal_r+0x1df0>
1000b928:	df002783 	ldbu	fp,158(sp)
1000b92c:	d8802915 	stw	r2,164(sp)
1000b930:	dc802c17 	ldw	r18,176(sp)
1000b934:	d8002a15 	stw	zero,168(sp)
1000b938:	003baf06 	br	1000a7f8 <__alt_data_end+0xf800a7f8>
1000b93c:	d8c02e17 	ldw	r3,184(sp)
1000b940:	d9002e17 	ldw	r4,184(sp)
1000b944:	d9402e17 	ldw	r5,184(sp)
1000b948:	18c00017 	ldw	r3,0(r3)
1000b94c:	21000117 	ldw	r4,4(r4)
1000b950:	29400204 	addi	r5,r5,8
1000b954:	d8c03615 	stw	r3,216(sp)
1000b958:	d9003815 	stw	r4,224(sp)
1000b95c:	d9402e15 	stw	r5,184(sp)
1000b960:	003b5006 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000b964:	ac400007 	ldb	r17,0(r21)
1000b968:	003a2806 	br	1000a20c <__alt_data_end+0xf800a20c>
1000b96c:	9080100c 	andi	r2,r18,64
1000b970:	1000a826 	beq	r2,zero,1000bc14 <___vfprintf_internal_r+0x1b90>
1000b974:	d8c02e17 	ldw	r3,184(sp)
1000b978:	002d883a 	mov	r22,zero
1000b97c:	1cc0000b 	ldhu	r19,0(r3)
1000b980:	18c00104 	addi	r3,r3,4
1000b984:	d8c02e15 	stw	r3,184(sp)
1000b988:	003caf06 	br	1000ac48 <__alt_data_end+0xf800ac48>
1000b98c:	d9002e17 	ldw	r4,184(sp)
1000b990:	d9402a17 	ldw	r5,168(sp)
1000b994:	002d883a 	mov	r22,zero
1000b998:	20800104 	addi	r2,r4,4
1000b99c:	24c00017 	ldw	r19,0(r4)
1000b9a0:	283ebb0e 	bge	r5,zero,1000b490 <__alt_data_end+0xf800b490>
1000b9a4:	003ef106 	br	1000b56c <__alt_data_end+0xf800b56c>
1000b9a8:	9080040c 	andi	r2,r18,16
1000b9ac:	1000921e 	bne	r2,zero,1000bbf8 <___vfprintf_internal_r+0x1b74>
1000b9b0:	9480100c 	andi	r18,r18,64
1000b9b4:	90013926 	beq	r18,zero,1000be9c <___vfprintf_internal_r+0x1e18>
1000b9b8:	d9402e17 	ldw	r5,184(sp)
1000b9bc:	d8c02f17 	ldw	r3,188(sp)
1000b9c0:	28800017 	ldw	r2,0(r5)
1000b9c4:	29400104 	addi	r5,r5,4
1000b9c8:	d9402e15 	stw	r5,184(sp)
1000b9cc:	10c0000d 	sth	r3,0(r2)
1000b9d0:	0039e406 	br	1000a164 <__alt_data_end+0xf800a164>
1000b9d4:	9080100c 	andi	r2,r18,64
1000b9d8:	10008026 	beq	r2,zero,1000bbdc <___vfprintf_internal_r+0x1b58>
1000b9dc:	d8802e17 	ldw	r2,184(sp)
1000b9e0:	14c0000f 	ldh	r19,0(r2)
1000b9e4:	10800104 	addi	r2,r2,4
1000b9e8:	d8802e15 	stw	r2,184(sp)
1000b9ec:	982dd7fa 	srai	r22,r19,31
1000b9f0:	b005883a 	mov	r2,r22
1000b9f4:	003af706 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000b9f8:	9080100c 	andi	r2,r18,64
1000b9fc:	d8002785 	stb	zero,158(sp)
1000ba00:	10008a1e 	bne	r2,zero,1000bc2c <___vfprintf_internal_r+0x1ba8>
1000ba04:	d9002e17 	ldw	r4,184(sp)
1000ba08:	d9402a17 	ldw	r5,168(sp)
1000ba0c:	002d883a 	mov	r22,zero
1000ba10:	20800104 	addi	r2,r4,4
1000ba14:	24c00017 	ldw	r19,0(r4)
1000ba18:	283e4b0e 	bge	r5,zero,1000b348 <__alt_data_end+0xf800b348>
1000ba1c:	9d86b03a 	or	r3,r19,r22
1000ba20:	d8802e15 	stw	r2,184(sp)
1000ba24:	183e4c1e 	bne	r3,zero,1000b358 <__alt_data_end+0xf800b358>
1000ba28:	0039883a 	mov	fp,zero
1000ba2c:	0005883a 	mov	r2,zero
1000ba30:	003d4006 	br	1000af34 <__alt_data_end+0xf800af34>
1000ba34:	014400b4 	movhi	r5,4098
1000ba38:	294b5784 	addi	r5,r5,11614
1000ba3c:	d9402c15 	stw	r5,176(sp)
1000ba40:	d9402c17 	ldw	r5,176(sp)
1000ba44:	1c47883a 	add	r3,r3,r17
1000ba48:	10800044 	addi	r2,r2,1
1000ba4c:	41400015 	stw	r5,0(r8)
1000ba50:	44400115 	stw	r17,4(r8)
1000ba54:	d8c02015 	stw	r3,128(sp)
1000ba58:	d8801f15 	stw	r2,124(sp)
1000ba5c:	010001c4 	movi	r4,7
1000ba60:	20bec816 	blt	r4,r2,1000b584 <__alt_data_end+0xf800b584>
1000ba64:	42000204 	addi	r8,r8,8
1000ba68:	003ecd06 	br	1000b5a0 <__alt_data_end+0xf800b5a0>
1000ba6c:	d9002a17 	ldw	r4,168(sp)
1000ba70:	d8002785 	stb	zero,158(sp)
1000ba74:	203d2d16 	blt	r4,zero,1000af2c <__alt_data_end+0xf800af2c>
1000ba78:	00bfdfc4 	movi	r2,-129
1000ba7c:	90a4703a 	and	r18,r18,r2
1000ba80:	003a6106 	br	1000a408 <__alt_data_end+0xf800a408>
1000ba84:	010400b4 	movhi	r4,4098
1000ba88:	210b5784 	addi	r4,r4,11614
1000ba8c:	d9002c15 	stw	r4,176(sp)
1000ba90:	003bea06 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000ba94:	d9002d17 	ldw	r4,180(sp)
1000ba98:	d9801e04 	addi	r6,sp,120
1000ba9c:	b80b883a 	mov	r5,r23
1000baa0:	00182f80 	call	100182f8 <__sprint_r>
1000baa4:	103a7b1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000baa8:	d8c02017 	ldw	r3,128(sp)
1000baac:	da000404 	addi	r8,sp,16
1000bab0:	003d4106 	br	1000afb8 <__alt_data_end+0xf800afb8>
1000bab4:	d8801f17 	ldw	r2,124(sp)
1000bab8:	014400b4 	movhi	r5,4098
1000babc:	01000044 	movi	r4,1
1000bac0:	18c00044 	addi	r3,r3,1
1000bac4:	10800044 	addi	r2,r2,1
1000bac8:	294b5704 	addi	r5,r5,11612
1000bacc:	41000115 	stw	r4,4(r8)
1000bad0:	41400015 	stw	r5,0(r8)
1000bad4:	d8c02015 	stw	r3,128(sp)
1000bad8:	d8801f15 	stw	r2,124(sp)
1000badc:	010001c4 	movi	r4,7
1000bae0:	20805c16 	blt	r4,r2,1000bc54 <___vfprintf_internal_r+0x1bd0>
1000bae4:	42000204 	addi	r8,r8,8
1000bae8:	8800041e 	bne	r17,zero,1000bafc <___vfprintf_internal_r+0x1a78>
1000baec:	d8803317 	ldw	r2,204(sp)
1000baf0:	1000021e 	bne	r2,zero,1000bafc <___vfprintf_internal_r+0x1a78>
1000baf4:	9080004c 	andi	r2,r18,1
1000baf8:	103be726 	beq	r2,zero,1000aa98 <__alt_data_end+0xf800aa98>
1000bafc:	d9003717 	ldw	r4,220(sp)
1000bb00:	d8801f17 	ldw	r2,124(sp)
1000bb04:	d9403417 	ldw	r5,208(sp)
1000bb08:	20c7883a 	add	r3,r4,r3
1000bb0c:	10800044 	addi	r2,r2,1
1000bb10:	41000115 	stw	r4,4(r8)
1000bb14:	41400015 	stw	r5,0(r8)
1000bb18:	d8c02015 	stw	r3,128(sp)
1000bb1c:	d8801f15 	stw	r2,124(sp)
1000bb20:	010001c4 	movi	r4,7
1000bb24:	20812116 	blt	r4,r2,1000bfac <___vfprintf_internal_r+0x1f28>
1000bb28:	42000204 	addi	r8,r8,8
1000bb2c:	0463c83a 	sub	r17,zero,r17
1000bb30:	0440730e 	bge	zero,r17,1000bd00 <___vfprintf_internal_r+0x1c7c>
1000bb34:	05800404 	movi	r22,16
1000bb38:	b440860e 	bge	r22,r17,1000bd54 <___vfprintf_internal_r+0x1cd0>
1000bb3c:	014400b4 	movhi	r5,4098
1000bb40:	294b5784 	addi	r5,r5,11614
1000bb44:	d9402c15 	stw	r5,176(sp)
1000bb48:	070001c4 	movi	fp,7
1000bb4c:	dcc02d17 	ldw	r19,180(sp)
1000bb50:	00000306 	br	1000bb60 <___vfprintf_internal_r+0x1adc>
1000bb54:	42000204 	addi	r8,r8,8
1000bb58:	8c7ffc04 	addi	r17,r17,-16
1000bb5c:	b440800e 	bge	r22,r17,1000bd60 <___vfprintf_internal_r+0x1cdc>
1000bb60:	18c00404 	addi	r3,r3,16
1000bb64:	10800044 	addi	r2,r2,1
1000bb68:	45000015 	stw	r20,0(r8)
1000bb6c:	45800115 	stw	r22,4(r8)
1000bb70:	d8c02015 	stw	r3,128(sp)
1000bb74:	d8801f15 	stw	r2,124(sp)
1000bb78:	e0bff60e 	bge	fp,r2,1000bb54 <__alt_data_end+0xf800bb54>
1000bb7c:	d9801e04 	addi	r6,sp,120
1000bb80:	b80b883a 	mov	r5,r23
1000bb84:	9809883a 	mov	r4,r19
1000bb88:	00182f80 	call	100182f8 <__sprint_r>
1000bb8c:	103a411e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bb90:	d8c02017 	ldw	r3,128(sp)
1000bb94:	d8801f17 	ldw	r2,124(sp)
1000bb98:	da000404 	addi	r8,sp,16
1000bb9c:	003fee06 	br	1000bb58 <__alt_data_end+0xf800bb58>
1000bba0:	00bfffc4 	movi	r2,-1
1000bba4:	003a3f06 	br	1000a4a4 <__alt_data_end+0xf800a4a4>
1000bba8:	008011c4 	movi	r2,71
1000bbac:	1440b816 	blt	r2,r17,1000be90 <___vfprintf_internal_r+0x1e0c>
1000bbb0:	040400b4 	movhi	r16,4098
1000bbb4:	840b4904 	addi	r16,r16,11556
1000bbb8:	00c000c4 	movi	r3,3
1000bbbc:	00bfdfc4 	movi	r2,-129
1000bbc0:	d8c02915 	stw	r3,164(sp)
1000bbc4:	90a4703a 	and	r18,r18,r2
1000bbc8:	df002783 	ldbu	fp,158(sp)
1000bbcc:	d8c02b15 	stw	r3,172(sp)
1000bbd0:	d8002a15 	stw	zero,168(sp)
1000bbd4:	d8003215 	stw	zero,200(sp)
1000bbd8:	003b0706 	br	1000a7f8 <__alt_data_end+0xf800a7f8>
1000bbdc:	d8c02e17 	ldw	r3,184(sp)
1000bbe0:	1cc00017 	ldw	r19,0(r3)
1000bbe4:	18c00104 	addi	r3,r3,4
1000bbe8:	d8c02e15 	stw	r3,184(sp)
1000bbec:	982dd7fa 	srai	r22,r19,31
1000bbf0:	b005883a 	mov	r2,r22
1000bbf4:	003a7706 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000bbf8:	d8c02e17 	ldw	r3,184(sp)
1000bbfc:	d9002f17 	ldw	r4,188(sp)
1000bc00:	18800017 	ldw	r2,0(r3)
1000bc04:	18c00104 	addi	r3,r3,4
1000bc08:	d8c02e15 	stw	r3,184(sp)
1000bc0c:	11000015 	stw	r4,0(r2)
1000bc10:	00395406 	br	1000a164 <__alt_data_end+0xf800a164>
1000bc14:	d9002e17 	ldw	r4,184(sp)
1000bc18:	002d883a 	mov	r22,zero
1000bc1c:	24c00017 	ldw	r19,0(r4)
1000bc20:	21000104 	addi	r4,r4,4
1000bc24:	d9002e15 	stw	r4,184(sp)
1000bc28:	003c0706 	br	1000ac48 <__alt_data_end+0xf800ac48>
1000bc2c:	d9402e17 	ldw	r5,184(sp)
1000bc30:	d8c02a17 	ldw	r3,168(sp)
1000bc34:	002d883a 	mov	r22,zero
1000bc38:	28800104 	addi	r2,r5,4
1000bc3c:	2cc0000b 	ldhu	r19,0(r5)
1000bc40:	183dc10e 	bge	r3,zero,1000b348 <__alt_data_end+0xf800b348>
1000bc44:	003f7506 	br	1000ba1c <__alt_data_end+0xf800ba1c>
1000bc48:	040400b4 	movhi	r16,4098
1000bc4c:	840b4704 	addi	r16,r16,11548
1000bc50:	003aa706 	br	1000a6f0 <__alt_data_end+0xf800a6f0>
1000bc54:	d9002d17 	ldw	r4,180(sp)
1000bc58:	d9801e04 	addi	r6,sp,120
1000bc5c:	b80b883a 	mov	r5,r23
1000bc60:	00182f80 	call	100182f8 <__sprint_r>
1000bc64:	103a0b1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bc68:	dc402617 	ldw	r17,152(sp)
1000bc6c:	d8c02017 	ldw	r3,128(sp)
1000bc70:	da000404 	addi	r8,sp,16
1000bc74:	003f9c06 	br	1000bae8 <__alt_data_end+0xf800bae8>
1000bc78:	ac400043 	ldbu	r17,1(r21)
1000bc7c:	84000814 	ori	r16,r16,32
1000bc80:	ad400044 	addi	r21,r21,1
1000bc84:	8c403fcc 	andi	r17,r17,255
1000bc88:	8c40201c 	xori	r17,r17,128
1000bc8c:	8c7fe004 	addi	r17,r17,-128
1000bc90:	00395e06 	br	1000a20c <__alt_data_end+0xf800a20c>
1000bc94:	d8c02e15 	stw	r3,184(sp)
1000bc98:	0039883a 	mov	fp,zero
1000bc9c:	003e3506 	br	1000b574 <__alt_data_end+0xf800b574>
1000bca0:	d9002d17 	ldw	r4,180(sp)
1000bca4:	d9801e04 	addi	r6,sp,120
1000bca8:	b80b883a 	mov	r5,r23
1000bcac:	00182f80 	call	100182f8 <__sprint_r>
1000bcb0:	1039f81e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bcb4:	d8c02017 	ldw	r3,128(sp)
1000bcb8:	da000404 	addi	r8,sp,16
1000bcbc:	003cd006 	br	1000b000 <__alt_data_end+0xf800b000>
1000bcc0:	8009883a 	mov	r4,r16
1000bcc4:	df003d15 	stw	fp,244(sp)
1000bcc8:	0009fe40 	call	10009fe4 <strlen>
1000bccc:	d8802b15 	stw	r2,172(sp)
1000bcd0:	da003d17 	ldw	r8,244(sp)
1000bcd4:	103c200e 	bge	r2,zero,1000ad58 <__alt_data_end+0xf800ad58>
1000bcd8:	0005883a 	mov	r2,zero
1000bcdc:	003c1e06 	br	1000ad58 <__alt_data_end+0xf800ad58>
1000bce0:	d9002d17 	ldw	r4,180(sp)
1000bce4:	d9801e04 	addi	r6,sp,120
1000bce8:	b80b883a 	mov	r5,r23
1000bcec:	00182f80 	call	100182f8 <__sprint_r>
1000bcf0:	1039e81e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bcf4:	d8c02017 	ldw	r3,128(sp)
1000bcf8:	d8801f17 	ldw	r2,124(sp)
1000bcfc:	da000404 	addi	r8,sp,16
1000bd00:	d9403317 	ldw	r5,204(sp)
1000bd04:	10800044 	addi	r2,r2,1
1000bd08:	44000015 	stw	r16,0(r8)
1000bd0c:	28c7883a 	add	r3,r5,r3
1000bd10:	003b5b06 	br	1000aa80 <__alt_data_end+0xf800aa80>
1000bd14:	010400b4 	movhi	r4,4098
1000bd18:	210b5b84 	addi	r4,r4,11630
1000bd1c:	d9003515 	stw	r4,212(sp)
1000bd20:	003af206 	br	1000a8ec <__alt_data_end+0xf800a8ec>
1000bd24:	013fffc4 	movi	r4,-1
1000bd28:	003a0806 	br	1000a54c <__alt_data_end+0xf800a54c>
1000bd2c:	0023883a 	mov	r17,zero
1000bd30:	003d9d06 	br	1000b3a8 <__alt_data_end+0xf800b3a8>
1000bd34:	d9002d17 	ldw	r4,180(sp)
1000bd38:	d9801e04 	addi	r6,sp,120
1000bd3c:	b80b883a 	mov	r5,r23
1000bd40:	00182f80 	call	100182f8 <__sprint_r>
1000bd44:	1039d31e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bd48:	d8c02017 	ldw	r3,128(sp)
1000bd4c:	da000404 	addi	r8,sp,16
1000bd50:	003d9406 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000bd54:	010400b4 	movhi	r4,4098
1000bd58:	210b5784 	addi	r4,r4,11614
1000bd5c:	d9002c15 	stw	r4,176(sp)
1000bd60:	d9002c17 	ldw	r4,176(sp)
1000bd64:	1c47883a 	add	r3,r3,r17
1000bd68:	10800044 	addi	r2,r2,1
1000bd6c:	41000015 	stw	r4,0(r8)
1000bd70:	44400115 	stw	r17,4(r8)
1000bd74:	d8c02015 	stw	r3,128(sp)
1000bd78:	d8801f15 	stw	r2,124(sp)
1000bd7c:	010001c4 	movi	r4,7
1000bd80:	20bfd716 	blt	r4,r2,1000bce0 <__alt_data_end+0xf800bce0>
1000bd84:	42000204 	addi	r8,r8,8
1000bd88:	003fdd06 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bd8c:	d9002d17 	ldw	r4,180(sp)
1000bd90:	d9801e04 	addi	r6,sp,120
1000bd94:	b80b883a 	mov	r5,r23
1000bd98:	00182f80 	call	100182f8 <__sprint_r>
1000bd9c:	1039bd1e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bda0:	d8802617 	ldw	r2,152(sp)
1000bda4:	d8c02017 	ldw	r3,128(sp)
1000bda8:	da000404 	addi	r8,sp,16
1000bdac:	003e1006 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000bdb0:	00800044 	movi	r2,1
1000bdb4:	10803fcc 	andi	r2,r2,255
1000bdb8:	00c00044 	movi	r3,1
1000bdbc:	10fa0d26 	beq	r2,r3,1000a5f4 <__alt_data_end+0xf800a5f4>
1000bdc0:	00c00084 	movi	r3,2
1000bdc4:	10fbaf26 	beq	r2,r3,1000ac84 <__alt_data_end+0xf800ac84>
1000bdc8:	003a6d06 	br	1000a780 <__alt_data_end+0xf800a780>
1000bdcc:	010400b4 	movhi	r4,4098
1000bdd0:	210b5b84 	addi	r4,r4,11630
1000bdd4:	d9003515 	stw	r4,212(sp)
1000bdd8:	003b5406 	br	1000ab2c <__alt_data_end+0xf800ab2c>
1000bddc:	d8802a17 	ldw	r2,168(sp)
1000bde0:	00c00184 	movi	r3,6
1000bde4:	1880012e 	bgeu	r3,r2,1000bdec <___vfprintf_internal_r+0x1d68>
1000bde8:	1805883a 	mov	r2,r3
1000bdec:	d8802b15 	stw	r2,172(sp)
1000bdf0:	1000ef16 	blt	r2,zero,1000c1b0 <___vfprintf_internal_r+0x212c>
1000bdf4:	040400b4 	movhi	r16,4098
1000bdf8:	d8802915 	stw	r2,164(sp)
1000bdfc:	dcc02e15 	stw	r19,184(sp)
1000be00:	d8002a15 	stw	zero,168(sp)
1000be04:	d8003215 	stw	zero,200(sp)
1000be08:	840b5504 	addi	r16,r16,11604
1000be0c:	0039883a 	mov	fp,zero
1000be10:	003a8006 	br	1000a814 <__alt_data_end+0xf800a814>
1000be14:	0021883a 	mov	r16,zero
1000be18:	003e0706 	br	1000b638 <__alt_data_end+0xf800b638>
1000be1c:	d9002d17 	ldw	r4,180(sp)
1000be20:	d9801e04 	addi	r6,sp,120
1000be24:	b80b883a 	mov	r5,r23
1000be28:	00182f80 	call	100182f8 <__sprint_r>
1000be2c:	1039991e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000be30:	d8802617 	ldw	r2,152(sp)
1000be34:	d9403317 	ldw	r5,204(sp)
1000be38:	d8c02017 	ldw	r3,128(sp)
1000be3c:	da000404 	addi	r8,sp,16
1000be40:	2885c83a 	sub	r2,r5,r2
1000be44:	003dfb06 	br	1000b634 <__alt_data_end+0xf800b634>
1000be48:	9080004c 	andi	r2,r18,1
1000be4c:	103e8f1e 	bne	r2,zero,1000b88c <__alt_data_end+0xf800b88c>
1000be50:	d8802117 	ldw	r2,132(sp)
1000be54:	003e9e06 	br	1000b8d0 <__alt_data_end+0xf800b8d0>
1000be58:	1025883a 	mov	r18,r2
1000be5c:	0039883a 	mov	fp,zero
1000be60:	00800084 	movi	r2,2
1000be64:	003fd306 	br	1000bdb4 <__alt_data_end+0xf800bdb4>
1000be68:	07000b44 	movi	fp,45
1000be6c:	df002785 	stb	fp,158(sp)
1000be70:	003a1b06 	br	1000a6e0 <__alt_data_end+0xf800a6e0>
1000be74:	00c00b44 	movi	r3,45
1000be78:	d8c02785 	stb	r3,158(sp)
1000be7c:	d8802915 	stw	r2,164(sp)
1000be80:	dc802c17 	ldw	r18,176(sp)
1000be84:	d8002a15 	stw	zero,168(sp)
1000be88:	07000b44 	movi	fp,45
1000be8c:	003a5e06 	br	1000a808 <__alt_data_end+0xf800a808>
1000be90:	040400b4 	movhi	r16,4098
1000be94:	840b4a04 	addi	r16,r16,11560
1000be98:	003f4706 	br	1000bbb8 <__alt_data_end+0xf800bbb8>
1000be9c:	d9002e17 	ldw	r4,184(sp)
1000bea0:	d9402f17 	ldw	r5,188(sp)
1000bea4:	20800017 	ldw	r2,0(r4)
1000bea8:	21000104 	addi	r4,r4,4
1000beac:	d9002e15 	stw	r4,184(sp)
1000beb0:	11400015 	stw	r5,0(r2)
1000beb4:	0038ab06 	br	1000a164 <__alt_data_end+0xf800a164>
1000beb8:	dd802617 	ldw	r22,152(sp)
1000bebc:	00bfff44 	movi	r2,-3
1000bec0:	b0801c16 	blt	r22,r2,1000bf34 <___vfprintf_internal_r+0x1eb0>
1000bec4:	d9402a17 	ldw	r5,168(sp)
1000bec8:	2d801a16 	blt	r5,r22,1000bf34 <___vfprintf_internal_r+0x1eb0>
1000becc:	dd803215 	stw	r22,200(sp)
1000bed0:	003e8906 	br	1000b8f8 <__alt_data_end+0xf800b8f8>
1000bed4:	010400b4 	movhi	r4,4098
1000bed8:	210b5784 	addi	r4,r4,11614
1000bedc:	d9002c15 	stw	r4,176(sp)
1000bee0:	003c9106 	br	1000b128 <__alt_data_end+0xf800b128>
1000bee4:	e005883a 	mov	r2,fp
1000bee8:	003e7906 	br	1000b8d0 <__alt_data_end+0xf800b8d0>
1000beec:	d9002a17 	ldw	r4,168(sp)
1000bef0:	df002783 	ldbu	fp,158(sp)
1000bef4:	dcc02e15 	stw	r19,184(sp)
1000bef8:	d9002915 	stw	r4,164(sp)
1000befc:	d9002b15 	stw	r4,172(sp)
1000bf00:	d8002a15 	stw	zero,168(sp)
1000bf04:	d8003215 	stw	zero,200(sp)
1000bf08:	003a3b06 	br	1000a7f8 <__alt_data_end+0xf800a7f8>
1000bf0c:	9080004c 	andi	r2,r18,1
1000bf10:	0039883a 	mov	fp,zero
1000bf14:	10000426 	beq	r2,zero,1000bf28 <___vfprintf_internal_r+0x1ea4>
1000bf18:	00800c04 	movi	r2,48
1000bf1c:	dc001dc4 	addi	r16,sp,119
1000bf20:	d8801dc5 	stb	r2,119(sp)
1000bf24:	003b6406 	br	1000acb8 <__alt_data_end+0xf800acb8>
1000bf28:	d8002b15 	stw	zero,172(sp)
1000bf2c:	dc001e04 	addi	r16,sp,120
1000bf30:	003a2b06 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000bf34:	8c7fff84 	addi	r17,r17,-2
1000bf38:	b5bfffc4 	addi	r22,r22,-1
1000bf3c:	dd802615 	stw	r22,152(sp)
1000bf40:	dc4022c5 	stb	r17,139(sp)
1000bf44:	b000bf16 	blt	r22,zero,1000c244 <___vfprintf_internal_r+0x21c0>
1000bf48:	00800ac4 	movi	r2,43
1000bf4c:	d8802305 	stb	r2,140(sp)
1000bf50:	00800244 	movi	r2,9
1000bf54:	15807016 	blt	r2,r22,1000c118 <___vfprintf_internal_r+0x2094>
1000bf58:	00800c04 	movi	r2,48
1000bf5c:	b5800c04 	addi	r22,r22,48
1000bf60:	d8802345 	stb	r2,141(sp)
1000bf64:	dd802385 	stb	r22,142(sp)
1000bf68:	d88023c4 	addi	r2,sp,143
1000bf6c:	df0022c4 	addi	fp,sp,139
1000bf70:	d8c03317 	ldw	r3,204(sp)
1000bf74:	1739c83a 	sub	fp,r2,fp
1000bf78:	d9003317 	ldw	r4,204(sp)
1000bf7c:	e0c7883a 	add	r3,fp,r3
1000bf80:	df003a15 	stw	fp,232(sp)
1000bf84:	d8c02b15 	stw	r3,172(sp)
1000bf88:	00800044 	movi	r2,1
1000bf8c:	1100b30e 	bge	r2,r4,1000c25c <___vfprintf_internal_r+0x21d8>
1000bf90:	d8c02b17 	ldw	r3,172(sp)
1000bf94:	18c00044 	addi	r3,r3,1
1000bf98:	d8c02b15 	stw	r3,172(sp)
1000bf9c:	1805883a 	mov	r2,r3
1000bfa0:	1800ac16 	blt	r3,zero,1000c254 <___vfprintf_internal_r+0x21d0>
1000bfa4:	d8003215 	stw	zero,200(sp)
1000bfa8:	003e5d06 	br	1000b920 <__alt_data_end+0xf800b920>
1000bfac:	d9002d17 	ldw	r4,180(sp)
1000bfb0:	d9801e04 	addi	r6,sp,120
1000bfb4:	b80b883a 	mov	r5,r23
1000bfb8:	00182f80 	call	100182f8 <__sprint_r>
1000bfbc:	1039351e 	bne	r2,zero,1000a494 <__alt_data_end+0xf800a494>
1000bfc0:	dc402617 	ldw	r17,152(sp)
1000bfc4:	d8c02017 	ldw	r3,128(sp)
1000bfc8:	d8801f17 	ldw	r2,124(sp)
1000bfcc:	da000404 	addi	r8,sp,16
1000bfd0:	003ed606 	br	1000bb2c <__alt_data_end+0xf800bb2c>
1000bfd4:	182b883a 	mov	r21,r3
1000bfd8:	d8002a15 	stw	zero,168(sp)
1000bfdc:	00388c06 	br	1000a210 <__alt_data_end+0xf800a210>
1000bfe0:	d8802a17 	ldw	r2,168(sp)
1000bfe4:	103e071e 	bne	r2,zero,1000b804 <__alt_data_end+0xf800b804>
1000bfe8:	dc002a15 	stw	r16,168(sp)
1000bfec:	003e0506 	br	1000b804 <__alt_data_end+0xf800b804>
1000bff0:	d9002a17 	ldw	r4,168(sp)
1000bff4:	20c00044 	addi	r3,r4,1
1000bff8:	003e0f06 	br	1000b838 <__alt_data_end+0xf800b838>
1000bffc:	01400184 	movi	r5,6
1000c000:	d9402a15 	stw	r5,168(sp)
1000c004:	003dff06 	br	1000b804 <__alt_data_end+0xf800b804>
1000c008:	d8802104 	addi	r2,sp,132
1000c00c:	d8800315 	stw	r2,12(sp)
1000c010:	d8802504 	addi	r2,sp,148
1000c014:	d8800215 	stw	r2,8(sp)
1000c018:	d8802604 	addi	r2,sp,152
1000c01c:	d8800115 	stw	r2,4(sp)
1000c020:	d8802a17 	ldw	r2,168(sp)
1000c024:	d9403617 	ldw	r5,216(sp)
1000c028:	d9002d17 	ldw	r4,180(sp)
1000c02c:	d8800015 	stw	r2,0(sp)
1000c030:	01c000c4 	movi	r7,3
1000c034:	980d883a 	mov	r6,r19
1000c038:	da003d15 	stw	r8,244(sp)
1000c03c:	000e2100 	call	1000e210 <_dtoa_r>
1000c040:	d8c02a17 	ldw	r3,168(sp)
1000c044:	da003d17 	ldw	r8,244(sp)
1000c048:	1021883a 	mov	r16,r2
1000c04c:	10f9883a 	add	fp,r2,r3
1000c050:	81000007 	ldb	r4,0(r16)
1000c054:	00800c04 	movi	r2,48
1000c058:	20805e26 	beq	r4,r2,1000c1d4 <___vfprintf_internal_r+0x2150>
1000c05c:	d8c02617 	ldw	r3,152(sp)
1000c060:	e0f9883a 	add	fp,fp,r3
1000c064:	003e0a06 	br	1000b890 <__alt_data_end+0xf800b890>
1000c068:	00c00b44 	movi	r3,45
1000c06c:	24e0003c 	xorhi	r19,r4,32768
1000c070:	d8c02905 	stb	r3,164(sp)
1000c074:	003de906 	br	1000b81c <__alt_data_end+0xf800b81c>
1000c078:	d8c03217 	ldw	r3,200(sp)
1000c07c:	00c07a0e 	bge	zero,r3,1000c268 <___vfprintf_internal_r+0x21e4>
1000c080:	00800044 	movi	r2,1
1000c084:	d9003317 	ldw	r4,204(sp)
1000c088:	1105883a 	add	r2,r2,r4
1000c08c:	d8802b15 	stw	r2,172(sp)
1000c090:	10004e16 	blt	r2,zero,1000c1cc <___vfprintf_internal_r+0x2148>
1000c094:	044019c4 	movi	r17,103
1000c098:	003e2106 	br	1000b920 <__alt_data_end+0xf800b920>
1000c09c:	d9002a17 	ldw	r4,168(sp)
1000c0a0:	d8802104 	addi	r2,sp,132
1000c0a4:	d8800315 	stw	r2,12(sp)
1000c0a8:	d9000015 	stw	r4,0(sp)
1000c0ac:	d8802504 	addi	r2,sp,148
1000c0b0:	d9403617 	ldw	r5,216(sp)
1000c0b4:	d9002d17 	ldw	r4,180(sp)
1000c0b8:	d8800215 	stw	r2,8(sp)
1000c0bc:	d8802604 	addi	r2,sp,152
1000c0c0:	d8800115 	stw	r2,4(sp)
1000c0c4:	01c000c4 	movi	r7,3
1000c0c8:	980d883a 	mov	r6,r19
1000c0cc:	da003d15 	stw	r8,244(sp)
1000c0d0:	000e2100 	call	1000e210 <_dtoa_r>
1000c0d4:	d8c02a17 	ldw	r3,168(sp)
1000c0d8:	da003d17 	ldw	r8,244(sp)
1000c0dc:	1021883a 	mov	r16,r2
1000c0e0:	00801184 	movi	r2,70
1000c0e4:	80f9883a 	add	fp,r16,r3
1000c0e8:	88bfd926 	beq	r17,r2,1000c050 <__alt_data_end+0xf800c050>
1000c0ec:	003de806 	br	1000b890 <__alt_data_end+0xf800b890>
1000c0f0:	d9002a17 	ldw	r4,168(sp)
1000c0f4:	00c04d0e 	bge	zero,r3,1000c22c <___vfprintf_internal_r+0x21a8>
1000c0f8:	2000441e 	bne	r4,zero,1000c20c <___vfprintf_internal_r+0x2188>
1000c0fc:	9480004c 	andi	r18,r18,1
1000c100:	9000421e 	bne	r18,zero,1000c20c <___vfprintf_internal_r+0x2188>
1000c104:	1805883a 	mov	r2,r3
1000c108:	18006f16 	blt	r3,zero,1000c2c8 <___vfprintf_internal_r+0x2244>
1000c10c:	d8c03217 	ldw	r3,200(sp)
1000c110:	d8c02b15 	stw	r3,172(sp)
1000c114:	003e0206 	br	1000b920 <__alt_data_end+0xf800b920>
1000c118:	df0022c4 	addi	fp,sp,139
1000c11c:	dc002a15 	stw	r16,168(sp)
1000c120:	4027883a 	mov	r19,r8
1000c124:	e021883a 	mov	r16,fp
1000c128:	b009883a 	mov	r4,r22
1000c12c:	01400284 	movi	r5,10
1000c130:	0009b540 	call	10009b54 <__modsi3>
1000c134:	10800c04 	addi	r2,r2,48
1000c138:	843fffc4 	addi	r16,r16,-1
1000c13c:	b009883a 	mov	r4,r22
1000c140:	01400284 	movi	r5,10
1000c144:	80800005 	stb	r2,0(r16)
1000c148:	0009ad00 	call	10009ad0 <__divsi3>
1000c14c:	102d883a 	mov	r22,r2
1000c150:	00800244 	movi	r2,9
1000c154:	15bff416 	blt	r2,r22,1000c128 <__alt_data_end+0xf800c128>
1000c158:	9811883a 	mov	r8,r19
1000c15c:	b0800c04 	addi	r2,r22,48
1000c160:	8027883a 	mov	r19,r16
1000c164:	997fffc4 	addi	r5,r19,-1
1000c168:	98bfffc5 	stb	r2,-1(r19)
1000c16c:	dc002a17 	ldw	r16,168(sp)
1000c170:	2f006d2e 	bgeu	r5,fp,1000c328 <___vfprintf_internal_r+0x22a4>
1000c174:	d9c02384 	addi	r7,sp,142
1000c178:	3ccfc83a 	sub	r7,r7,r19
1000c17c:	d9002344 	addi	r4,sp,141
1000c180:	e1cf883a 	add	r7,fp,r7
1000c184:	00000106 	br	1000c18c <___vfprintf_internal_r+0x2108>
1000c188:	28800003 	ldbu	r2,0(r5)
1000c18c:	20800005 	stb	r2,0(r4)
1000c190:	21000044 	addi	r4,r4,1
1000c194:	29400044 	addi	r5,r5,1
1000c198:	393ffb1e 	bne	r7,r4,1000c188 <__alt_data_end+0xf800c188>
1000c19c:	d8802304 	addi	r2,sp,140
1000c1a0:	14c5c83a 	sub	r2,r2,r19
1000c1a4:	d8c02344 	addi	r3,sp,141
1000c1a8:	1885883a 	add	r2,r3,r2
1000c1ac:	003f7006 	br	1000bf70 <__alt_data_end+0xf800bf70>
1000c1b0:	0005883a 	mov	r2,zero
1000c1b4:	003f0f06 	br	1000bdf4 <__alt_data_end+0xf800bdf4>
1000c1b8:	d8c03217 	ldw	r3,200(sp)
1000c1bc:	18c00044 	addi	r3,r3,1
1000c1c0:	d8c02b15 	stw	r3,172(sp)
1000c1c4:	1805883a 	mov	r2,r3
1000c1c8:	183fb20e 	bge	r3,zero,1000c094 <__alt_data_end+0xf800c094>
1000c1cc:	0005883a 	mov	r2,zero
1000c1d0:	003fb006 	br	1000c094 <__alt_data_end+0xf800c094>
1000c1d4:	d9003617 	ldw	r4,216(sp)
1000c1d8:	000d883a 	mov	r6,zero
1000c1dc:	000f883a 	mov	r7,zero
1000c1e0:	980b883a 	mov	r5,r19
1000c1e4:	d8c03c15 	stw	r3,240(sp)
1000c1e8:	da003d15 	stw	r8,244(sp)
1000c1ec:	001dc140 	call	1001dc14 <__eqdf2>
1000c1f0:	d8c03c17 	ldw	r3,240(sp)
1000c1f4:	da003d17 	ldw	r8,244(sp)
1000c1f8:	103f9826 	beq	r2,zero,1000c05c <__alt_data_end+0xf800c05c>
1000c1fc:	00800044 	movi	r2,1
1000c200:	10c7c83a 	sub	r3,r2,r3
1000c204:	d8c02615 	stw	r3,152(sp)
1000c208:	003f9506 	br	1000c060 <__alt_data_end+0xf800c060>
1000c20c:	d9002a17 	ldw	r4,168(sp)
1000c210:	d8c03217 	ldw	r3,200(sp)
1000c214:	20800044 	addi	r2,r4,1
1000c218:	1885883a 	add	r2,r3,r2
1000c21c:	d8802b15 	stw	r2,172(sp)
1000c220:	103dbf0e 	bge	r2,zero,1000b920 <__alt_data_end+0xf800b920>
1000c224:	0005883a 	mov	r2,zero
1000c228:	003dbd06 	br	1000b920 <__alt_data_end+0xf800b920>
1000c22c:	2000201e 	bne	r4,zero,1000c2b0 <___vfprintf_internal_r+0x222c>
1000c230:	9480004c 	andi	r18,r18,1
1000c234:	90001e1e 	bne	r18,zero,1000c2b0 <___vfprintf_internal_r+0x222c>
1000c238:	00800044 	movi	r2,1
1000c23c:	d8802b15 	stw	r2,172(sp)
1000c240:	003db706 	br	1000b920 <__alt_data_end+0xf800b920>
1000c244:	00800b44 	movi	r2,45
1000c248:	05adc83a 	sub	r22,zero,r22
1000c24c:	d8802305 	stb	r2,140(sp)
1000c250:	003f3f06 	br	1000bf50 <__alt_data_end+0xf800bf50>
1000c254:	0005883a 	mov	r2,zero
1000c258:	003f5206 	br	1000bfa4 <__alt_data_end+0xf800bfa4>
1000c25c:	90a4703a 	and	r18,r18,r2
1000c260:	903f4e26 	beq	r18,zero,1000bf9c <__alt_data_end+0xf800bf9c>
1000c264:	003f4a06 	br	1000bf90 <__alt_data_end+0xf800bf90>
1000c268:	00800084 	movi	r2,2
1000c26c:	10c5c83a 	sub	r2,r2,r3
1000c270:	003f8406 	br	1000c084 <__alt_data_end+0xf800c084>
1000c274:	d9402e17 	ldw	r5,184(sp)
1000c278:	d9002e17 	ldw	r4,184(sp)
1000c27c:	ac400043 	ldbu	r17,1(r21)
1000c280:	29400017 	ldw	r5,0(r5)
1000c284:	20800104 	addi	r2,r4,4
1000c288:	d8802e15 	stw	r2,184(sp)
1000c28c:	d9402a15 	stw	r5,168(sp)
1000c290:	182b883a 	mov	r21,r3
1000c294:	283e7b0e 	bge	r5,zero,1000bc84 <__alt_data_end+0xf800bc84>
1000c298:	8c403fcc 	andi	r17,r17,255
1000c29c:	017fffc4 	movi	r5,-1
1000c2a0:	8c40201c 	xori	r17,r17,128
1000c2a4:	d9402a15 	stw	r5,168(sp)
1000c2a8:	8c7fe004 	addi	r17,r17,-128
1000c2ac:	0037d706 	br	1000a20c <__alt_data_end+0xf800a20c>
1000c2b0:	d8c02a17 	ldw	r3,168(sp)
1000c2b4:	18c00084 	addi	r3,r3,2
1000c2b8:	d8c02b15 	stw	r3,172(sp)
1000c2bc:	1805883a 	mov	r2,r3
1000c2c0:	183d970e 	bge	r3,zero,1000b920 <__alt_data_end+0xf800b920>
1000c2c4:	003fd706 	br	1000c224 <__alt_data_end+0xf800c224>
1000c2c8:	0005883a 	mov	r2,zero
1000c2cc:	003f8f06 	br	1000c10c <__alt_data_end+0xf800c10c>
1000c2d0:	9080004c 	andi	r2,r18,1
1000c2d4:	103f821e 	bne	r2,zero,1000c0e0 <__alt_data_end+0xf800c0e0>
1000c2d8:	d8802117 	ldw	r2,132(sp)
1000c2dc:	1405c83a 	sub	r2,r2,r16
1000c2e0:	d8803315 	stw	r2,204(sp)
1000c2e4:	b47ef426 	beq	r22,r17,1000beb8 <__alt_data_end+0xf800beb8>
1000c2e8:	dd802617 	ldw	r22,152(sp)
1000c2ec:	003f1206 	br	1000bf38 <__alt_data_end+0xf800bf38>
1000c2f0:	d8c02b03 	ldbu	r3,172(sp)
1000c2f4:	d8c02785 	stb	r3,158(sp)
1000c2f8:	0038df06 	br	1000a678 <__alt_data_end+0xf800a678>
1000c2fc:	d8c02b03 	ldbu	r3,172(sp)
1000c300:	d8c02785 	stb	r3,158(sp)
1000c304:	0038aa06 	br	1000a5b0 <__alt_data_end+0xf800a5b0>
1000c308:	d8c02b03 	ldbu	r3,172(sp)
1000c30c:	d8c02785 	stb	r3,158(sp)
1000c310:	003a4306 	br	1000ac20 <__alt_data_end+0xf800ac20>
1000c314:	d8c02b03 	ldbu	r3,172(sp)
1000c318:	d8c02785 	stb	r3,158(sp)
1000c31c:	003af506 	br	1000aef4 <__alt_data_end+0xf800aef4>
1000c320:	0005883a 	mov	r2,zero
1000c324:	003d7b06 	br	1000b914 <__alt_data_end+0xf800b914>
1000c328:	d8802344 	addi	r2,sp,141
1000c32c:	003f1006 	br	1000bf70 <__alt_data_end+0xf800bf70>
1000c330:	d8c02b03 	ldbu	r3,172(sp)
1000c334:	d8c02785 	stb	r3,158(sp)
1000c338:	0038fd06 	br	1000a730 <__alt_data_end+0xf800a730>
1000c33c:	d8c02b03 	ldbu	r3,172(sp)
1000c340:	d8c02785 	stb	r3,158(sp)
1000c344:	003a9706 	br	1000ada4 <__alt_data_end+0xf800ada4>
1000c348:	d8c02b03 	ldbu	r3,172(sp)
1000c34c:	d8c02785 	stb	r3,158(sp)
1000c350:	003a1806 	br	1000abb4 <__alt_data_end+0xf800abb4>
1000c354:	d8c02b03 	ldbu	r3,172(sp)
1000c358:	d8c02785 	stb	r3,158(sp)
1000c35c:	003abe06 	br	1000ae58 <__alt_data_end+0xf800ae58>

1000c360 <__vfprintf_internal>:
1000c360:	008400b4 	movhi	r2,4098
1000c364:	10951604 	addi	r2,r2,21592
1000c368:	300f883a 	mov	r7,r6
1000c36c:	280d883a 	mov	r6,r5
1000c370:	200b883a 	mov	r5,r4
1000c374:	11000017 	ldw	r4,0(r2)
1000c378:	000a0841 	jmpi	1000a084 <___vfprintf_internal_r>

1000c37c <__sbprintf>:
1000c37c:	2880030b 	ldhu	r2,12(r5)
1000c380:	2ac01917 	ldw	r11,100(r5)
1000c384:	2a80038b 	ldhu	r10,14(r5)
1000c388:	2a400717 	ldw	r9,28(r5)
1000c38c:	2a000917 	ldw	r8,36(r5)
1000c390:	defee204 	addi	sp,sp,-1144
1000c394:	00c10004 	movi	r3,1024
1000c398:	dc011a15 	stw	r16,1128(sp)
1000c39c:	10bfff4c 	andi	r2,r2,65533
1000c3a0:	2821883a 	mov	r16,r5
1000c3a4:	d8cb883a 	add	r5,sp,r3
1000c3a8:	dc811c15 	stw	r18,1136(sp)
1000c3ac:	dc411b15 	stw	r17,1132(sp)
1000c3b0:	dfc11d15 	stw	ra,1140(sp)
1000c3b4:	2025883a 	mov	r18,r4
1000c3b8:	d881030d 	sth	r2,1036(sp)
1000c3bc:	dac11915 	stw	r11,1124(sp)
1000c3c0:	da81038d 	sth	r10,1038(sp)
1000c3c4:	da410715 	stw	r9,1052(sp)
1000c3c8:	da010915 	stw	r8,1060(sp)
1000c3cc:	dec10015 	stw	sp,1024(sp)
1000c3d0:	dec10415 	stw	sp,1040(sp)
1000c3d4:	d8c10215 	stw	r3,1032(sp)
1000c3d8:	d8c10515 	stw	r3,1044(sp)
1000c3dc:	d8010615 	stw	zero,1048(sp)
1000c3e0:	000a0840 	call	1000a084 <___vfprintf_internal_r>
1000c3e4:	1023883a 	mov	r17,r2
1000c3e8:	10000416 	blt	r2,zero,1000c3fc <__sbprintf+0x80>
1000c3ec:	d9410004 	addi	r5,sp,1024
1000c3f0:	9009883a 	mov	r4,r18
1000c3f4:	000fab40 	call	1000fab4 <_fflush_r>
1000c3f8:	10000d1e 	bne	r2,zero,1000c430 <__sbprintf+0xb4>
1000c3fc:	d881030b 	ldhu	r2,1036(sp)
1000c400:	1080100c 	andi	r2,r2,64
1000c404:	10000326 	beq	r2,zero,1000c414 <__sbprintf+0x98>
1000c408:	8080030b 	ldhu	r2,12(r16)
1000c40c:	10801014 	ori	r2,r2,64
1000c410:	8080030d 	sth	r2,12(r16)
1000c414:	8805883a 	mov	r2,r17
1000c418:	dfc11d17 	ldw	ra,1140(sp)
1000c41c:	dc811c17 	ldw	r18,1136(sp)
1000c420:	dc411b17 	ldw	r17,1132(sp)
1000c424:	dc011a17 	ldw	r16,1128(sp)
1000c428:	dec11e04 	addi	sp,sp,1144
1000c42c:	f800283a 	ret
1000c430:	047fffc4 	movi	r17,-1
1000c434:	003ff106 	br	1000c3fc <__alt_data_end+0xf800c3fc>

1000c438 <__svfscanf_r>:
1000c438:	2880030b 	ldhu	r2,12(r5)
1000c43c:	deff4b04 	addi	sp,sp,-724
1000c440:	df00b315 	stw	fp,716(sp)
1000c444:	ddc0b215 	stw	r23,712(sp)
1000c448:	dfc0b415 	stw	ra,720(sp)
1000c44c:	dd80b115 	stw	r22,708(sp)
1000c450:	dd40b015 	stw	r21,704(sp)
1000c454:	dd00af15 	stw	r20,700(sp)
1000c458:	dcc0ae15 	stw	r19,696(sp)
1000c45c:	dc80ad15 	stw	r18,692(sp)
1000c460:	dc40ac15 	stw	r17,688(sp)
1000c464:	dc00ab15 	stw	r16,684(sp)
1000c468:	10c8000c 	andi	r3,r2,8192
1000c46c:	d9c09c15 	stw	r7,624(sp)
1000c470:	2839883a 	mov	fp,r5
1000c474:	202f883a 	mov	r23,r4
1000c478:	1800061e 	bne	r3,zero,1000c494 <__svfscanf_r+0x5c>
1000c47c:	29001917 	ldw	r4,100(r5)
1000c480:	00f7ffc4 	movi	r3,-8193
1000c484:	10880014 	ori	r2,r2,8192
1000c488:	20c6703a 	and	r3,r4,r3
1000c48c:	2880030d 	sth	r2,12(r5)
1000c490:	28c01915 	stw	r3,100(r5)
1000c494:	30800003 	ldbu	r2,0(r6)
1000c498:	0021883a 	mov	r16,zero
1000c49c:	058400b4 	movhi	r22,4098
1000c4a0:	d800a115 	stw	zero,644(sp)
1000c4a4:	d8009e15 	stw	zero,632(sp)
1000c4a8:	d800a015 	stw	zero,640(sp)
1000c4ac:	d8809b15 	stw	r2,620(sp)
1000c4b0:	b5951704 	addi	r22,r22,21596
1000c4b4:	8025883a 	mov	r18,r16
1000c4b8:	e027883a 	mov	r19,fp
1000c4bc:	35000044 	addi	r20,r6,1
1000c4c0:	10001e26 	beq	r2,zero,1000c53c <__svfscanf_r+0x104>
1000c4c4:	b4000017 	ldw	r16,0(r22)
1000c4c8:	8087883a 	add	r3,r16,r2
1000c4cc:	18c00043 	ldbu	r3,1(r3)
1000c4d0:	18c0020c 	andi	r3,r3,8
1000c4d4:	18001b26 	beq	r3,zero,1000c544 <__svfscanf_r+0x10c>
1000c4d8:	98800117 	ldw	r2,4(r19)
1000c4dc:	00800e0e 	bge	zero,r2,1000c518 <__svfscanf_r+0xe0>
1000c4e0:	98c00017 	ldw	r3,0(r19)
1000c4e4:	b1000017 	ldw	r4,0(r22)
1000c4e8:	18800003 	ldbu	r2,0(r3)
1000c4ec:	2085883a 	add	r2,r4,r2
1000c4f0:	10800043 	ldbu	r2,1(r2)
1000c4f4:	1080020c 	andi	r2,r2,8
1000c4f8:	10000b26 	beq	r2,zero,1000c528 <__svfscanf_r+0xf0>
1000c4fc:	98800117 	ldw	r2,4(r19)
1000c500:	18c00044 	addi	r3,r3,1
1000c504:	98c00015 	stw	r3,0(r19)
1000c508:	10bfffc4 	addi	r2,r2,-1
1000c50c:	98800115 	stw	r2,4(r19)
1000c510:	94800044 	addi	r18,r18,1
1000c514:	00bff216 	blt	zero,r2,1000c4e0 <__alt_data_end+0xf800c4e0>
1000c518:	980b883a 	mov	r5,r19
1000c51c:	b809883a 	mov	r4,r23
1000c520:	00133e40 	call	100133e4 <__srefill_r>
1000c524:	103fee26 	beq	r2,zero,1000c4e0 <__alt_data_end+0xf800c4e0>
1000c528:	a00d883a 	mov	r6,r20
1000c52c:	30800003 	ldbu	r2,0(r6)
1000c530:	35000044 	addi	r20,r6,1
1000c534:	d8809b15 	stw	r2,620(sp)
1000c538:	103fe21e 	bne	r2,zero,1000c4c4 <__alt_data_end+0xf800c4c4>
1000c53c:	d880a017 	ldw	r2,640(sp)
1000c540:	00009a06 	br	1000c7ac <__svfscanf_r+0x374>
1000c544:	00c00944 	movi	r3,37
1000c548:	10c0891e 	bne	r2,r3,1000c770 <__svfscanf_r+0x338>
1000c54c:	0039883a 	mov	fp,zero
1000c550:	35400043 	ldbu	r21,1(r6)
1000c554:	0023883a 	mov	r17,zero
1000c558:	01801e04 	movi	r6,120
1000c55c:	00c01b04 	movi	r3,108
1000c560:	e009883a 	mov	r4,fp
1000c564:	a1c00044 	addi	r7,r20,1
1000c568:	3540a236 	bltu	r6,r21,1000c7f4 <__svfscanf_r+0x3bc>
1000c56c:	a80490ba 	slli	r2,r21,2
1000c570:	01440074 	movhi	r5,4097
1000c574:	29716104 	addi	r5,r5,-14972
1000c578:	1145883a 	add	r2,r2,r5
1000c57c:	10800017 	ldw	r2,0(r2)
1000c580:	1000683a 	jmp	r2
1000c584:	1000c7a8 	cmpgeui	zero,r2,798
1000c588:	1000c7f4 	orhi	zero,r2,799
1000c58c:	1000c7f4 	orhi	zero,r2,799
1000c590:	1000c7f4 	orhi	zero,r2,799
1000c594:	1000c7f4 	orhi	zero,r2,799
1000c598:	1000c7f4 	orhi	zero,r2,799
1000c59c:	1000c7f4 	orhi	zero,r2,799
1000c5a0:	1000c7f4 	orhi	zero,r2,799
1000c5a4:	1000c7f4 	orhi	zero,r2,799
1000c5a8:	1000c7f4 	orhi	zero,r2,799
1000c5ac:	1000c7f4 	orhi	zero,r2,799
1000c5b0:	1000c7f4 	orhi	zero,r2,799
1000c5b4:	1000c7f4 	orhi	zero,r2,799
1000c5b8:	1000c7f4 	orhi	zero,r2,799
1000c5bc:	1000c7f4 	orhi	zero,r2,799
1000c5c0:	1000c7f4 	orhi	zero,r2,799
1000c5c4:	1000c7f4 	orhi	zero,r2,799
1000c5c8:	1000c7f4 	orhi	zero,r2,799
1000c5cc:	1000c7f4 	orhi	zero,r2,799
1000c5d0:	1000c7f4 	orhi	zero,r2,799
1000c5d4:	1000c7f4 	orhi	zero,r2,799
1000c5d8:	1000c7f4 	orhi	zero,r2,799
1000c5dc:	1000c7f4 	orhi	zero,r2,799
1000c5e0:	1000c7f4 	orhi	zero,r2,799
1000c5e4:	1000c7f4 	orhi	zero,r2,799
1000c5e8:	1000c7f4 	orhi	zero,r2,799
1000c5ec:	1000c7f4 	orhi	zero,r2,799
1000c5f0:	1000c7f4 	orhi	zero,r2,799
1000c5f4:	1000c7f4 	orhi	zero,r2,799
1000c5f8:	1000c7f4 	orhi	zero,r2,799
1000c5fc:	1000c7f4 	orhi	zero,r2,799
1000c600:	1000c7f4 	orhi	zero,r2,799
1000c604:	1000c7f4 	orhi	zero,r2,799
1000c608:	1000c7f4 	orhi	zero,r2,799
1000c60c:	1000c7f4 	orhi	zero,r2,799
1000c610:	1000c7f4 	orhi	zero,r2,799
1000c614:	1000c7f4 	orhi	zero,r2,799
1000c618:	1000c768 	cmpgeui	zero,r2,797
1000c61c:	1000c7f4 	orhi	zero,r2,799
1000c620:	1000c7f4 	orhi	zero,r2,799
1000c624:	1000c7f4 	orhi	zero,r2,799
1000c628:	1000c7f4 	orhi	zero,r2,799
1000c62c:	1000c7dc 	xori	zero,r2,799
1000c630:	1000c7f4 	orhi	zero,r2,799
1000c634:	1000c7f4 	orhi	zero,r2,799
1000c638:	1000c7f4 	orhi	zero,r2,799
1000c63c:	1000c7f4 	orhi	zero,r2,799
1000c640:	1000c7f4 	orhi	zero,r2,799
1000c644:	1000c93c 	xorhi	zero,r2,804
1000c648:	1000c93c 	xorhi	zero,r2,804
1000c64c:	1000c93c 	xorhi	zero,r2,804
1000c650:	1000c93c 	xorhi	zero,r2,804
1000c654:	1000c93c 	xorhi	zero,r2,804
1000c658:	1000c93c 	xorhi	zero,r2,804
1000c65c:	1000c93c 	xorhi	zero,r2,804
1000c660:	1000c93c 	xorhi	zero,r2,804
1000c664:	1000c93c 	xorhi	zero,r2,804
1000c668:	1000c93c 	xorhi	zero,r2,804
1000c66c:	1000c7f4 	orhi	zero,r2,799
1000c670:	1000c7f4 	orhi	zero,r2,799
1000c674:	1000c7f4 	orhi	zero,r2,799
1000c678:	1000c7f4 	orhi	zero,r2,799
1000c67c:	1000c7f4 	orhi	zero,r2,799
1000c680:	1000c7f4 	orhi	zero,r2,799
1000c684:	1000c7f4 	orhi	zero,r2,799
1000c688:	1000c7f4 	orhi	zero,r2,799
1000c68c:	1000c7f4 	orhi	zero,r2,799
1000c690:	1000c7f4 	orhi	zero,r2,799
1000c694:	1000c90c 	andi	zero,r2,804
1000c698:	1000c9e8 	cmpgeui	zero,r2,807
1000c69c:	1000c7f4 	orhi	zero,r2,799
1000c6a0:	1000c9e8 	cmpgeui	zero,r2,807
1000c6a4:	1000c7f4 	orhi	zero,r2,799
1000c6a8:	1000c7f4 	orhi	zero,r2,799
1000c6ac:	1000c7f4 	orhi	zero,r2,799
1000c6b0:	1000c7f4 	orhi	zero,r2,799
1000c6b4:	1000c9d4 	ori	zero,r2,807
1000c6b8:	1000c7f4 	orhi	zero,r2,799
1000c6bc:	1000c7f4 	orhi	zero,r2,799
1000c6c0:	1000c9a4 	muli	zero,r2,806
1000c6c4:	1000c7f4 	orhi	zero,r2,799
1000c6c8:	1000c7f4 	orhi	zero,r2,799
1000c6cc:	1000c7f4 	orhi	zero,r2,799
1000c6d0:	1000c7f4 	orhi	zero,r2,799
1000c6d4:	1000c7f4 	orhi	zero,r2,799
1000c6d8:	1000c7f4 	orhi	zero,r2,799
1000c6dc:	1000c7f4 	orhi	zero,r2,799
1000c6e0:	1000c7f4 	orhi	zero,r2,799
1000c6e4:	1000c974 	orhi	zero,r2,805
1000c6e8:	1000c7f4 	orhi	zero,r2,799
1000c6ec:	1000c7f4 	orhi	zero,r2,799
1000c6f0:	1000cb30 	cmpltui	zero,r2,812
1000c6f4:	1000c7f4 	orhi	zero,r2,799
1000c6f8:	1000c7f4 	orhi	zero,r2,799
1000c6fc:	1000c7f4 	orhi	zero,r2,799
1000c700:	1000c7f4 	orhi	zero,r2,799
1000c704:	1000c7f4 	orhi	zero,r2,799
1000c708:	1000c7f4 	orhi	zero,r2,799
1000c70c:	1000c7f4 	orhi	zero,r2,799
1000c710:	1000cab0 	cmpltui	zero,r2,810
1000c714:	1000ca84 	addi	zero,r2,810
1000c718:	1000c9e8 	cmpgeui	zero,r2,807
1000c71c:	1000c9e8 	cmpgeui	zero,r2,807
1000c720:	1000c9e8 	cmpgeui	zero,r2,807
1000c724:	1000ca70 	cmpltui	zero,r2,809
1000c728:	1000cbc0 	call	11000cbc <_gp+0xfd3870>
1000c72c:	1000c7f4 	orhi	zero,r2,799
1000c730:	1000c7f4 	orhi	zero,r2,799
1000c734:	1000ca5c 	xori	zero,r2,809
1000c738:	1000c7f4 	orhi	zero,r2,799
1000c73c:	1000ca2c 	andhi	zero,r2,808
1000c740:	1000ca00 	call	11000ca0 <_gp+0xfd3854>
1000c744:	1000c8dc 	xori	zero,r2,803
1000c748:	1000c7f4 	orhi	zero,r2,799
1000c74c:	1000c7f4 	orhi	zero,r2,799
1000c750:	1000c8c4 	addi	zero,r2,803
1000c754:	1000c7f4 	orhi	zero,r2,799
1000c758:	1000c848 	cmpgei	zero,r2,801
1000c75c:	1000c7f4 	orhi	zero,r2,799
1000c760:	1000c7f4 	orhi	zero,r2,799
1000c764:	1000c974 	orhi	zero,r2,805
1000c768:	d9c09d15 	stw	r7,628(sp)
1000c76c:	3829883a 	mov	r20,r7
1000c770:	98800117 	ldw	r2,4(r19)
1000c774:	0081c60e 	bge	zero,r2,1000ce90 <__svfscanf_r+0xa58>
1000c778:	98800017 	ldw	r2,0(r19)
1000c77c:	a0ffffc3 	ldbu	r3,-1(r20)
1000c780:	11000003 	ldbu	r4,0(r2)
1000c784:	20ff6d1e 	bne	r4,r3,1000c53c <__alt_data_end+0xf800c53c>
1000c788:	98c00117 	ldw	r3,4(r19)
1000c78c:	10800044 	addi	r2,r2,1
1000c790:	98800015 	stw	r2,0(r19)
1000c794:	18bfffc4 	addi	r2,r3,-1
1000c798:	98800115 	stw	r2,4(r19)
1000c79c:	94800044 	addi	r18,r18,1
1000c7a0:	a00d883a 	mov	r6,r20
1000c7a4:	003f6106 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c7a8:	00bfffc4 	movi	r2,-1
1000c7ac:	dfc0b417 	ldw	ra,720(sp)
1000c7b0:	df00b317 	ldw	fp,716(sp)
1000c7b4:	ddc0b217 	ldw	r23,712(sp)
1000c7b8:	dd80b117 	ldw	r22,708(sp)
1000c7bc:	dd40b017 	ldw	r21,704(sp)
1000c7c0:	dd00af17 	ldw	r20,700(sp)
1000c7c4:	dcc0ae17 	ldw	r19,696(sp)
1000c7c8:	dc80ad17 	ldw	r18,692(sp)
1000c7cc:	dc40ac17 	ldw	r17,688(sp)
1000c7d0:	dc00ab17 	ldw	r16,684(sp)
1000c7d4:	dec0b504 	addi	sp,sp,724
1000c7d8:	f800283a 	ret
1000c7dc:	a1400043 	ldbu	r5,1(r20)
1000c7e0:	3829883a 	mov	r20,r7
1000c7e4:	8c400414 	ori	r17,r17,16
1000c7e8:	2d403fcc 	andi	r21,r5,255
1000c7ec:	a1c00044 	addi	r7,r20,1
1000c7f0:	357f5e2e 	bgeu	r6,r21,1000c56c <__alt_data_end+0xf800c56c>
1000c7f4:	856b883a 	add	r21,r16,r21
1000c7f8:	a8800043 	ldbu	r2,1(r21)
1000c7fc:	d9c09d15 	stw	r7,628(sp)
1000c800:	00c00044 	movi	r3,1
1000c804:	108000cc 	andi	r2,r2,3
1000c808:	2039883a 	mov	fp,r4
1000c80c:	10c1a526 	beq	r2,r3,1000cea4 <__svfscanf_r+0xa6c>
1000c810:	98800117 	ldw	r2,4(r19)
1000c814:	00804216 	blt	zero,r2,1000c920 <__svfscanf_r+0x4e8>
1000c818:	980b883a 	mov	r5,r19
1000c81c:	b809883a 	mov	r4,r23
1000c820:	00133e40 	call	100133e4 <__srefill_r>
1000c824:	10015e1e 	bne	r2,zero,1000cda0 <__svfscanf_r+0x968>
1000c828:	01040074 	movhi	r4,4097
1000c82c:	21146504 	addi	r4,r4,20884
1000c830:	01400284 	movi	r5,10
1000c834:	b4000017 	ldw	r16,0(r22)
1000c838:	d900a115 	stw	r4,644(sp)
1000c83c:	d9409e15 	stw	r5,632(sp)
1000c840:	050000c4 	movi	r20,3
1000c844:	00000a06 	br	1000c870 <__svfscanf_r+0x438>
1000c848:	98800117 	ldw	r2,4(r19)
1000c84c:	d9c09d15 	stw	r7,628(sp)
1000c850:	2039883a 	mov	fp,r4
1000c854:	0081e20e 	bge	zero,r2,1000cfe0 <__svfscanf_r+0xba8>
1000c858:	00c40074 	movhi	r3,4097
1000c85c:	18d5c304 	addi	r3,r3,22284
1000c860:	01000284 	movi	r4,10
1000c864:	d8c0a115 	stw	r3,644(sp)
1000c868:	d9009e15 	stw	r4,632(sp)
1000c86c:	050000c4 	movi	r20,3
1000c870:	98c00017 	ldw	r3,0(r19)
1000c874:	00000206 	br	1000c880 <__svfscanf_r+0x448>
1000c878:	18c00044 	addi	r3,r3,1
1000c87c:	98c00015 	stw	r3,0(r19)
1000c880:	19000003 	ldbu	r4,0(r3)
1000c884:	20803fcc 	andi	r2,r4,255
1000c888:	8085883a 	add	r2,r16,r2
1000c88c:	10800043 	ldbu	r2,1(r2)
1000c890:	1140020c 	andi	r5,r2,8
1000c894:	28020126 	beq	r5,zero,1000d09c <__svfscanf_r+0xc64>
1000c898:	98800117 	ldw	r2,4(r19)
1000c89c:	94800044 	addi	r18,r18,1
1000c8a0:	10bfffc4 	addi	r2,r2,-1
1000c8a4:	98800115 	stw	r2,4(r19)
1000c8a8:	00bff316 	blt	zero,r2,1000c878 <__alt_data_end+0xf800c878>
1000c8ac:	980b883a 	mov	r5,r19
1000c8b0:	b809883a 	mov	r4,r23
1000c8b4:	00133e40 	call	100133e4 <__srefill_r>
1000c8b8:	1001391e 	bne	r2,zero,1000cda0 <__svfscanf_r+0x968>
1000c8bc:	b4000017 	ldw	r16,0(r22)
1000c8c0:	003feb06 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8c4:	98800117 	ldw	r2,4(r19)
1000c8c8:	d9c09d15 	stw	r7,628(sp)
1000c8cc:	2039883a 	mov	fp,r4
1000c8d0:	0081aa0e 	bge	zero,r2,1000cf7c <__svfscanf_r+0xb44>
1000c8d4:	05000084 	movi	r20,2
1000c8d8:	003fe506 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8dc:	98800117 	ldw	r2,4(r19)
1000c8e0:	d9c09d15 	stw	r7,628(sp)
1000c8e4:	2039883a 	mov	fp,r4
1000c8e8:	8c408814 	ori	r17,r17,544
1000c8ec:	0081df0e 	bge	zero,r2,1000d06c <__svfscanf_r+0xc34>
1000c8f0:	00c40074 	movhi	r3,4097
1000c8f4:	18d5c304 	addi	r3,r3,22284
1000c8f8:	01000404 	movi	r4,16
1000c8fc:	d8c0a115 	stw	r3,644(sp)
1000c900:	d9009e15 	stw	r4,632(sp)
1000c904:	050000c4 	movi	r20,3
1000c908:	003fd906 	br	1000c870 <__alt_data_end+0xf800c870>
1000c90c:	98800117 	ldw	r2,4(r19)
1000c910:	d9c09d15 	stw	r7,628(sp)
1000c914:	2039883a 	mov	fp,r4
1000c918:	8c400054 	ori	r17,r17,1
1000c91c:	0081850e 	bge	zero,r2,1000cf34 <__svfscanf_r+0xafc>
1000c920:	00c40074 	movhi	r3,4097
1000c924:	18d46504 	addi	r3,r3,20884
1000c928:	01000284 	movi	r4,10
1000c92c:	d8c0a115 	stw	r3,644(sp)
1000c930:	d9009e15 	stw	r4,632(sp)
1000c934:	050000c4 	movi	r20,3
1000c938:	003fcd06 	br	1000c870 <__alt_data_end+0xf800c870>
1000c93c:	01400284 	movi	r5,10
1000c940:	d8c0a615 	stw	r3,664(sp)
1000c944:	d980a915 	stw	r6,676(sp)
1000c948:	d9c0aa15 	stw	r7,680(sp)
1000c94c:	0008ef00 	call	10008ef0 <__mulsi3>
1000c950:	a1400043 	ldbu	r5,1(r20)
1000c954:	d9c0aa17 	ldw	r7,680(sp)
1000c958:	1545883a 	add	r2,r2,r21
1000c95c:	113ff404 	addi	r4,r2,-48
1000c960:	3829883a 	mov	r20,r7
1000c964:	2d403fcc 	andi	r21,r5,255
1000c968:	d8c0a617 	ldw	r3,664(sp)
1000c96c:	d980a917 	ldw	r6,676(sp)
1000c970:	003efc06 	br	1000c564 <__alt_data_end+0xf800c564>
1000c974:	98800117 	ldw	r2,4(r19)
1000c978:	d9c09d15 	stw	r7,628(sp)
1000c97c:	2039883a 	mov	fp,r4
1000c980:	8c408014 	ori	r17,r17,512
1000c984:	0081710e 	bge	zero,r2,1000cf4c <__svfscanf_r+0xb14>
1000c988:	01440074 	movhi	r5,4097
1000c98c:	2955c304 	addi	r5,r5,22284
1000c990:	00800404 	movi	r2,16
1000c994:	d940a115 	stw	r5,644(sp)
1000c998:	d8809e15 	stw	r2,632(sp)
1000c99c:	050000c4 	movi	r20,3
1000c9a0:	003fb306 	br	1000c870 <__alt_data_end+0xf800c870>
1000c9a4:	98800117 	ldw	r2,4(r19)
1000c9a8:	d9c09d15 	stw	r7,628(sp)
1000c9ac:	2039883a 	mov	fp,r4
1000c9b0:	8c400054 	ori	r17,r17,1
1000c9b4:	0081840e 	bge	zero,r2,1000cfc8 <__svfscanf_r+0xb90>
1000c9b8:	01440074 	movhi	r5,4097
1000c9bc:	2955c304 	addi	r5,r5,22284
1000c9c0:	00800204 	movi	r2,8
1000c9c4:	d940a115 	stw	r5,644(sp)
1000c9c8:	d8809e15 	stw	r2,632(sp)
1000c9cc:	050000c4 	movi	r20,3
1000c9d0:	003fa706 	br	1000c870 <__alt_data_end+0xf800c870>
1000c9d4:	a1400043 	ldbu	r5,1(r20)
1000c9d8:	8c400094 	ori	r17,r17,2
1000c9dc:	3829883a 	mov	r20,r7
1000c9e0:	2d403fcc 	andi	r21,r5,255
1000c9e4:	003edf06 	br	1000c564 <__alt_data_end+0xf800c564>
1000c9e8:	98800117 	ldw	r2,4(r19)
1000c9ec:	d9c09d15 	stw	r7,628(sp)
1000c9f0:	2039883a 	mov	fp,r4
1000c9f4:	00816d0e 	bge	zero,r2,1000cfac <__svfscanf_r+0xb74>
1000c9f8:	05000104 	movi	r20,4
1000c9fc:	003f9c06 	br	1000c870 <__alt_data_end+0xf800c870>
1000ca00:	98800117 	ldw	r2,4(r19)
1000ca04:	d9c09d15 	stw	r7,628(sp)
1000ca08:	2039883a 	mov	fp,r4
1000ca0c:	0081800e 	bge	zero,r2,1000d010 <__svfscanf_r+0xbd8>
1000ca10:	01040074 	movhi	r4,4097
1000ca14:	2115c304 	addi	r4,r4,22284
1000ca18:	01400204 	movi	r5,8
1000ca1c:	d900a115 	stw	r4,644(sp)
1000ca20:	d9409e15 	stw	r5,632(sp)
1000ca24:	050000c4 	movi	r20,3
1000ca28:	003f9106 	br	1000c870 <__alt_data_end+0xf800c870>
1000ca2c:	d9c09d15 	stw	r7,628(sp)
1000ca30:	8880040c 	andi	r2,r17,16
1000ca34:	1000a01e 	bne	r2,zero,1000ccb8 <__svfscanf_r+0x880>
1000ca38:	8880010c 	andi	r2,r17,4
1000ca3c:	10012826 	beq	r2,zero,1000cee0 <__svfscanf_r+0xaa8>
1000ca40:	d9009c17 	ldw	r4,624(sp)
1000ca44:	3829883a 	mov	r20,r7
1000ca48:	20800017 	ldw	r2,0(r4)
1000ca4c:	21000104 	addi	r4,r4,4
1000ca50:	d9009c15 	stw	r4,624(sp)
1000ca54:	1480000d 	sth	r18,0(r2)
1000ca58:	003eb306 	br	1000c528 <__alt_data_end+0xf800c528>
1000ca5c:	a5400043 	ldbu	r21,1(r20)
1000ca60:	a8c11a26 	beq	r21,r3,1000cecc <__svfscanf_r+0xa94>
1000ca64:	8c400054 	ori	r17,r17,1
1000ca68:	3829883a 	mov	r20,r7
1000ca6c:	003ebd06 	br	1000c564 <__alt_data_end+0xf800c564>
1000ca70:	a1400043 	ldbu	r5,1(r20)
1000ca74:	8c400114 	ori	r17,r17,4
1000ca78:	3829883a 	mov	r20,r7
1000ca7c:	2d403fcc 	andi	r21,r5,255
1000ca80:	003eb806 	br	1000c564 <__alt_data_end+0xf800c564>
1000ca84:	98800117 	ldw	r2,4(r19)
1000ca88:	d9c09d15 	stw	r7,628(sp)
1000ca8c:	2039883a 	mov	fp,r4
1000ca90:	00bf610e 	bge	zero,r2,1000c818 <__alt_data_end+0xf800c818>
1000ca94:	00840074 	movhi	r2,4097
1000ca98:	10946504 	addi	r2,r2,20884
1000ca9c:	00c00284 	movi	r3,10
1000caa0:	d880a115 	stw	r2,644(sp)
1000caa4:	d8c09e15 	stw	r3,632(sp)
1000caa8:	050000c4 	movi	r20,3
1000caac:	003f7006 	br	1000c870 <__alt_data_end+0xf800c870>
1000cab0:	98800117 	ldw	r2,4(r19)
1000cab4:	d9c09d15 	stw	r7,628(sp)
1000cab8:	2039883a 	mov	fp,r4
1000cabc:	0080c60e 	bge	zero,r2,1000cdd8 <__svfscanf_r+0x9a0>
1000cac0:	e000011e 	bne	fp,zero,1000cac8 <__svfscanf_r+0x690>
1000cac4:	07000044 	movi	fp,1
1000cac8:	8880004c 	andi	r2,r17,1
1000cacc:	1000461e 	bne	r2,zero,1000cbe8 <__svfscanf_r+0x7b0>
1000cad0:	8c40040c 	andi	r17,r17,16
1000cad4:	8800dc26 	beq	r17,zero,1000ce48 <__svfscanf_r+0xa10>
1000cad8:	0021883a 	mov	r16,zero
1000cadc:	00000806 	br	1000cb00 <__svfscanf_r+0x6c8>
1000cae0:	1887883a 	add	r3,r3,r2
1000cae4:	980b883a 	mov	r5,r19
1000cae8:	b809883a 	mov	r4,r23
1000caec:	98c00015 	stw	r3,0(r19)
1000caf0:	80a1883a 	add	r16,r16,r2
1000caf4:	e0b9c83a 	sub	fp,fp,r2
1000caf8:	00133e40 	call	100133e4 <__srefill_r>
1000cafc:	1000cc1e 	bne	r2,zero,1000ce30 <__svfscanf_r+0x9f8>
1000cb00:	98800117 	ldw	r2,4(r19)
1000cb04:	98c00017 	ldw	r3,0(r19)
1000cb08:	173ff516 	blt	r2,fp,1000cae0 <__alt_data_end+0xf800cae0>
1000cb0c:	1705c83a 	sub	r2,r2,fp
1000cb10:	1f15883a 	add	r10,r3,fp
1000cb14:	8721883a 	add	r16,r16,fp
1000cb18:	98800115 	stw	r2,4(r19)
1000cb1c:	9a800015 	stw	r10,0(r19)
1000cb20:	dd009d17 	ldw	r20,628(sp)
1000cb24:	9425883a 	add	r18,r18,r16
1000cb28:	a00d883a 	mov	r6,r20
1000cb2c:	003e7f06 	br	1000c52c <__alt_data_end+0xf800c52c>
1000cb30:	2039883a 	mov	fp,r4
1000cb34:	380b883a 	mov	r5,r7
1000cb38:	d9005884 	addi	r4,sp,354
1000cb3c:	d9c09d15 	stw	r7,628(sp)
1000cb40:	00136800 	call	10013680 <__sccl>
1000cb44:	1029883a 	mov	r20,r2
1000cb48:	98800117 	ldw	r2,4(r19)
1000cb4c:	0081120e 	bge	zero,r2,1000cf98 <__svfscanf_r+0xb60>
1000cb50:	99000017 	ldw	r4,0(r19)
1000cb54:	20800003 	ldbu	r2,0(r4)
1000cb58:	e0005a26 	beq	fp,zero,1000ccc4 <__svfscanf_r+0x88c>
1000cb5c:	8c40040c 	andi	r17,r17,16
1000cb60:	88005b26 	beq	r17,zero,1000ccd0 <__svfscanf_r+0x898>
1000cb64:	e023883a 	mov	r17,fp
1000cb68:	0021883a 	mov	r16,zero
1000cb6c:	00000106 	br	1000cb74 <__svfscanf_r+0x73c>
1000cb70:	20800003 	ldbu	r2,0(r4)
1000cb74:	10803fcc 	andi	r2,r2,255
1000cb78:	d8c05884 	addi	r3,sp,354
1000cb7c:	1885883a 	add	r2,r3,r2
1000cb80:	10800007 	ldb	r2,0(r2)
1000cb84:	1000ae26 	beq	r2,zero,1000ce40 <__svfscanf_r+0xa08>
1000cb88:	98800117 	ldw	r2,4(r19)
1000cb8c:	21000044 	addi	r4,r4,1
1000cb90:	84000044 	addi	r16,r16,1
1000cb94:	10bfffc4 	addi	r2,r2,-1
1000cb98:	98800115 	stw	r2,4(r19)
1000cb9c:	99000015 	stw	r4,0(r19)
1000cba0:	8700a126 	beq	r16,fp,1000ce28 <__svfscanf_r+0x9f0>
1000cba4:	00bff216 	blt	zero,r2,1000cb70 <__alt_data_end+0xf800cb70>
1000cba8:	980b883a 	mov	r5,r19
1000cbac:	b809883a 	mov	r4,r23
1000cbb0:	00133e40 	call	100133e4 <__srefill_r>
1000cbb4:	10009b1e 	bne	r2,zero,1000ce24 <__svfscanf_r+0x9ec>
1000cbb8:	99000017 	ldw	r4,0(r19)
1000cbbc:	003fec06 	br	1000cb70 <__alt_data_end+0xf800cb70>
1000cbc0:	98800117 	ldw	r2,4(r19)
1000cbc4:	d9c09d15 	stw	r7,628(sp)
1000cbc8:	2039883a 	mov	fp,r4
1000cbcc:	00811c0e 	bge	zero,r2,1000d040 <__svfscanf_r+0xc08>
1000cbd0:	01440074 	movhi	r5,4097
1000cbd4:	29546504 	addi	r5,r5,20884
1000cbd8:	d940a115 	stw	r5,644(sp)
1000cbdc:	d8009e15 	stw	zero,632(sp)
1000cbe0:	050000c4 	movi	r20,3
1000cbe4:	003f2206 	br	1000c870 <__alt_data_end+0xf800c870>
1000cbe8:	dd409904 	addi	r21,sp,612
1000cbec:	8c40040c 	andi	r17,r17,16
1000cbf0:	01800204 	movi	r6,8
1000cbf4:	000b883a 	mov	r5,zero
1000cbf8:	a809883a 	mov	r4,r21
1000cbfc:	dc409f15 	stw	r17,636(sp)
1000cc00:	0011b1c0 	call	10011b1c <memset>
1000cc04:	dc409f17 	ldw	r17,636(sp)
1000cc08:	88006e26 	beq	r17,zero,1000cdc4 <__svfscanf_r+0x98c>
1000cc0c:	0029883a 	mov	r20,zero
1000cc10:	0023883a 	mov	r17,zero
1000cc14:	0010c9c0 	call	10010c9c <__locale_mb_cur_max>
1000cc18:	14406126 	beq	r2,r17,1000cda0 <__svfscanf_r+0x968>
1000cc1c:	98800017 	ldw	r2,0(r19)
1000cc20:	98c00117 	ldw	r3,4(r19)
1000cc24:	d9000104 	addi	r4,sp,4
1000cc28:	12000003 	ldbu	r8,0(r2)
1000cc2c:	18ffffc4 	addi	r3,r3,-1
1000cc30:	10800044 	addi	r2,r2,1
1000cc34:	98c00115 	stw	r3,4(r19)
1000cc38:	98800015 	stw	r2,0(r19)
1000cc3c:	8c000044 	addi	r16,r17,1
1000cc40:	dd400015 	stw	r21,0(sp)
1000cc44:	2463883a 	add	r17,r4,r17
1000cc48:	200d883a 	mov	r6,r4
1000cc4c:	a00b883a 	mov	r5,r20
1000cc50:	800f883a 	mov	r7,r16
1000cc54:	b809883a 	mov	r4,r23
1000cc58:	8a000005 	stb	r8,0(r17)
1000cc5c:	00116b80 	call	100116b8 <_mbrtowc_r>
1000cc60:	017fffc4 	movi	r5,-1
1000cc64:	11404e26 	beq	r2,r5,1000cda0 <__svfscanf_r+0x968>
1000cc68:	1000601e 	bne	r2,zero,1000cdec <__svfscanf_r+0x9b4>
1000cc6c:	d8c09f17 	ldw	r3,636(sp)
1000cc70:	1800641e 	bne	r3,zero,1000ce04 <__svfscanf_r+0x9cc>
1000cc74:	a0000015 	stw	zero,0(r20)
1000cc78:	9425883a 	add	r18,r18,r16
1000cc7c:	e179883a 	add	fp,fp,r5
1000cc80:	a5000104 	addi	r20,r20,4
1000cc84:	98800117 	ldw	r2,4(r19)
1000cc88:	0023883a 	mov	r17,zero
1000cc8c:	00804b16 	blt	zero,r2,1000cdbc <__svfscanf_r+0x984>
1000cc90:	980b883a 	mov	r5,r19
1000cc94:	b809883a 	mov	r4,r23
1000cc98:	00133e40 	call	100133e4 <__srefill_r>
1000cc9c:	10004726 	beq	r2,zero,1000cdbc <__svfscanf_r+0x984>
1000cca0:	88003f1e 	bne	r17,zero,1000cda0 <__svfscanf_r+0x968>
1000cca4:	d8c09f17 	ldw	r3,636(sp)
1000cca8:	1800031e 	bne	r3,zero,1000ccb8 <__svfscanf_r+0x880>
1000ccac:	d900a017 	ldw	r4,640(sp)
1000ccb0:	21000044 	addi	r4,r4,1
1000ccb4:	d900a015 	stw	r4,640(sp)
1000ccb8:	dd009d17 	ldw	r20,628(sp)
1000ccbc:	a00d883a 	mov	r6,r20
1000ccc0:	003e1a06 	br	1000c52c <__alt_data_end+0xf800c52c>
1000ccc4:	8c40040c 	andi	r17,r17,16
1000ccc8:	073fffc4 	movi	fp,-1
1000cccc:	883fa51e 	bne	r17,zero,1000cb64 <__alt_data_end+0xf800cb64>
1000ccd0:	d9409c17 	ldw	r5,624(sp)
1000ccd4:	e2bfffc4 	addi	r10,fp,-1
1000ccd8:	2c000017 	ldw	r16,0(r5)
1000ccdc:	2c400104 	addi	r17,r5,4
1000cce0:	8007883a 	mov	r3,r16
1000cce4:	82ab883a 	add	r21,r16,r10
1000cce8:	00000306 	br	1000ccf8 <__svfscanf_r+0x8c0>
1000ccec:	99000017 	ldw	r4,0(r19)
1000ccf0:	e007883a 	mov	r3,fp
1000ccf4:	20800003 	ldbu	r2,0(r4)
1000ccf8:	10803fcc 	andi	r2,r2,255
1000ccfc:	d9405884 	addi	r5,sp,354
1000cd00:	2885883a 	add	r2,r5,r2
1000cd04:	10800007 	ldb	r2,0(r2)
1000cd08:	10004b26 	beq	r2,zero,1000ce38 <__svfscanf_r+0xa00>
1000cd0c:	98800117 	ldw	r2,4(r19)
1000cd10:	21400044 	addi	r5,r4,1
1000cd14:	99400015 	stw	r5,0(r19)
1000cd18:	10bfffc4 	addi	r2,r2,-1
1000cd1c:	98800115 	stw	r2,4(r19)
1000cd20:	20800003 	ldbu	r2,0(r4)
1000cd24:	1f000044 	addi	fp,r3,1
1000cd28:	18800005 	stb	r2,0(r3)
1000cd2c:	1d400726 	beq	r3,r21,1000cd4c <__svfscanf_r+0x914>
1000cd30:	98800117 	ldw	r2,4(r19)
1000cd34:	00bfed16 	blt	zero,r2,1000ccec <__alt_data_end+0xf800ccec>
1000cd38:	980b883a 	mov	r5,r19
1000cd3c:	b809883a 	mov	r4,r23
1000cd40:	00133e40 	call	100133e4 <__srefill_r>
1000cd44:	103fe926 	beq	r2,zero,1000ccec <__alt_data_end+0xf800ccec>
1000cd48:	87001526 	beq	r16,fp,1000cda0 <__svfscanf_r+0x968>
1000cd4c:	e421c83a 	sub	r16,fp,r16
1000cd50:	803dfa26 	beq	r16,zero,1000c53c <__alt_data_end+0xf800c53c>
1000cd54:	d880a017 	ldw	r2,640(sp)
1000cd58:	e0000005 	stb	zero,0(fp)
1000cd5c:	dc409c15 	stw	r17,624(sp)
1000cd60:	10800044 	addi	r2,r2,1
1000cd64:	d880a015 	stw	r2,640(sp)
1000cd68:	9425883a 	add	r18,r18,r16
1000cd6c:	a00d883a 	mov	r6,r20
1000cd70:	003dee06 	br	1000c52c <__alt_data_end+0xf800c52c>
1000cd74:	013fff84 	movi	r4,-2
1000cd78:	1103ed1e 	bne	r2,r4,1000dd30 <__svfscanf_r+0x18f8>
1000cd7c:	8821883a 	mov	r16,r17
1000cd80:	98800117 	ldw	r2,4(r19)
1000cd84:	00834116 	blt	zero,r2,1000da8c <__svfscanf_r+0x1654>
1000cd88:	980b883a 	mov	r5,r19
1000cd8c:	b809883a 	mov	r4,r23
1000cd90:	00133e40 	call	100133e4 <__srefill_r>
1000cd94:	10033d26 	beq	r2,zero,1000da8c <__svfscanf_r+0x1654>
1000cd98:	dc409f17 	ldw	r17,636(sp)
1000cd9c:	80034426 	beq	r16,zero,1000dab0 <__svfscanf_r+0x1678>
1000cda0:	d900a017 	ldw	r4,640(sp)
1000cda4:	203e8026 	beq	r4,zero,1000c7a8 <__alt_data_end+0xf800c7a8>
1000cda8:	9880030b 	ldhu	r2,12(r19)
1000cdac:	1080100c 	andi	r2,r2,64
1000cdb0:	103e7d1e 	bne	r2,zero,1000c7a8 <__alt_data_end+0xf800c7a8>
1000cdb4:	2005883a 	mov	r2,r4
1000cdb8:	003e7c06 	br	1000c7ac <__alt_data_end+0xf800c7ac>
1000cdbc:	e03f951e 	bne	fp,zero,1000cc14 <__alt_data_end+0xf800cc14>
1000cdc0:	003fb806 	br	1000cca4 <__alt_data_end+0xf800cca4>
1000cdc4:	d8809c17 	ldw	r2,624(sp)
1000cdc8:	15000017 	ldw	r20,0(r2)
1000cdcc:	10800104 	addi	r2,r2,4
1000cdd0:	d8809c15 	stw	r2,624(sp)
1000cdd4:	003f8e06 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000cdd8:	980b883a 	mov	r5,r19
1000cddc:	b809883a 	mov	r4,r23
1000cde0:	00133e40 	call	100133e4 <__srefill_r>
1000cde4:	103f3626 	beq	r2,zero,1000cac0 <__alt_data_end+0xf800cac0>
1000cde8:	003fed06 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000cdec:	013fff84 	movi	r4,-2
1000cdf0:	1100071e 	bne	r2,r4,1000ce10 <__svfscanf_r+0x9d8>
1000cdf4:	98800117 	ldw	r2,4(r19)
1000cdf8:	8023883a 	mov	r17,r16
1000cdfc:	00bf8516 	blt	zero,r2,1000cc14 <__alt_data_end+0xf800cc14>
1000ce00:	003fa306 	br	1000cc90 <__alt_data_end+0xf800cc90>
1000ce04:	9425883a 	add	r18,r18,r16
1000ce08:	e73fffc4 	addi	fp,fp,-1
1000ce0c:	003f9d06 	br	1000cc84 <__alt_data_end+0xf800cc84>
1000ce10:	d8c09f17 	ldw	r3,636(sp)
1000ce14:	9425883a 	add	r18,r18,r16
1000ce18:	e73fffc4 	addi	fp,fp,-1
1000ce1c:	183f9826 	beq	r3,zero,1000cc80 <__alt_data_end+0xf800cc80>
1000ce20:	003f9806 	br	1000cc84 <__alt_data_end+0xf800cc84>
1000ce24:	8023883a 	mov	r17,r16
1000ce28:	8821883a 	mov	r16,r17
1000ce2c:	003fce06 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000ce30:	803f3b1e 	bne	r16,zero,1000cb20 <__alt_data_end+0xf800cb20>
1000ce34:	003fda06 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000ce38:	1839883a 	mov	fp,r3
1000ce3c:	003fc306 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000ce40:	803fc91e 	bne	r16,zero,1000cd68 <__alt_data_end+0xf800cd68>
1000ce44:	003dbd06 	br	1000c53c <__alt_data_end+0xf800c53c>
1000ce48:	d8809c17 	ldw	r2,624(sp)
1000ce4c:	dcc00015 	stw	r19,0(sp)
1000ce50:	b809883a 	mov	r4,r23
1000ce54:	11400017 	ldw	r5,0(r2)
1000ce58:	e00f883a 	mov	r7,fp
1000ce5c:	01800044 	movi	r6,1
1000ce60:	000fef00 	call	1000fef0 <_fread_r>
1000ce64:	d9009c17 	ldw	r4,624(sp)
1000ce68:	20c00104 	addi	r3,r4,4
1000ce6c:	103fcc26 	beq	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000ce70:	d940a017 	ldw	r5,640(sp)
1000ce74:	dd009d17 	ldw	r20,628(sp)
1000ce78:	90a5883a 	add	r18,r18,r2
1000ce7c:	29400044 	addi	r5,r5,1
1000ce80:	d940a015 	stw	r5,640(sp)
1000ce84:	d8c09c15 	stw	r3,624(sp)
1000ce88:	a00d883a 	mov	r6,r20
1000ce8c:	003da706 	br	1000c52c <__alt_data_end+0xf800c52c>
1000ce90:	980b883a 	mov	r5,r19
1000ce94:	b809883a 	mov	r4,r23
1000ce98:	00133e40 	call	100133e4 <__srefill_r>
1000ce9c:	103e3626 	beq	r2,zero,1000c778 <__alt_data_end+0xf800c778>
1000cea0:	003fbf06 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000cea4:	98800117 	ldw	r2,4(r19)
1000cea8:	88e2b03a 	or	r17,r17,r3
1000ceac:	0080210e 	bge	zero,r2,1000cf34 <__svfscanf_r+0xafc>
1000ceb0:	01440074 	movhi	r5,4097
1000ceb4:	29546504 	addi	r5,r5,20884
1000ceb8:	00800284 	movi	r2,10
1000cebc:	d940a115 	stw	r5,644(sp)
1000cec0:	d8809e15 	stw	r2,632(sp)
1000cec4:	050000c4 	movi	r20,3
1000cec8:	003e6906 	br	1000c870 <__alt_data_end+0xf800c870>
1000cecc:	a1400083 	ldbu	r5,2(r20)
1000ced0:	8c400094 	ori	r17,r17,2
1000ced4:	a5000084 	addi	r20,r20,2
1000ced8:	2d403fcc 	andi	r21,r5,255
1000cedc:	003da106 	br	1000c564 <__alt_data_end+0xf800c564>
1000cee0:	8880004c 	andi	r2,r17,1
1000cee4:	10000c1e 	bne	r2,zero,1000cf18 <__svfscanf_r+0xae0>
1000cee8:	8c40008c 	andi	r17,r17,2
1000ceec:	88000a26 	beq	r17,zero,1000cf18 <__svfscanf_r+0xae0>
1000cef0:	d8c09c17 	ldw	r3,624(sp)
1000cef4:	d9009c17 	ldw	r4,624(sp)
1000cef8:	dd009d17 	ldw	r20,628(sp)
1000cefc:	18800017 	ldw	r2,0(r3)
1000cf00:	9007d7fa 	srai	r3,r18,31
1000cf04:	21000104 	addi	r4,r4,4
1000cf08:	14800015 	stw	r18,0(r2)
1000cf0c:	10c00115 	stw	r3,4(r2)
1000cf10:	d9009c15 	stw	r4,624(sp)
1000cf14:	003d8406 	br	1000c528 <__alt_data_end+0xf800c528>
1000cf18:	d9409c17 	ldw	r5,624(sp)
1000cf1c:	dd009d17 	ldw	r20,628(sp)
1000cf20:	28800017 	ldw	r2,0(r5)
1000cf24:	29400104 	addi	r5,r5,4
1000cf28:	d9409c15 	stw	r5,624(sp)
1000cf2c:	14800015 	stw	r18,0(r2)
1000cf30:	003d7d06 	br	1000c528 <__alt_data_end+0xf800c528>
1000cf34:	980b883a 	mov	r5,r19
1000cf38:	b809883a 	mov	r4,r23
1000cf3c:	00133e40 	call	100133e4 <__srefill_r>
1000cf40:	103f971e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000cf44:	b4000017 	ldw	r16,0(r22)
1000cf48:	003ed206 	br	1000ca94 <__alt_data_end+0xf800ca94>
1000cf4c:	980b883a 	mov	r5,r19
1000cf50:	b809883a 	mov	r4,r23
1000cf54:	00133e40 	call	100133e4 <__srefill_r>
1000cf58:	103f911e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000cf5c:	01040074 	movhi	r4,4097
1000cf60:	2115c304 	addi	r4,r4,22284
1000cf64:	01400404 	movi	r5,16
1000cf68:	b4000017 	ldw	r16,0(r22)
1000cf6c:	d900a115 	stw	r4,644(sp)
1000cf70:	d9409e15 	stw	r5,632(sp)
1000cf74:	050000c4 	movi	r20,3
1000cf78:	003e3d06 	br	1000c870 <__alt_data_end+0xf800c870>
1000cf7c:	980b883a 	mov	r5,r19
1000cf80:	b809883a 	mov	r4,r23
1000cf84:	00133e40 	call	100133e4 <__srefill_r>
1000cf88:	103f851e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000cf8c:	b4000017 	ldw	r16,0(r22)
1000cf90:	05000084 	movi	r20,2
1000cf94:	003e3606 	br	1000c870 <__alt_data_end+0xf800c870>
1000cf98:	980b883a 	mov	r5,r19
1000cf9c:	b809883a 	mov	r4,r23
1000cfa0:	00133e40 	call	100133e4 <__srefill_r>
1000cfa4:	103eea26 	beq	r2,zero,1000cb50 <__alt_data_end+0xf800cb50>
1000cfa8:	003f7d06 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000cfac:	980b883a 	mov	r5,r19
1000cfb0:	b809883a 	mov	r4,r23
1000cfb4:	00133e40 	call	100133e4 <__srefill_r>
1000cfb8:	103f791e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000cfbc:	b4000017 	ldw	r16,0(r22)
1000cfc0:	05000104 	movi	r20,4
1000cfc4:	003e2a06 	br	1000c870 <__alt_data_end+0xf800c870>
1000cfc8:	980b883a 	mov	r5,r19
1000cfcc:	b809883a 	mov	r4,r23
1000cfd0:	00133e40 	call	100133e4 <__srefill_r>
1000cfd4:	103f721e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000cfd8:	b4000017 	ldw	r16,0(r22)
1000cfdc:	003e8c06 	br	1000ca10 <__alt_data_end+0xf800ca10>
1000cfe0:	980b883a 	mov	r5,r19
1000cfe4:	b809883a 	mov	r4,r23
1000cfe8:	00133e40 	call	100133e4 <__srefill_r>
1000cfec:	103f6c1e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000cff0:	00840074 	movhi	r2,4097
1000cff4:	1095c304 	addi	r2,r2,22284
1000cff8:	00c00284 	movi	r3,10
1000cffc:	b4000017 	ldw	r16,0(r22)
1000d000:	d880a115 	stw	r2,644(sp)
1000d004:	d8c09e15 	stw	r3,632(sp)
1000d008:	050000c4 	movi	r20,3
1000d00c:	003e1806 	br	1000c870 <__alt_data_end+0xf800c870>
1000d010:	980b883a 	mov	r5,r19
1000d014:	b809883a 	mov	r4,r23
1000d018:	00133e40 	call	100133e4 <__srefill_r>
1000d01c:	103f601e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000d020:	00840074 	movhi	r2,4097
1000d024:	1095c304 	addi	r2,r2,22284
1000d028:	00c00204 	movi	r3,8
1000d02c:	b4000017 	ldw	r16,0(r22)
1000d030:	d880a115 	stw	r2,644(sp)
1000d034:	d8c09e15 	stw	r3,632(sp)
1000d038:	050000c4 	movi	r20,3
1000d03c:	003e0c06 	br	1000c870 <__alt_data_end+0xf800c870>
1000d040:	980b883a 	mov	r5,r19
1000d044:	b809883a 	mov	r4,r23
1000d048:	00133e40 	call	100133e4 <__srefill_r>
1000d04c:	103f541e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000d050:	00840074 	movhi	r2,4097
1000d054:	10946504 	addi	r2,r2,20884
1000d058:	b4000017 	ldw	r16,0(r22)
1000d05c:	d880a115 	stw	r2,644(sp)
1000d060:	d8009e15 	stw	zero,632(sp)
1000d064:	050000c4 	movi	r20,3
1000d068:	003e0106 	br	1000c870 <__alt_data_end+0xf800c870>
1000d06c:	980b883a 	mov	r5,r19
1000d070:	b809883a 	mov	r4,r23
1000d074:	00133e40 	call	100133e4 <__srefill_r>
1000d078:	103f491e 	bne	r2,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000d07c:	00840074 	movhi	r2,4097
1000d080:	1095c304 	addi	r2,r2,22284
1000d084:	00c00404 	movi	r3,16
1000d088:	b4000017 	ldw	r16,0(r22)
1000d08c:	d880a115 	stw	r2,644(sp)
1000d090:	d8c09e15 	stw	r3,632(sp)
1000d094:	050000c4 	movi	r20,3
1000d098:	003df506 	br	1000c870 <__alt_data_end+0xf800c870>
1000d09c:	014000c4 	movi	r5,3
1000d0a0:	a1416726 	beq	r20,r5,1000d640 <__svfscanf_r+0x1208>
1000d0a4:	01000104 	movi	r4,4
1000d0a8:	a101491e 	bne	r20,r4,1000d5d0 <__svfscanf_r+0x1198>
1000d0ac:	b809883a 	mov	r4,r23
1000d0b0:	0010cc00 	call	10010cc0 <_localeconv_r>
1000d0b4:	10800017 	ldw	r2,0(r2)
1000d0b8:	e0ffffc4 	addi	r3,fp,-1
1000d0bc:	d880a315 	stw	r2,652(sp)
1000d0c0:	00805704 	movi	r2,348
1000d0c4:	10c21e2e 	bgeu	r2,r3,1000d940 <__svfscanf_r+0x1508>
1000d0c8:	e73fa8c4 	addi	fp,fp,-349
1000d0cc:	df00a215 	stw	fp,648(sp)
1000d0d0:	07005744 	movi	fp,349
1000d0d4:	8d01e014 	ori	r20,r17,1920
1000d0d8:	0023883a 	mov	r17,zero
1000d0dc:	dc000104 	addi	r16,sp,4
1000d0e0:	002b883a 	mov	r21,zero
1000d0e4:	8805883a 	mov	r2,r17
1000d0e8:	0007883a 	mov	r3,zero
1000d0ec:	8023883a 	mov	r17,r16
1000d0f0:	b80d883a 	mov	r6,r23
1000d0f4:	e021883a 	mov	r16,fp
1000d0f8:	a82f883a 	mov	r23,r21
1000d0fc:	d800a515 	stw	zero,660(sp)
1000d100:	d800a415 	stw	zero,656(sp)
1000d104:	d8009f15 	stw	zero,636(sp)
1000d108:	01c01384 	movi	r7,78
1000d10c:	182b883a 	mov	r21,r3
1000d110:	1039883a 	mov	fp,r2
1000d114:	99000017 	ldw	r4,0(r19)
1000d118:	21400003 	ldbu	r5,0(r4)
1000d11c:	28bff544 	addi	r2,r5,-43
1000d120:	10803fcc 	andi	r2,r2,255
1000d124:	38810e36 	bltu	r7,r2,1000d560 <__svfscanf_r+0x1128>
1000d128:	100490ba 	slli	r2,r2,2
1000d12c:	00c40074 	movhi	r3,4097
1000d130:	18f45004 	addi	r3,r3,-11968
1000d134:	10c5883a 	add	r2,r2,r3
1000d138:	10800017 	ldw	r2,0(r2)
1000d13c:	1000683a 	jmp	r2
1000d140:	1000d434 	orhi	zero,r2,848
1000d144:	1000d560 	cmpeqi	zero,r2,853
1000d148:	1000d434 	orhi	zero,r2,848
1000d14c:	1000d560 	cmpeqi	zero,r2,853
1000d150:	1000d560 	cmpeqi	zero,r2,853
1000d154:	1000d408 	cmpgei	zero,r2,848
1000d158:	1000d27c 	xorhi	zero,r2,841
1000d15c:	1000d27c 	xorhi	zero,r2,841
1000d160:	1000d27c 	xorhi	zero,r2,841
1000d164:	1000d27c 	xorhi	zero,r2,841
1000d168:	1000d27c 	xorhi	zero,r2,841
1000d16c:	1000d27c 	xorhi	zero,r2,841
1000d170:	1000d27c 	xorhi	zero,r2,841
1000d174:	1000d27c 	xorhi	zero,r2,841
1000d178:	1000d27c 	xorhi	zero,r2,841
1000d17c:	1000d560 	cmpeqi	zero,r2,853
1000d180:	1000d560 	cmpeqi	zero,r2,853
1000d184:	1000d560 	cmpeqi	zero,r2,853
1000d188:	1000d560 	cmpeqi	zero,r2,853
1000d18c:	1000d560 	cmpeqi	zero,r2,853
1000d190:	1000d560 	cmpeqi	zero,r2,853
1000d194:	1000d560 	cmpeqi	zero,r2,853
1000d198:	1000d550 	cmplti	zero,r2,853
1000d19c:	1000d560 	cmpeqi	zero,r2,853
1000d1a0:	1000d560 	cmpeqi	zero,r2,853
1000d1a4:	1000d560 	cmpeqi	zero,r2,853
1000d1a8:	1000d50c 	andi	zero,r2,852
1000d1ac:	1000d4f0 	cmpltui	zero,r2,851
1000d1b0:	1000d560 	cmpeqi	zero,r2,853
1000d1b4:	1000d560 	cmpeqi	zero,r2,853
1000d1b8:	1000d4b8 	rdprs	zero,r2,850
1000d1bc:	1000d560 	cmpeqi	zero,r2,853
1000d1c0:	1000d560 	cmpeqi	zero,r2,853
1000d1c4:	1000d560 	cmpeqi	zero,r2,853
1000d1c8:	1000d560 	cmpeqi	zero,r2,853
1000d1cc:	1000d480 	call	11000d48 <_gp+0xfd38fc>
1000d1d0:	1000d560 	cmpeqi	zero,r2,853
1000d1d4:	1000d560 	cmpeqi	zero,r2,853
1000d1d8:	1000d560 	cmpeqi	zero,r2,853
1000d1dc:	1000d560 	cmpeqi	zero,r2,853
1000d1e0:	1000d560 	cmpeqi	zero,r2,853
1000d1e4:	1000d464 	muli	zero,r2,849
1000d1e8:	1000d560 	cmpeqi	zero,r2,853
1000d1ec:	1000d560 	cmpeqi	zero,r2,853
1000d1f0:	1000d560 	cmpeqi	zero,r2,853
1000d1f4:	1000d560 	cmpeqi	zero,r2,853
1000d1f8:	1000d448 	cmpgei	zero,r2,849
1000d1fc:	1000d560 	cmpeqi	zero,r2,853
1000d200:	1000d560 	cmpeqi	zero,r2,853
1000d204:	1000d560 	cmpeqi	zero,r2,853
1000d208:	1000d560 	cmpeqi	zero,r2,853
1000d20c:	1000d560 	cmpeqi	zero,r2,853
1000d210:	1000d560 	cmpeqi	zero,r2,853
1000d214:	1000d560 	cmpeqi	zero,r2,853
1000d218:	1000d550 	cmplti	zero,r2,853
1000d21c:	1000d560 	cmpeqi	zero,r2,853
1000d220:	1000d560 	cmpeqi	zero,r2,853
1000d224:	1000d560 	cmpeqi	zero,r2,853
1000d228:	1000d50c 	andi	zero,r2,852
1000d22c:	1000d4f0 	cmpltui	zero,r2,851
1000d230:	1000d560 	cmpeqi	zero,r2,853
1000d234:	1000d560 	cmpeqi	zero,r2,853
1000d238:	1000d4b8 	rdprs	zero,r2,850
1000d23c:	1000d560 	cmpeqi	zero,r2,853
1000d240:	1000d560 	cmpeqi	zero,r2,853
1000d244:	1000d560 	cmpeqi	zero,r2,853
1000d248:	1000d560 	cmpeqi	zero,r2,853
1000d24c:	1000d480 	call	11000d48 <_gp+0xfd38fc>
1000d250:	1000d560 	cmpeqi	zero,r2,853
1000d254:	1000d560 	cmpeqi	zero,r2,853
1000d258:	1000d560 	cmpeqi	zero,r2,853
1000d25c:	1000d560 	cmpeqi	zero,r2,853
1000d260:	1000d560 	cmpeqi	zero,r2,853
1000d264:	1000d464 	muli	zero,r2,849
1000d268:	1000d560 	cmpeqi	zero,r2,853
1000d26c:	1000d560 	cmpeqi	zero,r2,853
1000d270:	1000d560 	cmpeqi	zero,r2,853
1000d274:	1000d560 	cmpeqi	zero,r2,853
1000d278:	1000d448 	cmpgei	zero,r2,849
1000d27c:	a8803fcc 	andi	r2,r21,255
1000d280:	1080201c 	xori	r2,r2,128
1000d284:	10bfe004 	addi	r2,r2,-128
1000d288:	b885883a 	add	r2,r23,r2
1000d28c:	10000d1e 	bne	r2,zero,1000d2c4 <__svfscanf_r+0xe8c>
1000d290:	00bf9fc4 	movi	r2,-385
1000d294:	a0a8703a 	and	r20,r20,r2
1000d298:	89400005 	stb	r5,0(r17)
1000d29c:	8c400044 	addi	r17,r17,1
1000d2a0:	98800117 	ldw	r2,4(r19)
1000d2a4:	843fffc4 	addi	r16,r16,-1
1000d2a8:	94800044 	addi	r18,r18,1
1000d2ac:	10bfffc4 	addi	r2,r2,-1
1000d2b0:	98800115 	stw	r2,4(r19)
1000d2b4:	0080b40e 	bge	zero,r2,1000d588 <__svfscanf_r+0x1150>
1000d2b8:	21000044 	addi	r4,r4,1
1000d2bc:	99000015 	stw	r4,0(r19)
1000d2c0:	803f941e 	bne	r16,zero,1000d114 <__alt_data_end+0xf800d114>
1000d2c4:	8821883a 	mov	r16,r17
1000d2c8:	a807883a 	mov	r3,r21
1000d2cc:	e023883a 	mov	r17,fp
1000d2d0:	b82b883a 	mov	r21,r23
1000d2d4:	302f883a 	mov	r23,r6
1000d2d8:	e001961e 	bne	fp,zero,1000d934 <__svfscanf_r+0x14fc>
1000d2dc:	ab3fffc4 	addi	r12,r21,-1
1000d2e0:	00800044 	movi	r2,1
1000d2e4:	1302a22e 	bgeu	r2,r12,1000dd70 <__svfscanf_r+0x1938>
1000d2e8:	18803fcc 	andi	r2,r3,255
1000d2ec:	1080201c 	xori	r2,r2,128
1000d2f0:	10bfe004 	addi	r2,r2,-128
1000d2f4:	113fffc4 	addi	r4,r2,-1
1000d2f8:	01400184 	movi	r5,6
1000d2fc:	29001136 	bltu	r5,r4,1000d344 <__svfscanf_r+0xf0c>
1000d300:	01000084 	movi	r4,2
1000d304:	2082770e 	bge	r4,r2,1000dce4 <__svfscanf_r+0x18ac>
1000d308:	054000c4 	movi	r21,3
1000d30c:	1839883a 	mov	fp,r3
1000d310:	15400c26 	beq	r2,r21,1000d344 <__svfscanf_r+0xf0c>
1000d314:	9425c83a 	sub	r18,r18,r16
1000d318:	843fffc4 	addi	r16,r16,-1
1000d31c:	81400007 	ldb	r5,0(r16)
1000d320:	980d883a 	mov	r6,r19
1000d324:	b809883a 	mov	r4,r23
1000d328:	00180500 	call	10018050 <_ungetc_r>
1000d32c:	e0bfffc4 	addi	r2,fp,-1
1000d330:	10c03fcc 	andi	r3,r2,255
1000d334:	8493883a 	add	r9,r16,r18
1000d338:	1039883a 	mov	fp,r2
1000d33c:	a8fff636 	bltu	r21,r3,1000d318 <__alt_data_end+0xf800d318>
1000d340:	4825883a 	mov	r18,r9
1000d344:	a080400c 	andi	r2,r20,256
1000d348:	10001426 	beq	r2,zero,1000d39c <__svfscanf_r+0xf64>
1000d34c:	a081000c 	andi	r2,r20,1024
1000d350:	10027b1e 	bne	r2,zero,1000dd40 <__svfscanf_r+0x1908>
1000d354:	817fffc7 	ldb	r5,-1(r16)
1000d358:	00801944 	movi	r2,101
1000d35c:	873fffc4 	addi	fp,r16,-1
1000d360:	957fffc4 	addi	r21,r18,-1
1000d364:	28800826 	beq	r5,r2,1000d388 <__svfscanf_r+0xf50>
1000d368:	00801144 	movi	r2,69
1000d36c:	28800626 	beq	r5,r2,1000d388 <__svfscanf_r+0xf50>
1000d370:	980d883a 	mov	r6,r19
1000d374:	b809883a 	mov	r4,r23
1000d378:	00180500 	call	10018050 <_ungetc_r>
1000d37c:	817fff87 	ldb	r5,-2(r16)
1000d380:	873fff84 	addi	fp,r16,-2
1000d384:	957fff84 	addi	r21,r18,-2
1000d388:	980d883a 	mov	r6,r19
1000d38c:	b809883a 	mov	r4,r23
1000d390:	00180500 	call	10018050 <_ungetc_r>
1000d394:	a825883a 	mov	r18,r21
1000d398:	e021883a 	mov	r16,fp
1000d39c:	a080040c 	andi	r2,r20,16
1000d3a0:	103e451e 	bne	r2,zero,1000ccb8 <__alt_data_end+0xf800ccb8>
1000d3a4:	80000005 	stb	zero,0(r16)
1000d3a8:	a081800c 	andi	r2,r20,1536
1000d3ac:	01010004 	movi	r4,1024
1000d3b0:	1101ea26 	beq	r2,r4,1000db5c <__svfscanf_r+0x1724>
1000d3b4:	d8c0a417 	ldw	r3,656(sp)
1000d3b8:	1801f41e 	bne	r3,zero,1000db8c <__svfscanf_r+0x1754>
1000d3bc:	000d883a 	mov	r6,zero
1000d3c0:	d9400104 	addi	r5,sp,4
1000d3c4:	b809883a 	mov	r4,r23
1000d3c8:	0013a980 	call	10013a98 <_strtod_r>
1000d3cc:	1021883a 	mov	r16,r2
1000d3d0:	a080004c 	andi	r2,r20,1
1000d3d4:	1001b926 	beq	r2,zero,1000dabc <__svfscanf_r+0x1684>
1000d3d8:	d9009c17 	ldw	r4,624(sp)
1000d3dc:	20800017 	ldw	r2,0(r4)
1000d3e0:	21000104 	addi	r4,r4,4
1000d3e4:	d9009c15 	stw	r4,624(sp)
1000d3e8:	14000015 	stw	r16,0(r2)
1000d3ec:	10c00115 	stw	r3,4(r2)
1000d3f0:	d8c0a017 	ldw	r3,640(sp)
1000d3f4:	dd009d17 	ldw	r20,628(sp)
1000d3f8:	18c00044 	addi	r3,r3,1
1000d3fc:	d8c0a015 	stw	r3,640(sp)
1000d400:	a00d883a 	mov	r6,r20
1000d404:	003c4906 	br	1000c52c <__alt_data_end+0xf800c52c>
1000d408:	a080400c 	andi	r2,r20,256
1000d40c:	103f9b26 	beq	r2,zero,1000d27c <__alt_data_end+0xf800d27c>
1000d410:	d8c0a217 	ldw	r3,648(sp)
1000d414:	00bfdfc4 	movi	r2,-129
1000d418:	a0a8703a 	and	r20,r20,r2
1000d41c:	e7000044 	addi	fp,fp,1
1000d420:	183f9f26 	beq	r3,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d424:	18ffffc4 	addi	r3,r3,-1
1000d428:	d8c0a215 	stw	r3,648(sp)
1000d42c:	84000044 	addi	r16,r16,1
1000d430:	003f9b06 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d434:	a080200c 	andi	r2,r20,128
1000d438:	103fa226 	beq	r2,zero,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d43c:	00bfdfc4 	movi	r2,-129
1000d440:	a0a8703a 	and	r20,r20,r2
1000d444:	003f9406 	br	1000d298 <__alt_data_end+0xf800d298>
1000d448:	a8803fcc 	andi	r2,r21,255
1000d44c:	1080201c 	xori	r2,r2,128
1000d450:	10bfe004 	addi	r2,r2,-128
1000d454:	00c001c4 	movi	r3,7
1000d458:	10ff9a1e 	bne	r2,r3,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d45c:	05400204 	movi	r21,8
1000d460:	003f8d06 	br	1000d298 <__alt_data_end+0xf800d298>
1000d464:	a8803fcc 	andi	r2,r21,255
1000d468:	1080201c 	xori	r2,r2,128
1000d46c:	10bfe004 	addi	r2,r2,-128
1000d470:	02000184 	movi	r8,6
1000d474:	123f931e 	bne	r2,r8,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d478:	054001c4 	movi	r21,7
1000d47c:	003f8606 	br	1000d298 <__alt_data_end+0xf800d298>
1000d480:	b8004f1e 	bne	r23,zero,1000d5c0 <__svfscanf_r+0x1188>
1000d484:	e000031e 	bne	fp,zero,1000d494 <__svfscanf_r+0x105c>
1000d488:	a081c00c 	andi	r2,r20,1792
1000d48c:	0201c004 	movi	r8,1792
1000d490:	1201a226 	beq	r2,r8,1000db1c <__svfscanf_r+0x16e4>
1000d494:	a8803fcc 	andi	r2,r21,255
1000d498:	1080201c 	xori	r2,r2,128
1000d49c:	10bfe004 	addi	r2,r2,-128
1000d4a0:	02000044 	movi	r8,1
1000d4a4:	12000226 	beq	r2,r8,1000d4b0 <__svfscanf_r+0x1078>
1000d4a8:	02000104 	movi	r8,4
1000d4ac:	123f851e 	bne	r2,r8,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d4b0:	ad400044 	addi	r21,r21,1
1000d4b4:	003f7806 	br	1000d298 <__alt_data_end+0xf800d298>
1000d4b8:	a8803fcc 	andi	r2,r21,255
1000d4bc:	1080201c 	xori	r2,r2,128
1000d4c0:	10bfe004 	addi	r2,r2,-128
1000d4c4:	1000391e 	bne	r2,zero,1000d5ac <__svfscanf_r+0x1174>
1000d4c8:	e001151e 	bne	fp,zero,1000d920 <__svfscanf_r+0x14e8>
1000d4cc:	a081c00c 	andi	r2,r20,1792
1000d4d0:	0201c004 	movi	r8,1792
1000d4d4:	12019b26 	beq	r2,r8,1000db44 <__svfscanf_r+0x170c>
1000d4d8:	8821883a 	mov	r16,r17
1000d4dc:	a807883a 	mov	r3,r21
1000d4e0:	e023883a 	mov	r17,fp
1000d4e4:	b82b883a 	mov	r21,r23
1000d4e8:	302f883a 	mov	r23,r6
1000d4ec:	003f7b06 	br	1000d2dc <__alt_data_end+0xf800d2dc>
1000d4f0:	a8803fcc 	andi	r2,r21,255
1000d4f4:	1080201c 	xori	r2,r2,128
1000d4f8:	10bfe004 	addi	r2,r2,-128
1000d4fc:	02000084 	movi	r8,2
1000d500:	123f701e 	bne	r2,r8,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d504:	054000c4 	movi	r21,3
1000d508:	003f6306 	br	1000d298 <__alt_data_end+0xf800d298>
1000d50c:	a081400c 	andi	r2,r20,1280
1000d510:	00c10004 	movi	r3,1024
1000d514:	10c00326 	beq	r2,r3,1000d524 <__svfscanf_r+0x10ec>
1000d518:	a0c4703a 	and	r2,r20,r3
1000d51c:	103f6926 	beq	r2,zero,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d520:	e03fed26 	beq	fp,zero,1000d4d8 <__alt_data_end+0xf800d4d8>
1000d524:	a080800c 	andi	r2,r20,512
1000d528:	1000041e 	bne	r2,zero,1000d53c <__svfscanf_r+0x1104>
1000d52c:	d8c09f17 	ldw	r3,636(sp)
1000d530:	dc40a515 	stw	r17,660(sp)
1000d534:	e0f9c83a 	sub	fp,fp,r3
1000d538:	df00a415 	stw	fp,656(sp)
1000d53c:	00be1fc4 	movi	r2,-1921
1000d540:	a0a8703a 	and	r20,r20,r2
1000d544:	a5006014 	ori	r20,r20,384
1000d548:	0039883a 	mov	fp,zero
1000d54c:	003f5206 	br	1000d298 <__alt_data_end+0xf800d298>
1000d550:	00800044 	movi	r2,1
1000d554:	b8bf5b1e 	bne	r23,r2,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d558:	05c00084 	movi	r23,2
1000d55c:	003f4e06 	br	1000d298 <__alt_data_end+0xf800d298>
1000d560:	d8c0a317 	ldw	r3,652(sp)
1000d564:	2a003fcc 	andi	r8,r5,255
1000d568:	18800003 	ldbu	r2,0(r3)
1000d56c:	40bf551e 	bne	r8,r2,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d570:	a080800c 	andi	r2,r20,512
1000d574:	103f5326 	beq	r2,zero,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d578:	00bf5fc4 	movi	r2,-641
1000d57c:	a0a8703a 	and	r20,r20,r2
1000d580:	df009f15 	stw	fp,636(sp)
1000d584:	003f4406 	br	1000d298 <__alt_data_end+0xf800d298>
1000d588:	3009883a 	mov	r4,r6
1000d58c:	980b883a 	mov	r5,r19
1000d590:	d980a915 	stw	r6,676(sp)
1000d594:	d9c0aa15 	stw	r7,680(sp)
1000d598:	00133e40 	call	100133e4 <__srefill_r>
1000d59c:	d980a917 	ldw	r6,676(sp)
1000d5a0:	d9c0aa17 	ldw	r7,680(sp)
1000d5a4:	103f4626 	beq	r2,zero,1000d2c0 <__alt_data_end+0xf800d2c0>
1000d5a8:	003f4606 	br	1000d2c4 <__alt_data_end+0xf800d2c4>
1000d5ac:	020000c4 	movi	r8,3
1000d5b0:	123fbf26 	beq	r2,r8,1000d4b0 <__alt_data_end+0xf800d4b0>
1000d5b4:	02000144 	movi	r8,5
1000d5b8:	123fbd26 	beq	r2,r8,1000d4b0 <__alt_data_end+0xf800d4b0>
1000d5bc:	003f4106 	br	1000d2c4 <__alt_data_end+0xf800d2c4>
1000d5c0:	00800084 	movi	r2,2
1000d5c4:	b8bfb31e 	bne	r23,r2,1000d494 <__alt_data_end+0xf800d494>
1000d5c8:	05c000c4 	movi	r23,3
1000d5cc:	003f3206 	br	1000d298 <__alt_data_end+0xf800d298>
1000d5d0:	e000011e 	bne	fp,zero,1000d5d8 <__svfscanf_r+0x11a0>
1000d5d4:	073fffc4 	movi	fp,-1
1000d5d8:	8900004c 	andi	r4,r17,1
1000d5dc:	20011d1e 	bne	r4,zero,1000da54 <__svfscanf_r+0x161c>
1000d5e0:	8c40040c 	andi	r17,r17,16
1000d5e4:	8800da26 	beq	r17,zero,1000d950 <__svfscanf_r+0x1518>
1000d5e8:	0023883a 	mov	r17,zero
1000d5ec:	00000306 	br	1000d5fc <__svfscanf_r+0x11c4>
1000d5f0:	18800003 	ldbu	r2,0(r3)
1000d5f4:	8085883a 	add	r2,r16,r2
1000d5f8:	10800043 	ldbu	r2,1(r2)
1000d5fc:	1080020c 	andi	r2,r2,8
1000d600:	1000fc1e 	bne	r2,zero,1000d9f4 <__svfscanf_r+0x15bc>
1000d604:	98800117 	ldw	r2,4(r19)
1000d608:	18c00044 	addi	r3,r3,1
1000d60c:	8c400044 	addi	r17,r17,1
1000d610:	10bfffc4 	addi	r2,r2,-1
1000d614:	98800115 	stw	r2,4(r19)
1000d618:	98c00015 	stw	r3,0(r19)
1000d61c:	8f00f526 	beq	r17,fp,1000d9f4 <__svfscanf_r+0x15bc>
1000d620:	00bff316 	blt	zero,r2,1000d5f0 <__alt_data_end+0xf800d5f0>
1000d624:	980b883a 	mov	r5,r19
1000d628:	b809883a 	mov	r4,r23
1000d62c:	00133e40 	call	100133e4 <__srefill_r>
1000d630:	1000f01e 	bne	r2,zero,1000d9f4 <__svfscanf_r+0x15bc>
1000d634:	b4000017 	ldw	r16,0(r22)
1000d638:	98c00017 	ldw	r3,0(r19)
1000d63c:	003fec06 	br	1000d5f0 <__alt_data_end+0xf800d5f0>
1000d640:	e0bfffc4 	addi	r2,fp,-1
1000d644:	01405704 	movi	r5,348
1000d648:	2880bf2e 	bgeu	r5,r2,1000d948 <__svfscanf_r+0x1510>
1000d64c:	e1ffa8c4 	addi	r7,fp,-349
1000d650:	07005744 	movi	fp,349
1000d654:	8c436014 	ori	r17,r17,3456
1000d658:	9013883a 	mov	r9,r18
1000d65c:	8825883a 	mov	r18,r17
1000d660:	dc409e17 	ldw	r17,632(sp)
1000d664:	0029883a 	mov	r20,zero
1000d668:	dc000104 	addi	r16,sp,4
1000d66c:	05401344 	movi	r21,77
1000d670:	02c08004 	movi	r11,512
1000d674:	01bf7fc4 	movi	r6,-513
1000d678:	023fdfc4 	movi	r8,-129
1000d67c:	20bff544 	addi	r2,r4,-43
1000d680:	10803fcc 	andi	r2,r2,255
1000d684:	a8807236 	bltu	r21,r2,1000d850 <__svfscanf_r+0x1418>
1000d688:	100490ba 	slli	r2,r2,2
1000d68c:	01440074 	movhi	r5,4097
1000d690:	2975a804 	addi	r5,r5,-10592
1000d694:	1145883a 	add	r2,r2,r5
1000d698:	10800017 	ldw	r2,0(r2)
1000d69c:	1000683a 	jmp	r2
1000d6a0:	1000d8d4 	ori	zero,r2,867
1000d6a4:	1000d850 	cmplti	zero,r2,865
1000d6a8:	1000d8d4 	ori	zero,r2,867
1000d6ac:	1000d850 	cmplti	zero,r2,865
1000d6b0:	1000d850 	cmplti	zero,r2,865
1000d6b4:	1000d8ac 	andhi	zero,r2,866
1000d6b8:	1000d88c 	andi	zero,r2,866
1000d6bc:	1000d88c 	andi	zero,r2,866
1000d6c0:	1000d88c 	andi	zero,r2,866
1000d6c4:	1000d88c 	andi	zero,r2,866
1000d6c8:	1000d88c 	andi	zero,r2,866
1000d6cc:	1000d88c 	andi	zero,r2,866
1000d6d0:	1000d88c 	andi	zero,r2,866
1000d6d4:	1000d834 	orhi	zero,r2,864
1000d6d8:	1000d834 	orhi	zero,r2,864
1000d6dc:	1000d850 	cmplti	zero,r2,865
1000d6e0:	1000d850 	cmplti	zero,r2,865
1000d6e4:	1000d850 	cmplti	zero,r2,865
1000d6e8:	1000d850 	cmplti	zero,r2,865
1000d6ec:	1000d850 	cmplti	zero,r2,865
1000d6f0:	1000d850 	cmplti	zero,r2,865
1000d6f4:	1000d850 	cmplti	zero,r2,865
1000d6f8:	1000d820 	cmpeqi	zero,r2,864
1000d6fc:	1000d820 	cmpeqi	zero,r2,864
1000d700:	1000d820 	cmpeqi	zero,r2,864
1000d704:	1000d820 	cmpeqi	zero,r2,864
1000d708:	1000d820 	cmpeqi	zero,r2,864
1000d70c:	1000d820 	cmpeqi	zero,r2,864
1000d710:	1000d850 	cmplti	zero,r2,865
1000d714:	1000d850 	cmplti	zero,r2,865
1000d718:	1000d850 	cmplti	zero,r2,865
1000d71c:	1000d850 	cmplti	zero,r2,865
1000d720:	1000d850 	cmplti	zero,r2,865
1000d724:	1000d850 	cmplti	zero,r2,865
1000d728:	1000d850 	cmplti	zero,r2,865
1000d72c:	1000d850 	cmplti	zero,r2,865
1000d730:	1000d850 	cmplti	zero,r2,865
1000d734:	1000d850 	cmplti	zero,r2,865
1000d738:	1000d850 	cmplti	zero,r2,865
1000d73c:	1000d850 	cmplti	zero,r2,865
1000d740:	1000d850 	cmplti	zero,r2,865
1000d744:	1000d850 	cmplti	zero,r2,865
1000d748:	1000d850 	cmplti	zero,r2,865
1000d74c:	1000d850 	cmplti	zero,r2,865
1000d750:	1000d850 	cmplti	zero,r2,865
1000d754:	1000d7d8 	cmpnei	zero,r2,863
1000d758:	1000d850 	cmplti	zero,r2,865
1000d75c:	1000d850 	cmplti	zero,r2,865
1000d760:	1000d850 	cmplti	zero,r2,865
1000d764:	1000d850 	cmplti	zero,r2,865
1000d768:	1000d850 	cmplti	zero,r2,865
1000d76c:	1000d850 	cmplti	zero,r2,865
1000d770:	1000d850 	cmplti	zero,r2,865
1000d774:	1000d850 	cmplti	zero,r2,865
1000d778:	1000d820 	cmpeqi	zero,r2,864
1000d77c:	1000d820 	cmpeqi	zero,r2,864
1000d780:	1000d820 	cmpeqi	zero,r2,864
1000d784:	1000d820 	cmpeqi	zero,r2,864
1000d788:	1000d820 	cmpeqi	zero,r2,864
1000d78c:	1000d820 	cmpeqi	zero,r2,864
1000d790:	1000d850 	cmplti	zero,r2,865
1000d794:	1000d850 	cmplti	zero,r2,865
1000d798:	1000d850 	cmplti	zero,r2,865
1000d79c:	1000d850 	cmplti	zero,r2,865
1000d7a0:	1000d850 	cmplti	zero,r2,865
1000d7a4:	1000d850 	cmplti	zero,r2,865
1000d7a8:	1000d850 	cmplti	zero,r2,865
1000d7ac:	1000d850 	cmplti	zero,r2,865
1000d7b0:	1000d850 	cmplti	zero,r2,865
1000d7b4:	1000d850 	cmplti	zero,r2,865
1000d7b8:	1000d850 	cmplti	zero,r2,865
1000d7bc:	1000d850 	cmplti	zero,r2,865
1000d7c0:	1000d850 	cmplti	zero,r2,865
1000d7c4:	1000d850 	cmplti	zero,r2,865
1000d7c8:	1000d850 	cmplti	zero,r2,865
1000d7cc:	1000d850 	cmplti	zero,r2,865
1000d7d0:	1000d850 	cmplti	zero,r2,865
1000d7d4:	1000d7d8 	cmpnei	zero,r2,863
1000d7d8:	9081800c 	andi	r2,r18,1536
1000d7dc:	12c01c1e 	bne	r2,r11,1000d850 <__svfscanf_r+0x1418>
1000d7e0:	91a4703a 	and	r18,r18,r6
1000d7e4:	94814014 	ori	r18,r18,1280
1000d7e8:	04400404 	movi	r17,16
1000d7ec:	81000005 	stb	r4,0(r16)
1000d7f0:	84000044 	addi	r16,r16,1
1000d7f4:	98800117 	ldw	r2,4(r19)
1000d7f8:	10bfffc4 	addi	r2,r2,-1
1000d7fc:	98800115 	stw	r2,4(r19)
1000d800:	0080380e 	bge	zero,r2,1000d8e4 <__svfscanf_r+0x14ac>
1000d804:	18c00044 	addi	r3,r3,1
1000d808:	98c00015 	stw	r3,0(r19)
1000d80c:	e73fffc4 	addi	fp,fp,-1
1000d810:	e0000f26 	beq	fp,zero,1000d850 <__svfscanf_r+0x1418>
1000d814:	98c00017 	ldw	r3,0(r19)
1000d818:	19000003 	ldbu	r4,0(r3)
1000d81c:	003f9706 	br	1000d67c <__alt_data_end+0xf800d67c>
1000d820:	00800284 	movi	r2,10
1000d824:	14400a0e 	bge	r2,r17,1000d850 <__svfscanf_r+0x1418>
1000d828:	00bd1fc4 	movi	r2,-2945
1000d82c:	90a4703a 	and	r18,r18,r2
1000d830:	003fee06 	br	1000d7ec <__alt_data_end+0xf800d7ec>
1000d834:	014400b4 	movhi	r5,4098
1000d838:	8c63883a 	add	r17,r17,r17
1000d83c:	294b6184 	addi	r5,r5,11654
1000d840:	2c45883a 	add	r2,r5,r17
1000d844:	1440000f 	ldh	r17,0(r2)
1000d848:	00800204 	movi	r2,8
1000d84c:	147ff616 	blt	r2,r17,1000d828 <__alt_data_end+0xf800d828>
1000d850:	dc409e15 	stw	r17,632(sp)
1000d854:	9023883a 	mov	r17,r18
1000d858:	8880400c 	andi	r2,r17,256
1000d85c:	4825883a 	mov	r18,r9
1000d860:	10000426 	beq	r2,zero,1000d874 <__svfscanf_r+0x143c>
1000d864:	d8800104 	addi	r2,sp,4
1000d868:	1400b036 	bltu	r2,r16,1000db2c <__svfscanf_r+0x16f4>
1000d86c:	d8c00104 	addi	r3,sp,4
1000d870:	1c3b3226 	beq	r3,r16,1000c53c <__alt_data_end+0xf800c53c>
1000d874:	8880040c 	andi	r2,r17,16
1000d878:	10006226 	beq	r2,zero,1000da04 <__svfscanf_r+0x15cc>
1000d87c:	d8800104 	addi	r2,sp,4
1000d880:	80a1c83a 	sub	r16,r16,r2
1000d884:	8521883a 	add	r16,r16,r20
1000d888:	003ca506 	br	1000cb20 <__alt_data_end+0xf800cb20>
1000d88c:	014400b4 	movhi	r5,4098
1000d890:	8c63883a 	add	r17,r17,r17
1000d894:	294b6184 	addi	r5,r5,11654
1000d898:	2c45883a 	add	r2,r5,r17
1000d89c:	1440000f 	ldh	r17,0(r2)
1000d8a0:	00bd1fc4 	movi	r2,-2945
1000d8a4:	90a4703a 	and	r18,r18,r2
1000d8a8:	003fd006 	br	1000d7ec <__alt_data_end+0xf800d7ec>
1000d8ac:	9082000c 	andi	r2,r18,2048
1000d8b0:	103fce26 	beq	r2,zero,1000d7ec <__alt_data_end+0xf800d7ec>
1000d8b4:	8800021e 	bne	r17,zero,1000d8c0 <__svfscanf_r+0x1488>
1000d8b8:	94808014 	ori	r18,r18,512
1000d8bc:	04400204 	movi	r17,8
1000d8c0:	9081000c 	andi	r2,r18,1024
1000d8c4:	10008626 	beq	r2,zero,1000dae0 <__svfscanf_r+0x16a8>
1000d8c8:	00be9fc4 	movi	r2,-1409
1000d8cc:	90a4703a 	and	r18,r18,r2
1000d8d0:	003fc606 	br	1000d7ec <__alt_data_end+0xf800d7ec>
1000d8d4:	9080200c 	andi	r2,r18,128
1000d8d8:	103fdd26 	beq	r2,zero,1000d850 <__alt_data_end+0xf800d850>
1000d8dc:	9224703a 	and	r18,r18,r8
1000d8e0:	003fc206 	br	1000d7ec <__alt_data_end+0xf800d7ec>
1000d8e4:	980b883a 	mov	r5,r19
1000d8e8:	b809883a 	mov	r4,r23
1000d8ec:	d980a915 	stw	r6,676(sp)
1000d8f0:	d9c0aa15 	stw	r7,680(sp)
1000d8f4:	da00a715 	stw	r8,668(sp)
1000d8f8:	da40a815 	stw	r9,672(sp)
1000d8fc:	dac0a615 	stw	r11,664(sp)
1000d900:	00133e40 	call	100133e4 <__srefill_r>
1000d904:	d980a917 	ldw	r6,676(sp)
1000d908:	d9c0aa17 	ldw	r7,680(sp)
1000d90c:	da00a717 	ldw	r8,668(sp)
1000d910:	da40a817 	ldw	r9,672(sp)
1000d914:	dac0a617 	ldw	r11,664(sp)
1000d918:	103fbc26 	beq	r2,zero,1000d80c <__alt_data_end+0xf800d80c>
1000d91c:	003fcc06 	br	1000d850 <__alt_data_end+0xf800d850>
1000d920:	8821883a 	mov	r16,r17
1000d924:	a807883a 	mov	r3,r21
1000d928:	e023883a 	mov	r17,fp
1000d92c:	b82b883a 	mov	r21,r23
1000d930:	302f883a 	mov	r23,r6
1000d934:	00bfbfc4 	movi	r2,-257
1000d938:	a0a8703a 	and	r20,r20,r2
1000d93c:	003e6706 	br	1000d2dc <__alt_data_end+0xf800d2dc>
1000d940:	d800a215 	stw	zero,648(sp)
1000d944:	003de306 	br	1000d0d4 <__alt_data_end+0xf800d0d4>
1000d948:	000f883a 	mov	r7,zero
1000d94c:	003f4106 	br	1000d654 <__alt_data_end+0xf800d654>
1000d950:	d9409c17 	ldw	r5,624(sp)
1000d954:	e2bfffc4 	addi	r10,fp,-1
1000d958:	2c400017 	ldw	r17,0(r5)
1000d95c:	2c000104 	addi	r16,r5,4
1000d960:	8aa9883a 	add	r20,r17,r10
1000d964:	880b883a 	mov	r5,r17
1000d968:	00000606 	br	1000d984 <__svfscanf_r+0x154c>
1000d96c:	98c00017 	ldw	r3,0(r19)
1000d970:	b1000017 	ldw	r4,0(r22)
1000d974:	a80b883a 	mov	r5,r21
1000d978:	18800003 	ldbu	r2,0(r3)
1000d97c:	2085883a 	add	r2,r4,r2
1000d980:	10800043 	ldbu	r2,1(r2)
1000d984:	1080020c 	andi	r2,r2,8
1000d988:	1000621e 	bne	r2,zero,1000db14 <__svfscanf_r+0x16dc>
1000d98c:	98800117 	ldw	r2,4(r19)
1000d990:	19000044 	addi	r4,r3,1
1000d994:	99000015 	stw	r4,0(r19)
1000d998:	10bfffc4 	addi	r2,r2,-1
1000d99c:	98800115 	stw	r2,4(r19)
1000d9a0:	18800003 	ldbu	r2,0(r3)
1000d9a4:	2d400044 	addi	r21,r5,1
1000d9a8:	a839883a 	mov	fp,r21
1000d9ac:	28800005 	stb	r2,0(r5)
1000d9b0:	2d000626 	beq	r5,r20,1000d9cc <__svfscanf_r+0x1594>
1000d9b4:	98800117 	ldw	r2,4(r19)
1000d9b8:	00bfec16 	blt	zero,r2,1000d96c <__alt_data_end+0xf800d96c>
1000d9bc:	980b883a 	mov	r5,r19
1000d9c0:	b809883a 	mov	r4,r23
1000d9c4:	00133e40 	call	100133e4 <__srefill_r>
1000d9c8:	103fe826 	beq	r2,zero,1000d96c <__alt_data_end+0xf800d96c>
1000d9cc:	d880a017 	ldw	r2,640(sp)
1000d9d0:	dd009d17 	ldw	r20,628(sp)
1000d9d4:	e463c83a 	sub	r17,fp,r17
1000d9d8:	10800044 	addi	r2,r2,1
1000d9dc:	e0000005 	stb	zero,0(fp)
1000d9e0:	9465883a 	add	r18,r18,r17
1000d9e4:	d880a015 	stw	r2,640(sp)
1000d9e8:	dc009c15 	stw	r16,624(sp)
1000d9ec:	a00d883a 	mov	r6,r20
1000d9f0:	003ace06 	br	1000c52c <__alt_data_end+0xf800c52c>
1000d9f4:	dd009d17 	ldw	r20,628(sp)
1000d9f8:	9465883a 	add	r18,r18,r17
1000d9fc:	a00d883a 	mov	r6,r20
1000da00:	003aca06 	br	1000c52c <__alt_data_end+0xf800c52c>
1000da04:	d8c0a117 	ldw	r3,644(sp)
1000da08:	d9c09e17 	ldw	r7,632(sp)
1000da0c:	000d883a 	mov	r6,zero
1000da10:	d9400104 	addi	r5,sp,4
1000da14:	b809883a 	mov	r4,r23
1000da18:	80000005 	stb	zero,0(r16)
1000da1c:	183ee83a 	callr	r3
1000da20:	88c0080c 	andi	r3,r17,32
1000da24:	1800351e 	bne	r3,zero,1000dafc <__svfscanf_r+0x16c4>
1000da28:	88c0010c 	andi	r3,r17,4
1000da2c:	18007026 	beq	r3,zero,1000dbf0 <__svfscanf_r+0x17b8>
1000da30:	d9409c17 	ldw	r5,624(sp)
1000da34:	28c00017 	ldw	r3,0(r5)
1000da38:	29400104 	addi	r5,r5,4
1000da3c:	d9409c15 	stw	r5,624(sp)
1000da40:	1880000d 	sth	r2,0(r3)
1000da44:	d940a017 	ldw	r5,640(sp)
1000da48:	29400044 	addi	r5,r5,1
1000da4c:	d940a015 	stw	r5,640(sp)
1000da50:	003f8a06 	br	1000d87c <__alt_data_end+0xf800d87c>
1000da54:	dd409904 	addi	r21,sp,612
1000da58:	8c40040c 	andi	r17,r17,16
1000da5c:	01800204 	movi	r6,8
1000da60:	000b883a 	mov	r5,zero
1000da64:	a809883a 	mov	r4,r21
1000da68:	0011b1c0 	call	10011b1c <memset>
1000da6c:	8800391e 	bne	r17,zero,1000db54 <__svfscanf_r+0x171c>
1000da70:	d8c09c17 	ldw	r3,624(sp)
1000da74:	1d000017 	ldw	r20,0(r3)
1000da78:	18c00104 	addi	r3,r3,4
1000da7c:	d8c09c15 	stw	r3,624(sp)
1000da80:	000d883a 	mov	r6,zero
1000da84:	3021883a 	mov	r16,r6
1000da88:	dc409f15 	stw	r17,636(sp)
1000da8c:	98800017 	ldw	r2,0(r19)
1000da90:	b0c00017 	ldw	r3,0(r22)
1000da94:	10800003 	ldbu	r2,0(r2)
1000da98:	1885883a 	add	r2,r3,r2
1000da9c:	10800043 	ldbu	r2,1(r2)
1000daa0:	1080020c 	andi	r2,r2,8
1000daa4:	1000011e 	bne	r2,zero,1000daac <__svfscanf_r+0x1674>
1000daa8:	e000651e 	bne	fp,zero,1000dc40 <__svfscanf_r+0x1808>
1000daac:	dc409f17 	ldw	r17,636(sp)
1000dab0:	883c811e 	bne	r17,zero,1000ccb8 <__alt_data_end+0xf800ccb8>
1000dab4:	a0000015 	stw	zero,0(r20)
1000dab8:	003c7c06 	br	1000ccac <__alt_data_end+0xf800ccac>
1000dabc:	a2c0008c 	andi	r11,r20,2
1000dac0:	58003c26 	beq	r11,zero,1000dbb4 <__svfscanf_r+0x177c>
1000dac4:	d9409c17 	ldw	r5,624(sp)
1000dac8:	28800017 	ldw	r2,0(r5)
1000dacc:	29400104 	addi	r5,r5,4
1000dad0:	d9409c15 	stw	r5,624(sp)
1000dad4:	14000015 	stw	r16,0(r2)
1000dad8:	10c00115 	stw	r3,4(r2)
1000dadc:	003e4406 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000dae0:	00bf1fc4 	movi	r2,-897
1000dae4:	90a4703a 	and	r18,r18,r2
1000dae8:	38000226 	beq	r7,zero,1000daf4 <__svfscanf_r+0x16bc>
1000daec:	39ffffc4 	addi	r7,r7,-1
1000daf0:	e7000044 	addi	fp,fp,1
1000daf4:	a5000044 	addi	r20,r20,1
1000daf8:	003f3e06 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000dafc:	d9009c17 	ldw	r4,624(sp)
1000db00:	20c00017 	ldw	r3,0(r4)
1000db04:	21000104 	addi	r4,r4,4
1000db08:	d9009c15 	stw	r4,624(sp)
1000db0c:	18800015 	stw	r2,0(r3)
1000db10:	003fcc06 	br	1000da44 <__alt_data_end+0xf800da44>
1000db14:	2839883a 	mov	fp,r5
1000db18:	003fac06 	br	1000d9cc <__alt_data_end+0xf800d9cc>
1000db1c:	00be1fc4 	movi	r2,-1921
1000db20:	a0a8703a 	and	r20,r20,r2
1000db24:	05c00044 	movi	r23,1
1000db28:	003ddb06 	br	1000d298 <__alt_data_end+0xf800d298>
1000db2c:	817fffc7 	ldb	r5,-1(r16)
1000db30:	980d883a 	mov	r6,r19
1000db34:	b809883a 	mov	r4,r23
1000db38:	843fffc4 	addi	r16,r16,-1
1000db3c:	00180500 	call	10018050 <_ungetc_r>
1000db40:	003f4a06 	br	1000d86c <__alt_data_end+0xf800d86c>
1000db44:	00fe1fc4 	movi	r3,-1921
1000db48:	a0e8703a 	and	r20,r20,r3
1000db4c:	05400044 	movi	r21,1
1000db50:	003dd106 	br	1000d298 <__alt_data_end+0xf800d298>
1000db54:	dd009b04 	addi	r20,sp,620
1000db58:	003fc906 	br	1000da80 <__alt_data_end+0xf800da80>
1000db5c:	d8c09f17 	ldw	r3,636(sp)
1000db60:	88e3c83a 	sub	r17,r17,r3
1000db64:	044dc83a 	sub	r6,zero,r17
1000db68:	883e1426 	beq	r17,zero,1000d3bc <__alt_data_end+0xf800d3bc>
1000db6c:	d88055c4 	addi	r2,sp,343
1000db70:	80800136 	bltu	r16,r2,1000db78 <__svfscanf_r+0x1740>
1000db74:	dc005584 	addi	r16,sp,342
1000db78:	014400b4 	movhi	r5,4098
1000db7c:	294b6004 	addi	r5,r5,11648
1000db80:	8009883a 	mov	r4,r16
1000db84:	00137b00 	call	100137b0 <sprintf>
1000db88:	003e0c06 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000db8c:	d8c0a517 	ldw	r3,660(sp)
1000db90:	000d883a 	mov	r6,zero
1000db94:	01c00284 	movi	r7,10
1000db98:	19400044 	addi	r5,r3,1
1000db9c:	b809883a 	mov	r4,r23
1000dba0:	00151940 	call	10015194 <_strtol_r>
1000dba4:	d8c0a417 	ldw	r3,656(sp)
1000dba8:	dc00a517 	ldw	r16,660(sp)
1000dbac:	10cdc83a 	sub	r6,r2,r3
1000dbb0:	003fee06 	br	1000db6c <__alt_data_end+0xf800db6c>
1000dbb4:	d8809c17 	ldw	r2,624(sp)
1000dbb8:	180b883a 	mov	r5,r3
1000dbbc:	8009883a 	mov	r4,r16
1000dbc0:	15000017 	ldw	r20,0(r2)
1000dbc4:	14400104 	addi	r17,r2,4
1000dbc8:	d8c0a615 	stw	r3,664(sp)
1000dbcc:	00135b80 	call	100135b8 <__fpclassifyd>
1000dbd0:	d8c0a617 	ldw	r3,664(sp)
1000dbd4:	10007226 	beq	r2,zero,1000dda0 <__svfscanf_r+0x1968>
1000dbd8:	8009883a 	mov	r4,r16
1000dbdc:	180b883a 	mov	r5,r3
1000dbe0:	001f0540 	call	1001f054 <__truncdfsf2>
1000dbe4:	a0800015 	stw	r2,0(r20)
1000dbe8:	dc409c15 	stw	r17,624(sp)
1000dbec:	003e0006 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000dbf0:	88c0004c 	andi	r3,r17,1
1000dbf4:	183fc11e 	bne	r3,zero,1000dafc <__alt_data_end+0xf800dafc>
1000dbf8:	8c40008c 	andi	r17,r17,2
1000dbfc:	883fbf26 	beq	r17,zero,1000dafc <__alt_data_end+0xf800dafc>
1000dc00:	d940a117 	ldw	r5,644(sp)
1000dc04:	00840074 	movhi	r2,4097
1000dc08:	1095c304 	addi	r2,r2,22284
1000dc0c:	d9c09e17 	ldw	r7,632(sp)
1000dc10:	000d883a 	mov	r6,zero
1000dc14:	28806726 	beq	r5,r2,1000ddb4 <__svfscanf_r+0x197c>
1000dc18:	d9400104 	addi	r5,sp,4
1000dc1c:	b809883a 	mov	r4,r23
1000dc20:	00154080 	call	10015408 <_strtoll_r>
1000dc24:	d9409c17 	ldw	r5,624(sp)
1000dc28:	29000017 	ldw	r4,0(r5)
1000dc2c:	29400104 	addi	r5,r5,4
1000dc30:	d9409c15 	stw	r5,624(sp)
1000dc34:	20800015 	stw	r2,0(r4)
1000dc38:	20c00115 	stw	r3,4(r4)
1000dc3c:	003f8106 	br	1000da44 <__alt_data_end+0xf800da44>
1000dc40:	0010c9c0 	call	10010c9c <__locale_mb_cur_max>
1000dc44:	80bc5626 	beq	r16,r2,1000cda0 <__alt_data_end+0xf800cda0>
1000dc48:	98800017 	ldw	r2,0(r19)
1000dc4c:	99000117 	ldw	r4,4(r19)
1000dc50:	d9400104 	addi	r5,sp,4
1000dc54:	12000003 	ldbu	r8,0(r2)
1000dc58:	213fffc4 	addi	r4,r4,-1
1000dc5c:	10800044 	addi	r2,r2,1
1000dc60:	99000115 	stw	r4,4(r19)
1000dc64:	98800015 	stw	r2,0(r19)
1000dc68:	84400044 	addi	r17,r16,1
1000dc6c:	dd400015 	stw	r21,0(sp)
1000dc70:	2c21883a 	add	r16,r5,r16
1000dc74:	280d883a 	mov	r6,r5
1000dc78:	880f883a 	mov	r7,r17
1000dc7c:	a00b883a 	mov	r5,r20
1000dc80:	b809883a 	mov	r4,r23
1000dc84:	82000005 	stb	r8,0(r16)
1000dc88:	00116b80 	call	100116b8 <_mbrtowc_r>
1000dc8c:	00ffffc4 	movi	r3,-1
1000dc90:	10fc4326 	beq	r2,r3,1000cda0 <__alt_data_end+0xf800cda0>
1000dc94:	103c371e 	bne	r2,zero,1000cd74 <__alt_data_end+0xf800cd74>
1000dc98:	a0000015 	stw	zero,0(r20)
1000dc9c:	0009883a 	mov	r4,zero
1000dca0:	0010be40 	call	10010be4 <iswspace>
1000dca4:	10001b26 	beq	r2,zero,1000dd14 <__svfscanf_r+0x18dc>
1000dca8:	8821883a 	mov	r16,r17
1000dcac:	dc409f17 	ldw	r17,636(sp)
1000dcb0:	803f7f26 	beq	r16,zero,1000dab0 <__alt_data_end+0xf800dab0>
1000dcb4:	843fffc4 	addi	r16,r16,-1
1000dcb8:	d9400104 	addi	r5,sp,4
1000dcbc:	2c2b883a 	add	r21,r5,r16
1000dcc0:	00000106 	br	1000dcc8 <__svfscanf_r+0x1890>
1000dcc4:	843fffc4 	addi	r16,r16,-1
1000dcc8:	a9400003 	ldbu	r5,0(r21)
1000dccc:	980d883a 	mov	r6,r19
1000dcd0:	b809883a 	mov	r4,r23
1000dcd4:	00180500 	call	10018050 <_ungetc_r>
1000dcd8:	ad7fffc4 	addi	r21,r21,-1
1000dcdc:	803ff91e 	bne	r16,zero,1000dcc4 <__alt_data_end+0xf800dcc4>
1000dce0:	003f7306 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000dce4:	d9400104 	addi	r5,sp,4
1000dce8:	802b883a 	mov	r21,r16
1000dcec:	9839883a 	mov	fp,r19
1000dcf0:	2c3a122e 	bgeu	r5,r16,1000c53c <__alt_data_end+0xf800c53c>
1000dcf4:	ad7fffc4 	addi	r21,r21,-1
1000dcf8:	a9400007 	ldb	r5,0(r21)
1000dcfc:	e00d883a 	mov	r6,fp
1000dd00:	b809883a 	mov	r4,r23
1000dd04:	00180500 	call	10018050 <_ungetc_r>
1000dd08:	d8800104 	addi	r2,sp,4
1000dd0c:	157ff91e 	bne	r2,r21,1000dcf4 <__alt_data_end+0xf800dcf4>
1000dd10:	003a0a06 	br	1000c53c <__alt_data_end+0xf800c53c>
1000dd14:	d8c09f17 	ldw	r3,636(sp)
1000dd18:	9465883a 	add	r18,r18,r17
1000dd1c:	e73fffc4 	addi	fp,fp,-1
1000dd20:	1800051e 	bne	r3,zero,1000dd38 <__svfscanf_r+0x1900>
1000dd24:	a5000104 	addi	r20,r20,4
1000dd28:	0021883a 	mov	r16,zero
1000dd2c:	003c1406 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000dd30:	a1000017 	ldw	r4,0(r20)
1000dd34:	003fda06 	br	1000dca0 <__alt_data_end+0xf800dca0>
1000dd38:	0021883a 	mov	r16,zero
1000dd3c:	003c1006 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000dd40:	d8c00104 	addi	r3,sp,4
1000dd44:	802b883a 	mov	r21,r16
1000dd48:	9839883a 	mov	fp,r19
1000dd4c:	1c39fb2e 	bgeu	r3,r16,1000c53c <__alt_data_end+0xf800c53c>
1000dd50:	ad7fffc4 	addi	r21,r21,-1
1000dd54:	a9400007 	ldb	r5,0(r21)
1000dd58:	b809883a 	mov	r4,r23
1000dd5c:	e00d883a 	mov	r6,fp
1000dd60:	00180500 	call	10018050 <_ungetc_r>
1000dd64:	d9000104 	addi	r4,sp,4
1000dd68:	257ff91e 	bne	r4,r21,1000dd50 <__alt_data_end+0xf800dd50>
1000dd6c:	0039f306 	br	1000c53c <__alt_data_end+0xf800c53c>
1000dd70:	d8c00104 	addi	r3,sp,4
1000dd74:	802b883a 	mov	r21,r16
1000dd78:	9839883a 	mov	fp,r19
1000dd7c:	1c39ef2e 	bgeu	r3,r16,1000c53c <__alt_data_end+0xf800c53c>
1000dd80:	ad7fffc4 	addi	r21,r21,-1
1000dd84:	a9400007 	ldb	r5,0(r21)
1000dd88:	b809883a 	mov	r4,r23
1000dd8c:	e00d883a 	mov	r6,fp
1000dd90:	00180500 	call	10018050 <_ungetc_r>
1000dd94:	d9000104 	addi	r4,sp,4
1000dd98:	257ff91e 	bne	r4,r21,1000dd80 <__alt_data_end+0xf800dd80>
1000dd9c:	0039e706 	br	1000c53c <__alt_data_end+0xf800c53c>
1000dda0:	0009883a 	mov	r4,zero
1000dda4:	00137500 	call	10013750 <nanf>
1000dda8:	a0800015 	stw	r2,0(r20)
1000ddac:	dc409c15 	stw	r17,624(sp)
1000ddb0:	003d8f06 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000ddb4:	d9400104 	addi	r5,sp,4
1000ddb8:	b809883a 	mov	r4,r23
1000ddbc:	00159a00 	call	100159a0 <_strtoull_r>
1000ddc0:	003f9806 	br	1000dc24 <__alt_data_end+0xf800dc24>

1000ddc4 <vfscanf>:
1000ddc4:	008400b4 	movhi	r2,4098
1000ddc8:	defffb04 	addi	sp,sp,-20
1000ddcc:	10951604 	addi	r2,r2,21592
1000ddd0:	dc000215 	stw	r16,8(sp)
1000ddd4:	14000017 	ldw	r16,0(r2)
1000ddd8:	dc400315 	stw	r17,12(sp)
1000dddc:	dfc00415 	stw	ra,16(sp)
1000dde0:	2023883a 	mov	r17,r4
1000dde4:	80000826 	beq	r16,zero,1000de08 <vfscanf+0x44>
1000dde8:	80800e17 	ldw	r2,56(r16)
1000ddec:	1000061e 	bne	r2,zero,1000de08 <vfscanf+0x44>
1000ddf0:	8009883a 	mov	r4,r16
1000ddf4:	d9400015 	stw	r5,0(sp)
1000ddf8:	d9800115 	stw	r6,4(sp)
1000ddfc:	000fea00 	call	1000fea0 <__sinit>
1000de00:	d9800117 	ldw	r6,4(sp)
1000de04:	d9400017 	ldw	r5,0(sp)
1000de08:	300f883a 	mov	r7,r6
1000de0c:	8009883a 	mov	r4,r16
1000de10:	280d883a 	mov	r6,r5
1000de14:	880b883a 	mov	r5,r17
1000de18:	dfc00417 	ldw	ra,16(sp)
1000de1c:	dc400317 	ldw	r17,12(sp)
1000de20:	dc000217 	ldw	r16,8(sp)
1000de24:	dec00504 	addi	sp,sp,20
1000de28:	000c4381 	jmpi	1000c438 <__svfscanf_r>

1000de2c <__svfscanf>:
1000de2c:	008400b4 	movhi	r2,4098
1000de30:	10951604 	addi	r2,r2,21592
1000de34:	300f883a 	mov	r7,r6
1000de38:	280d883a 	mov	r6,r5
1000de3c:	200b883a 	mov	r5,r4
1000de40:	11000017 	ldw	r4,0(r2)
1000de44:	000c4381 	jmpi	1000c438 <__svfscanf_r>

1000de48 <_vfscanf_r>:
1000de48:	defffb04 	addi	sp,sp,-20
1000de4c:	dc000315 	stw	r16,12(sp)
1000de50:	dfc00415 	stw	ra,16(sp)
1000de54:	2021883a 	mov	r16,r4
1000de58:	20000926 	beq	r4,zero,1000de80 <_vfscanf_r+0x38>
1000de5c:	20800e17 	ldw	r2,56(r4)
1000de60:	1000071e 	bne	r2,zero,1000de80 <_vfscanf_r+0x38>
1000de64:	d9400015 	stw	r5,0(sp)
1000de68:	d9800115 	stw	r6,4(sp)
1000de6c:	d9c00215 	stw	r7,8(sp)
1000de70:	000fea00 	call	1000fea0 <__sinit>
1000de74:	d9c00217 	ldw	r7,8(sp)
1000de78:	d9800117 	ldw	r6,4(sp)
1000de7c:	d9400017 	ldw	r5,0(sp)
1000de80:	8009883a 	mov	r4,r16
1000de84:	dfc00417 	ldw	ra,16(sp)
1000de88:	dc000317 	ldw	r16,12(sp)
1000de8c:	dec00504 	addi	sp,sp,20
1000de90:	000c4381 	jmpi	1000c438 <__svfscanf_r>

1000de94 <__swsetup_r>:
1000de94:	008400b4 	movhi	r2,4098
1000de98:	defffd04 	addi	sp,sp,-12
1000de9c:	10951604 	addi	r2,r2,21592
1000dea0:	dc400115 	stw	r17,4(sp)
1000dea4:	2023883a 	mov	r17,r4
1000dea8:	11000017 	ldw	r4,0(r2)
1000deac:	dc000015 	stw	r16,0(sp)
1000deb0:	dfc00215 	stw	ra,8(sp)
1000deb4:	2821883a 	mov	r16,r5
1000deb8:	20000226 	beq	r4,zero,1000dec4 <__swsetup_r+0x30>
1000debc:	20800e17 	ldw	r2,56(r4)
1000dec0:	10003126 	beq	r2,zero,1000df88 <__swsetup_r+0xf4>
1000dec4:	8080030b 	ldhu	r2,12(r16)
1000dec8:	10c0020c 	andi	r3,r2,8
1000decc:	1009883a 	mov	r4,r2
1000ded0:	18000f26 	beq	r3,zero,1000df10 <__swsetup_r+0x7c>
1000ded4:	80c00417 	ldw	r3,16(r16)
1000ded8:	18001526 	beq	r3,zero,1000df30 <__swsetup_r+0x9c>
1000dedc:	1100004c 	andi	r4,r2,1
1000dee0:	20001c1e 	bne	r4,zero,1000df54 <__swsetup_r+0xc0>
1000dee4:	1080008c 	andi	r2,r2,2
1000dee8:	1000291e 	bne	r2,zero,1000df90 <__swsetup_r+0xfc>
1000deec:	80800517 	ldw	r2,20(r16)
1000def0:	80800215 	stw	r2,8(r16)
1000def4:	18001c26 	beq	r3,zero,1000df68 <__swsetup_r+0xd4>
1000def8:	0005883a 	mov	r2,zero
1000defc:	dfc00217 	ldw	ra,8(sp)
1000df00:	dc400117 	ldw	r17,4(sp)
1000df04:	dc000017 	ldw	r16,0(sp)
1000df08:	dec00304 	addi	sp,sp,12
1000df0c:	f800283a 	ret
1000df10:	2080040c 	andi	r2,r4,16
1000df14:	10002e26 	beq	r2,zero,1000dfd0 <__swsetup_r+0x13c>
1000df18:	2080010c 	andi	r2,r4,4
1000df1c:	10001e1e 	bne	r2,zero,1000df98 <__swsetup_r+0x104>
1000df20:	80c00417 	ldw	r3,16(r16)
1000df24:	20800214 	ori	r2,r4,8
1000df28:	8080030d 	sth	r2,12(r16)
1000df2c:	183feb1e 	bne	r3,zero,1000dedc <__alt_data_end+0xf800dedc>
1000df30:	1100a00c 	andi	r4,r2,640
1000df34:	01408004 	movi	r5,512
1000df38:	217fe826 	beq	r4,r5,1000dedc <__alt_data_end+0xf800dedc>
1000df3c:	800b883a 	mov	r5,r16
1000df40:	8809883a 	mov	r4,r17
1000df44:	0010cf00 	call	10010cf0 <__smakebuf_r>
1000df48:	8080030b 	ldhu	r2,12(r16)
1000df4c:	80c00417 	ldw	r3,16(r16)
1000df50:	003fe206 	br	1000dedc <__alt_data_end+0xf800dedc>
1000df54:	80800517 	ldw	r2,20(r16)
1000df58:	80000215 	stw	zero,8(r16)
1000df5c:	0085c83a 	sub	r2,zero,r2
1000df60:	80800615 	stw	r2,24(r16)
1000df64:	183fe41e 	bne	r3,zero,1000def8 <__alt_data_end+0xf800def8>
1000df68:	80c0030b 	ldhu	r3,12(r16)
1000df6c:	0005883a 	mov	r2,zero
1000df70:	1900200c 	andi	r4,r3,128
1000df74:	203fe126 	beq	r4,zero,1000defc <__alt_data_end+0xf800defc>
1000df78:	18c01014 	ori	r3,r3,64
1000df7c:	80c0030d 	sth	r3,12(r16)
1000df80:	00bfffc4 	movi	r2,-1
1000df84:	003fdd06 	br	1000defc <__alt_data_end+0xf800defc>
1000df88:	000fea00 	call	1000fea0 <__sinit>
1000df8c:	003fcd06 	br	1000dec4 <__alt_data_end+0xf800dec4>
1000df90:	0005883a 	mov	r2,zero
1000df94:	003fd606 	br	1000def0 <__alt_data_end+0xf800def0>
1000df98:	81400c17 	ldw	r5,48(r16)
1000df9c:	28000626 	beq	r5,zero,1000dfb8 <__swsetup_r+0x124>
1000dfa0:	80801004 	addi	r2,r16,64
1000dfa4:	28800326 	beq	r5,r2,1000dfb4 <__swsetup_r+0x120>
1000dfa8:	8809883a 	mov	r4,r17
1000dfac:	00102840 	call	10010284 <_free_r>
1000dfb0:	8100030b 	ldhu	r4,12(r16)
1000dfb4:	80000c15 	stw	zero,48(r16)
1000dfb8:	80c00417 	ldw	r3,16(r16)
1000dfbc:	00bff6c4 	movi	r2,-37
1000dfc0:	1108703a 	and	r4,r2,r4
1000dfc4:	80000115 	stw	zero,4(r16)
1000dfc8:	80c00015 	stw	r3,0(r16)
1000dfcc:	003fd506 	br	1000df24 <__alt_data_end+0xf800df24>
1000dfd0:	00800244 	movi	r2,9
1000dfd4:	88800015 	stw	r2,0(r17)
1000dfd8:	20801014 	ori	r2,r4,64
1000dfdc:	8080030d 	sth	r2,12(r16)
1000dfe0:	00bfffc4 	movi	r2,-1
1000dfe4:	003fc506 	br	1000defc <__alt_data_end+0xf800defc>

1000dfe8 <quorem>:
1000dfe8:	defff204 	addi	sp,sp,-56
1000dfec:	ddc00b15 	stw	r23,44(sp)
1000dff0:	20800417 	ldw	r2,16(r4)
1000dff4:	2dc00417 	ldw	r23,16(r5)
1000dff8:	dfc00d15 	stw	ra,52(sp)
1000dffc:	df000c15 	stw	fp,48(sp)
1000e000:	dd800a15 	stw	r22,40(sp)
1000e004:	dd400915 	stw	r21,36(sp)
1000e008:	dd000815 	stw	r20,32(sp)
1000e00c:	dcc00715 	stw	r19,28(sp)
1000e010:	dc800615 	stw	r18,24(sp)
1000e014:	dc400515 	stw	r17,20(sp)
1000e018:	dc000415 	stw	r16,16(sp)
1000e01c:	15c07a16 	blt	r2,r23,1000e208 <quorem+0x220>
1000e020:	bdffffc4 	addi	r23,r23,-1
1000e024:	bde9883a 	add	r20,r23,r23
1000e028:	28c00504 	addi	r3,r5,20
1000e02c:	a529883a 	add	r20,r20,r20
1000e030:	1d39883a 	add	fp,r3,r20
1000e034:	24c00504 	addi	r19,r4,20
1000e038:	d9400215 	stw	r5,8(sp)
1000e03c:	9d29883a 	add	r20,r19,r20
1000e040:	e1400017 	ldw	r5,0(fp)
1000e044:	d9000015 	stw	r4,0(sp)
1000e048:	a1000017 	ldw	r4,0(r20)
1000e04c:	29400044 	addi	r5,r5,1
1000e050:	d8c00115 	stw	r3,4(sp)
1000e054:	dd000315 	stw	r20,12(sp)
1000e058:	0009bc80 	call	10009bc8 <__udivsi3>
1000e05c:	1025883a 	mov	r18,r2
1000e060:	10003026 	beq	r2,zero,1000e124 <quorem+0x13c>
1000e064:	dc400117 	ldw	r17,4(sp)
1000e068:	9829883a 	mov	r20,r19
1000e06c:	002d883a 	mov	r22,zero
1000e070:	0021883a 	mov	r16,zero
1000e074:	8d400017 	ldw	r21,0(r17)
1000e078:	900b883a 	mov	r5,r18
1000e07c:	8c400104 	addi	r17,r17,4
1000e080:	a93fffcc 	andi	r4,r21,65535
1000e084:	0008ef00 	call	10008ef0 <__mulsi3>
1000e088:	a808d43a 	srli	r4,r21,16
1000e08c:	900b883a 	mov	r5,r18
1000e090:	15ad883a 	add	r22,r2,r22
1000e094:	0008ef00 	call	10008ef0 <__mulsi3>
1000e098:	a1000017 	ldw	r4,0(r20)
1000e09c:	b00cd43a 	srli	r6,r22,16
1000e0a0:	b0ffffcc 	andi	r3,r22,65535
1000e0a4:	217fffcc 	andi	r5,r4,65535
1000e0a8:	2c21883a 	add	r16,r5,r16
1000e0ac:	80c7c83a 	sub	r3,r16,r3
1000e0b0:	2008d43a 	srli	r4,r4,16
1000e0b4:	1185883a 	add	r2,r2,r6
1000e0b8:	1821d43a 	srai	r16,r3,16
1000e0bc:	117fffcc 	andi	r5,r2,65535
1000e0c0:	2149c83a 	sub	r4,r4,r5
1000e0c4:	2421883a 	add	r16,r4,r16
1000e0c8:	8008943a 	slli	r4,r16,16
1000e0cc:	18ffffcc 	andi	r3,r3,65535
1000e0d0:	102cd43a 	srli	r22,r2,16
1000e0d4:	20c8b03a 	or	r4,r4,r3
1000e0d8:	a1000015 	stw	r4,0(r20)
1000e0dc:	8021d43a 	srai	r16,r16,16
1000e0e0:	a5000104 	addi	r20,r20,4
1000e0e4:	e47fe32e 	bgeu	fp,r17,1000e074 <__alt_data_end+0xf800e074>
1000e0e8:	d8c00317 	ldw	r3,12(sp)
1000e0ec:	18800017 	ldw	r2,0(r3)
1000e0f0:	10000c1e 	bne	r2,zero,1000e124 <quorem+0x13c>
1000e0f4:	18bfff04 	addi	r2,r3,-4
1000e0f8:	9880082e 	bgeu	r19,r2,1000e11c <quorem+0x134>
1000e0fc:	18ffff17 	ldw	r3,-4(r3)
1000e100:	18000326 	beq	r3,zero,1000e110 <quorem+0x128>
1000e104:	00000506 	br	1000e11c <quorem+0x134>
1000e108:	10c00017 	ldw	r3,0(r2)
1000e10c:	1800031e 	bne	r3,zero,1000e11c <quorem+0x134>
1000e110:	10bfff04 	addi	r2,r2,-4
1000e114:	bdffffc4 	addi	r23,r23,-1
1000e118:	98bffb36 	bltu	r19,r2,1000e108 <__alt_data_end+0xf800e108>
1000e11c:	d8c00017 	ldw	r3,0(sp)
1000e120:	1dc00415 	stw	r23,16(r3)
1000e124:	d9400217 	ldw	r5,8(sp)
1000e128:	d9000017 	ldw	r4,0(sp)
1000e12c:	00125c80 	call	100125c8 <__mcmp>
1000e130:	10002816 	blt	r2,zero,1000e1d4 <quorem+0x1ec>
1000e134:	dc400117 	ldw	r17,4(sp)
1000e138:	94800044 	addi	r18,r18,1
1000e13c:	980d883a 	mov	r6,r19
1000e140:	0007883a 	mov	r3,zero
1000e144:	31000017 	ldw	r4,0(r6)
1000e148:	89400017 	ldw	r5,0(r17)
1000e14c:	31800104 	addi	r6,r6,4
1000e150:	20bfffcc 	andi	r2,r4,65535
1000e154:	10c7883a 	add	r3,r2,r3
1000e158:	28bfffcc 	andi	r2,r5,65535
1000e15c:	1885c83a 	sub	r2,r3,r2
1000e160:	280ad43a 	srli	r5,r5,16
1000e164:	2008d43a 	srli	r4,r4,16
1000e168:	1007d43a 	srai	r3,r2,16
1000e16c:	10bfffcc 	andi	r2,r2,65535
1000e170:	2149c83a 	sub	r4,r4,r5
1000e174:	20c9883a 	add	r4,r4,r3
1000e178:	200a943a 	slli	r5,r4,16
1000e17c:	8c400104 	addi	r17,r17,4
1000e180:	2007d43a 	srai	r3,r4,16
1000e184:	2884b03a 	or	r2,r5,r2
1000e188:	30bfff15 	stw	r2,-4(r6)
1000e18c:	e47fed2e 	bgeu	fp,r17,1000e144 <__alt_data_end+0xf800e144>
1000e190:	bdc5883a 	add	r2,r23,r23
1000e194:	1085883a 	add	r2,r2,r2
1000e198:	9887883a 	add	r3,r19,r2
1000e19c:	18800017 	ldw	r2,0(r3)
1000e1a0:	10000c1e 	bne	r2,zero,1000e1d4 <quorem+0x1ec>
1000e1a4:	18bfff04 	addi	r2,r3,-4
1000e1a8:	9880082e 	bgeu	r19,r2,1000e1cc <quorem+0x1e4>
1000e1ac:	18ffff17 	ldw	r3,-4(r3)
1000e1b0:	18000326 	beq	r3,zero,1000e1c0 <quorem+0x1d8>
1000e1b4:	00000506 	br	1000e1cc <quorem+0x1e4>
1000e1b8:	10c00017 	ldw	r3,0(r2)
1000e1bc:	1800031e 	bne	r3,zero,1000e1cc <quorem+0x1e4>
1000e1c0:	10bfff04 	addi	r2,r2,-4
1000e1c4:	bdffffc4 	addi	r23,r23,-1
1000e1c8:	98bffb36 	bltu	r19,r2,1000e1b8 <__alt_data_end+0xf800e1b8>
1000e1cc:	d8c00017 	ldw	r3,0(sp)
1000e1d0:	1dc00415 	stw	r23,16(r3)
1000e1d4:	9005883a 	mov	r2,r18
1000e1d8:	dfc00d17 	ldw	ra,52(sp)
1000e1dc:	df000c17 	ldw	fp,48(sp)
1000e1e0:	ddc00b17 	ldw	r23,44(sp)
1000e1e4:	dd800a17 	ldw	r22,40(sp)
1000e1e8:	dd400917 	ldw	r21,36(sp)
1000e1ec:	dd000817 	ldw	r20,32(sp)
1000e1f0:	dcc00717 	ldw	r19,28(sp)
1000e1f4:	dc800617 	ldw	r18,24(sp)
1000e1f8:	dc400517 	ldw	r17,20(sp)
1000e1fc:	dc000417 	ldw	r16,16(sp)
1000e200:	dec00e04 	addi	sp,sp,56
1000e204:	f800283a 	ret
1000e208:	0005883a 	mov	r2,zero
1000e20c:	003ff206 	br	1000e1d8 <__alt_data_end+0xf800e1d8>

1000e210 <_dtoa_r>:
1000e210:	20801017 	ldw	r2,64(r4)
1000e214:	deffde04 	addi	sp,sp,-136
1000e218:	df002015 	stw	fp,128(sp)
1000e21c:	dcc01b15 	stw	r19,108(sp)
1000e220:	dc801a15 	stw	r18,104(sp)
1000e224:	dc401915 	stw	r17,100(sp)
1000e228:	dc001815 	stw	r16,96(sp)
1000e22c:	dfc02115 	stw	ra,132(sp)
1000e230:	ddc01f15 	stw	r23,124(sp)
1000e234:	dd801e15 	stw	r22,120(sp)
1000e238:	dd401d15 	stw	r21,116(sp)
1000e23c:	dd001c15 	stw	r20,112(sp)
1000e240:	d9c00315 	stw	r7,12(sp)
1000e244:	2039883a 	mov	fp,r4
1000e248:	3023883a 	mov	r17,r6
1000e24c:	2825883a 	mov	r18,r5
1000e250:	dc002417 	ldw	r16,144(sp)
1000e254:	3027883a 	mov	r19,r6
1000e258:	10000826 	beq	r2,zero,1000e27c <_dtoa_r+0x6c>
1000e25c:	21801117 	ldw	r6,68(r4)
1000e260:	00c00044 	movi	r3,1
1000e264:	100b883a 	mov	r5,r2
1000e268:	1986983a 	sll	r3,r3,r6
1000e26c:	11800115 	stw	r6,4(r2)
1000e270:	10c00215 	stw	r3,8(r2)
1000e274:	0011cec0 	call	10011cec <_Bfree>
1000e278:	e0001015 	stw	zero,64(fp)
1000e27c:	88002e16 	blt	r17,zero,1000e338 <_dtoa_r+0x128>
1000e280:	80000015 	stw	zero,0(r16)
1000e284:	889ffc2c 	andhi	r2,r17,32752
1000e288:	00dffc34 	movhi	r3,32752
1000e28c:	10c01c26 	beq	r2,r3,1000e300 <_dtoa_r+0xf0>
1000e290:	000d883a 	mov	r6,zero
1000e294:	000f883a 	mov	r7,zero
1000e298:	9009883a 	mov	r4,r18
1000e29c:	980b883a 	mov	r5,r19
1000e2a0:	001dc140 	call	1001dc14 <__eqdf2>
1000e2a4:	10002b1e 	bne	r2,zero,1000e354 <_dtoa_r+0x144>
1000e2a8:	d9c02317 	ldw	r7,140(sp)
1000e2ac:	00800044 	movi	r2,1
1000e2b0:	38800015 	stw	r2,0(r7)
1000e2b4:	d8802517 	ldw	r2,148(sp)
1000e2b8:	10019e26 	beq	r2,zero,1000e934 <_dtoa_r+0x724>
1000e2bc:	d8c02517 	ldw	r3,148(sp)
1000e2c0:	008400b4 	movhi	r2,4098
1000e2c4:	108b5744 	addi	r2,r2,11613
1000e2c8:	18800015 	stw	r2,0(r3)
1000e2cc:	10bfffc4 	addi	r2,r2,-1
1000e2d0:	dfc02117 	ldw	ra,132(sp)
1000e2d4:	df002017 	ldw	fp,128(sp)
1000e2d8:	ddc01f17 	ldw	r23,124(sp)
1000e2dc:	dd801e17 	ldw	r22,120(sp)
1000e2e0:	dd401d17 	ldw	r21,116(sp)
1000e2e4:	dd001c17 	ldw	r20,112(sp)
1000e2e8:	dcc01b17 	ldw	r19,108(sp)
1000e2ec:	dc801a17 	ldw	r18,104(sp)
1000e2f0:	dc401917 	ldw	r17,100(sp)
1000e2f4:	dc001817 	ldw	r16,96(sp)
1000e2f8:	dec02204 	addi	sp,sp,136
1000e2fc:	f800283a 	ret
1000e300:	d8c02317 	ldw	r3,140(sp)
1000e304:	0089c3c4 	movi	r2,9999
1000e308:	18800015 	stw	r2,0(r3)
1000e30c:	90017726 	beq	r18,zero,1000e8ec <_dtoa_r+0x6dc>
1000e310:	008400b4 	movhi	r2,4098
1000e314:	108c0e04 	addi	r2,r2,12344
1000e318:	d9002517 	ldw	r4,148(sp)
1000e31c:	203fec26 	beq	r4,zero,1000e2d0 <__alt_data_end+0xf800e2d0>
1000e320:	10c000c7 	ldb	r3,3(r2)
1000e324:	1801781e 	bne	r3,zero,1000e908 <_dtoa_r+0x6f8>
1000e328:	10c000c4 	addi	r3,r2,3
1000e32c:	d9802517 	ldw	r6,148(sp)
1000e330:	30c00015 	stw	r3,0(r6)
1000e334:	003fe606 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000e338:	04e00034 	movhi	r19,32768
1000e33c:	9cffffc4 	addi	r19,r19,-1
1000e340:	00800044 	movi	r2,1
1000e344:	8ce6703a 	and	r19,r17,r19
1000e348:	80800015 	stw	r2,0(r16)
1000e34c:	9823883a 	mov	r17,r19
1000e350:	003fcc06 	br	1000e284 <__alt_data_end+0xf800e284>
1000e354:	d8800204 	addi	r2,sp,8
1000e358:	d8800015 	stw	r2,0(sp)
1000e35c:	d9c00104 	addi	r7,sp,4
1000e360:	900b883a 	mov	r5,r18
1000e364:	980d883a 	mov	r6,r19
1000e368:	e009883a 	mov	r4,fp
1000e36c:	8820d53a 	srli	r16,r17,20
1000e370:	00129940 	call	10012994 <__d2b>
1000e374:	d8800915 	stw	r2,36(sp)
1000e378:	8001651e 	bne	r16,zero,1000e910 <_dtoa_r+0x700>
1000e37c:	dd800217 	ldw	r22,8(sp)
1000e380:	dc000117 	ldw	r16,4(sp)
1000e384:	00800804 	movi	r2,32
1000e388:	b421883a 	add	r16,r22,r16
1000e38c:	80c10c84 	addi	r3,r16,1074
1000e390:	10c2d10e 	bge	r2,r3,1000eed8 <_dtoa_r+0xcc8>
1000e394:	00801004 	movi	r2,64
1000e398:	81010484 	addi	r4,r16,1042
1000e39c:	10c7c83a 	sub	r3,r2,r3
1000e3a0:	9108d83a 	srl	r4,r18,r4
1000e3a4:	88e2983a 	sll	r17,r17,r3
1000e3a8:	2448b03a 	or	r4,r4,r17
1000e3ac:	00099c40 	call	100099c4 <__floatunsidf>
1000e3b0:	017f8434 	movhi	r5,65040
1000e3b4:	01800044 	movi	r6,1
1000e3b8:	1009883a 	mov	r4,r2
1000e3bc:	194b883a 	add	r5,r3,r5
1000e3c0:	843fffc4 	addi	r16,r16,-1
1000e3c4:	d9801115 	stw	r6,68(sp)
1000e3c8:	000d883a 	mov	r6,zero
1000e3cc:	01cffe34 	movhi	r7,16376
1000e3d0:	001e6d80 	call	1001e6d8 <__subdf3>
1000e3d4:	0198dbf4 	movhi	r6,25455
1000e3d8:	01cff4f4 	movhi	r7,16339
1000e3dc:	3190d844 	addi	r6,r6,17249
1000e3e0:	39e1e9c4 	addi	r7,r7,-30809
1000e3e4:	1009883a 	mov	r4,r2
1000e3e8:	180b883a 	mov	r5,r3
1000e3ec:	001de6c0 	call	1001de6c <__muldf3>
1000e3f0:	01a2d874 	movhi	r6,35681
1000e3f4:	01cff1f4 	movhi	r7,16327
1000e3f8:	31b22cc4 	addi	r6,r6,-14157
1000e3fc:	39e28a04 	addi	r7,r7,-30168
1000e400:	180b883a 	mov	r5,r3
1000e404:	1009883a 	mov	r4,r2
1000e408:	001d3680 	call	1001d368 <__adddf3>
1000e40c:	8009883a 	mov	r4,r16
1000e410:	1029883a 	mov	r20,r2
1000e414:	1823883a 	mov	r17,r3
1000e418:	00098e80 	call	100098e8 <__floatsidf>
1000e41c:	019427f4 	movhi	r6,20639
1000e420:	01cff4f4 	movhi	r7,16339
1000e424:	319e7ec4 	addi	r6,r6,31227
1000e428:	39d104c4 	addi	r7,r7,17427
1000e42c:	1009883a 	mov	r4,r2
1000e430:	180b883a 	mov	r5,r3
1000e434:	001de6c0 	call	1001de6c <__muldf3>
1000e438:	100d883a 	mov	r6,r2
1000e43c:	180f883a 	mov	r7,r3
1000e440:	a009883a 	mov	r4,r20
1000e444:	880b883a 	mov	r5,r17
1000e448:	001d3680 	call	1001d368 <__adddf3>
1000e44c:	1009883a 	mov	r4,r2
1000e450:	180b883a 	mov	r5,r3
1000e454:	1029883a 	mov	r20,r2
1000e458:	1823883a 	mov	r17,r3
1000e45c:	001efd40 	call	1001efd4 <__fixdfsi>
1000e460:	000d883a 	mov	r6,zero
1000e464:	000f883a 	mov	r7,zero
1000e468:	a009883a 	mov	r4,r20
1000e46c:	880b883a 	mov	r5,r17
1000e470:	d8800515 	stw	r2,20(sp)
1000e474:	001dd780 	call	1001dd78 <__ledf2>
1000e478:	10028716 	blt	r2,zero,1000ee98 <_dtoa_r+0xc88>
1000e47c:	d8c00517 	ldw	r3,20(sp)
1000e480:	00800584 	movi	r2,22
1000e484:	10c27536 	bltu	r2,r3,1000ee5c <_dtoa_r+0xc4c>
1000e488:	180490fa 	slli	r2,r3,3
1000e48c:	00c400b4 	movhi	r3,4098
1000e490:	18cc2904 	addi	r3,r3,12452
1000e494:	1885883a 	add	r2,r3,r2
1000e498:	11000017 	ldw	r4,0(r2)
1000e49c:	11400117 	ldw	r5,4(r2)
1000e4a0:	900d883a 	mov	r6,r18
1000e4a4:	980f883a 	mov	r7,r19
1000e4a8:	001dc9c0 	call	1001dc9c <__gedf2>
1000e4ac:	00828d0e 	bge	zero,r2,1000eee4 <_dtoa_r+0xcd4>
1000e4b0:	d9000517 	ldw	r4,20(sp)
1000e4b4:	d8000e15 	stw	zero,56(sp)
1000e4b8:	213fffc4 	addi	r4,r4,-1
1000e4bc:	d9000515 	stw	r4,20(sp)
1000e4c0:	b42dc83a 	sub	r22,r22,r16
1000e4c4:	b5bfffc4 	addi	r22,r22,-1
1000e4c8:	b0026f16 	blt	r22,zero,1000ee88 <_dtoa_r+0xc78>
1000e4cc:	d8000815 	stw	zero,32(sp)
1000e4d0:	d9c00517 	ldw	r7,20(sp)
1000e4d4:	38026416 	blt	r7,zero,1000ee68 <_dtoa_r+0xc58>
1000e4d8:	b1ed883a 	add	r22,r22,r7
1000e4dc:	d9c00d15 	stw	r7,52(sp)
1000e4e0:	d8000a15 	stw	zero,40(sp)
1000e4e4:	d9800317 	ldw	r6,12(sp)
1000e4e8:	00800244 	movi	r2,9
1000e4ec:	11811436 	bltu	r2,r6,1000e940 <_dtoa_r+0x730>
1000e4f0:	00800144 	movi	r2,5
1000e4f4:	1184e10e 	bge	r2,r6,1000f87c <_dtoa_r+0x166c>
1000e4f8:	31bfff04 	addi	r6,r6,-4
1000e4fc:	d9800315 	stw	r6,12(sp)
1000e500:	0023883a 	mov	r17,zero
1000e504:	d9800317 	ldw	r6,12(sp)
1000e508:	008000c4 	movi	r2,3
1000e50c:	30836726 	beq	r6,r2,1000f2ac <_dtoa_r+0x109c>
1000e510:	1183410e 	bge	r2,r6,1000f218 <_dtoa_r+0x1008>
1000e514:	d9c00317 	ldw	r7,12(sp)
1000e518:	00800104 	movi	r2,4
1000e51c:	38827c26 	beq	r7,r2,1000ef10 <_dtoa_r+0xd00>
1000e520:	00800144 	movi	r2,5
1000e524:	3884c41e 	bne	r7,r2,1000f838 <_dtoa_r+0x1628>
1000e528:	00800044 	movi	r2,1
1000e52c:	d8800b15 	stw	r2,44(sp)
1000e530:	d8c00517 	ldw	r3,20(sp)
1000e534:	d9002217 	ldw	r4,136(sp)
1000e538:	1907883a 	add	r3,r3,r4
1000e53c:	19800044 	addi	r6,r3,1
1000e540:	d8c00c15 	stw	r3,48(sp)
1000e544:	d9800615 	stw	r6,24(sp)
1000e548:	0183a40e 	bge	zero,r6,1000f3dc <_dtoa_r+0x11cc>
1000e54c:	d9800617 	ldw	r6,24(sp)
1000e550:	3021883a 	mov	r16,r6
1000e554:	e0001115 	stw	zero,68(fp)
1000e558:	008005c4 	movi	r2,23
1000e55c:	1184c92e 	bgeu	r2,r6,1000f884 <_dtoa_r+0x1674>
1000e560:	00c00044 	movi	r3,1
1000e564:	00800104 	movi	r2,4
1000e568:	1085883a 	add	r2,r2,r2
1000e56c:	11000504 	addi	r4,r2,20
1000e570:	180b883a 	mov	r5,r3
1000e574:	18c00044 	addi	r3,r3,1
1000e578:	313ffb2e 	bgeu	r6,r4,1000e568 <__alt_data_end+0xf800e568>
1000e57c:	e1401115 	stw	r5,68(fp)
1000e580:	e009883a 	mov	r4,fp
1000e584:	0011c440 	call	10011c44 <_Balloc>
1000e588:	d8800715 	stw	r2,28(sp)
1000e58c:	e0801015 	stw	r2,64(fp)
1000e590:	00800384 	movi	r2,14
1000e594:	1400f736 	bltu	r2,r16,1000e974 <_dtoa_r+0x764>
1000e598:	8800f626 	beq	r17,zero,1000e974 <_dtoa_r+0x764>
1000e59c:	d9c00517 	ldw	r7,20(sp)
1000e5a0:	01c39a0e 	bge	zero,r7,1000f40c <_dtoa_r+0x11fc>
1000e5a4:	388003cc 	andi	r2,r7,15
1000e5a8:	100490fa 	slli	r2,r2,3
1000e5ac:	382bd13a 	srai	r21,r7,4
1000e5b0:	00c400b4 	movhi	r3,4098
1000e5b4:	18cc2904 	addi	r3,r3,12452
1000e5b8:	1885883a 	add	r2,r3,r2
1000e5bc:	a8c0040c 	andi	r3,r21,16
1000e5c0:	12400017 	ldw	r9,0(r2)
1000e5c4:	12000117 	ldw	r8,4(r2)
1000e5c8:	18037926 	beq	r3,zero,1000f3b0 <_dtoa_r+0x11a0>
1000e5cc:	008400b4 	movhi	r2,4098
1000e5d0:	108c1f04 	addi	r2,r2,12412
1000e5d4:	11800817 	ldw	r6,32(r2)
1000e5d8:	11c00917 	ldw	r7,36(r2)
1000e5dc:	9009883a 	mov	r4,r18
1000e5e0:	980b883a 	mov	r5,r19
1000e5e4:	da001715 	stw	r8,92(sp)
1000e5e8:	da401615 	stw	r9,88(sp)
1000e5ec:	0008f180 	call	10008f18 <__divdf3>
1000e5f0:	da001717 	ldw	r8,92(sp)
1000e5f4:	da401617 	ldw	r9,88(sp)
1000e5f8:	ad4003cc 	andi	r21,r21,15
1000e5fc:	040000c4 	movi	r16,3
1000e600:	1023883a 	mov	r17,r2
1000e604:	1829883a 	mov	r20,r3
1000e608:	a8001126 	beq	r21,zero,1000e650 <_dtoa_r+0x440>
1000e60c:	05c400b4 	movhi	r23,4098
1000e610:	bdcc1f04 	addi	r23,r23,12412
1000e614:	4805883a 	mov	r2,r9
1000e618:	4007883a 	mov	r3,r8
1000e61c:	a980004c 	andi	r6,r21,1
1000e620:	1009883a 	mov	r4,r2
1000e624:	a82bd07a 	srai	r21,r21,1
1000e628:	180b883a 	mov	r5,r3
1000e62c:	30000426 	beq	r6,zero,1000e640 <_dtoa_r+0x430>
1000e630:	b9800017 	ldw	r6,0(r23)
1000e634:	b9c00117 	ldw	r7,4(r23)
1000e638:	84000044 	addi	r16,r16,1
1000e63c:	001de6c0 	call	1001de6c <__muldf3>
1000e640:	bdc00204 	addi	r23,r23,8
1000e644:	a83ff51e 	bne	r21,zero,1000e61c <__alt_data_end+0xf800e61c>
1000e648:	1013883a 	mov	r9,r2
1000e64c:	1811883a 	mov	r8,r3
1000e650:	480d883a 	mov	r6,r9
1000e654:	400f883a 	mov	r7,r8
1000e658:	8809883a 	mov	r4,r17
1000e65c:	a00b883a 	mov	r5,r20
1000e660:	0008f180 	call	10008f18 <__divdf3>
1000e664:	d8800f15 	stw	r2,60(sp)
1000e668:	d8c01015 	stw	r3,64(sp)
1000e66c:	d8c00e17 	ldw	r3,56(sp)
1000e670:	18000626 	beq	r3,zero,1000e68c <_dtoa_r+0x47c>
1000e674:	d9000f17 	ldw	r4,60(sp)
1000e678:	d9401017 	ldw	r5,64(sp)
1000e67c:	000d883a 	mov	r6,zero
1000e680:	01cffc34 	movhi	r7,16368
1000e684:	001dd780 	call	1001dd78 <__ledf2>
1000e688:	10040b16 	blt	r2,zero,1000f6b8 <_dtoa_r+0x14a8>
1000e68c:	8009883a 	mov	r4,r16
1000e690:	00098e80 	call	100098e8 <__floatsidf>
1000e694:	d9800f17 	ldw	r6,60(sp)
1000e698:	d9c01017 	ldw	r7,64(sp)
1000e69c:	1009883a 	mov	r4,r2
1000e6a0:	180b883a 	mov	r5,r3
1000e6a4:	001de6c0 	call	1001de6c <__muldf3>
1000e6a8:	000d883a 	mov	r6,zero
1000e6ac:	01d00734 	movhi	r7,16412
1000e6b0:	1009883a 	mov	r4,r2
1000e6b4:	180b883a 	mov	r5,r3
1000e6b8:	001d3680 	call	1001d368 <__adddf3>
1000e6bc:	1021883a 	mov	r16,r2
1000e6c0:	d8800617 	ldw	r2,24(sp)
1000e6c4:	047f3034 	movhi	r17,64704
1000e6c8:	1c63883a 	add	r17,r3,r17
1000e6cc:	10031826 	beq	r2,zero,1000f330 <_dtoa_r+0x1120>
1000e6d0:	d8c00517 	ldw	r3,20(sp)
1000e6d4:	db000617 	ldw	r12,24(sp)
1000e6d8:	d8c01315 	stw	r3,76(sp)
1000e6dc:	d9000b17 	ldw	r4,44(sp)
1000e6e0:	20038f26 	beq	r4,zero,1000f520 <_dtoa_r+0x1310>
1000e6e4:	60bfffc4 	addi	r2,r12,-1
1000e6e8:	100490fa 	slli	r2,r2,3
1000e6ec:	00c400b4 	movhi	r3,4098
1000e6f0:	18cc2904 	addi	r3,r3,12452
1000e6f4:	1885883a 	add	r2,r3,r2
1000e6f8:	11800017 	ldw	r6,0(r2)
1000e6fc:	11c00117 	ldw	r7,4(r2)
1000e700:	d8800717 	ldw	r2,28(sp)
1000e704:	0009883a 	mov	r4,zero
1000e708:	014ff834 	movhi	r5,16352
1000e70c:	db001615 	stw	r12,88(sp)
1000e710:	15c00044 	addi	r23,r2,1
1000e714:	0008f180 	call	10008f18 <__divdf3>
1000e718:	800d883a 	mov	r6,r16
1000e71c:	880f883a 	mov	r7,r17
1000e720:	1009883a 	mov	r4,r2
1000e724:	180b883a 	mov	r5,r3
1000e728:	001e6d80 	call	1001e6d8 <__subdf3>
1000e72c:	d9401017 	ldw	r5,64(sp)
1000e730:	d9000f17 	ldw	r4,60(sp)
1000e734:	102b883a 	mov	r21,r2
1000e738:	d8c01215 	stw	r3,72(sp)
1000e73c:	001efd40 	call	1001efd4 <__fixdfsi>
1000e740:	1009883a 	mov	r4,r2
1000e744:	1029883a 	mov	r20,r2
1000e748:	00098e80 	call	100098e8 <__floatsidf>
1000e74c:	d9000f17 	ldw	r4,60(sp)
1000e750:	d9401017 	ldw	r5,64(sp)
1000e754:	100d883a 	mov	r6,r2
1000e758:	180f883a 	mov	r7,r3
1000e75c:	001e6d80 	call	1001e6d8 <__subdf3>
1000e760:	1823883a 	mov	r17,r3
1000e764:	d8c00717 	ldw	r3,28(sp)
1000e768:	d9401217 	ldw	r5,72(sp)
1000e76c:	a2000c04 	addi	r8,r20,48
1000e770:	1021883a 	mov	r16,r2
1000e774:	1a000005 	stb	r8,0(r3)
1000e778:	800d883a 	mov	r6,r16
1000e77c:	880f883a 	mov	r7,r17
1000e780:	a809883a 	mov	r4,r21
1000e784:	4029883a 	mov	r20,r8
1000e788:	001dc9c0 	call	1001dc9c <__gedf2>
1000e78c:	00841d16 	blt	zero,r2,1000f804 <_dtoa_r+0x15f4>
1000e790:	800d883a 	mov	r6,r16
1000e794:	880f883a 	mov	r7,r17
1000e798:	0009883a 	mov	r4,zero
1000e79c:	014ffc34 	movhi	r5,16368
1000e7a0:	001e6d80 	call	1001e6d8 <__subdf3>
1000e7a4:	d9401217 	ldw	r5,72(sp)
1000e7a8:	100d883a 	mov	r6,r2
1000e7ac:	180f883a 	mov	r7,r3
1000e7b0:	a809883a 	mov	r4,r21
1000e7b4:	001dc9c0 	call	1001dc9c <__gedf2>
1000e7b8:	db001617 	ldw	r12,88(sp)
1000e7bc:	00840e16 	blt	zero,r2,1000f7f8 <_dtoa_r+0x15e8>
1000e7c0:	00800044 	movi	r2,1
1000e7c4:	13006b0e 	bge	r2,r12,1000e974 <_dtoa_r+0x764>
1000e7c8:	d9000717 	ldw	r4,28(sp)
1000e7cc:	dd800f15 	stw	r22,60(sp)
1000e7d0:	dcc01015 	stw	r19,64(sp)
1000e7d4:	2319883a 	add	r12,r4,r12
1000e7d8:	dcc01217 	ldw	r19,72(sp)
1000e7dc:	602d883a 	mov	r22,r12
1000e7e0:	dc801215 	stw	r18,72(sp)
1000e7e4:	b825883a 	mov	r18,r23
1000e7e8:	00000906 	br	1000e810 <_dtoa_r+0x600>
1000e7ec:	001e6d80 	call	1001e6d8 <__subdf3>
1000e7f0:	a80d883a 	mov	r6,r21
1000e7f4:	980f883a 	mov	r7,r19
1000e7f8:	1009883a 	mov	r4,r2
1000e7fc:	180b883a 	mov	r5,r3
1000e800:	001dd780 	call	1001dd78 <__ledf2>
1000e804:	1003e816 	blt	r2,zero,1000f7a8 <_dtoa_r+0x1598>
1000e808:	b825883a 	mov	r18,r23
1000e80c:	bd83e926 	beq	r23,r22,1000f7b4 <_dtoa_r+0x15a4>
1000e810:	a809883a 	mov	r4,r21
1000e814:	980b883a 	mov	r5,r19
1000e818:	000d883a 	mov	r6,zero
1000e81c:	01d00934 	movhi	r7,16420
1000e820:	001de6c0 	call	1001de6c <__muldf3>
1000e824:	000d883a 	mov	r6,zero
1000e828:	01d00934 	movhi	r7,16420
1000e82c:	8009883a 	mov	r4,r16
1000e830:	880b883a 	mov	r5,r17
1000e834:	102b883a 	mov	r21,r2
1000e838:	1827883a 	mov	r19,r3
1000e83c:	001de6c0 	call	1001de6c <__muldf3>
1000e840:	180b883a 	mov	r5,r3
1000e844:	1009883a 	mov	r4,r2
1000e848:	1821883a 	mov	r16,r3
1000e84c:	1023883a 	mov	r17,r2
1000e850:	001efd40 	call	1001efd4 <__fixdfsi>
1000e854:	1009883a 	mov	r4,r2
1000e858:	1029883a 	mov	r20,r2
1000e85c:	00098e80 	call	100098e8 <__floatsidf>
1000e860:	8809883a 	mov	r4,r17
1000e864:	800b883a 	mov	r5,r16
1000e868:	100d883a 	mov	r6,r2
1000e86c:	180f883a 	mov	r7,r3
1000e870:	001e6d80 	call	1001e6d8 <__subdf3>
1000e874:	a5000c04 	addi	r20,r20,48
1000e878:	a80d883a 	mov	r6,r21
1000e87c:	980f883a 	mov	r7,r19
1000e880:	1009883a 	mov	r4,r2
1000e884:	180b883a 	mov	r5,r3
1000e888:	95000005 	stb	r20,0(r18)
1000e88c:	1021883a 	mov	r16,r2
1000e890:	1823883a 	mov	r17,r3
1000e894:	001dd780 	call	1001dd78 <__ledf2>
1000e898:	bdc00044 	addi	r23,r23,1
1000e89c:	800d883a 	mov	r6,r16
1000e8a0:	880f883a 	mov	r7,r17
1000e8a4:	0009883a 	mov	r4,zero
1000e8a8:	014ffc34 	movhi	r5,16368
1000e8ac:	103fcf0e 	bge	r2,zero,1000e7ec <__alt_data_end+0xf800e7ec>
1000e8b0:	d8c01317 	ldw	r3,76(sp)
1000e8b4:	d8c00515 	stw	r3,20(sp)
1000e8b8:	d9400917 	ldw	r5,36(sp)
1000e8bc:	e009883a 	mov	r4,fp
1000e8c0:	0011cec0 	call	10011cec <_Bfree>
1000e8c4:	d9000517 	ldw	r4,20(sp)
1000e8c8:	d9802317 	ldw	r6,140(sp)
1000e8cc:	d9c02517 	ldw	r7,148(sp)
1000e8d0:	b8000005 	stb	zero,0(r23)
1000e8d4:	20800044 	addi	r2,r4,1
1000e8d8:	30800015 	stw	r2,0(r6)
1000e8dc:	3802aa26 	beq	r7,zero,1000f388 <_dtoa_r+0x1178>
1000e8e0:	3dc00015 	stw	r23,0(r7)
1000e8e4:	d8800717 	ldw	r2,28(sp)
1000e8e8:	003e7906 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000e8ec:	00800434 	movhi	r2,16
1000e8f0:	10bfffc4 	addi	r2,r2,-1
1000e8f4:	88a2703a 	and	r17,r17,r2
1000e8f8:	883e851e 	bne	r17,zero,1000e310 <__alt_data_end+0xf800e310>
1000e8fc:	008400b4 	movhi	r2,4098
1000e900:	108c0b04 	addi	r2,r2,12332
1000e904:	003e8406 	br	1000e318 <__alt_data_end+0xf800e318>
1000e908:	10c00204 	addi	r3,r2,8
1000e90c:	003e8706 	br	1000e32c <__alt_data_end+0xf800e32c>
1000e910:	01400434 	movhi	r5,16
1000e914:	297fffc4 	addi	r5,r5,-1
1000e918:	994a703a 	and	r5,r19,r5
1000e91c:	9009883a 	mov	r4,r18
1000e920:	843f0044 	addi	r16,r16,-1023
1000e924:	294ffc34 	orhi	r5,r5,16368
1000e928:	dd800217 	ldw	r22,8(sp)
1000e92c:	d8001115 	stw	zero,68(sp)
1000e930:	003ea506 	br	1000e3c8 <__alt_data_end+0xf800e3c8>
1000e934:	008400b4 	movhi	r2,4098
1000e938:	108b5704 	addi	r2,r2,11612
1000e93c:	003e6406 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000e940:	e0001115 	stw	zero,68(fp)
1000e944:	000b883a 	mov	r5,zero
1000e948:	e009883a 	mov	r4,fp
1000e94c:	0011c440 	call	10011c44 <_Balloc>
1000e950:	01bfffc4 	movi	r6,-1
1000e954:	01c00044 	movi	r7,1
1000e958:	d8800715 	stw	r2,28(sp)
1000e95c:	d9800c15 	stw	r6,48(sp)
1000e960:	e0801015 	stw	r2,64(fp)
1000e964:	d8000315 	stw	zero,12(sp)
1000e968:	d9c00b15 	stw	r7,44(sp)
1000e96c:	d9800615 	stw	r6,24(sp)
1000e970:	d8002215 	stw	zero,136(sp)
1000e974:	d8800117 	ldw	r2,4(sp)
1000e978:	10008916 	blt	r2,zero,1000eba0 <_dtoa_r+0x990>
1000e97c:	d9000517 	ldw	r4,20(sp)
1000e980:	00c00384 	movi	r3,14
1000e984:	19008616 	blt	r3,r4,1000eba0 <_dtoa_r+0x990>
1000e988:	200490fa 	slli	r2,r4,3
1000e98c:	00c400b4 	movhi	r3,4098
1000e990:	d9802217 	ldw	r6,136(sp)
1000e994:	18cc2904 	addi	r3,r3,12452
1000e998:	1885883a 	add	r2,r3,r2
1000e99c:	14000017 	ldw	r16,0(r2)
1000e9a0:	14400117 	ldw	r17,4(r2)
1000e9a4:	30016316 	blt	r6,zero,1000ef34 <_dtoa_r+0xd24>
1000e9a8:	800d883a 	mov	r6,r16
1000e9ac:	880f883a 	mov	r7,r17
1000e9b0:	9009883a 	mov	r4,r18
1000e9b4:	980b883a 	mov	r5,r19
1000e9b8:	0008f180 	call	10008f18 <__divdf3>
1000e9bc:	180b883a 	mov	r5,r3
1000e9c0:	1009883a 	mov	r4,r2
1000e9c4:	001efd40 	call	1001efd4 <__fixdfsi>
1000e9c8:	1009883a 	mov	r4,r2
1000e9cc:	102b883a 	mov	r21,r2
1000e9d0:	00098e80 	call	100098e8 <__floatsidf>
1000e9d4:	800d883a 	mov	r6,r16
1000e9d8:	880f883a 	mov	r7,r17
1000e9dc:	1009883a 	mov	r4,r2
1000e9e0:	180b883a 	mov	r5,r3
1000e9e4:	001de6c0 	call	1001de6c <__muldf3>
1000e9e8:	100d883a 	mov	r6,r2
1000e9ec:	180f883a 	mov	r7,r3
1000e9f0:	9009883a 	mov	r4,r18
1000e9f4:	980b883a 	mov	r5,r19
1000e9f8:	001e6d80 	call	1001e6d8 <__subdf3>
1000e9fc:	d9c00717 	ldw	r7,28(sp)
1000ea00:	1009883a 	mov	r4,r2
1000ea04:	a8800c04 	addi	r2,r21,48
1000ea08:	38800005 	stb	r2,0(r7)
1000ea0c:	3dc00044 	addi	r23,r7,1
1000ea10:	d9c00617 	ldw	r7,24(sp)
1000ea14:	01800044 	movi	r6,1
1000ea18:	180b883a 	mov	r5,r3
1000ea1c:	2005883a 	mov	r2,r4
1000ea20:	39803826 	beq	r7,r6,1000eb04 <_dtoa_r+0x8f4>
1000ea24:	000d883a 	mov	r6,zero
1000ea28:	01d00934 	movhi	r7,16420
1000ea2c:	001de6c0 	call	1001de6c <__muldf3>
1000ea30:	000d883a 	mov	r6,zero
1000ea34:	000f883a 	mov	r7,zero
1000ea38:	1009883a 	mov	r4,r2
1000ea3c:	180b883a 	mov	r5,r3
1000ea40:	1025883a 	mov	r18,r2
1000ea44:	1827883a 	mov	r19,r3
1000ea48:	001dc140 	call	1001dc14 <__eqdf2>
1000ea4c:	103f9a26 	beq	r2,zero,1000e8b8 <__alt_data_end+0xf800e8b8>
1000ea50:	d9c00617 	ldw	r7,24(sp)
1000ea54:	d8c00717 	ldw	r3,28(sp)
1000ea58:	b829883a 	mov	r20,r23
1000ea5c:	38bfffc4 	addi	r2,r7,-1
1000ea60:	18ad883a 	add	r22,r3,r2
1000ea64:	00000a06 	br	1000ea90 <_dtoa_r+0x880>
1000ea68:	001de6c0 	call	1001de6c <__muldf3>
1000ea6c:	000d883a 	mov	r6,zero
1000ea70:	000f883a 	mov	r7,zero
1000ea74:	1009883a 	mov	r4,r2
1000ea78:	180b883a 	mov	r5,r3
1000ea7c:	1025883a 	mov	r18,r2
1000ea80:	1827883a 	mov	r19,r3
1000ea84:	b829883a 	mov	r20,r23
1000ea88:	001dc140 	call	1001dc14 <__eqdf2>
1000ea8c:	103f8a26 	beq	r2,zero,1000e8b8 <__alt_data_end+0xf800e8b8>
1000ea90:	800d883a 	mov	r6,r16
1000ea94:	880f883a 	mov	r7,r17
1000ea98:	9009883a 	mov	r4,r18
1000ea9c:	980b883a 	mov	r5,r19
1000eaa0:	0008f180 	call	10008f18 <__divdf3>
1000eaa4:	180b883a 	mov	r5,r3
1000eaa8:	1009883a 	mov	r4,r2
1000eaac:	001efd40 	call	1001efd4 <__fixdfsi>
1000eab0:	1009883a 	mov	r4,r2
1000eab4:	102b883a 	mov	r21,r2
1000eab8:	00098e80 	call	100098e8 <__floatsidf>
1000eabc:	800d883a 	mov	r6,r16
1000eac0:	880f883a 	mov	r7,r17
1000eac4:	1009883a 	mov	r4,r2
1000eac8:	180b883a 	mov	r5,r3
1000eacc:	001de6c0 	call	1001de6c <__muldf3>
1000ead0:	100d883a 	mov	r6,r2
1000ead4:	180f883a 	mov	r7,r3
1000ead8:	9009883a 	mov	r4,r18
1000eadc:	980b883a 	mov	r5,r19
1000eae0:	001e6d80 	call	1001e6d8 <__subdf3>
1000eae4:	aa000c04 	addi	r8,r21,48
1000eae8:	a2000005 	stb	r8,0(r20)
1000eaec:	000d883a 	mov	r6,zero
1000eaf0:	01d00934 	movhi	r7,16420
1000eaf4:	1009883a 	mov	r4,r2
1000eaf8:	180b883a 	mov	r5,r3
1000eafc:	a5c00044 	addi	r23,r20,1
1000eb00:	b53fd91e 	bne	r22,r20,1000ea68 <__alt_data_end+0xf800ea68>
1000eb04:	100d883a 	mov	r6,r2
1000eb08:	180f883a 	mov	r7,r3
1000eb0c:	1009883a 	mov	r4,r2
1000eb10:	180b883a 	mov	r5,r3
1000eb14:	001d3680 	call	1001d368 <__adddf3>
1000eb18:	100d883a 	mov	r6,r2
1000eb1c:	180f883a 	mov	r7,r3
1000eb20:	8009883a 	mov	r4,r16
1000eb24:	880b883a 	mov	r5,r17
1000eb28:	1027883a 	mov	r19,r2
1000eb2c:	1825883a 	mov	r18,r3
1000eb30:	001dd780 	call	1001dd78 <__ledf2>
1000eb34:	10000816 	blt	r2,zero,1000eb58 <_dtoa_r+0x948>
1000eb38:	980d883a 	mov	r6,r19
1000eb3c:	900f883a 	mov	r7,r18
1000eb40:	8009883a 	mov	r4,r16
1000eb44:	880b883a 	mov	r5,r17
1000eb48:	001dc140 	call	1001dc14 <__eqdf2>
1000eb4c:	103f5a1e 	bne	r2,zero,1000e8b8 <__alt_data_end+0xf800e8b8>
1000eb50:	ad40004c 	andi	r21,r21,1
1000eb54:	a83f5826 	beq	r21,zero,1000e8b8 <__alt_data_end+0xf800e8b8>
1000eb58:	bd3fffc3 	ldbu	r20,-1(r23)
1000eb5c:	b8bfffc4 	addi	r2,r23,-1
1000eb60:	1007883a 	mov	r3,r2
1000eb64:	01400e44 	movi	r5,57
1000eb68:	d9800717 	ldw	r6,28(sp)
1000eb6c:	00000506 	br	1000eb84 <_dtoa_r+0x974>
1000eb70:	18ffffc4 	addi	r3,r3,-1
1000eb74:	11824726 	beq	r2,r6,1000f494 <_dtoa_r+0x1284>
1000eb78:	1d000003 	ldbu	r20,0(r3)
1000eb7c:	102f883a 	mov	r23,r2
1000eb80:	10bfffc4 	addi	r2,r2,-1
1000eb84:	a1003fcc 	andi	r4,r20,255
1000eb88:	2100201c 	xori	r4,r4,128
1000eb8c:	213fe004 	addi	r4,r4,-128
1000eb90:	217ff726 	beq	r4,r5,1000eb70 <__alt_data_end+0xf800eb70>
1000eb94:	a2000044 	addi	r8,r20,1
1000eb98:	12000005 	stb	r8,0(r2)
1000eb9c:	003f4606 	br	1000e8b8 <__alt_data_end+0xf800e8b8>
1000eba0:	d9000b17 	ldw	r4,44(sp)
1000eba4:	2000c826 	beq	r4,zero,1000eec8 <_dtoa_r+0xcb8>
1000eba8:	d9800317 	ldw	r6,12(sp)
1000ebac:	00c00044 	movi	r3,1
1000ebb0:	1980f90e 	bge	r3,r6,1000ef98 <_dtoa_r+0xd88>
1000ebb4:	d8800617 	ldw	r2,24(sp)
1000ebb8:	d8c00a17 	ldw	r3,40(sp)
1000ebbc:	157fffc4 	addi	r21,r2,-1
1000ebc0:	1d41f316 	blt	r3,r21,1000f390 <_dtoa_r+0x1180>
1000ebc4:	1d6bc83a 	sub	r21,r3,r21
1000ebc8:	d9c00617 	ldw	r7,24(sp)
1000ebcc:	3802aa16 	blt	r7,zero,1000f678 <_dtoa_r+0x1468>
1000ebd0:	dd000817 	ldw	r20,32(sp)
1000ebd4:	d8800617 	ldw	r2,24(sp)
1000ebd8:	d8c00817 	ldw	r3,32(sp)
1000ebdc:	01400044 	movi	r5,1
1000ebe0:	e009883a 	mov	r4,fp
1000ebe4:	1887883a 	add	r3,r3,r2
1000ebe8:	d8c00815 	stw	r3,32(sp)
1000ebec:	b0ad883a 	add	r22,r22,r2
1000ebf0:	00120780 	call	10012078 <__i2b>
1000ebf4:	1023883a 	mov	r17,r2
1000ebf8:	a0000826 	beq	r20,zero,1000ec1c <_dtoa_r+0xa0c>
1000ebfc:	0580070e 	bge	zero,r22,1000ec1c <_dtoa_r+0xa0c>
1000ec00:	a005883a 	mov	r2,r20
1000ec04:	b500b916 	blt	r22,r20,1000eeec <_dtoa_r+0xcdc>
1000ec08:	d9000817 	ldw	r4,32(sp)
1000ec0c:	a0a9c83a 	sub	r20,r20,r2
1000ec10:	b0adc83a 	sub	r22,r22,r2
1000ec14:	2089c83a 	sub	r4,r4,r2
1000ec18:	d9000815 	stw	r4,32(sp)
1000ec1c:	d9800a17 	ldw	r6,40(sp)
1000ec20:	0181810e 	bge	zero,r6,1000f228 <_dtoa_r+0x1018>
1000ec24:	d9c00b17 	ldw	r7,44(sp)
1000ec28:	3800b326 	beq	r7,zero,1000eef8 <_dtoa_r+0xce8>
1000ec2c:	a800b226 	beq	r21,zero,1000eef8 <_dtoa_r+0xce8>
1000ec30:	880b883a 	mov	r5,r17
1000ec34:	a80d883a 	mov	r6,r21
1000ec38:	e009883a 	mov	r4,fp
1000ec3c:	00123400 	call	10012340 <__pow5mult>
1000ec40:	d9800917 	ldw	r6,36(sp)
1000ec44:	100b883a 	mov	r5,r2
1000ec48:	e009883a 	mov	r4,fp
1000ec4c:	1023883a 	mov	r17,r2
1000ec50:	00120b40 	call	100120b4 <__multiply>
1000ec54:	1021883a 	mov	r16,r2
1000ec58:	d8800a17 	ldw	r2,40(sp)
1000ec5c:	d9400917 	ldw	r5,36(sp)
1000ec60:	e009883a 	mov	r4,fp
1000ec64:	1545c83a 	sub	r2,r2,r21
1000ec68:	d8800a15 	stw	r2,40(sp)
1000ec6c:	0011cec0 	call	10011cec <_Bfree>
1000ec70:	d8c00a17 	ldw	r3,40(sp)
1000ec74:	18009f1e 	bne	r3,zero,1000eef4 <_dtoa_r+0xce4>
1000ec78:	05c00044 	movi	r23,1
1000ec7c:	e009883a 	mov	r4,fp
1000ec80:	b80b883a 	mov	r5,r23
1000ec84:	00120780 	call	10012078 <__i2b>
1000ec88:	d9000d17 	ldw	r4,52(sp)
1000ec8c:	102b883a 	mov	r21,r2
1000ec90:	2000ce26 	beq	r4,zero,1000efcc <_dtoa_r+0xdbc>
1000ec94:	200d883a 	mov	r6,r4
1000ec98:	100b883a 	mov	r5,r2
1000ec9c:	e009883a 	mov	r4,fp
1000eca0:	00123400 	call	10012340 <__pow5mult>
1000eca4:	d9800317 	ldw	r6,12(sp)
1000eca8:	102b883a 	mov	r21,r2
1000ecac:	b981810e 	bge	r23,r6,1000f2b4 <_dtoa_r+0x10a4>
1000ecb0:	0027883a 	mov	r19,zero
1000ecb4:	a8800417 	ldw	r2,16(r21)
1000ecb8:	05c00804 	movi	r23,32
1000ecbc:	10800104 	addi	r2,r2,4
1000ecc0:	1085883a 	add	r2,r2,r2
1000ecc4:	1085883a 	add	r2,r2,r2
1000ecc8:	a885883a 	add	r2,r21,r2
1000eccc:	11000017 	ldw	r4,0(r2)
1000ecd0:	0011f600 	call	10011f60 <__hi0bits>
1000ecd4:	b885c83a 	sub	r2,r23,r2
1000ecd8:	1585883a 	add	r2,r2,r22
1000ecdc:	108007cc 	andi	r2,r2,31
1000ece0:	1000b326 	beq	r2,zero,1000efb0 <_dtoa_r+0xda0>
1000ece4:	00c00804 	movi	r3,32
1000ece8:	1887c83a 	sub	r3,r3,r2
1000ecec:	01000104 	movi	r4,4
1000ecf0:	20c2cd0e 	bge	r4,r3,1000f828 <_dtoa_r+0x1618>
1000ecf4:	00c00704 	movi	r3,28
1000ecf8:	1885c83a 	sub	r2,r3,r2
1000ecfc:	d8c00817 	ldw	r3,32(sp)
1000ed00:	a0a9883a 	add	r20,r20,r2
1000ed04:	b0ad883a 	add	r22,r22,r2
1000ed08:	1887883a 	add	r3,r3,r2
1000ed0c:	d8c00815 	stw	r3,32(sp)
1000ed10:	d9800817 	ldw	r6,32(sp)
1000ed14:	0180040e 	bge	zero,r6,1000ed28 <_dtoa_r+0xb18>
1000ed18:	800b883a 	mov	r5,r16
1000ed1c:	e009883a 	mov	r4,fp
1000ed20:	00124800 	call	10012480 <__lshift>
1000ed24:	1021883a 	mov	r16,r2
1000ed28:	0580050e 	bge	zero,r22,1000ed40 <_dtoa_r+0xb30>
1000ed2c:	a80b883a 	mov	r5,r21
1000ed30:	b00d883a 	mov	r6,r22
1000ed34:	e009883a 	mov	r4,fp
1000ed38:	00124800 	call	10012480 <__lshift>
1000ed3c:	102b883a 	mov	r21,r2
1000ed40:	d9c00e17 	ldw	r7,56(sp)
1000ed44:	3801211e 	bne	r7,zero,1000f1cc <_dtoa_r+0xfbc>
1000ed48:	d9800617 	ldw	r6,24(sp)
1000ed4c:	0181380e 	bge	zero,r6,1000f230 <_dtoa_r+0x1020>
1000ed50:	d8c00b17 	ldw	r3,44(sp)
1000ed54:	1800ab1e 	bne	r3,zero,1000f004 <_dtoa_r+0xdf4>
1000ed58:	dc800717 	ldw	r18,28(sp)
1000ed5c:	dcc00617 	ldw	r19,24(sp)
1000ed60:	9029883a 	mov	r20,r18
1000ed64:	00000206 	br	1000ed70 <_dtoa_r+0xb60>
1000ed68:	0011d140 	call	10011d14 <__multadd>
1000ed6c:	1021883a 	mov	r16,r2
1000ed70:	a80b883a 	mov	r5,r21
1000ed74:	8009883a 	mov	r4,r16
1000ed78:	000dfe80 	call	1000dfe8 <quorem>
1000ed7c:	10800c04 	addi	r2,r2,48
1000ed80:	90800005 	stb	r2,0(r18)
1000ed84:	94800044 	addi	r18,r18,1
1000ed88:	9507c83a 	sub	r3,r18,r20
1000ed8c:	000f883a 	mov	r7,zero
1000ed90:	01800284 	movi	r6,10
1000ed94:	800b883a 	mov	r5,r16
1000ed98:	e009883a 	mov	r4,fp
1000ed9c:	1cfff216 	blt	r3,r19,1000ed68 <__alt_data_end+0xf800ed68>
1000eda0:	1011883a 	mov	r8,r2
1000eda4:	d8800617 	ldw	r2,24(sp)
1000eda8:	0082370e 	bge	zero,r2,1000f688 <_dtoa_r+0x1478>
1000edac:	d9000717 	ldw	r4,28(sp)
1000edb0:	0025883a 	mov	r18,zero
1000edb4:	20af883a 	add	r23,r4,r2
1000edb8:	01800044 	movi	r6,1
1000edbc:	800b883a 	mov	r5,r16
1000edc0:	e009883a 	mov	r4,fp
1000edc4:	da001715 	stw	r8,92(sp)
1000edc8:	00124800 	call	10012480 <__lshift>
1000edcc:	a80b883a 	mov	r5,r21
1000edd0:	1009883a 	mov	r4,r2
1000edd4:	d8800915 	stw	r2,36(sp)
1000edd8:	00125c80 	call	100125c8 <__mcmp>
1000eddc:	da001717 	ldw	r8,92(sp)
1000ede0:	0081800e 	bge	zero,r2,1000f3e4 <_dtoa_r+0x11d4>
1000ede4:	b93fffc3 	ldbu	r4,-1(r23)
1000ede8:	b8bfffc4 	addi	r2,r23,-1
1000edec:	1007883a 	mov	r3,r2
1000edf0:	01800e44 	movi	r6,57
1000edf4:	d9c00717 	ldw	r7,28(sp)
1000edf8:	00000506 	br	1000ee10 <_dtoa_r+0xc00>
1000edfc:	18ffffc4 	addi	r3,r3,-1
1000ee00:	11c12326 	beq	r2,r7,1000f290 <_dtoa_r+0x1080>
1000ee04:	19000003 	ldbu	r4,0(r3)
1000ee08:	102f883a 	mov	r23,r2
1000ee0c:	10bfffc4 	addi	r2,r2,-1
1000ee10:	21403fcc 	andi	r5,r4,255
1000ee14:	2940201c 	xori	r5,r5,128
1000ee18:	297fe004 	addi	r5,r5,-128
1000ee1c:	29bff726 	beq	r5,r6,1000edfc <__alt_data_end+0xf800edfc>
1000ee20:	21000044 	addi	r4,r4,1
1000ee24:	11000005 	stb	r4,0(r2)
1000ee28:	a80b883a 	mov	r5,r21
1000ee2c:	e009883a 	mov	r4,fp
1000ee30:	0011cec0 	call	10011cec <_Bfree>
1000ee34:	883ea026 	beq	r17,zero,1000e8b8 <__alt_data_end+0xf800e8b8>
1000ee38:	90000426 	beq	r18,zero,1000ee4c <_dtoa_r+0xc3c>
1000ee3c:	94400326 	beq	r18,r17,1000ee4c <_dtoa_r+0xc3c>
1000ee40:	900b883a 	mov	r5,r18
1000ee44:	e009883a 	mov	r4,fp
1000ee48:	0011cec0 	call	10011cec <_Bfree>
1000ee4c:	880b883a 	mov	r5,r17
1000ee50:	e009883a 	mov	r4,fp
1000ee54:	0011cec0 	call	10011cec <_Bfree>
1000ee58:	003e9706 	br	1000e8b8 <__alt_data_end+0xf800e8b8>
1000ee5c:	01800044 	movi	r6,1
1000ee60:	d9800e15 	stw	r6,56(sp)
1000ee64:	003d9606 	br	1000e4c0 <__alt_data_end+0xf800e4c0>
1000ee68:	d8800817 	ldw	r2,32(sp)
1000ee6c:	d8c00517 	ldw	r3,20(sp)
1000ee70:	d8000d15 	stw	zero,52(sp)
1000ee74:	10c5c83a 	sub	r2,r2,r3
1000ee78:	00c9c83a 	sub	r4,zero,r3
1000ee7c:	d8800815 	stw	r2,32(sp)
1000ee80:	d9000a15 	stw	r4,40(sp)
1000ee84:	003d9706 	br	1000e4e4 <__alt_data_end+0xf800e4e4>
1000ee88:	05adc83a 	sub	r22,zero,r22
1000ee8c:	dd800815 	stw	r22,32(sp)
1000ee90:	002d883a 	mov	r22,zero
1000ee94:	003d8e06 	br	1000e4d0 <__alt_data_end+0xf800e4d0>
1000ee98:	d9000517 	ldw	r4,20(sp)
1000ee9c:	00098e80 	call	100098e8 <__floatsidf>
1000eea0:	100d883a 	mov	r6,r2
1000eea4:	180f883a 	mov	r7,r3
1000eea8:	a009883a 	mov	r4,r20
1000eeac:	880b883a 	mov	r5,r17
1000eeb0:	001dc140 	call	1001dc14 <__eqdf2>
1000eeb4:	103d7126 	beq	r2,zero,1000e47c <__alt_data_end+0xf800e47c>
1000eeb8:	d9c00517 	ldw	r7,20(sp)
1000eebc:	39ffffc4 	addi	r7,r7,-1
1000eec0:	d9c00515 	stw	r7,20(sp)
1000eec4:	003d6d06 	br	1000e47c <__alt_data_end+0xf800e47c>
1000eec8:	dd400a17 	ldw	r21,40(sp)
1000eecc:	dd000817 	ldw	r20,32(sp)
1000eed0:	0023883a 	mov	r17,zero
1000eed4:	003f4806 	br	1000ebf8 <__alt_data_end+0xf800ebf8>
1000eed8:	10e3c83a 	sub	r17,r2,r3
1000eedc:	9448983a 	sll	r4,r18,r17
1000eee0:	003d3206 	br	1000e3ac <__alt_data_end+0xf800e3ac>
1000eee4:	d8000e15 	stw	zero,56(sp)
1000eee8:	003d7506 	br	1000e4c0 <__alt_data_end+0xf800e4c0>
1000eeec:	b005883a 	mov	r2,r22
1000eef0:	003f4506 	br	1000ec08 <__alt_data_end+0xf800ec08>
1000eef4:	dc000915 	stw	r16,36(sp)
1000eef8:	d9800a17 	ldw	r6,40(sp)
1000eefc:	d9400917 	ldw	r5,36(sp)
1000ef00:	e009883a 	mov	r4,fp
1000ef04:	00123400 	call	10012340 <__pow5mult>
1000ef08:	1021883a 	mov	r16,r2
1000ef0c:	003f5a06 	br	1000ec78 <__alt_data_end+0xf800ec78>
1000ef10:	01c00044 	movi	r7,1
1000ef14:	d9c00b15 	stw	r7,44(sp)
1000ef18:	d8802217 	ldw	r2,136(sp)
1000ef1c:	0081280e 	bge	zero,r2,1000f3c0 <_dtoa_r+0x11b0>
1000ef20:	100d883a 	mov	r6,r2
1000ef24:	1021883a 	mov	r16,r2
1000ef28:	d8800c15 	stw	r2,48(sp)
1000ef2c:	d8800615 	stw	r2,24(sp)
1000ef30:	003d8806 	br	1000e554 <__alt_data_end+0xf800e554>
1000ef34:	d8800617 	ldw	r2,24(sp)
1000ef38:	00be9b16 	blt	zero,r2,1000e9a8 <__alt_data_end+0xf800e9a8>
1000ef3c:	10010f1e 	bne	r2,zero,1000f37c <_dtoa_r+0x116c>
1000ef40:	880b883a 	mov	r5,r17
1000ef44:	000d883a 	mov	r6,zero
1000ef48:	01d00534 	movhi	r7,16404
1000ef4c:	8009883a 	mov	r4,r16
1000ef50:	001de6c0 	call	1001de6c <__muldf3>
1000ef54:	900d883a 	mov	r6,r18
1000ef58:	980f883a 	mov	r7,r19
1000ef5c:	1009883a 	mov	r4,r2
1000ef60:	180b883a 	mov	r5,r3
1000ef64:	001dc9c0 	call	1001dc9c <__gedf2>
1000ef68:	002b883a 	mov	r21,zero
1000ef6c:	0023883a 	mov	r17,zero
1000ef70:	1000bf16 	blt	r2,zero,1000f270 <_dtoa_r+0x1060>
1000ef74:	d9802217 	ldw	r6,136(sp)
1000ef78:	ddc00717 	ldw	r23,28(sp)
1000ef7c:	018c303a 	nor	r6,zero,r6
1000ef80:	d9800515 	stw	r6,20(sp)
1000ef84:	a80b883a 	mov	r5,r21
1000ef88:	e009883a 	mov	r4,fp
1000ef8c:	0011cec0 	call	10011cec <_Bfree>
1000ef90:	883e4926 	beq	r17,zero,1000e8b8 <__alt_data_end+0xf800e8b8>
1000ef94:	003fad06 	br	1000ee4c <__alt_data_end+0xf800ee4c>
1000ef98:	d9c01117 	ldw	r7,68(sp)
1000ef9c:	3801bc26 	beq	r7,zero,1000f690 <_dtoa_r+0x1480>
1000efa0:	10810cc4 	addi	r2,r2,1075
1000efa4:	dd400a17 	ldw	r21,40(sp)
1000efa8:	dd000817 	ldw	r20,32(sp)
1000efac:	003f0a06 	br	1000ebd8 <__alt_data_end+0xf800ebd8>
1000efb0:	00800704 	movi	r2,28
1000efb4:	d9000817 	ldw	r4,32(sp)
1000efb8:	a0a9883a 	add	r20,r20,r2
1000efbc:	b0ad883a 	add	r22,r22,r2
1000efc0:	2089883a 	add	r4,r4,r2
1000efc4:	d9000815 	stw	r4,32(sp)
1000efc8:	003f5106 	br	1000ed10 <__alt_data_end+0xf800ed10>
1000efcc:	d8c00317 	ldw	r3,12(sp)
1000efd0:	b8c1fc0e 	bge	r23,r3,1000f7c4 <_dtoa_r+0x15b4>
1000efd4:	0027883a 	mov	r19,zero
1000efd8:	b805883a 	mov	r2,r23
1000efdc:	003f3e06 	br	1000ecd8 <__alt_data_end+0xf800ecd8>
1000efe0:	880b883a 	mov	r5,r17
1000efe4:	e009883a 	mov	r4,fp
1000efe8:	000f883a 	mov	r7,zero
1000efec:	01800284 	movi	r6,10
1000eff0:	0011d140 	call	10011d14 <__multadd>
1000eff4:	d9000c17 	ldw	r4,48(sp)
1000eff8:	1023883a 	mov	r17,r2
1000effc:	0102040e 	bge	zero,r4,1000f810 <_dtoa_r+0x1600>
1000f000:	d9000615 	stw	r4,24(sp)
1000f004:	0500050e 	bge	zero,r20,1000f01c <_dtoa_r+0xe0c>
1000f008:	880b883a 	mov	r5,r17
1000f00c:	a00d883a 	mov	r6,r20
1000f010:	e009883a 	mov	r4,fp
1000f014:	00124800 	call	10012480 <__lshift>
1000f018:	1023883a 	mov	r17,r2
1000f01c:	9801241e 	bne	r19,zero,1000f4b0 <_dtoa_r+0x12a0>
1000f020:	8829883a 	mov	r20,r17
1000f024:	d9000617 	ldw	r4,24(sp)
1000f028:	dcc00717 	ldw	r19,28(sp)
1000f02c:	9480004c 	andi	r18,r18,1
1000f030:	20bfffc4 	addi	r2,r4,-1
1000f034:	9885883a 	add	r2,r19,r2
1000f038:	d8800415 	stw	r2,16(sp)
1000f03c:	dc800615 	stw	r18,24(sp)
1000f040:	a80b883a 	mov	r5,r21
1000f044:	8009883a 	mov	r4,r16
1000f048:	000dfe80 	call	1000dfe8 <quorem>
1000f04c:	880b883a 	mov	r5,r17
1000f050:	8009883a 	mov	r4,r16
1000f054:	102f883a 	mov	r23,r2
1000f058:	00125c80 	call	100125c8 <__mcmp>
1000f05c:	a80b883a 	mov	r5,r21
1000f060:	a00d883a 	mov	r6,r20
1000f064:	e009883a 	mov	r4,fp
1000f068:	102d883a 	mov	r22,r2
1000f06c:	00126280 	call	10012628 <__mdiff>
1000f070:	1007883a 	mov	r3,r2
1000f074:	10800317 	ldw	r2,12(r2)
1000f078:	bc800c04 	addi	r18,r23,48
1000f07c:	180b883a 	mov	r5,r3
1000f080:	10004e1e 	bne	r2,zero,1000f1bc <_dtoa_r+0xfac>
1000f084:	8009883a 	mov	r4,r16
1000f088:	d8c01615 	stw	r3,88(sp)
1000f08c:	00125c80 	call	100125c8 <__mcmp>
1000f090:	d8c01617 	ldw	r3,88(sp)
1000f094:	e009883a 	mov	r4,fp
1000f098:	d8801615 	stw	r2,88(sp)
1000f09c:	180b883a 	mov	r5,r3
1000f0a0:	0011cec0 	call	10011cec <_Bfree>
1000f0a4:	d8801617 	ldw	r2,88(sp)
1000f0a8:	1000041e 	bne	r2,zero,1000f0bc <_dtoa_r+0xeac>
1000f0ac:	d9800317 	ldw	r6,12(sp)
1000f0b0:	3000021e 	bne	r6,zero,1000f0bc <_dtoa_r+0xeac>
1000f0b4:	d8c00617 	ldw	r3,24(sp)
1000f0b8:	18003726 	beq	r3,zero,1000f198 <_dtoa_r+0xf88>
1000f0bc:	b0002016 	blt	r22,zero,1000f140 <_dtoa_r+0xf30>
1000f0c0:	b000041e 	bne	r22,zero,1000f0d4 <_dtoa_r+0xec4>
1000f0c4:	d9000317 	ldw	r4,12(sp)
1000f0c8:	2000021e 	bne	r4,zero,1000f0d4 <_dtoa_r+0xec4>
1000f0cc:	d8c00617 	ldw	r3,24(sp)
1000f0d0:	18001b26 	beq	r3,zero,1000f140 <_dtoa_r+0xf30>
1000f0d4:	00810716 	blt	zero,r2,1000f4f4 <_dtoa_r+0x12e4>
1000f0d8:	d8c00417 	ldw	r3,16(sp)
1000f0dc:	9d800044 	addi	r22,r19,1
1000f0e0:	9c800005 	stb	r18,0(r19)
1000f0e4:	b02f883a 	mov	r23,r22
1000f0e8:	98c10626 	beq	r19,r3,1000f504 <_dtoa_r+0x12f4>
1000f0ec:	800b883a 	mov	r5,r16
1000f0f0:	000f883a 	mov	r7,zero
1000f0f4:	01800284 	movi	r6,10
1000f0f8:	e009883a 	mov	r4,fp
1000f0fc:	0011d140 	call	10011d14 <__multadd>
1000f100:	1021883a 	mov	r16,r2
1000f104:	000f883a 	mov	r7,zero
1000f108:	01800284 	movi	r6,10
1000f10c:	880b883a 	mov	r5,r17
1000f110:	e009883a 	mov	r4,fp
1000f114:	8d002526 	beq	r17,r20,1000f1ac <_dtoa_r+0xf9c>
1000f118:	0011d140 	call	10011d14 <__multadd>
1000f11c:	a00b883a 	mov	r5,r20
1000f120:	000f883a 	mov	r7,zero
1000f124:	01800284 	movi	r6,10
1000f128:	e009883a 	mov	r4,fp
1000f12c:	1023883a 	mov	r17,r2
1000f130:	0011d140 	call	10011d14 <__multadd>
1000f134:	1029883a 	mov	r20,r2
1000f138:	b027883a 	mov	r19,r22
1000f13c:	003fc006 	br	1000f040 <__alt_data_end+0xf800f040>
1000f140:	9011883a 	mov	r8,r18
1000f144:	00800e0e 	bge	zero,r2,1000f180 <_dtoa_r+0xf70>
1000f148:	800b883a 	mov	r5,r16
1000f14c:	01800044 	movi	r6,1
1000f150:	e009883a 	mov	r4,fp
1000f154:	da001715 	stw	r8,92(sp)
1000f158:	00124800 	call	10012480 <__lshift>
1000f15c:	a80b883a 	mov	r5,r21
1000f160:	1009883a 	mov	r4,r2
1000f164:	1021883a 	mov	r16,r2
1000f168:	00125c80 	call	100125c8 <__mcmp>
1000f16c:	da001717 	ldw	r8,92(sp)
1000f170:	0081960e 	bge	zero,r2,1000f7cc <_dtoa_r+0x15bc>
1000f174:	00800e44 	movi	r2,57
1000f178:	40817026 	beq	r8,r2,1000f73c <_dtoa_r+0x152c>
1000f17c:	ba000c44 	addi	r8,r23,49
1000f180:	8825883a 	mov	r18,r17
1000f184:	9dc00044 	addi	r23,r19,1
1000f188:	9a000005 	stb	r8,0(r19)
1000f18c:	a023883a 	mov	r17,r20
1000f190:	dc000915 	stw	r16,36(sp)
1000f194:	003f2406 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f198:	00800e44 	movi	r2,57
1000f19c:	9011883a 	mov	r8,r18
1000f1a0:	90816626 	beq	r18,r2,1000f73c <_dtoa_r+0x152c>
1000f1a4:	05bff516 	blt	zero,r22,1000f17c <__alt_data_end+0xf800f17c>
1000f1a8:	003ff506 	br	1000f180 <__alt_data_end+0xf800f180>
1000f1ac:	0011d140 	call	10011d14 <__multadd>
1000f1b0:	1023883a 	mov	r17,r2
1000f1b4:	1029883a 	mov	r20,r2
1000f1b8:	003fdf06 	br	1000f138 <__alt_data_end+0xf800f138>
1000f1bc:	e009883a 	mov	r4,fp
1000f1c0:	0011cec0 	call	10011cec <_Bfree>
1000f1c4:	00800044 	movi	r2,1
1000f1c8:	003fbc06 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000f1cc:	a80b883a 	mov	r5,r21
1000f1d0:	8009883a 	mov	r4,r16
1000f1d4:	00125c80 	call	100125c8 <__mcmp>
1000f1d8:	103edb0e 	bge	r2,zero,1000ed48 <__alt_data_end+0xf800ed48>
1000f1dc:	800b883a 	mov	r5,r16
1000f1e0:	000f883a 	mov	r7,zero
1000f1e4:	01800284 	movi	r6,10
1000f1e8:	e009883a 	mov	r4,fp
1000f1ec:	0011d140 	call	10011d14 <__multadd>
1000f1f0:	1021883a 	mov	r16,r2
1000f1f4:	d8800517 	ldw	r2,20(sp)
1000f1f8:	d8c00b17 	ldw	r3,44(sp)
1000f1fc:	10bfffc4 	addi	r2,r2,-1
1000f200:	d8800515 	stw	r2,20(sp)
1000f204:	183f761e 	bne	r3,zero,1000efe0 <__alt_data_end+0xf800efe0>
1000f208:	d9000c17 	ldw	r4,48(sp)
1000f20c:	0101730e 	bge	zero,r4,1000f7dc <_dtoa_r+0x15cc>
1000f210:	d9000615 	stw	r4,24(sp)
1000f214:	003ed006 	br	1000ed58 <__alt_data_end+0xf800ed58>
1000f218:	00800084 	movi	r2,2
1000f21c:	3081861e 	bne	r6,r2,1000f838 <_dtoa_r+0x1628>
1000f220:	d8000b15 	stw	zero,44(sp)
1000f224:	003f3c06 	br	1000ef18 <__alt_data_end+0xf800ef18>
1000f228:	dc000917 	ldw	r16,36(sp)
1000f22c:	003e9206 	br	1000ec78 <__alt_data_end+0xf800ec78>
1000f230:	d9c00317 	ldw	r7,12(sp)
1000f234:	00800084 	movi	r2,2
1000f238:	11fec50e 	bge	r2,r7,1000ed50 <__alt_data_end+0xf800ed50>
1000f23c:	d9000617 	ldw	r4,24(sp)
1000f240:	20013c1e 	bne	r4,zero,1000f734 <_dtoa_r+0x1524>
1000f244:	a80b883a 	mov	r5,r21
1000f248:	000f883a 	mov	r7,zero
1000f24c:	01800144 	movi	r6,5
1000f250:	e009883a 	mov	r4,fp
1000f254:	0011d140 	call	10011d14 <__multadd>
1000f258:	100b883a 	mov	r5,r2
1000f25c:	8009883a 	mov	r4,r16
1000f260:	102b883a 	mov	r21,r2
1000f264:	00125c80 	call	100125c8 <__mcmp>
1000f268:	dc000915 	stw	r16,36(sp)
1000f26c:	00bf410e 	bge	zero,r2,1000ef74 <__alt_data_end+0xf800ef74>
1000f270:	d9c00717 	ldw	r7,28(sp)
1000f274:	00800c44 	movi	r2,49
1000f278:	38800005 	stb	r2,0(r7)
1000f27c:	d8800517 	ldw	r2,20(sp)
1000f280:	3dc00044 	addi	r23,r7,1
1000f284:	10800044 	addi	r2,r2,1
1000f288:	d8800515 	stw	r2,20(sp)
1000f28c:	003f3d06 	br	1000ef84 <__alt_data_end+0xf800ef84>
1000f290:	d9800517 	ldw	r6,20(sp)
1000f294:	d9c00717 	ldw	r7,28(sp)
1000f298:	00800c44 	movi	r2,49
1000f29c:	31800044 	addi	r6,r6,1
1000f2a0:	d9800515 	stw	r6,20(sp)
1000f2a4:	38800005 	stb	r2,0(r7)
1000f2a8:	003edf06 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f2ac:	d8000b15 	stw	zero,44(sp)
1000f2b0:	003c9f06 	br	1000e530 <__alt_data_end+0xf800e530>
1000f2b4:	903e7e1e 	bne	r18,zero,1000ecb0 <__alt_data_end+0xf800ecb0>
1000f2b8:	00800434 	movhi	r2,16
1000f2bc:	10bfffc4 	addi	r2,r2,-1
1000f2c0:	9884703a 	and	r2,r19,r2
1000f2c4:	1000ea1e 	bne	r2,zero,1000f670 <_dtoa_r+0x1460>
1000f2c8:	9cdffc2c 	andhi	r19,r19,32752
1000f2cc:	9800e826 	beq	r19,zero,1000f670 <_dtoa_r+0x1460>
1000f2d0:	d9c00817 	ldw	r7,32(sp)
1000f2d4:	b5800044 	addi	r22,r22,1
1000f2d8:	04c00044 	movi	r19,1
1000f2dc:	39c00044 	addi	r7,r7,1
1000f2e0:	d9c00815 	stw	r7,32(sp)
1000f2e4:	d8800d17 	ldw	r2,52(sp)
1000f2e8:	103e721e 	bne	r2,zero,1000ecb4 <__alt_data_end+0xf800ecb4>
1000f2ec:	00800044 	movi	r2,1
1000f2f0:	003e7906 	br	1000ecd8 <__alt_data_end+0xf800ecd8>
1000f2f4:	8009883a 	mov	r4,r16
1000f2f8:	00098e80 	call	100098e8 <__floatsidf>
1000f2fc:	d9800f17 	ldw	r6,60(sp)
1000f300:	d9c01017 	ldw	r7,64(sp)
1000f304:	1009883a 	mov	r4,r2
1000f308:	180b883a 	mov	r5,r3
1000f30c:	001de6c0 	call	1001de6c <__muldf3>
1000f310:	000d883a 	mov	r6,zero
1000f314:	01d00734 	movhi	r7,16412
1000f318:	1009883a 	mov	r4,r2
1000f31c:	180b883a 	mov	r5,r3
1000f320:	001d3680 	call	1001d368 <__adddf3>
1000f324:	047f3034 	movhi	r17,64704
1000f328:	1021883a 	mov	r16,r2
1000f32c:	1c63883a 	add	r17,r3,r17
1000f330:	d9000f17 	ldw	r4,60(sp)
1000f334:	d9401017 	ldw	r5,64(sp)
1000f338:	000d883a 	mov	r6,zero
1000f33c:	01d00534 	movhi	r7,16404
1000f340:	001e6d80 	call	1001e6d8 <__subdf3>
1000f344:	800d883a 	mov	r6,r16
1000f348:	880f883a 	mov	r7,r17
1000f34c:	1009883a 	mov	r4,r2
1000f350:	180b883a 	mov	r5,r3
1000f354:	102b883a 	mov	r21,r2
1000f358:	1829883a 	mov	r20,r3
1000f35c:	001dc9c0 	call	1001dc9c <__gedf2>
1000f360:	00806c16 	blt	zero,r2,1000f514 <_dtoa_r+0x1304>
1000f364:	89e0003c 	xorhi	r7,r17,32768
1000f368:	800d883a 	mov	r6,r16
1000f36c:	a809883a 	mov	r4,r21
1000f370:	a00b883a 	mov	r5,r20
1000f374:	001dd780 	call	1001dd78 <__ledf2>
1000f378:	103d7e0e 	bge	r2,zero,1000e974 <__alt_data_end+0xf800e974>
1000f37c:	002b883a 	mov	r21,zero
1000f380:	0023883a 	mov	r17,zero
1000f384:	003efb06 	br	1000ef74 <__alt_data_end+0xf800ef74>
1000f388:	d8800717 	ldw	r2,28(sp)
1000f38c:	003bd006 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000f390:	d9000a17 	ldw	r4,40(sp)
1000f394:	d9800d17 	ldw	r6,52(sp)
1000f398:	dd400a15 	stw	r21,40(sp)
1000f39c:	a905c83a 	sub	r2,r21,r4
1000f3a0:	308d883a 	add	r6,r6,r2
1000f3a4:	d9800d15 	stw	r6,52(sp)
1000f3a8:	002b883a 	mov	r21,zero
1000f3ac:	003e0606 	br	1000ebc8 <__alt_data_end+0xf800ebc8>
1000f3b0:	9023883a 	mov	r17,r18
1000f3b4:	9829883a 	mov	r20,r19
1000f3b8:	04000084 	movi	r16,2
1000f3bc:	003c9206 	br	1000e608 <__alt_data_end+0xf800e608>
1000f3c0:	04000044 	movi	r16,1
1000f3c4:	dc000c15 	stw	r16,48(sp)
1000f3c8:	dc000615 	stw	r16,24(sp)
1000f3cc:	dc002215 	stw	r16,136(sp)
1000f3d0:	e0001115 	stw	zero,68(fp)
1000f3d4:	000b883a 	mov	r5,zero
1000f3d8:	003c6906 	br	1000e580 <__alt_data_end+0xf800e580>
1000f3dc:	3021883a 	mov	r16,r6
1000f3e0:	003ffb06 	br	1000f3d0 <__alt_data_end+0xf800f3d0>
1000f3e4:	1000021e 	bne	r2,zero,1000f3f0 <_dtoa_r+0x11e0>
1000f3e8:	4200004c 	andi	r8,r8,1
1000f3ec:	403e7d1e 	bne	r8,zero,1000ede4 <__alt_data_end+0xf800ede4>
1000f3f0:	01000c04 	movi	r4,48
1000f3f4:	00000106 	br	1000f3fc <_dtoa_r+0x11ec>
1000f3f8:	102f883a 	mov	r23,r2
1000f3fc:	b8bfffc4 	addi	r2,r23,-1
1000f400:	10c00007 	ldb	r3,0(r2)
1000f404:	193ffc26 	beq	r3,r4,1000f3f8 <__alt_data_end+0xf800f3f8>
1000f408:	003e8706 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f40c:	d8800517 	ldw	r2,20(sp)
1000f410:	00a3c83a 	sub	r17,zero,r2
1000f414:	8800a426 	beq	r17,zero,1000f6a8 <_dtoa_r+0x1498>
1000f418:	888003cc 	andi	r2,r17,15
1000f41c:	100490fa 	slli	r2,r2,3
1000f420:	00c400b4 	movhi	r3,4098
1000f424:	18cc2904 	addi	r3,r3,12452
1000f428:	1885883a 	add	r2,r3,r2
1000f42c:	11800017 	ldw	r6,0(r2)
1000f430:	11c00117 	ldw	r7,4(r2)
1000f434:	9009883a 	mov	r4,r18
1000f438:	980b883a 	mov	r5,r19
1000f43c:	8823d13a 	srai	r17,r17,4
1000f440:	001de6c0 	call	1001de6c <__muldf3>
1000f444:	d8800f15 	stw	r2,60(sp)
1000f448:	d8c01015 	stw	r3,64(sp)
1000f44c:	8800e826 	beq	r17,zero,1000f7f0 <_dtoa_r+0x15e0>
1000f450:	050400b4 	movhi	r20,4098
1000f454:	a50c1f04 	addi	r20,r20,12412
1000f458:	04000084 	movi	r16,2
1000f45c:	8980004c 	andi	r6,r17,1
1000f460:	1009883a 	mov	r4,r2
1000f464:	8823d07a 	srai	r17,r17,1
1000f468:	180b883a 	mov	r5,r3
1000f46c:	30000426 	beq	r6,zero,1000f480 <_dtoa_r+0x1270>
1000f470:	a1800017 	ldw	r6,0(r20)
1000f474:	a1c00117 	ldw	r7,4(r20)
1000f478:	84000044 	addi	r16,r16,1
1000f47c:	001de6c0 	call	1001de6c <__muldf3>
1000f480:	a5000204 	addi	r20,r20,8
1000f484:	883ff51e 	bne	r17,zero,1000f45c <__alt_data_end+0xf800f45c>
1000f488:	d8800f15 	stw	r2,60(sp)
1000f48c:	d8c01015 	stw	r3,64(sp)
1000f490:	003c7606 	br	1000e66c <__alt_data_end+0xf800e66c>
1000f494:	00c00c04 	movi	r3,48
1000f498:	10c00005 	stb	r3,0(r2)
1000f49c:	d8c00517 	ldw	r3,20(sp)
1000f4a0:	bd3fffc3 	ldbu	r20,-1(r23)
1000f4a4:	18c00044 	addi	r3,r3,1
1000f4a8:	d8c00515 	stw	r3,20(sp)
1000f4ac:	003db906 	br	1000eb94 <__alt_data_end+0xf800eb94>
1000f4b0:	89400117 	ldw	r5,4(r17)
1000f4b4:	e009883a 	mov	r4,fp
1000f4b8:	0011c440 	call	10011c44 <_Balloc>
1000f4bc:	89800417 	ldw	r6,16(r17)
1000f4c0:	89400304 	addi	r5,r17,12
1000f4c4:	11000304 	addi	r4,r2,12
1000f4c8:	31800084 	addi	r6,r6,2
1000f4cc:	318d883a 	add	r6,r6,r6
1000f4d0:	318d883a 	add	r6,r6,r6
1000f4d4:	1027883a 	mov	r19,r2
1000f4d8:	0009cd00 	call	10009cd0 <memcpy>
1000f4dc:	01800044 	movi	r6,1
1000f4e0:	980b883a 	mov	r5,r19
1000f4e4:	e009883a 	mov	r4,fp
1000f4e8:	00124800 	call	10012480 <__lshift>
1000f4ec:	1029883a 	mov	r20,r2
1000f4f0:	003ecc06 	br	1000f024 <__alt_data_end+0xf800f024>
1000f4f4:	00800e44 	movi	r2,57
1000f4f8:	90809026 	beq	r18,r2,1000f73c <_dtoa_r+0x152c>
1000f4fc:	92000044 	addi	r8,r18,1
1000f500:	003f1f06 	br	1000f180 <__alt_data_end+0xf800f180>
1000f504:	9011883a 	mov	r8,r18
1000f508:	8825883a 	mov	r18,r17
1000f50c:	a023883a 	mov	r17,r20
1000f510:	003e2906 	br	1000edb8 <__alt_data_end+0xf800edb8>
1000f514:	002b883a 	mov	r21,zero
1000f518:	0023883a 	mov	r17,zero
1000f51c:	003f5406 	br	1000f270 <__alt_data_end+0xf800f270>
1000f520:	61bfffc4 	addi	r6,r12,-1
1000f524:	300490fa 	slli	r2,r6,3
1000f528:	00c400b4 	movhi	r3,4098
1000f52c:	18cc2904 	addi	r3,r3,12452
1000f530:	1885883a 	add	r2,r3,r2
1000f534:	11000017 	ldw	r4,0(r2)
1000f538:	11400117 	ldw	r5,4(r2)
1000f53c:	d8800717 	ldw	r2,28(sp)
1000f540:	880f883a 	mov	r7,r17
1000f544:	d9801215 	stw	r6,72(sp)
1000f548:	800d883a 	mov	r6,r16
1000f54c:	db001615 	stw	r12,88(sp)
1000f550:	15c00044 	addi	r23,r2,1
1000f554:	001de6c0 	call	1001de6c <__muldf3>
1000f558:	d9401017 	ldw	r5,64(sp)
1000f55c:	d9000f17 	ldw	r4,60(sp)
1000f560:	d8c01515 	stw	r3,84(sp)
1000f564:	d8801415 	stw	r2,80(sp)
1000f568:	001efd40 	call	1001efd4 <__fixdfsi>
1000f56c:	1009883a 	mov	r4,r2
1000f570:	1021883a 	mov	r16,r2
1000f574:	00098e80 	call	100098e8 <__floatsidf>
1000f578:	d9000f17 	ldw	r4,60(sp)
1000f57c:	d9401017 	ldw	r5,64(sp)
1000f580:	100d883a 	mov	r6,r2
1000f584:	180f883a 	mov	r7,r3
1000f588:	001e6d80 	call	1001e6d8 <__subdf3>
1000f58c:	1829883a 	mov	r20,r3
1000f590:	d8c00717 	ldw	r3,28(sp)
1000f594:	84000c04 	addi	r16,r16,48
1000f598:	1023883a 	mov	r17,r2
1000f59c:	1c000005 	stb	r16,0(r3)
1000f5a0:	db001617 	ldw	r12,88(sp)
1000f5a4:	00800044 	movi	r2,1
1000f5a8:	60802226 	beq	r12,r2,1000f634 <_dtoa_r+0x1424>
1000f5ac:	d9c00717 	ldw	r7,28(sp)
1000f5b0:	8805883a 	mov	r2,r17
1000f5b4:	b82b883a 	mov	r21,r23
1000f5b8:	3b19883a 	add	r12,r7,r12
1000f5bc:	6023883a 	mov	r17,r12
1000f5c0:	a007883a 	mov	r3,r20
1000f5c4:	dc800f15 	stw	r18,60(sp)
1000f5c8:	000d883a 	mov	r6,zero
1000f5cc:	01d00934 	movhi	r7,16420
1000f5d0:	1009883a 	mov	r4,r2
1000f5d4:	180b883a 	mov	r5,r3
1000f5d8:	001de6c0 	call	1001de6c <__muldf3>
1000f5dc:	180b883a 	mov	r5,r3
1000f5e0:	1009883a 	mov	r4,r2
1000f5e4:	1829883a 	mov	r20,r3
1000f5e8:	1025883a 	mov	r18,r2
1000f5ec:	001efd40 	call	1001efd4 <__fixdfsi>
1000f5f0:	1009883a 	mov	r4,r2
1000f5f4:	1021883a 	mov	r16,r2
1000f5f8:	00098e80 	call	100098e8 <__floatsidf>
1000f5fc:	100d883a 	mov	r6,r2
1000f600:	180f883a 	mov	r7,r3
1000f604:	9009883a 	mov	r4,r18
1000f608:	a00b883a 	mov	r5,r20
1000f60c:	84000c04 	addi	r16,r16,48
1000f610:	001e6d80 	call	1001e6d8 <__subdf3>
1000f614:	ad400044 	addi	r21,r21,1
1000f618:	ac3fffc5 	stb	r16,-1(r21)
1000f61c:	ac7fea1e 	bne	r21,r17,1000f5c8 <__alt_data_end+0xf800f5c8>
1000f620:	1023883a 	mov	r17,r2
1000f624:	d8801217 	ldw	r2,72(sp)
1000f628:	dc800f17 	ldw	r18,60(sp)
1000f62c:	1829883a 	mov	r20,r3
1000f630:	b8af883a 	add	r23,r23,r2
1000f634:	d9001417 	ldw	r4,80(sp)
1000f638:	d9401517 	ldw	r5,84(sp)
1000f63c:	000d883a 	mov	r6,zero
1000f640:	01cff834 	movhi	r7,16352
1000f644:	001d3680 	call	1001d368 <__adddf3>
1000f648:	880d883a 	mov	r6,r17
1000f64c:	a00f883a 	mov	r7,r20
1000f650:	1009883a 	mov	r4,r2
1000f654:	180b883a 	mov	r5,r3
1000f658:	001dd780 	call	1001dd78 <__ledf2>
1000f65c:	10003e0e 	bge	r2,zero,1000f758 <_dtoa_r+0x1548>
1000f660:	d9001317 	ldw	r4,76(sp)
1000f664:	bd3fffc3 	ldbu	r20,-1(r23)
1000f668:	d9000515 	stw	r4,20(sp)
1000f66c:	003d3b06 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000f670:	0027883a 	mov	r19,zero
1000f674:	003f1b06 	br	1000f2e4 <__alt_data_end+0xf800f2e4>
1000f678:	d8800817 	ldw	r2,32(sp)
1000f67c:	11e9c83a 	sub	r20,r2,r7
1000f680:	0005883a 	mov	r2,zero
1000f684:	003d5406 	br	1000ebd8 <__alt_data_end+0xf800ebd8>
1000f688:	00800044 	movi	r2,1
1000f68c:	003dc706 	br	1000edac <__alt_data_end+0xf800edac>
1000f690:	d8c00217 	ldw	r3,8(sp)
1000f694:	00800d84 	movi	r2,54
1000f698:	dd400a17 	ldw	r21,40(sp)
1000f69c:	10c5c83a 	sub	r2,r2,r3
1000f6a0:	dd000817 	ldw	r20,32(sp)
1000f6a4:	003d4c06 	br	1000ebd8 <__alt_data_end+0xf800ebd8>
1000f6a8:	dc800f15 	stw	r18,60(sp)
1000f6ac:	dcc01015 	stw	r19,64(sp)
1000f6b0:	04000084 	movi	r16,2
1000f6b4:	003bed06 	br	1000e66c <__alt_data_end+0xf800e66c>
1000f6b8:	d9000617 	ldw	r4,24(sp)
1000f6bc:	203f0d26 	beq	r4,zero,1000f2f4 <__alt_data_end+0xf800f2f4>
1000f6c0:	d9800c17 	ldw	r6,48(sp)
1000f6c4:	01bcab0e 	bge	zero,r6,1000e974 <__alt_data_end+0xf800e974>
1000f6c8:	d9401017 	ldw	r5,64(sp)
1000f6cc:	d9000f17 	ldw	r4,60(sp)
1000f6d0:	000d883a 	mov	r6,zero
1000f6d4:	01d00934 	movhi	r7,16420
1000f6d8:	001de6c0 	call	1001de6c <__muldf3>
1000f6dc:	81000044 	addi	r4,r16,1
1000f6e0:	d8800f15 	stw	r2,60(sp)
1000f6e4:	d8c01015 	stw	r3,64(sp)
1000f6e8:	00098e80 	call	100098e8 <__floatsidf>
1000f6ec:	d9800f17 	ldw	r6,60(sp)
1000f6f0:	d9c01017 	ldw	r7,64(sp)
1000f6f4:	1009883a 	mov	r4,r2
1000f6f8:	180b883a 	mov	r5,r3
1000f6fc:	001de6c0 	call	1001de6c <__muldf3>
1000f700:	01d00734 	movhi	r7,16412
1000f704:	000d883a 	mov	r6,zero
1000f708:	1009883a 	mov	r4,r2
1000f70c:	180b883a 	mov	r5,r3
1000f710:	001d3680 	call	1001d368 <__adddf3>
1000f714:	d9c00517 	ldw	r7,20(sp)
1000f718:	047f3034 	movhi	r17,64704
1000f71c:	1021883a 	mov	r16,r2
1000f720:	39ffffc4 	addi	r7,r7,-1
1000f724:	d9c01315 	stw	r7,76(sp)
1000f728:	1c63883a 	add	r17,r3,r17
1000f72c:	db000c17 	ldw	r12,48(sp)
1000f730:	003bea06 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000f734:	dc000915 	stw	r16,36(sp)
1000f738:	003e0e06 	br	1000ef74 <__alt_data_end+0xf800ef74>
1000f73c:	01000e44 	movi	r4,57
1000f740:	8825883a 	mov	r18,r17
1000f744:	9dc00044 	addi	r23,r19,1
1000f748:	99000005 	stb	r4,0(r19)
1000f74c:	a023883a 	mov	r17,r20
1000f750:	dc000915 	stw	r16,36(sp)
1000f754:	003da406 	br	1000ede8 <__alt_data_end+0xf800ede8>
1000f758:	d9801417 	ldw	r6,80(sp)
1000f75c:	d9c01517 	ldw	r7,84(sp)
1000f760:	0009883a 	mov	r4,zero
1000f764:	014ff834 	movhi	r5,16352
1000f768:	001e6d80 	call	1001e6d8 <__subdf3>
1000f76c:	880d883a 	mov	r6,r17
1000f770:	a00f883a 	mov	r7,r20
1000f774:	1009883a 	mov	r4,r2
1000f778:	180b883a 	mov	r5,r3
1000f77c:	001dc9c0 	call	1001dc9c <__gedf2>
1000f780:	00bc7c0e 	bge	zero,r2,1000e974 <__alt_data_end+0xf800e974>
1000f784:	01000c04 	movi	r4,48
1000f788:	00000106 	br	1000f790 <_dtoa_r+0x1580>
1000f78c:	102f883a 	mov	r23,r2
1000f790:	b8bfffc4 	addi	r2,r23,-1
1000f794:	10c00007 	ldb	r3,0(r2)
1000f798:	193ffc26 	beq	r3,r4,1000f78c <__alt_data_end+0xf800f78c>
1000f79c:	d9801317 	ldw	r6,76(sp)
1000f7a0:	d9800515 	stw	r6,20(sp)
1000f7a4:	003c4406 	br	1000e8b8 <__alt_data_end+0xf800e8b8>
1000f7a8:	d9801317 	ldw	r6,76(sp)
1000f7ac:	d9800515 	stw	r6,20(sp)
1000f7b0:	003cea06 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000f7b4:	dd800f17 	ldw	r22,60(sp)
1000f7b8:	dcc01017 	ldw	r19,64(sp)
1000f7bc:	dc801217 	ldw	r18,72(sp)
1000f7c0:	003c6c06 	br	1000e974 <__alt_data_end+0xf800e974>
1000f7c4:	903e031e 	bne	r18,zero,1000efd4 <__alt_data_end+0xf800efd4>
1000f7c8:	003ebb06 	br	1000f2b8 <__alt_data_end+0xf800f2b8>
1000f7cc:	103e6c1e 	bne	r2,zero,1000f180 <__alt_data_end+0xf800f180>
1000f7d0:	4080004c 	andi	r2,r8,1
1000f7d4:	103e6a26 	beq	r2,zero,1000f180 <__alt_data_end+0xf800f180>
1000f7d8:	003e6606 	br	1000f174 <__alt_data_end+0xf800f174>
1000f7dc:	d8c00317 	ldw	r3,12(sp)
1000f7e0:	00800084 	movi	r2,2
1000f7e4:	10c02916 	blt	r2,r3,1000f88c <_dtoa_r+0x167c>
1000f7e8:	d9000c17 	ldw	r4,48(sp)
1000f7ec:	003e8806 	br	1000f210 <__alt_data_end+0xf800f210>
1000f7f0:	04000084 	movi	r16,2
1000f7f4:	003b9d06 	br	1000e66c <__alt_data_end+0xf800e66c>
1000f7f8:	d9001317 	ldw	r4,76(sp)
1000f7fc:	d9000515 	stw	r4,20(sp)
1000f800:	003cd606 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000f804:	d8801317 	ldw	r2,76(sp)
1000f808:	d8800515 	stw	r2,20(sp)
1000f80c:	003c2a06 	br	1000e8b8 <__alt_data_end+0xf800e8b8>
1000f810:	d9800317 	ldw	r6,12(sp)
1000f814:	00800084 	movi	r2,2
1000f818:	11801516 	blt	r2,r6,1000f870 <_dtoa_r+0x1660>
1000f81c:	d9c00c17 	ldw	r7,48(sp)
1000f820:	d9c00615 	stw	r7,24(sp)
1000f824:	003df706 	br	1000f004 <__alt_data_end+0xf800f004>
1000f828:	193d3926 	beq	r3,r4,1000ed10 <__alt_data_end+0xf800ed10>
1000f82c:	00c00f04 	movi	r3,60
1000f830:	1885c83a 	sub	r2,r3,r2
1000f834:	003ddf06 	br	1000efb4 <__alt_data_end+0xf800efb4>
1000f838:	e009883a 	mov	r4,fp
1000f83c:	e0001115 	stw	zero,68(fp)
1000f840:	000b883a 	mov	r5,zero
1000f844:	0011c440 	call	10011c44 <_Balloc>
1000f848:	d8800715 	stw	r2,28(sp)
1000f84c:	d8c00717 	ldw	r3,28(sp)
1000f850:	00bfffc4 	movi	r2,-1
1000f854:	01000044 	movi	r4,1
1000f858:	d8800c15 	stw	r2,48(sp)
1000f85c:	e0c01015 	stw	r3,64(fp)
1000f860:	d9000b15 	stw	r4,44(sp)
1000f864:	d8800615 	stw	r2,24(sp)
1000f868:	d8002215 	stw	zero,136(sp)
1000f86c:	003c4106 	br	1000e974 <__alt_data_end+0xf800e974>
1000f870:	d8c00c17 	ldw	r3,48(sp)
1000f874:	d8c00615 	stw	r3,24(sp)
1000f878:	003e7006 	br	1000f23c <__alt_data_end+0xf800f23c>
1000f87c:	04400044 	movi	r17,1
1000f880:	003b2006 	br	1000e504 <__alt_data_end+0xf800e504>
1000f884:	000b883a 	mov	r5,zero
1000f888:	003b3d06 	br	1000e580 <__alt_data_end+0xf800e580>
1000f88c:	d8800c17 	ldw	r2,48(sp)
1000f890:	d8800615 	stw	r2,24(sp)
1000f894:	003e6906 	br	1000f23c <__alt_data_end+0xf800f23c>

1000f898 <__sflush_r>:
1000f898:	2880030b 	ldhu	r2,12(r5)
1000f89c:	defffb04 	addi	sp,sp,-20
1000f8a0:	dcc00315 	stw	r19,12(sp)
1000f8a4:	dc400115 	stw	r17,4(sp)
1000f8a8:	dfc00415 	stw	ra,16(sp)
1000f8ac:	dc800215 	stw	r18,8(sp)
1000f8b0:	dc000015 	stw	r16,0(sp)
1000f8b4:	10c0020c 	andi	r3,r2,8
1000f8b8:	2823883a 	mov	r17,r5
1000f8bc:	2027883a 	mov	r19,r4
1000f8c0:	1800311e 	bne	r3,zero,1000f988 <__sflush_r+0xf0>
1000f8c4:	28c00117 	ldw	r3,4(r5)
1000f8c8:	10820014 	ori	r2,r2,2048
1000f8cc:	2880030d 	sth	r2,12(r5)
1000f8d0:	00c04b0e 	bge	zero,r3,1000fa00 <__sflush_r+0x168>
1000f8d4:	8a000a17 	ldw	r8,40(r17)
1000f8d8:	40002326 	beq	r8,zero,1000f968 <__sflush_r+0xd0>
1000f8dc:	9c000017 	ldw	r16,0(r19)
1000f8e0:	10c4000c 	andi	r3,r2,4096
1000f8e4:	98000015 	stw	zero,0(r19)
1000f8e8:	18004826 	beq	r3,zero,1000fa0c <__sflush_r+0x174>
1000f8ec:	89801417 	ldw	r6,80(r17)
1000f8f0:	10c0010c 	andi	r3,r2,4
1000f8f4:	18000626 	beq	r3,zero,1000f910 <__sflush_r+0x78>
1000f8f8:	88c00117 	ldw	r3,4(r17)
1000f8fc:	88800c17 	ldw	r2,48(r17)
1000f900:	30cdc83a 	sub	r6,r6,r3
1000f904:	10000226 	beq	r2,zero,1000f910 <__sflush_r+0x78>
1000f908:	88800f17 	ldw	r2,60(r17)
1000f90c:	308dc83a 	sub	r6,r6,r2
1000f910:	89400717 	ldw	r5,28(r17)
1000f914:	000f883a 	mov	r7,zero
1000f918:	9809883a 	mov	r4,r19
1000f91c:	403ee83a 	callr	r8
1000f920:	00ffffc4 	movi	r3,-1
1000f924:	10c04426 	beq	r2,r3,1000fa38 <__sflush_r+0x1a0>
1000f928:	88c0030b 	ldhu	r3,12(r17)
1000f92c:	89000417 	ldw	r4,16(r17)
1000f930:	88000115 	stw	zero,4(r17)
1000f934:	197dffcc 	andi	r5,r3,63487
1000f938:	8940030d 	sth	r5,12(r17)
1000f93c:	89000015 	stw	r4,0(r17)
1000f940:	18c4000c 	andi	r3,r3,4096
1000f944:	18002c1e 	bne	r3,zero,1000f9f8 <__sflush_r+0x160>
1000f948:	89400c17 	ldw	r5,48(r17)
1000f94c:	9c000015 	stw	r16,0(r19)
1000f950:	28000526 	beq	r5,zero,1000f968 <__sflush_r+0xd0>
1000f954:	88801004 	addi	r2,r17,64
1000f958:	28800226 	beq	r5,r2,1000f964 <__sflush_r+0xcc>
1000f95c:	9809883a 	mov	r4,r19
1000f960:	00102840 	call	10010284 <_free_r>
1000f964:	88000c15 	stw	zero,48(r17)
1000f968:	0005883a 	mov	r2,zero
1000f96c:	dfc00417 	ldw	ra,16(sp)
1000f970:	dcc00317 	ldw	r19,12(sp)
1000f974:	dc800217 	ldw	r18,8(sp)
1000f978:	dc400117 	ldw	r17,4(sp)
1000f97c:	dc000017 	ldw	r16,0(sp)
1000f980:	dec00504 	addi	sp,sp,20
1000f984:	f800283a 	ret
1000f988:	2c800417 	ldw	r18,16(r5)
1000f98c:	903ff626 	beq	r18,zero,1000f968 <__alt_data_end+0xf800f968>
1000f990:	2c000017 	ldw	r16,0(r5)
1000f994:	108000cc 	andi	r2,r2,3
1000f998:	2c800015 	stw	r18,0(r5)
1000f99c:	84a1c83a 	sub	r16,r16,r18
1000f9a0:	1000131e 	bne	r2,zero,1000f9f0 <__sflush_r+0x158>
1000f9a4:	28800517 	ldw	r2,20(r5)
1000f9a8:	88800215 	stw	r2,8(r17)
1000f9ac:	04000316 	blt	zero,r16,1000f9bc <__sflush_r+0x124>
1000f9b0:	003fed06 	br	1000f968 <__alt_data_end+0xf800f968>
1000f9b4:	90a5883a 	add	r18,r18,r2
1000f9b8:	043feb0e 	bge	zero,r16,1000f968 <__alt_data_end+0xf800f968>
1000f9bc:	88800917 	ldw	r2,36(r17)
1000f9c0:	89400717 	ldw	r5,28(r17)
1000f9c4:	800f883a 	mov	r7,r16
1000f9c8:	900d883a 	mov	r6,r18
1000f9cc:	9809883a 	mov	r4,r19
1000f9d0:	103ee83a 	callr	r2
1000f9d4:	80a1c83a 	sub	r16,r16,r2
1000f9d8:	00bff616 	blt	zero,r2,1000f9b4 <__alt_data_end+0xf800f9b4>
1000f9dc:	88c0030b 	ldhu	r3,12(r17)
1000f9e0:	00bfffc4 	movi	r2,-1
1000f9e4:	18c01014 	ori	r3,r3,64
1000f9e8:	88c0030d 	sth	r3,12(r17)
1000f9ec:	003fdf06 	br	1000f96c <__alt_data_end+0xf800f96c>
1000f9f0:	0005883a 	mov	r2,zero
1000f9f4:	003fec06 	br	1000f9a8 <__alt_data_end+0xf800f9a8>
1000f9f8:	88801415 	stw	r2,80(r17)
1000f9fc:	003fd206 	br	1000f948 <__alt_data_end+0xf800f948>
1000fa00:	28c00f17 	ldw	r3,60(r5)
1000fa04:	00ffb316 	blt	zero,r3,1000f8d4 <__alt_data_end+0xf800f8d4>
1000fa08:	003fd706 	br	1000f968 <__alt_data_end+0xf800f968>
1000fa0c:	89400717 	ldw	r5,28(r17)
1000fa10:	000d883a 	mov	r6,zero
1000fa14:	01c00044 	movi	r7,1
1000fa18:	9809883a 	mov	r4,r19
1000fa1c:	403ee83a 	callr	r8
1000fa20:	100d883a 	mov	r6,r2
1000fa24:	00bfffc4 	movi	r2,-1
1000fa28:	30801426 	beq	r6,r2,1000fa7c <__sflush_r+0x1e4>
1000fa2c:	8880030b 	ldhu	r2,12(r17)
1000fa30:	8a000a17 	ldw	r8,40(r17)
1000fa34:	003fae06 	br	1000f8f0 <__alt_data_end+0xf800f8f0>
1000fa38:	98c00017 	ldw	r3,0(r19)
1000fa3c:	183fba26 	beq	r3,zero,1000f928 <__alt_data_end+0xf800f928>
1000fa40:	01000744 	movi	r4,29
1000fa44:	19000626 	beq	r3,r4,1000fa60 <__sflush_r+0x1c8>
1000fa48:	01000584 	movi	r4,22
1000fa4c:	19000426 	beq	r3,r4,1000fa60 <__sflush_r+0x1c8>
1000fa50:	88c0030b 	ldhu	r3,12(r17)
1000fa54:	18c01014 	ori	r3,r3,64
1000fa58:	88c0030d 	sth	r3,12(r17)
1000fa5c:	003fc306 	br	1000f96c <__alt_data_end+0xf800f96c>
1000fa60:	8880030b 	ldhu	r2,12(r17)
1000fa64:	88c00417 	ldw	r3,16(r17)
1000fa68:	88000115 	stw	zero,4(r17)
1000fa6c:	10bdffcc 	andi	r2,r2,63487
1000fa70:	8880030d 	sth	r2,12(r17)
1000fa74:	88c00015 	stw	r3,0(r17)
1000fa78:	003fb306 	br	1000f948 <__alt_data_end+0xf800f948>
1000fa7c:	98800017 	ldw	r2,0(r19)
1000fa80:	103fea26 	beq	r2,zero,1000fa2c <__alt_data_end+0xf800fa2c>
1000fa84:	00c00744 	movi	r3,29
1000fa88:	10c00226 	beq	r2,r3,1000fa94 <__sflush_r+0x1fc>
1000fa8c:	00c00584 	movi	r3,22
1000fa90:	10c0031e 	bne	r2,r3,1000faa0 <__sflush_r+0x208>
1000fa94:	9c000015 	stw	r16,0(r19)
1000fa98:	0005883a 	mov	r2,zero
1000fa9c:	003fb306 	br	1000f96c <__alt_data_end+0xf800f96c>
1000faa0:	88c0030b 	ldhu	r3,12(r17)
1000faa4:	3005883a 	mov	r2,r6
1000faa8:	18c01014 	ori	r3,r3,64
1000faac:	88c0030d 	sth	r3,12(r17)
1000fab0:	003fae06 	br	1000f96c <__alt_data_end+0xf800f96c>

1000fab4 <_fflush_r>:
1000fab4:	defffd04 	addi	sp,sp,-12
1000fab8:	dc000115 	stw	r16,4(sp)
1000fabc:	dfc00215 	stw	ra,8(sp)
1000fac0:	2021883a 	mov	r16,r4
1000fac4:	20000226 	beq	r4,zero,1000fad0 <_fflush_r+0x1c>
1000fac8:	20800e17 	ldw	r2,56(r4)
1000facc:	10000c26 	beq	r2,zero,1000fb00 <_fflush_r+0x4c>
1000fad0:	2880030f 	ldh	r2,12(r5)
1000fad4:	1000051e 	bne	r2,zero,1000faec <_fflush_r+0x38>
1000fad8:	0005883a 	mov	r2,zero
1000fadc:	dfc00217 	ldw	ra,8(sp)
1000fae0:	dc000117 	ldw	r16,4(sp)
1000fae4:	dec00304 	addi	sp,sp,12
1000fae8:	f800283a 	ret
1000faec:	8009883a 	mov	r4,r16
1000faf0:	dfc00217 	ldw	ra,8(sp)
1000faf4:	dc000117 	ldw	r16,4(sp)
1000faf8:	dec00304 	addi	sp,sp,12
1000fafc:	000f8981 	jmpi	1000f898 <__sflush_r>
1000fb00:	d9400015 	stw	r5,0(sp)
1000fb04:	000fea00 	call	1000fea0 <__sinit>
1000fb08:	d9400017 	ldw	r5,0(sp)
1000fb0c:	003ff006 	br	1000fad0 <__alt_data_end+0xf800fad0>

1000fb10 <fflush>:
1000fb10:	20000526 	beq	r4,zero,1000fb28 <fflush+0x18>
1000fb14:	008400b4 	movhi	r2,4098
1000fb18:	10951604 	addi	r2,r2,21592
1000fb1c:	200b883a 	mov	r5,r4
1000fb20:	11000017 	ldw	r4,0(r2)
1000fb24:	000fab41 	jmpi	1000fab4 <_fflush_r>
1000fb28:	008400b4 	movhi	r2,4098
1000fb2c:	10951504 	addi	r2,r2,21588
1000fb30:	11000017 	ldw	r4,0(r2)
1000fb34:	01440074 	movhi	r5,4097
1000fb38:	297ead04 	addi	r5,r5,-1356
1000fb3c:	0010b201 	jmpi	10010b20 <_fwalk_reent>

1000fb40 <__fp_unlock>:
1000fb40:	0005883a 	mov	r2,zero
1000fb44:	f800283a 	ret

1000fb48 <_cleanup_r>:
1000fb48:	014400b4 	movhi	r5,4098
1000fb4c:	2966f704 	addi	r5,r5,-25636
1000fb50:	0010b201 	jmpi	10010b20 <_fwalk_reent>

1000fb54 <__sinit.part.1>:
1000fb54:	defff704 	addi	sp,sp,-36
1000fb58:	00c40074 	movhi	r3,4097
1000fb5c:	dfc00815 	stw	ra,32(sp)
1000fb60:	ddc00715 	stw	r23,28(sp)
1000fb64:	dd800615 	stw	r22,24(sp)
1000fb68:	dd400515 	stw	r21,20(sp)
1000fb6c:	dd000415 	stw	r20,16(sp)
1000fb70:	dcc00315 	stw	r19,12(sp)
1000fb74:	dc800215 	stw	r18,8(sp)
1000fb78:	dc400115 	stw	r17,4(sp)
1000fb7c:	dc000015 	stw	r16,0(sp)
1000fb80:	18fed204 	addi	r3,r3,-1208
1000fb84:	24000117 	ldw	r16,4(r4)
1000fb88:	20c00f15 	stw	r3,60(r4)
1000fb8c:	2080bb04 	addi	r2,r4,748
1000fb90:	00c000c4 	movi	r3,3
1000fb94:	20c0b915 	stw	r3,740(r4)
1000fb98:	2080ba15 	stw	r2,744(r4)
1000fb9c:	2000b815 	stw	zero,736(r4)
1000fba0:	05c00204 	movi	r23,8
1000fba4:	00800104 	movi	r2,4
1000fba8:	2025883a 	mov	r18,r4
1000fbac:	b80d883a 	mov	r6,r23
1000fbb0:	81001704 	addi	r4,r16,92
1000fbb4:	000b883a 	mov	r5,zero
1000fbb8:	80000015 	stw	zero,0(r16)
1000fbbc:	80000115 	stw	zero,4(r16)
1000fbc0:	80000215 	stw	zero,8(r16)
1000fbc4:	8080030d 	sth	r2,12(r16)
1000fbc8:	80001915 	stw	zero,100(r16)
1000fbcc:	8000038d 	sth	zero,14(r16)
1000fbd0:	80000415 	stw	zero,16(r16)
1000fbd4:	80000515 	stw	zero,20(r16)
1000fbd8:	80000615 	stw	zero,24(r16)
1000fbdc:	0011b1c0 	call	10011b1c <memset>
1000fbe0:	05840074 	movhi	r22,4097
1000fbe4:	94400217 	ldw	r17,8(r18)
1000fbe8:	05440074 	movhi	r21,4097
1000fbec:	05040074 	movhi	r20,4097
1000fbf0:	04c40074 	movhi	r19,4097
1000fbf4:	b58e0704 	addi	r22,r22,14364
1000fbf8:	ad4e1e04 	addi	r21,r21,14456
1000fbfc:	a50e3d04 	addi	r20,r20,14580
1000fc00:	9cce5404 	addi	r19,r19,14672
1000fc04:	85800815 	stw	r22,32(r16)
1000fc08:	85400915 	stw	r21,36(r16)
1000fc0c:	85000a15 	stw	r20,40(r16)
1000fc10:	84c00b15 	stw	r19,44(r16)
1000fc14:	84000715 	stw	r16,28(r16)
1000fc18:	00800284 	movi	r2,10
1000fc1c:	8880030d 	sth	r2,12(r17)
1000fc20:	00800044 	movi	r2,1
1000fc24:	b80d883a 	mov	r6,r23
1000fc28:	89001704 	addi	r4,r17,92
1000fc2c:	000b883a 	mov	r5,zero
1000fc30:	88000015 	stw	zero,0(r17)
1000fc34:	88000115 	stw	zero,4(r17)
1000fc38:	88000215 	stw	zero,8(r17)
1000fc3c:	88001915 	stw	zero,100(r17)
1000fc40:	8880038d 	sth	r2,14(r17)
1000fc44:	88000415 	stw	zero,16(r17)
1000fc48:	88000515 	stw	zero,20(r17)
1000fc4c:	88000615 	stw	zero,24(r17)
1000fc50:	0011b1c0 	call	10011b1c <memset>
1000fc54:	94000317 	ldw	r16,12(r18)
1000fc58:	00800484 	movi	r2,18
1000fc5c:	8c400715 	stw	r17,28(r17)
1000fc60:	8d800815 	stw	r22,32(r17)
1000fc64:	8d400915 	stw	r21,36(r17)
1000fc68:	8d000a15 	stw	r20,40(r17)
1000fc6c:	8cc00b15 	stw	r19,44(r17)
1000fc70:	8080030d 	sth	r2,12(r16)
1000fc74:	00800084 	movi	r2,2
1000fc78:	80000015 	stw	zero,0(r16)
1000fc7c:	80000115 	stw	zero,4(r16)
1000fc80:	80000215 	stw	zero,8(r16)
1000fc84:	80001915 	stw	zero,100(r16)
1000fc88:	8080038d 	sth	r2,14(r16)
1000fc8c:	80000415 	stw	zero,16(r16)
1000fc90:	80000515 	stw	zero,20(r16)
1000fc94:	80000615 	stw	zero,24(r16)
1000fc98:	b80d883a 	mov	r6,r23
1000fc9c:	000b883a 	mov	r5,zero
1000fca0:	81001704 	addi	r4,r16,92
1000fca4:	0011b1c0 	call	10011b1c <memset>
1000fca8:	00800044 	movi	r2,1
1000fcac:	84000715 	stw	r16,28(r16)
1000fcb0:	85800815 	stw	r22,32(r16)
1000fcb4:	85400915 	stw	r21,36(r16)
1000fcb8:	85000a15 	stw	r20,40(r16)
1000fcbc:	84c00b15 	stw	r19,44(r16)
1000fcc0:	90800e15 	stw	r2,56(r18)
1000fcc4:	dfc00817 	ldw	ra,32(sp)
1000fcc8:	ddc00717 	ldw	r23,28(sp)
1000fccc:	dd800617 	ldw	r22,24(sp)
1000fcd0:	dd400517 	ldw	r21,20(sp)
1000fcd4:	dd000417 	ldw	r20,16(sp)
1000fcd8:	dcc00317 	ldw	r19,12(sp)
1000fcdc:	dc800217 	ldw	r18,8(sp)
1000fce0:	dc400117 	ldw	r17,4(sp)
1000fce4:	dc000017 	ldw	r16,0(sp)
1000fce8:	dec00904 	addi	sp,sp,36
1000fcec:	f800283a 	ret

1000fcf0 <__fp_lock>:
1000fcf0:	0005883a 	mov	r2,zero
1000fcf4:	f800283a 	ret

1000fcf8 <__sfmoreglue>:
1000fcf8:	defffc04 	addi	sp,sp,-16
1000fcfc:	dc800215 	stw	r18,8(sp)
1000fd00:	2825883a 	mov	r18,r5
1000fd04:	dc000015 	stw	r16,0(sp)
1000fd08:	01401a04 	movi	r5,104
1000fd0c:	2021883a 	mov	r16,r4
1000fd10:	913fffc4 	addi	r4,r18,-1
1000fd14:	dfc00315 	stw	ra,12(sp)
1000fd18:	dc400115 	stw	r17,4(sp)
1000fd1c:	0008ef00 	call	10008ef0 <__mulsi3>
1000fd20:	8009883a 	mov	r4,r16
1000fd24:	11401d04 	addi	r5,r2,116
1000fd28:	1023883a 	mov	r17,r2
1000fd2c:	0010eac0 	call	10010eac <_malloc_r>
1000fd30:	1021883a 	mov	r16,r2
1000fd34:	10000726 	beq	r2,zero,1000fd54 <__sfmoreglue+0x5c>
1000fd38:	11000304 	addi	r4,r2,12
1000fd3c:	10000015 	stw	zero,0(r2)
1000fd40:	14800115 	stw	r18,4(r2)
1000fd44:	11000215 	stw	r4,8(r2)
1000fd48:	89801a04 	addi	r6,r17,104
1000fd4c:	000b883a 	mov	r5,zero
1000fd50:	0011b1c0 	call	10011b1c <memset>
1000fd54:	8005883a 	mov	r2,r16
1000fd58:	dfc00317 	ldw	ra,12(sp)
1000fd5c:	dc800217 	ldw	r18,8(sp)
1000fd60:	dc400117 	ldw	r17,4(sp)
1000fd64:	dc000017 	ldw	r16,0(sp)
1000fd68:	dec00404 	addi	sp,sp,16
1000fd6c:	f800283a 	ret

1000fd70 <__sfp>:
1000fd70:	defffb04 	addi	sp,sp,-20
1000fd74:	dc000015 	stw	r16,0(sp)
1000fd78:	040400b4 	movhi	r16,4098
1000fd7c:	84151504 	addi	r16,r16,21588
1000fd80:	dcc00315 	stw	r19,12(sp)
1000fd84:	2027883a 	mov	r19,r4
1000fd88:	81000017 	ldw	r4,0(r16)
1000fd8c:	dfc00415 	stw	ra,16(sp)
1000fd90:	dc800215 	stw	r18,8(sp)
1000fd94:	20800e17 	ldw	r2,56(r4)
1000fd98:	dc400115 	stw	r17,4(sp)
1000fd9c:	1000021e 	bne	r2,zero,1000fda8 <__sfp+0x38>
1000fda0:	000fb540 	call	1000fb54 <__sinit.part.1>
1000fda4:	81000017 	ldw	r4,0(r16)
1000fda8:	2480b804 	addi	r18,r4,736
1000fdac:	047fffc4 	movi	r17,-1
1000fdb0:	91000117 	ldw	r4,4(r18)
1000fdb4:	94000217 	ldw	r16,8(r18)
1000fdb8:	213fffc4 	addi	r4,r4,-1
1000fdbc:	20000a16 	blt	r4,zero,1000fde8 <__sfp+0x78>
1000fdc0:	8080030f 	ldh	r2,12(r16)
1000fdc4:	10000c26 	beq	r2,zero,1000fdf8 <__sfp+0x88>
1000fdc8:	80c01d04 	addi	r3,r16,116
1000fdcc:	00000206 	br	1000fdd8 <__sfp+0x68>
1000fdd0:	18bfe60f 	ldh	r2,-104(r3)
1000fdd4:	10000826 	beq	r2,zero,1000fdf8 <__sfp+0x88>
1000fdd8:	213fffc4 	addi	r4,r4,-1
1000fddc:	1c3ffd04 	addi	r16,r3,-12
1000fde0:	18c01a04 	addi	r3,r3,104
1000fde4:	247ffa1e 	bne	r4,r17,1000fdd0 <__alt_data_end+0xf800fdd0>
1000fde8:	90800017 	ldw	r2,0(r18)
1000fdec:	10001d26 	beq	r2,zero,1000fe64 <__sfp+0xf4>
1000fdf0:	1025883a 	mov	r18,r2
1000fdf4:	003fee06 	br	1000fdb0 <__alt_data_end+0xf800fdb0>
1000fdf8:	00bfffc4 	movi	r2,-1
1000fdfc:	8080038d 	sth	r2,14(r16)
1000fe00:	00800044 	movi	r2,1
1000fe04:	8080030d 	sth	r2,12(r16)
1000fe08:	80001915 	stw	zero,100(r16)
1000fe0c:	80000015 	stw	zero,0(r16)
1000fe10:	80000215 	stw	zero,8(r16)
1000fe14:	80000115 	stw	zero,4(r16)
1000fe18:	80000415 	stw	zero,16(r16)
1000fe1c:	80000515 	stw	zero,20(r16)
1000fe20:	80000615 	stw	zero,24(r16)
1000fe24:	01800204 	movi	r6,8
1000fe28:	000b883a 	mov	r5,zero
1000fe2c:	81001704 	addi	r4,r16,92
1000fe30:	0011b1c0 	call	10011b1c <memset>
1000fe34:	8005883a 	mov	r2,r16
1000fe38:	80000c15 	stw	zero,48(r16)
1000fe3c:	80000d15 	stw	zero,52(r16)
1000fe40:	80001115 	stw	zero,68(r16)
1000fe44:	80001215 	stw	zero,72(r16)
1000fe48:	dfc00417 	ldw	ra,16(sp)
1000fe4c:	dcc00317 	ldw	r19,12(sp)
1000fe50:	dc800217 	ldw	r18,8(sp)
1000fe54:	dc400117 	ldw	r17,4(sp)
1000fe58:	dc000017 	ldw	r16,0(sp)
1000fe5c:	dec00504 	addi	sp,sp,20
1000fe60:	f800283a 	ret
1000fe64:	01400104 	movi	r5,4
1000fe68:	9809883a 	mov	r4,r19
1000fe6c:	000fcf80 	call	1000fcf8 <__sfmoreglue>
1000fe70:	90800015 	stw	r2,0(r18)
1000fe74:	103fde1e 	bne	r2,zero,1000fdf0 <__alt_data_end+0xf800fdf0>
1000fe78:	00800304 	movi	r2,12
1000fe7c:	98800015 	stw	r2,0(r19)
1000fe80:	0005883a 	mov	r2,zero
1000fe84:	003ff006 	br	1000fe48 <__alt_data_end+0xf800fe48>

1000fe88 <_cleanup>:
1000fe88:	008400b4 	movhi	r2,4098
1000fe8c:	10951504 	addi	r2,r2,21588
1000fe90:	11000017 	ldw	r4,0(r2)
1000fe94:	014400b4 	movhi	r5,4098
1000fe98:	2966f704 	addi	r5,r5,-25636
1000fe9c:	0010b201 	jmpi	10010b20 <_fwalk_reent>

1000fea0 <__sinit>:
1000fea0:	20800e17 	ldw	r2,56(r4)
1000fea4:	10000126 	beq	r2,zero,1000feac <__sinit+0xc>
1000fea8:	f800283a 	ret
1000feac:	000fb541 	jmpi	1000fb54 <__sinit.part.1>

1000feb0 <__sfp_lock_acquire>:
1000feb0:	f800283a 	ret

1000feb4 <__sfp_lock_release>:
1000feb4:	f800283a 	ret

1000feb8 <__sinit_lock_acquire>:
1000feb8:	f800283a 	ret

1000febc <__sinit_lock_release>:
1000febc:	f800283a 	ret

1000fec0 <__fp_lock_all>:
1000fec0:	008400b4 	movhi	r2,4098
1000fec4:	10951604 	addi	r2,r2,21592
1000fec8:	11000017 	ldw	r4,0(r2)
1000fecc:	01440074 	movhi	r5,4097
1000fed0:	297f3c04 	addi	r5,r5,-784
1000fed4:	0010a5c1 	jmpi	10010a5c <_fwalk>

1000fed8 <__fp_unlock_all>:
1000fed8:	008400b4 	movhi	r2,4098
1000fedc:	10951604 	addi	r2,r2,21592
1000fee0:	11000017 	ldw	r4,0(r2)
1000fee4:	01440074 	movhi	r5,4097
1000fee8:	297ed004 	addi	r5,r5,-1216
1000feec:	0010a5c1 	jmpi	10010a5c <_fwalk>

1000fef0 <_fread_r>:
1000fef0:	defff404 	addi	sp,sp,-48
1000fef4:	dd000615 	stw	r20,24(sp)
1000fef8:	dcc00515 	stw	r19,20(sp)
1000fefc:	2029883a 	mov	r20,r4
1000ff00:	2827883a 	mov	r19,r5
1000ff04:	3809883a 	mov	r4,r7
1000ff08:	300b883a 	mov	r5,r6
1000ff0c:	ddc00915 	stw	r23,36(sp)
1000ff10:	dd400715 	stw	r21,28(sp)
1000ff14:	dc000215 	stw	r16,8(sp)
1000ff18:	dfc00b15 	stw	ra,44(sp)
1000ff1c:	df000a15 	stw	fp,40(sp)
1000ff20:	dd800815 	stw	r22,32(sp)
1000ff24:	dc800415 	stw	r18,16(sp)
1000ff28:	dc400315 	stw	r17,12(sp)
1000ff2c:	302f883a 	mov	r23,r6
1000ff30:	382b883a 	mov	r21,r7
1000ff34:	0008ef00 	call	10008ef0 <__mulsi3>
1000ff38:	dc000c17 	ldw	r16,48(sp)
1000ff3c:	10003826 	beq	r2,zero,10010020 <_fread_r+0x130>
1000ff40:	102d883a 	mov	r22,r2
1000ff44:	a0000226 	beq	r20,zero,1000ff50 <_fread_r+0x60>
1000ff48:	a0800e17 	ldw	r2,56(r20)
1000ff4c:	10006e26 	beq	r2,zero,10010108 <_fread_r+0x218>
1000ff50:	8080030b 	ldhu	r2,12(r16)
1000ff54:	10c8000c 	andi	r3,r2,8192
1000ff58:	1800061e 	bne	r3,zero,1000ff74 <_fread_r+0x84>
1000ff5c:	81001917 	ldw	r4,100(r16)
1000ff60:	00f7ffc4 	movi	r3,-8193
1000ff64:	10880014 	ori	r2,r2,8192
1000ff68:	20c6703a 	and	r3,r4,r3
1000ff6c:	8080030d 	sth	r2,12(r16)
1000ff70:	80c01915 	stw	r3,100(r16)
1000ff74:	84400117 	ldw	r17,4(r16)
1000ff78:	88005f16 	blt	r17,zero,100100f8 <_fread_r+0x208>
1000ff7c:	8809883a 	mov	r4,r17
1000ff80:	1080008c 	andi	r2,r2,2
1000ff84:	1000281e 	bne	r2,zero,10010028 <_fread_r+0x138>
1000ff88:	b025883a 	mov	r18,r22
1000ff8c:	00000b06 	br	1000ffbc <_fread_r+0xcc>
1000ff90:	0009cd00 	call	10009cd0 <memcpy>
1000ff94:	80800017 	ldw	r2,0(r16)
1000ff98:	9c67883a 	add	r19,r19,r17
1000ff9c:	9465c83a 	sub	r18,r18,r17
1000ffa0:	1463883a 	add	r17,r2,r17
1000ffa4:	800b883a 	mov	r5,r16
1000ffa8:	a009883a 	mov	r4,r20
1000ffac:	84400015 	stw	r17,0(r16)
1000ffb0:	00133e40 	call	100133e4 <__srefill_r>
1000ffb4:	10004c1e 	bne	r2,zero,100100e8 <_fread_r+0x1f8>
1000ffb8:	84400117 	ldw	r17,4(r16)
1000ffbc:	880d883a 	mov	r6,r17
1000ffc0:	9809883a 	mov	r4,r19
1000ffc4:	81400017 	ldw	r5,0(r16)
1000ffc8:	8cbff136 	bltu	r17,r18,1000ff90 <__alt_data_end+0xf800ff90>
1000ffcc:	900d883a 	mov	r6,r18
1000ffd0:	0009cd00 	call	10009cd0 <memcpy>
1000ffd4:	80c00117 	ldw	r3,4(r16)
1000ffd8:	81000017 	ldw	r4,0(r16)
1000ffdc:	a805883a 	mov	r2,r21
1000ffe0:	1c87c83a 	sub	r3,r3,r18
1000ffe4:	24a5883a 	add	r18,r4,r18
1000ffe8:	80c00115 	stw	r3,4(r16)
1000ffec:	84800015 	stw	r18,0(r16)
1000fff0:	dfc00b17 	ldw	ra,44(sp)
1000fff4:	df000a17 	ldw	fp,40(sp)
1000fff8:	ddc00917 	ldw	r23,36(sp)
1000fffc:	dd800817 	ldw	r22,32(sp)
10010000:	dd400717 	ldw	r21,28(sp)
10010004:	dd000617 	ldw	r20,24(sp)
10010008:	dcc00517 	ldw	r19,20(sp)
1001000c:	dc800417 	ldw	r18,16(sp)
10010010:	dc400317 	ldw	r17,12(sp)
10010014:	dc000217 	ldw	r16,8(sp)
10010018:	dec00c04 	addi	sp,sp,48
1001001c:	f800283a 	ret
10010020:	0005883a 	mov	r2,zero
10010024:	003ff206 	br	1000fff0 <__alt_data_end+0xf800fff0>
10010028:	b007883a 	mov	r3,r22
1001002c:	2580012e 	bgeu	r4,r22,10010034 <_fread_r+0x144>
10010030:	2007883a 	mov	r3,r4
10010034:	81400017 	ldw	r5,0(r16)
10010038:	180d883a 	mov	r6,r3
1001003c:	9809883a 	mov	r4,r19
10010040:	d8c00115 	stw	r3,4(sp)
10010044:	0009cd00 	call	10009cd0 <memcpy>
10010048:	d8c00117 	ldw	r3,4(sp)
1001004c:	84400017 	ldw	r17,0(r16)
10010050:	80800117 	ldw	r2,4(r16)
10010054:	81400c17 	ldw	r5,48(r16)
10010058:	88e3883a 	add	r17,r17,r3
1001005c:	10c5c83a 	sub	r2,r2,r3
10010060:	84400015 	stw	r17,0(r16)
10010064:	80800115 	stw	r2,4(r16)
10010068:	b0e5c83a 	sub	r18,r22,r3
1001006c:	28002c26 	beq	r5,zero,10010120 <_fread_r+0x230>
10010070:	90002c26 	beq	r18,zero,10010124 <_fread_r+0x234>
10010074:	80801004 	addi	r2,r16,64
10010078:	28800526 	beq	r5,r2,10010090 <_fread_r+0x1a0>
1001007c:	a009883a 	mov	r4,r20
10010080:	d8c00115 	stw	r3,4(sp)
10010084:	00102840 	call	10010284 <_free_r>
10010088:	d8c00117 	ldw	r3,4(sp)
1001008c:	84400017 	ldw	r17,0(r16)
10010090:	80000c15 	stw	zero,48(r16)
10010094:	80800517 	ldw	r2,20(r16)
10010098:	87000417 	ldw	fp,16(r16)
1001009c:	98e7883a 	add	r19,r19,r3
100100a0:	d8800015 	stw	r2,0(sp)
100100a4:	00000106 	br	100100ac <_fread_r+0x1bc>
100100a8:	90001e26 	beq	r18,zero,10010124 <_fread_r+0x234>
100100ac:	84c00415 	stw	r19,16(r16)
100100b0:	84800515 	stw	r18,20(r16)
100100b4:	84c00015 	stw	r19,0(r16)
100100b8:	a009883a 	mov	r4,r20
100100bc:	800b883a 	mov	r5,r16
100100c0:	00133e40 	call	100133e4 <__srefill_r>
100100c4:	d9000017 	ldw	r4,0(sp)
100100c8:	80c00117 	ldw	r3,4(r16)
100100cc:	87000415 	stw	fp,16(r16)
100100d0:	81000515 	stw	r4,20(r16)
100100d4:	84400015 	stw	r17,0(r16)
100100d8:	80000115 	stw	zero,4(r16)
100100dc:	90e5c83a 	sub	r18,r18,r3
100100e0:	98e7883a 	add	r19,r19,r3
100100e4:	103ff026 	beq	r2,zero,100100a8 <__alt_data_end+0xf80100a8>
100100e8:	b80b883a 	mov	r5,r23
100100ec:	b489c83a 	sub	r4,r22,r18
100100f0:	0009bc80 	call	10009bc8 <__udivsi3>
100100f4:	003fbe06 	br	1000fff0 <__alt_data_end+0xf800fff0>
100100f8:	80000115 	stw	zero,4(r16)
100100fc:	0009883a 	mov	r4,zero
10010100:	0023883a 	mov	r17,zero
10010104:	003f9e06 	br	1000ff80 <__alt_data_end+0xf800ff80>
10010108:	a009883a 	mov	r4,r20
1001010c:	000fea00 	call	1000fea0 <__sinit>
10010110:	8080030b 	ldhu	r2,12(r16)
10010114:	10c8000c 	andi	r3,r2,8192
10010118:	183f961e 	bne	r3,zero,1000ff74 <__alt_data_end+0xf800ff74>
1001011c:	003f8f06 	br	1000ff5c <__alt_data_end+0xf800ff5c>
10010120:	903fdc1e 	bne	r18,zero,10010094 <__alt_data_end+0xf8010094>
10010124:	a805883a 	mov	r2,r21
10010128:	003fb106 	br	1000fff0 <__alt_data_end+0xf800fff0>

1001012c <fread>:
1001012c:	defffe04 	addi	sp,sp,-8
10010130:	008400b4 	movhi	r2,4098
10010134:	d9c00015 	stw	r7,0(sp)
10010138:	10951604 	addi	r2,r2,21592
1001013c:	300f883a 	mov	r7,r6
10010140:	280d883a 	mov	r6,r5
10010144:	200b883a 	mov	r5,r4
10010148:	11000017 	ldw	r4,0(r2)
1001014c:	dfc00115 	stw	ra,4(sp)
10010150:	000fef00 	call	1000fef0 <_fread_r>
10010154:	dfc00117 	ldw	ra,4(sp)
10010158:	dec00204 	addi	sp,sp,8
1001015c:	f800283a 	ret

10010160 <_malloc_trim_r>:
10010160:	defffb04 	addi	sp,sp,-20
10010164:	dcc00315 	stw	r19,12(sp)
10010168:	04c400b4 	movhi	r19,4098
1001016c:	dc800215 	stw	r18,8(sp)
10010170:	dc400115 	stw	r17,4(sp)
10010174:	dc000015 	stw	r16,0(sp)
10010178:	dfc00415 	stw	ra,16(sp)
1001017c:	2821883a 	mov	r16,r5
10010180:	9ccf8f04 	addi	r19,r19,15932
10010184:	2025883a 	mov	r18,r4
10010188:	001f7980 	call	1001f798 <__malloc_lock>
1001018c:	98800217 	ldw	r2,8(r19)
10010190:	14400117 	ldw	r17,4(r2)
10010194:	00bfff04 	movi	r2,-4
10010198:	88a2703a 	and	r17,r17,r2
1001019c:	8c21c83a 	sub	r16,r17,r16
100101a0:	8403fbc4 	addi	r16,r16,4079
100101a4:	8020d33a 	srli	r16,r16,12
100101a8:	0083ffc4 	movi	r2,4095
100101ac:	843fffc4 	addi	r16,r16,-1
100101b0:	8020933a 	slli	r16,r16,12
100101b4:	1400060e 	bge	r2,r16,100101d0 <_malloc_trim_r+0x70>
100101b8:	000b883a 	mov	r5,zero
100101bc:	9009883a 	mov	r4,r18
100101c0:	001362c0 	call	1001362c <_sbrk_r>
100101c4:	98c00217 	ldw	r3,8(r19)
100101c8:	1c47883a 	add	r3,r3,r17
100101cc:	10c00a26 	beq	r2,r3,100101f8 <_malloc_trim_r+0x98>
100101d0:	9009883a 	mov	r4,r18
100101d4:	001f7bc0 	call	1001f7bc <__malloc_unlock>
100101d8:	0005883a 	mov	r2,zero
100101dc:	dfc00417 	ldw	ra,16(sp)
100101e0:	dcc00317 	ldw	r19,12(sp)
100101e4:	dc800217 	ldw	r18,8(sp)
100101e8:	dc400117 	ldw	r17,4(sp)
100101ec:	dc000017 	ldw	r16,0(sp)
100101f0:	dec00504 	addi	sp,sp,20
100101f4:	f800283a 	ret
100101f8:	040bc83a 	sub	r5,zero,r16
100101fc:	9009883a 	mov	r4,r18
10010200:	001362c0 	call	1001362c <_sbrk_r>
10010204:	00ffffc4 	movi	r3,-1
10010208:	10c00d26 	beq	r2,r3,10010240 <_malloc_trim_r+0xe0>
1001020c:	00c400b4 	movhi	r3,4098
10010210:	18dd8804 	addi	r3,r3,30240
10010214:	18800017 	ldw	r2,0(r3)
10010218:	99000217 	ldw	r4,8(r19)
1001021c:	8c23c83a 	sub	r17,r17,r16
10010220:	8c400054 	ori	r17,r17,1
10010224:	1421c83a 	sub	r16,r2,r16
10010228:	24400115 	stw	r17,4(r4)
1001022c:	9009883a 	mov	r4,r18
10010230:	1c000015 	stw	r16,0(r3)
10010234:	001f7bc0 	call	1001f7bc <__malloc_unlock>
10010238:	00800044 	movi	r2,1
1001023c:	003fe706 	br	100101dc <__alt_data_end+0xf80101dc>
10010240:	000b883a 	mov	r5,zero
10010244:	9009883a 	mov	r4,r18
10010248:	001362c0 	call	1001362c <_sbrk_r>
1001024c:	99000217 	ldw	r4,8(r19)
10010250:	014003c4 	movi	r5,15
10010254:	1107c83a 	sub	r3,r2,r4
10010258:	28ffdd0e 	bge	r5,r3,100101d0 <__alt_data_end+0xf80101d0>
1001025c:	014400b4 	movhi	r5,4098
10010260:	29551904 	addi	r5,r5,21604
10010264:	29400017 	ldw	r5,0(r5)
10010268:	18c00054 	ori	r3,r3,1
1001026c:	20c00115 	stw	r3,4(r4)
10010270:	00c400b4 	movhi	r3,4098
10010274:	1145c83a 	sub	r2,r2,r5
10010278:	18dd8804 	addi	r3,r3,30240
1001027c:	18800015 	stw	r2,0(r3)
10010280:	003fd306 	br	100101d0 <__alt_data_end+0xf80101d0>

10010284 <_free_r>:
10010284:	28004126 	beq	r5,zero,1001038c <_free_r+0x108>
10010288:	defffd04 	addi	sp,sp,-12
1001028c:	dc400115 	stw	r17,4(sp)
10010290:	dc000015 	stw	r16,0(sp)
10010294:	2023883a 	mov	r17,r4
10010298:	2821883a 	mov	r16,r5
1001029c:	dfc00215 	stw	ra,8(sp)
100102a0:	001f7980 	call	1001f798 <__malloc_lock>
100102a4:	81ffff17 	ldw	r7,-4(r16)
100102a8:	00bfff84 	movi	r2,-2
100102ac:	010400b4 	movhi	r4,4098
100102b0:	81bffe04 	addi	r6,r16,-8
100102b4:	3884703a 	and	r2,r7,r2
100102b8:	210f8f04 	addi	r4,r4,15932
100102bc:	308b883a 	add	r5,r6,r2
100102c0:	2a400117 	ldw	r9,4(r5)
100102c4:	22000217 	ldw	r8,8(r4)
100102c8:	00ffff04 	movi	r3,-4
100102cc:	48c6703a 	and	r3,r9,r3
100102d0:	2a005726 	beq	r5,r8,10010430 <_free_r+0x1ac>
100102d4:	28c00115 	stw	r3,4(r5)
100102d8:	39c0004c 	andi	r7,r7,1
100102dc:	3800091e 	bne	r7,zero,10010304 <_free_r+0x80>
100102e0:	823ffe17 	ldw	r8,-8(r16)
100102e4:	22400204 	addi	r9,r4,8
100102e8:	320dc83a 	sub	r6,r6,r8
100102ec:	31c00217 	ldw	r7,8(r6)
100102f0:	1205883a 	add	r2,r2,r8
100102f4:	3a406526 	beq	r7,r9,1001048c <_free_r+0x208>
100102f8:	32000317 	ldw	r8,12(r6)
100102fc:	3a000315 	stw	r8,12(r7)
10010300:	41c00215 	stw	r7,8(r8)
10010304:	28cf883a 	add	r7,r5,r3
10010308:	39c00117 	ldw	r7,4(r7)
1001030c:	39c0004c 	andi	r7,r7,1
10010310:	38003a26 	beq	r7,zero,100103fc <_free_r+0x178>
10010314:	10c00054 	ori	r3,r2,1
10010318:	30c00115 	stw	r3,4(r6)
1001031c:	3087883a 	add	r3,r6,r2
10010320:	18800015 	stw	r2,0(r3)
10010324:	00c07fc4 	movi	r3,511
10010328:	18801936 	bltu	r3,r2,10010390 <_free_r+0x10c>
1001032c:	1004d0fa 	srli	r2,r2,3
10010330:	01c00044 	movi	r7,1
10010334:	21400117 	ldw	r5,4(r4)
10010338:	10c00044 	addi	r3,r2,1
1001033c:	18c7883a 	add	r3,r3,r3
10010340:	1005d0ba 	srai	r2,r2,2
10010344:	18c7883a 	add	r3,r3,r3
10010348:	18c7883a 	add	r3,r3,r3
1001034c:	1907883a 	add	r3,r3,r4
10010350:	3884983a 	sll	r2,r7,r2
10010354:	19c00017 	ldw	r7,0(r3)
10010358:	1a3ffe04 	addi	r8,r3,-8
1001035c:	1144b03a 	or	r2,r2,r5
10010360:	32000315 	stw	r8,12(r6)
10010364:	31c00215 	stw	r7,8(r6)
10010368:	20800115 	stw	r2,4(r4)
1001036c:	19800015 	stw	r6,0(r3)
10010370:	39800315 	stw	r6,12(r7)
10010374:	8809883a 	mov	r4,r17
10010378:	dfc00217 	ldw	ra,8(sp)
1001037c:	dc400117 	ldw	r17,4(sp)
10010380:	dc000017 	ldw	r16,0(sp)
10010384:	dec00304 	addi	sp,sp,12
10010388:	001f7bc1 	jmpi	1001f7bc <__malloc_unlock>
1001038c:	f800283a 	ret
10010390:	100ad27a 	srli	r5,r2,9
10010394:	00c00104 	movi	r3,4
10010398:	19404a36 	bltu	r3,r5,100104c4 <_free_r+0x240>
1001039c:	100ad1ba 	srli	r5,r2,6
100103a0:	28c00e44 	addi	r3,r5,57
100103a4:	18c7883a 	add	r3,r3,r3
100103a8:	29400e04 	addi	r5,r5,56
100103ac:	18c7883a 	add	r3,r3,r3
100103b0:	18c7883a 	add	r3,r3,r3
100103b4:	1909883a 	add	r4,r3,r4
100103b8:	20c00017 	ldw	r3,0(r4)
100103bc:	01c400b4 	movhi	r7,4098
100103c0:	213ffe04 	addi	r4,r4,-8
100103c4:	39cf8f04 	addi	r7,r7,15932
100103c8:	20c04426 	beq	r4,r3,100104dc <_free_r+0x258>
100103cc:	01ffff04 	movi	r7,-4
100103d0:	19400117 	ldw	r5,4(r3)
100103d4:	29ca703a 	and	r5,r5,r7
100103d8:	1140022e 	bgeu	r2,r5,100103e4 <_free_r+0x160>
100103dc:	18c00217 	ldw	r3,8(r3)
100103e0:	20fffb1e 	bne	r4,r3,100103d0 <__alt_data_end+0xf80103d0>
100103e4:	19000317 	ldw	r4,12(r3)
100103e8:	31000315 	stw	r4,12(r6)
100103ec:	30c00215 	stw	r3,8(r6)
100103f0:	21800215 	stw	r6,8(r4)
100103f4:	19800315 	stw	r6,12(r3)
100103f8:	003fde06 	br	10010374 <__alt_data_end+0xf8010374>
100103fc:	29c00217 	ldw	r7,8(r5)
10010400:	10c5883a 	add	r2,r2,r3
10010404:	00c400b4 	movhi	r3,4098
10010408:	18cf9104 	addi	r3,r3,15940
1001040c:	38c03b26 	beq	r7,r3,100104fc <_free_r+0x278>
10010410:	2a000317 	ldw	r8,12(r5)
10010414:	11400054 	ori	r5,r2,1
10010418:	3087883a 	add	r3,r6,r2
1001041c:	3a000315 	stw	r8,12(r7)
10010420:	41c00215 	stw	r7,8(r8)
10010424:	31400115 	stw	r5,4(r6)
10010428:	18800015 	stw	r2,0(r3)
1001042c:	003fbd06 	br	10010324 <__alt_data_end+0xf8010324>
10010430:	39c0004c 	andi	r7,r7,1
10010434:	10c5883a 	add	r2,r2,r3
10010438:	3800071e 	bne	r7,zero,10010458 <_free_r+0x1d4>
1001043c:	81fffe17 	ldw	r7,-8(r16)
10010440:	31cdc83a 	sub	r6,r6,r7
10010444:	30c00317 	ldw	r3,12(r6)
10010448:	31400217 	ldw	r5,8(r6)
1001044c:	11c5883a 	add	r2,r2,r7
10010450:	28c00315 	stw	r3,12(r5)
10010454:	19400215 	stw	r5,8(r3)
10010458:	10c00054 	ori	r3,r2,1
1001045c:	30c00115 	stw	r3,4(r6)
10010460:	00c400b4 	movhi	r3,4098
10010464:	18d51a04 	addi	r3,r3,21608
10010468:	18c00017 	ldw	r3,0(r3)
1001046c:	21800215 	stw	r6,8(r4)
10010470:	10ffc036 	bltu	r2,r3,10010374 <__alt_data_end+0xf8010374>
10010474:	008400b4 	movhi	r2,4098
10010478:	109d7f04 	addi	r2,r2,30204
1001047c:	11400017 	ldw	r5,0(r2)
10010480:	8809883a 	mov	r4,r17
10010484:	00101600 	call	10010160 <_malloc_trim_r>
10010488:	003fba06 	br	10010374 <__alt_data_end+0xf8010374>
1001048c:	28c9883a 	add	r4,r5,r3
10010490:	21000117 	ldw	r4,4(r4)
10010494:	2100004c 	andi	r4,r4,1
10010498:	2000391e 	bne	r4,zero,10010580 <_free_r+0x2fc>
1001049c:	29c00217 	ldw	r7,8(r5)
100104a0:	29000317 	ldw	r4,12(r5)
100104a4:	1885883a 	add	r2,r3,r2
100104a8:	10c00054 	ori	r3,r2,1
100104ac:	39000315 	stw	r4,12(r7)
100104b0:	21c00215 	stw	r7,8(r4)
100104b4:	30c00115 	stw	r3,4(r6)
100104b8:	308d883a 	add	r6,r6,r2
100104bc:	30800015 	stw	r2,0(r6)
100104c0:	003fac06 	br	10010374 <__alt_data_end+0xf8010374>
100104c4:	00c00504 	movi	r3,20
100104c8:	19401536 	bltu	r3,r5,10010520 <_free_r+0x29c>
100104cc:	28c01704 	addi	r3,r5,92
100104d0:	18c7883a 	add	r3,r3,r3
100104d4:	294016c4 	addi	r5,r5,91
100104d8:	003fb406 	br	100103ac <__alt_data_end+0xf80103ac>
100104dc:	280bd0ba 	srai	r5,r5,2
100104e0:	00c00044 	movi	r3,1
100104e4:	38800117 	ldw	r2,4(r7)
100104e8:	194a983a 	sll	r5,r3,r5
100104ec:	2007883a 	mov	r3,r4
100104f0:	2884b03a 	or	r2,r5,r2
100104f4:	38800115 	stw	r2,4(r7)
100104f8:	003fbb06 	br	100103e8 <__alt_data_end+0xf80103e8>
100104fc:	21800515 	stw	r6,20(r4)
10010500:	21800415 	stw	r6,16(r4)
10010504:	10c00054 	ori	r3,r2,1
10010508:	31c00315 	stw	r7,12(r6)
1001050c:	31c00215 	stw	r7,8(r6)
10010510:	30c00115 	stw	r3,4(r6)
10010514:	308d883a 	add	r6,r6,r2
10010518:	30800015 	stw	r2,0(r6)
1001051c:	003f9506 	br	10010374 <__alt_data_end+0xf8010374>
10010520:	00c01504 	movi	r3,84
10010524:	19400536 	bltu	r3,r5,1001053c <_free_r+0x2b8>
10010528:	100ad33a 	srli	r5,r2,12
1001052c:	28c01bc4 	addi	r3,r5,111
10010530:	18c7883a 	add	r3,r3,r3
10010534:	29401b84 	addi	r5,r5,110
10010538:	003f9c06 	br	100103ac <__alt_data_end+0xf80103ac>
1001053c:	00c05504 	movi	r3,340
10010540:	19400536 	bltu	r3,r5,10010558 <_free_r+0x2d4>
10010544:	100ad3fa 	srli	r5,r2,15
10010548:	28c01e04 	addi	r3,r5,120
1001054c:	18c7883a 	add	r3,r3,r3
10010550:	29401dc4 	addi	r5,r5,119
10010554:	003f9506 	br	100103ac <__alt_data_end+0xf80103ac>
10010558:	00c15504 	movi	r3,1364
1001055c:	19400536 	bltu	r3,r5,10010574 <_free_r+0x2f0>
10010560:	100ad4ba 	srli	r5,r2,18
10010564:	28c01f44 	addi	r3,r5,125
10010568:	18c7883a 	add	r3,r3,r3
1001056c:	29401f04 	addi	r5,r5,124
10010570:	003f8e06 	br	100103ac <__alt_data_end+0xf80103ac>
10010574:	00c03f84 	movi	r3,254
10010578:	01401f84 	movi	r5,126
1001057c:	003f8b06 	br	100103ac <__alt_data_end+0xf80103ac>
10010580:	10c00054 	ori	r3,r2,1
10010584:	30c00115 	stw	r3,4(r6)
10010588:	308d883a 	add	r6,r6,r2
1001058c:	30800015 	stw	r2,0(r6)
10010590:	003f7806 	br	10010374 <__alt_data_end+0xf8010374>

10010594 <__sfvwrite_r>:
10010594:	30800217 	ldw	r2,8(r6)
10010598:	10006726 	beq	r2,zero,10010738 <__sfvwrite_r+0x1a4>
1001059c:	28c0030b 	ldhu	r3,12(r5)
100105a0:	defff404 	addi	sp,sp,-48
100105a4:	dd400715 	stw	r21,28(sp)
100105a8:	dd000615 	stw	r20,24(sp)
100105ac:	dc000215 	stw	r16,8(sp)
100105b0:	dfc00b15 	stw	ra,44(sp)
100105b4:	df000a15 	stw	fp,40(sp)
100105b8:	ddc00915 	stw	r23,36(sp)
100105bc:	dd800815 	stw	r22,32(sp)
100105c0:	dcc00515 	stw	r19,20(sp)
100105c4:	dc800415 	stw	r18,16(sp)
100105c8:	dc400315 	stw	r17,12(sp)
100105cc:	1880020c 	andi	r2,r3,8
100105d0:	2821883a 	mov	r16,r5
100105d4:	202b883a 	mov	r21,r4
100105d8:	3029883a 	mov	r20,r6
100105dc:	10002726 	beq	r2,zero,1001067c <__sfvwrite_r+0xe8>
100105e0:	28800417 	ldw	r2,16(r5)
100105e4:	10002526 	beq	r2,zero,1001067c <__sfvwrite_r+0xe8>
100105e8:	1880008c 	andi	r2,r3,2
100105ec:	a4400017 	ldw	r17,0(r20)
100105f0:	10002a26 	beq	r2,zero,1001069c <__sfvwrite_r+0x108>
100105f4:	05a00034 	movhi	r22,32768
100105f8:	0027883a 	mov	r19,zero
100105fc:	0025883a 	mov	r18,zero
10010600:	b5bf0004 	addi	r22,r22,-1024
10010604:	980d883a 	mov	r6,r19
10010608:	a809883a 	mov	r4,r21
1001060c:	90004626 	beq	r18,zero,10010728 <__sfvwrite_r+0x194>
10010610:	900f883a 	mov	r7,r18
10010614:	b480022e 	bgeu	r22,r18,10010620 <__sfvwrite_r+0x8c>
10010618:	01e00034 	movhi	r7,32768
1001061c:	39ff0004 	addi	r7,r7,-1024
10010620:	80800917 	ldw	r2,36(r16)
10010624:	81400717 	ldw	r5,28(r16)
10010628:	103ee83a 	callr	r2
1001062c:	00805a0e 	bge	zero,r2,10010798 <__sfvwrite_r+0x204>
10010630:	a0c00217 	ldw	r3,8(r20)
10010634:	98a7883a 	add	r19,r19,r2
10010638:	90a5c83a 	sub	r18,r18,r2
1001063c:	1885c83a 	sub	r2,r3,r2
10010640:	a0800215 	stw	r2,8(r20)
10010644:	103fef1e 	bne	r2,zero,10010604 <__alt_data_end+0xf8010604>
10010648:	0005883a 	mov	r2,zero
1001064c:	dfc00b17 	ldw	ra,44(sp)
10010650:	df000a17 	ldw	fp,40(sp)
10010654:	ddc00917 	ldw	r23,36(sp)
10010658:	dd800817 	ldw	r22,32(sp)
1001065c:	dd400717 	ldw	r21,28(sp)
10010660:	dd000617 	ldw	r20,24(sp)
10010664:	dcc00517 	ldw	r19,20(sp)
10010668:	dc800417 	ldw	r18,16(sp)
1001066c:	dc400317 	ldw	r17,12(sp)
10010670:	dc000217 	ldw	r16,8(sp)
10010674:	dec00c04 	addi	sp,sp,48
10010678:	f800283a 	ret
1001067c:	800b883a 	mov	r5,r16
10010680:	a809883a 	mov	r4,r21
10010684:	000de940 	call	1000de94 <__swsetup_r>
10010688:	1000ee1e 	bne	r2,zero,10010a44 <__sfvwrite_r+0x4b0>
1001068c:	80c0030b 	ldhu	r3,12(r16)
10010690:	a4400017 	ldw	r17,0(r20)
10010694:	1880008c 	andi	r2,r3,2
10010698:	103fd61e 	bne	r2,zero,100105f4 <__alt_data_end+0xf80105f4>
1001069c:	1880004c 	andi	r2,r3,1
100106a0:	1000421e 	bne	r2,zero,100107ac <__sfvwrite_r+0x218>
100106a4:	0039883a 	mov	fp,zero
100106a8:	0025883a 	mov	r18,zero
100106ac:	90001a26 	beq	r18,zero,10010718 <__sfvwrite_r+0x184>
100106b0:	1880800c 	andi	r2,r3,512
100106b4:	84c00217 	ldw	r19,8(r16)
100106b8:	10002126 	beq	r2,zero,10010740 <__sfvwrite_r+0x1ac>
100106bc:	982f883a 	mov	r23,r19
100106c0:	94c09636 	bltu	r18,r19,1001091c <__sfvwrite_r+0x388>
100106c4:	1881200c 	andi	r2,r3,1152
100106c8:	1000a11e 	bne	r2,zero,10010950 <__sfvwrite_r+0x3bc>
100106cc:	81000017 	ldw	r4,0(r16)
100106d0:	b80d883a 	mov	r6,r23
100106d4:	e00b883a 	mov	r5,fp
100106d8:	00119c00 	call	100119c0 <memmove>
100106dc:	80c00217 	ldw	r3,8(r16)
100106e0:	81000017 	ldw	r4,0(r16)
100106e4:	9005883a 	mov	r2,r18
100106e8:	1ce7c83a 	sub	r19,r3,r19
100106ec:	25cf883a 	add	r7,r4,r23
100106f0:	84c00215 	stw	r19,8(r16)
100106f4:	81c00015 	stw	r7,0(r16)
100106f8:	a0c00217 	ldw	r3,8(r20)
100106fc:	e0b9883a 	add	fp,fp,r2
10010700:	90a5c83a 	sub	r18,r18,r2
10010704:	18a7c83a 	sub	r19,r3,r2
10010708:	a4c00215 	stw	r19,8(r20)
1001070c:	983fce26 	beq	r19,zero,10010648 <__alt_data_end+0xf8010648>
10010710:	80c0030b 	ldhu	r3,12(r16)
10010714:	903fe61e 	bne	r18,zero,100106b0 <__alt_data_end+0xf80106b0>
10010718:	8f000017 	ldw	fp,0(r17)
1001071c:	8c800117 	ldw	r18,4(r17)
10010720:	8c400204 	addi	r17,r17,8
10010724:	003fe106 	br	100106ac <__alt_data_end+0xf80106ac>
10010728:	8cc00017 	ldw	r19,0(r17)
1001072c:	8c800117 	ldw	r18,4(r17)
10010730:	8c400204 	addi	r17,r17,8
10010734:	003fb306 	br	10010604 <__alt_data_end+0xf8010604>
10010738:	0005883a 	mov	r2,zero
1001073c:	f800283a 	ret
10010740:	81000017 	ldw	r4,0(r16)
10010744:	80800417 	ldw	r2,16(r16)
10010748:	11005a36 	bltu	r2,r4,100108b4 <__sfvwrite_r+0x320>
1001074c:	85c00517 	ldw	r23,20(r16)
10010750:	95c05836 	bltu	r18,r23,100108b4 <__sfvwrite_r+0x320>
10010754:	00a00034 	movhi	r2,32768
10010758:	10bfffc4 	addi	r2,r2,-1
1001075c:	9009883a 	mov	r4,r18
10010760:	1480012e 	bgeu	r2,r18,10010768 <__sfvwrite_r+0x1d4>
10010764:	1009883a 	mov	r4,r2
10010768:	b80b883a 	mov	r5,r23
1001076c:	0009ad00 	call	10009ad0 <__divsi3>
10010770:	b80b883a 	mov	r5,r23
10010774:	1009883a 	mov	r4,r2
10010778:	0008ef00 	call	10008ef0 <__mulsi3>
1001077c:	81400717 	ldw	r5,28(r16)
10010780:	80c00917 	ldw	r3,36(r16)
10010784:	100f883a 	mov	r7,r2
10010788:	e00d883a 	mov	r6,fp
1001078c:	a809883a 	mov	r4,r21
10010790:	183ee83a 	callr	r3
10010794:	00bfd816 	blt	zero,r2,100106f8 <__alt_data_end+0xf80106f8>
10010798:	8080030b 	ldhu	r2,12(r16)
1001079c:	10801014 	ori	r2,r2,64
100107a0:	8080030d 	sth	r2,12(r16)
100107a4:	00bfffc4 	movi	r2,-1
100107a8:	003fa806 	br	1001064c <__alt_data_end+0xf801064c>
100107ac:	0027883a 	mov	r19,zero
100107b0:	0011883a 	mov	r8,zero
100107b4:	0039883a 	mov	fp,zero
100107b8:	0025883a 	mov	r18,zero
100107bc:	90001f26 	beq	r18,zero,1001083c <__sfvwrite_r+0x2a8>
100107c0:	40005a26 	beq	r8,zero,1001092c <__sfvwrite_r+0x398>
100107c4:	982d883a 	mov	r22,r19
100107c8:	94c0012e 	bgeu	r18,r19,100107d0 <__sfvwrite_r+0x23c>
100107cc:	902d883a 	mov	r22,r18
100107d0:	81000017 	ldw	r4,0(r16)
100107d4:	80800417 	ldw	r2,16(r16)
100107d8:	b02f883a 	mov	r23,r22
100107dc:	81c00517 	ldw	r7,20(r16)
100107e0:	1100032e 	bgeu	r2,r4,100107f0 <__sfvwrite_r+0x25c>
100107e4:	80c00217 	ldw	r3,8(r16)
100107e8:	38c7883a 	add	r3,r7,r3
100107ec:	1d801816 	blt	r3,r22,10010850 <__sfvwrite_r+0x2bc>
100107f0:	b1c03e16 	blt	r22,r7,100108ec <__sfvwrite_r+0x358>
100107f4:	80800917 	ldw	r2,36(r16)
100107f8:	81400717 	ldw	r5,28(r16)
100107fc:	e00d883a 	mov	r6,fp
10010800:	da000115 	stw	r8,4(sp)
10010804:	a809883a 	mov	r4,r21
10010808:	103ee83a 	callr	r2
1001080c:	102f883a 	mov	r23,r2
10010810:	da000117 	ldw	r8,4(sp)
10010814:	00bfe00e 	bge	zero,r2,10010798 <__alt_data_end+0xf8010798>
10010818:	9de7c83a 	sub	r19,r19,r23
1001081c:	98001f26 	beq	r19,zero,1001089c <__sfvwrite_r+0x308>
10010820:	a0800217 	ldw	r2,8(r20)
10010824:	e5f9883a 	add	fp,fp,r23
10010828:	95e5c83a 	sub	r18,r18,r23
1001082c:	15efc83a 	sub	r23,r2,r23
10010830:	a5c00215 	stw	r23,8(r20)
10010834:	b83f8426 	beq	r23,zero,10010648 <__alt_data_end+0xf8010648>
10010838:	903fe11e 	bne	r18,zero,100107c0 <__alt_data_end+0xf80107c0>
1001083c:	8f000017 	ldw	fp,0(r17)
10010840:	8c800117 	ldw	r18,4(r17)
10010844:	0011883a 	mov	r8,zero
10010848:	8c400204 	addi	r17,r17,8
1001084c:	003fdb06 	br	100107bc <__alt_data_end+0xf80107bc>
10010850:	180d883a 	mov	r6,r3
10010854:	e00b883a 	mov	r5,fp
10010858:	da000115 	stw	r8,4(sp)
1001085c:	d8c00015 	stw	r3,0(sp)
10010860:	00119c00 	call	100119c0 <memmove>
10010864:	d8c00017 	ldw	r3,0(sp)
10010868:	80800017 	ldw	r2,0(r16)
1001086c:	800b883a 	mov	r5,r16
10010870:	a809883a 	mov	r4,r21
10010874:	10c5883a 	add	r2,r2,r3
10010878:	80800015 	stw	r2,0(r16)
1001087c:	d8c00015 	stw	r3,0(sp)
10010880:	000fab40 	call	1000fab4 <_fflush_r>
10010884:	d8c00017 	ldw	r3,0(sp)
10010888:	da000117 	ldw	r8,4(sp)
1001088c:	103fc21e 	bne	r2,zero,10010798 <__alt_data_end+0xf8010798>
10010890:	182f883a 	mov	r23,r3
10010894:	9de7c83a 	sub	r19,r19,r23
10010898:	983fe11e 	bne	r19,zero,10010820 <__alt_data_end+0xf8010820>
1001089c:	800b883a 	mov	r5,r16
100108a0:	a809883a 	mov	r4,r21
100108a4:	000fab40 	call	1000fab4 <_fflush_r>
100108a8:	103fbb1e 	bne	r2,zero,10010798 <__alt_data_end+0xf8010798>
100108ac:	0011883a 	mov	r8,zero
100108b0:	003fdb06 	br	10010820 <__alt_data_end+0xf8010820>
100108b4:	94c0012e 	bgeu	r18,r19,100108bc <__sfvwrite_r+0x328>
100108b8:	9027883a 	mov	r19,r18
100108bc:	980d883a 	mov	r6,r19
100108c0:	e00b883a 	mov	r5,fp
100108c4:	00119c00 	call	100119c0 <memmove>
100108c8:	80800217 	ldw	r2,8(r16)
100108cc:	80c00017 	ldw	r3,0(r16)
100108d0:	14c5c83a 	sub	r2,r2,r19
100108d4:	1cc7883a 	add	r3,r3,r19
100108d8:	80800215 	stw	r2,8(r16)
100108dc:	80c00015 	stw	r3,0(r16)
100108e0:	10004326 	beq	r2,zero,100109f0 <__sfvwrite_r+0x45c>
100108e4:	9805883a 	mov	r2,r19
100108e8:	003f8306 	br	100106f8 <__alt_data_end+0xf80106f8>
100108ec:	b00d883a 	mov	r6,r22
100108f0:	e00b883a 	mov	r5,fp
100108f4:	da000115 	stw	r8,4(sp)
100108f8:	00119c00 	call	100119c0 <memmove>
100108fc:	80800217 	ldw	r2,8(r16)
10010900:	80c00017 	ldw	r3,0(r16)
10010904:	da000117 	ldw	r8,4(sp)
10010908:	1585c83a 	sub	r2,r2,r22
1001090c:	1dad883a 	add	r22,r3,r22
10010910:	80800215 	stw	r2,8(r16)
10010914:	85800015 	stw	r22,0(r16)
10010918:	003fbf06 	br	10010818 <__alt_data_end+0xf8010818>
1001091c:	81000017 	ldw	r4,0(r16)
10010920:	9027883a 	mov	r19,r18
10010924:	902f883a 	mov	r23,r18
10010928:	003f6906 	br	100106d0 <__alt_data_end+0xf80106d0>
1001092c:	900d883a 	mov	r6,r18
10010930:	01400284 	movi	r5,10
10010934:	e009883a 	mov	r4,fp
10010938:	00118dc0 	call	100118dc <memchr>
1001093c:	10003e26 	beq	r2,zero,10010a38 <__sfvwrite_r+0x4a4>
10010940:	10800044 	addi	r2,r2,1
10010944:	1727c83a 	sub	r19,r2,fp
10010948:	02000044 	movi	r8,1
1001094c:	003f9d06 	br	100107c4 <__alt_data_end+0xf80107c4>
10010950:	80800517 	ldw	r2,20(r16)
10010954:	81400417 	ldw	r5,16(r16)
10010958:	81c00017 	ldw	r7,0(r16)
1001095c:	10a7883a 	add	r19,r2,r2
10010960:	9885883a 	add	r2,r19,r2
10010964:	1026d7fa 	srli	r19,r2,31
10010968:	396dc83a 	sub	r22,r7,r5
1001096c:	b1000044 	addi	r4,r22,1
10010970:	9885883a 	add	r2,r19,r2
10010974:	1027d07a 	srai	r19,r2,1
10010978:	2485883a 	add	r2,r4,r18
1001097c:	980d883a 	mov	r6,r19
10010980:	9880022e 	bgeu	r19,r2,1001098c <__sfvwrite_r+0x3f8>
10010984:	1027883a 	mov	r19,r2
10010988:	100d883a 	mov	r6,r2
1001098c:	18c1000c 	andi	r3,r3,1024
10010990:	18001c26 	beq	r3,zero,10010a04 <__sfvwrite_r+0x470>
10010994:	300b883a 	mov	r5,r6
10010998:	a809883a 	mov	r4,r21
1001099c:	0010eac0 	call	10010eac <_malloc_r>
100109a0:	102f883a 	mov	r23,r2
100109a4:	10002926 	beq	r2,zero,10010a4c <__sfvwrite_r+0x4b8>
100109a8:	81400417 	ldw	r5,16(r16)
100109ac:	b00d883a 	mov	r6,r22
100109b0:	1009883a 	mov	r4,r2
100109b4:	0009cd00 	call	10009cd0 <memcpy>
100109b8:	8080030b 	ldhu	r2,12(r16)
100109bc:	00fedfc4 	movi	r3,-1153
100109c0:	10c4703a 	and	r2,r2,r3
100109c4:	10802014 	ori	r2,r2,128
100109c8:	8080030d 	sth	r2,12(r16)
100109cc:	bd89883a 	add	r4,r23,r22
100109d0:	9d8fc83a 	sub	r7,r19,r22
100109d4:	85c00415 	stw	r23,16(r16)
100109d8:	84c00515 	stw	r19,20(r16)
100109dc:	81000015 	stw	r4,0(r16)
100109e0:	9027883a 	mov	r19,r18
100109e4:	81c00215 	stw	r7,8(r16)
100109e8:	902f883a 	mov	r23,r18
100109ec:	003f3806 	br	100106d0 <__alt_data_end+0xf80106d0>
100109f0:	800b883a 	mov	r5,r16
100109f4:	a809883a 	mov	r4,r21
100109f8:	000fab40 	call	1000fab4 <_fflush_r>
100109fc:	103fb926 	beq	r2,zero,100108e4 <__alt_data_end+0xf80108e4>
10010a00:	003f6506 	br	10010798 <__alt_data_end+0xf8010798>
10010a04:	a809883a 	mov	r4,r21
10010a08:	0012e640 	call	10012e64 <_realloc_r>
10010a0c:	102f883a 	mov	r23,r2
10010a10:	103fee1e 	bne	r2,zero,100109cc <__alt_data_end+0xf80109cc>
10010a14:	81400417 	ldw	r5,16(r16)
10010a18:	a809883a 	mov	r4,r21
10010a1c:	00102840 	call	10010284 <_free_r>
10010a20:	8080030b 	ldhu	r2,12(r16)
10010a24:	00ffdfc4 	movi	r3,-129
10010a28:	1884703a 	and	r2,r3,r2
10010a2c:	00c00304 	movi	r3,12
10010a30:	a8c00015 	stw	r3,0(r21)
10010a34:	003f5906 	br	1001079c <__alt_data_end+0xf801079c>
10010a38:	94c00044 	addi	r19,r18,1
10010a3c:	02000044 	movi	r8,1
10010a40:	003f6006 	br	100107c4 <__alt_data_end+0xf80107c4>
10010a44:	00bfffc4 	movi	r2,-1
10010a48:	003f0006 	br	1001064c <__alt_data_end+0xf801064c>
10010a4c:	00800304 	movi	r2,12
10010a50:	a8800015 	stw	r2,0(r21)
10010a54:	8080030b 	ldhu	r2,12(r16)
10010a58:	003f5006 	br	1001079c <__alt_data_end+0xf801079c>

10010a5c <_fwalk>:
10010a5c:	defff704 	addi	sp,sp,-36
10010a60:	dd000415 	stw	r20,16(sp)
10010a64:	dfc00815 	stw	ra,32(sp)
10010a68:	ddc00715 	stw	r23,28(sp)
10010a6c:	dd800615 	stw	r22,24(sp)
10010a70:	dd400515 	stw	r21,20(sp)
10010a74:	dcc00315 	stw	r19,12(sp)
10010a78:	dc800215 	stw	r18,8(sp)
10010a7c:	dc400115 	stw	r17,4(sp)
10010a80:	dc000015 	stw	r16,0(sp)
10010a84:	2500b804 	addi	r20,r4,736
10010a88:	a0002326 	beq	r20,zero,10010b18 <_fwalk+0xbc>
10010a8c:	282b883a 	mov	r21,r5
10010a90:	002f883a 	mov	r23,zero
10010a94:	05800044 	movi	r22,1
10010a98:	04ffffc4 	movi	r19,-1
10010a9c:	a4400117 	ldw	r17,4(r20)
10010aa0:	a4800217 	ldw	r18,8(r20)
10010aa4:	8c7fffc4 	addi	r17,r17,-1
10010aa8:	88000d16 	blt	r17,zero,10010ae0 <_fwalk+0x84>
10010aac:	94000304 	addi	r16,r18,12
10010ab0:	94800384 	addi	r18,r18,14
10010ab4:	8080000b 	ldhu	r2,0(r16)
10010ab8:	8c7fffc4 	addi	r17,r17,-1
10010abc:	813ffd04 	addi	r4,r16,-12
10010ac0:	b080042e 	bgeu	r22,r2,10010ad4 <_fwalk+0x78>
10010ac4:	9080000f 	ldh	r2,0(r18)
10010ac8:	14c00226 	beq	r2,r19,10010ad4 <_fwalk+0x78>
10010acc:	a83ee83a 	callr	r21
10010ad0:	b8aeb03a 	or	r23,r23,r2
10010ad4:	84001a04 	addi	r16,r16,104
10010ad8:	94801a04 	addi	r18,r18,104
10010adc:	8cfff51e 	bne	r17,r19,10010ab4 <__alt_data_end+0xf8010ab4>
10010ae0:	a5000017 	ldw	r20,0(r20)
10010ae4:	a03fed1e 	bne	r20,zero,10010a9c <__alt_data_end+0xf8010a9c>
10010ae8:	b805883a 	mov	r2,r23
10010aec:	dfc00817 	ldw	ra,32(sp)
10010af0:	ddc00717 	ldw	r23,28(sp)
10010af4:	dd800617 	ldw	r22,24(sp)
10010af8:	dd400517 	ldw	r21,20(sp)
10010afc:	dd000417 	ldw	r20,16(sp)
10010b00:	dcc00317 	ldw	r19,12(sp)
10010b04:	dc800217 	ldw	r18,8(sp)
10010b08:	dc400117 	ldw	r17,4(sp)
10010b0c:	dc000017 	ldw	r16,0(sp)
10010b10:	dec00904 	addi	sp,sp,36
10010b14:	f800283a 	ret
10010b18:	002f883a 	mov	r23,zero
10010b1c:	003ff206 	br	10010ae8 <__alt_data_end+0xf8010ae8>

10010b20 <_fwalk_reent>:
10010b20:	defff704 	addi	sp,sp,-36
10010b24:	dd000415 	stw	r20,16(sp)
10010b28:	dfc00815 	stw	ra,32(sp)
10010b2c:	ddc00715 	stw	r23,28(sp)
10010b30:	dd800615 	stw	r22,24(sp)
10010b34:	dd400515 	stw	r21,20(sp)
10010b38:	dcc00315 	stw	r19,12(sp)
10010b3c:	dc800215 	stw	r18,8(sp)
10010b40:	dc400115 	stw	r17,4(sp)
10010b44:	dc000015 	stw	r16,0(sp)
10010b48:	2500b804 	addi	r20,r4,736
10010b4c:	a0002326 	beq	r20,zero,10010bdc <_fwalk_reent+0xbc>
10010b50:	282b883a 	mov	r21,r5
10010b54:	2027883a 	mov	r19,r4
10010b58:	002f883a 	mov	r23,zero
10010b5c:	05800044 	movi	r22,1
10010b60:	04bfffc4 	movi	r18,-1
10010b64:	a4400117 	ldw	r17,4(r20)
10010b68:	a4000217 	ldw	r16,8(r20)
10010b6c:	8c7fffc4 	addi	r17,r17,-1
10010b70:	88000c16 	blt	r17,zero,10010ba4 <_fwalk_reent+0x84>
10010b74:	84000304 	addi	r16,r16,12
10010b78:	8080000b 	ldhu	r2,0(r16)
10010b7c:	8c7fffc4 	addi	r17,r17,-1
10010b80:	817ffd04 	addi	r5,r16,-12
10010b84:	b080052e 	bgeu	r22,r2,10010b9c <_fwalk_reent+0x7c>
10010b88:	8080008f 	ldh	r2,2(r16)
10010b8c:	9809883a 	mov	r4,r19
10010b90:	14800226 	beq	r2,r18,10010b9c <_fwalk_reent+0x7c>
10010b94:	a83ee83a 	callr	r21
10010b98:	b8aeb03a 	or	r23,r23,r2
10010b9c:	84001a04 	addi	r16,r16,104
10010ba0:	8cbff51e 	bne	r17,r18,10010b78 <__alt_data_end+0xf8010b78>
10010ba4:	a5000017 	ldw	r20,0(r20)
10010ba8:	a03fee1e 	bne	r20,zero,10010b64 <__alt_data_end+0xf8010b64>
10010bac:	b805883a 	mov	r2,r23
10010bb0:	dfc00817 	ldw	ra,32(sp)
10010bb4:	ddc00717 	ldw	r23,28(sp)
10010bb8:	dd800617 	ldw	r22,24(sp)
10010bbc:	dd400517 	ldw	r21,20(sp)
10010bc0:	dd000417 	ldw	r20,16(sp)
10010bc4:	dcc00317 	ldw	r19,12(sp)
10010bc8:	dc800217 	ldw	r18,8(sp)
10010bcc:	dc400117 	ldw	r17,4(sp)
10010bd0:	dc000017 	ldw	r16,0(sp)
10010bd4:	dec00904 	addi	sp,sp,36
10010bd8:	f800283a 	ret
10010bdc:	002f883a 	mov	r23,zero
10010be0:	003ff206 	br	10010bac <__alt_data_end+0xf8010bac>

10010be4 <iswspace>:
10010be4:	00803fc4 	movi	r2,255
10010be8:	11000836 	bltu	r2,r4,10010c0c <iswspace+0x28>
10010bec:	008400b4 	movhi	r2,4098
10010bf0:	10951704 	addi	r2,r2,21596
10010bf4:	10800017 	ldw	r2,0(r2)
10010bf8:	1109883a 	add	r4,r2,r4
10010bfc:	20800043 	ldbu	r2,1(r4)
10010c00:	1080020c 	andi	r2,r2,8
10010c04:	10803fcc 	andi	r2,r2,255
10010c08:	f800283a 	ret
10010c0c:	0005883a 	mov	r2,zero
10010c10:	f800283a 	ret

10010c14 <_setlocale_r>:
10010c14:	30001b26 	beq	r6,zero,10010c84 <_setlocale_r+0x70>
10010c18:	014400b4 	movhi	r5,4098
10010c1c:	defffe04 	addi	sp,sp,-8
10010c20:	294c0f04 	addi	r5,r5,12348
10010c24:	3009883a 	mov	r4,r6
10010c28:	dc000015 	stw	r16,0(sp)
10010c2c:	dfc00115 	stw	ra,4(sp)
10010c30:	3021883a 	mov	r16,r6
10010c34:	00139580 	call	10013958 <strcmp>
10010c38:	1000061e 	bne	r2,zero,10010c54 <_setlocale_r+0x40>
10010c3c:	008400b4 	movhi	r2,4098
10010c40:	108b4504 	addi	r2,r2,11540
10010c44:	dfc00117 	ldw	ra,4(sp)
10010c48:	dc000017 	ldw	r16,0(sp)
10010c4c:	dec00204 	addi	sp,sp,8
10010c50:	f800283a 	ret
10010c54:	014400b4 	movhi	r5,4098
10010c58:	294b4504 	addi	r5,r5,11540
10010c5c:	8009883a 	mov	r4,r16
10010c60:	00139580 	call	10013958 <strcmp>
10010c64:	103ff526 	beq	r2,zero,10010c3c <__alt_data_end+0xf8010c3c>
10010c68:	014400b4 	movhi	r5,4098
10010c6c:	294b4f04 	addi	r5,r5,11580
10010c70:	8009883a 	mov	r4,r16
10010c74:	00139580 	call	10013958 <strcmp>
10010c78:	103ff026 	beq	r2,zero,10010c3c <__alt_data_end+0xf8010c3c>
10010c7c:	0005883a 	mov	r2,zero
10010c80:	003ff006 	br	10010c44 <__alt_data_end+0xf8010c44>
10010c84:	008400b4 	movhi	r2,4098
10010c88:	108b4504 	addi	r2,r2,11540
10010c8c:	f800283a 	ret

10010c90 <__locale_charset>:
10010c90:	008400b4 	movhi	r2,4098
10010c94:	108f7904 	addi	r2,r2,15844
10010c98:	f800283a 	ret

10010c9c <__locale_mb_cur_max>:
10010c9c:	008400b4 	movhi	r2,4098
10010ca0:	10951804 	addi	r2,r2,21600
10010ca4:	10800017 	ldw	r2,0(r2)
10010ca8:	f800283a 	ret

10010cac <__locale_msgcharset>:
10010cac:	008400b4 	movhi	r2,4098
10010cb0:	108f7104 	addi	r2,r2,15812
10010cb4:	f800283a 	ret

10010cb8 <__locale_cjk_lang>:
10010cb8:	0005883a 	mov	r2,zero
10010cbc:	f800283a 	ret

10010cc0 <_localeconv_r>:
10010cc0:	008400b4 	movhi	r2,4098
10010cc4:	108f8104 	addi	r2,r2,15876
10010cc8:	f800283a 	ret

10010ccc <setlocale>:
10010ccc:	008400b4 	movhi	r2,4098
10010cd0:	10951604 	addi	r2,r2,21592
10010cd4:	280d883a 	mov	r6,r5
10010cd8:	200b883a 	mov	r5,r4
10010cdc:	11000017 	ldw	r4,0(r2)
10010ce0:	0010c141 	jmpi	10010c14 <_setlocale_r>

10010ce4 <localeconv>:
10010ce4:	008400b4 	movhi	r2,4098
10010ce8:	108f8104 	addi	r2,r2,15876
10010cec:	f800283a 	ret

10010cf0 <__smakebuf_r>:
10010cf0:	2880030b 	ldhu	r2,12(r5)
10010cf4:	10c0008c 	andi	r3,r2,2
10010cf8:	1800411e 	bne	r3,zero,10010e00 <__smakebuf_r+0x110>
10010cfc:	deffec04 	addi	sp,sp,-80
10010d00:	dc000f15 	stw	r16,60(sp)
10010d04:	2821883a 	mov	r16,r5
10010d08:	2940038f 	ldh	r5,14(r5)
10010d0c:	dc401015 	stw	r17,64(sp)
10010d10:	dfc01315 	stw	ra,76(sp)
10010d14:	dcc01215 	stw	r19,72(sp)
10010d18:	dc801115 	stw	r18,68(sp)
10010d1c:	2023883a 	mov	r17,r4
10010d20:	28001c16 	blt	r5,zero,10010d94 <__smakebuf_r+0xa4>
10010d24:	d80d883a 	mov	r6,sp
10010d28:	0019ee80 	call	10019ee8 <_fstat_r>
10010d2c:	10001816 	blt	r2,zero,10010d90 <__smakebuf_r+0xa0>
10010d30:	d8800117 	ldw	r2,4(sp)
10010d34:	00e00014 	movui	r3,32768
10010d38:	10bc000c 	andi	r2,r2,61440
10010d3c:	14c80020 	cmpeqi	r19,r2,8192
10010d40:	10c03726 	beq	r2,r3,10010e20 <__smakebuf_r+0x130>
10010d44:	80c0030b 	ldhu	r3,12(r16)
10010d48:	18c20014 	ori	r3,r3,2048
10010d4c:	80c0030d 	sth	r3,12(r16)
10010d50:	00c80004 	movi	r3,8192
10010d54:	10c0521e 	bne	r2,r3,10010ea0 <__smakebuf_r+0x1b0>
10010d58:	8140038f 	ldh	r5,14(r16)
10010d5c:	8809883a 	mov	r4,r17
10010d60:	001aaf00 	call	1001aaf0 <_isatty_r>
10010d64:	10004c26 	beq	r2,zero,10010e98 <__smakebuf_r+0x1a8>
10010d68:	8080030b 	ldhu	r2,12(r16)
10010d6c:	80c010c4 	addi	r3,r16,67
10010d70:	80c00015 	stw	r3,0(r16)
10010d74:	10800054 	ori	r2,r2,1
10010d78:	8080030d 	sth	r2,12(r16)
10010d7c:	00800044 	movi	r2,1
10010d80:	80c00415 	stw	r3,16(r16)
10010d84:	80800515 	stw	r2,20(r16)
10010d88:	04810004 	movi	r18,1024
10010d8c:	00000706 	br	10010dac <__smakebuf_r+0xbc>
10010d90:	8080030b 	ldhu	r2,12(r16)
10010d94:	10c0200c 	andi	r3,r2,128
10010d98:	18001f1e 	bne	r3,zero,10010e18 <__smakebuf_r+0x128>
10010d9c:	04810004 	movi	r18,1024
10010da0:	10820014 	ori	r2,r2,2048
10010da4:	8080030d 	sth	r2,12(r16)
10010da8:	0027883a 	mov	r19,zero
10010dac:	900b883a 	mov	r5,r18
10010db0:	8809883a 	mov	r4,r17
10010db4:	0010eac0 	call	10010eac <_malloc_r>
10010db8:	10002c26 	beq	r2,zero,10010e6c <__smakebuf_r+0x17c>
10010dbc:	80c0030b 	ldhu	r3,12(r16)
10010dc0:	01040074 	movhi	r4,4097
10010dc4:	213ed204 	addi	r4,r4,-1208
10010dc8:	89000f15 	stw	r4,60(r17)
10010dcc:	18c02014 	ori	r3,r3,128
10010dd0:	80c0030d 	sth	r3,12(r16)
10010dd4:	80800015 	stw	r2,0(r16)
10010dd8:	80800415 	stw	r2,16(r16)
10010ddc:	84800515 	stw	r18,20(r16)
10010de0:	98001a1e 	bne	r19,zero,10010e4c <__smakebuf_r+0x15c>
10010de4:	dfc01317 	ldw	ra,76(sp)
10010de8:	dcc01217 	ldw	r19,72(sp)
10010dec:	dc801117 	ldw	r18,68(sp)
10010df0:	dc401017 	ldw	r17,64(sp)
10010df4:	dc000f17 	ldw	r16,60(sp)
10010df8:	dec01404 	addi	sp,sp,80
10010dfc:	f800283a 	ret
10010e00:	288010c4 	addi	r2,r5,67
10010e04:	28800015 	stw	r2,0(r5)
10010e08:	28800415 	stw	r2,16(r5)
10010e0c:	00800044 	movi	r2,1
10010e10:	28800515 	stw	r2,20(r5)
10010e14:	f800283a 	ret
10010e18:	04801004 	movi	r18,64
10010e1c:	003fe006 	br	10010da0 <__alt_data_end+0xf8010da0>
10010e20:	81000a17 	ldw	r4,40(r16)
10010e24:	00c40074 	movhi	r3,4097
10010e28:	18ce3d04 	addi	r3,r3,14580
10010e2c:	20ffc51e 	bne	r4,r3,10010d44 <__alt_data_end+0xf8010d44>
10010e30:	8080030b 	ldhu	r2,12(r16)
10010e34:	04810004 	movi	r18,1024
10010e38:	84801315 	stw	r18,76(r16)
10010e3c:	1484b03a 	or	r2,r2,r18
10010e40:	8080030d 	sth	r2,12(r16)
10010e44:	0027883a 	mov	r19,zero
10010e48:	003fd806 	br	10010dac <__alt_data_end+0xf8010dac>
10010e4c:	8140038f 	ldh	r5,14(r16)
10010e50:	8809883a 	mov	r4,r17
10010e54:	001aaf00 	call	1001aaf0 <_isatty_r>
10010e58:	103fe226 	beq	r2,zero,10010de4 <__alt_data_end+0xf8010de4>
10010e5c:	8080030b 	ldhu	r2,12(r16)
10010e60:	10800054 	ori	r2,r2,1
10010e64:	8080030d 	sth	r2,12(r16)
10010e68:	003fde06 	br	10010de4 <__alt_data_end+0xf8010de4>
10010e6c:	8080030b 	ldhu	r2,12(r16)
10010e70:	10c0800c 	andi	r3,r2,512
10010e74:	183fdb1e 	bne	r3,zero,10010de4 <__alt_data_end+0xf8010de4>
10010e78:	10800094 	ori	r2,r2,2
10010e7c:	80c010c4 	addi	r3,r16,67
10010e80:	8080030d 	sth	r2,12(r16)
10010e84:	00800044 	movi	r2,1
10010e88:	80c00015 	stw	r3,0(r16)
10010e8c:	80c00415 	stw	r3,16(r16)
10010e90:	80800515 	stw	r2,20(r16)
10010e94:	003fd306 	br	10010de4 <__alt_data_end+0xf8010de4>
10010e98:	04810004 	movi	r18,1024
10010e9c:	003fc306 	br	10010dac <__alt_data_end+0xf8010dac>
10010ea0:	0027883a 	mov	r19,zero
10010ea4:	04810004 	movi	r18,1024
10010ea8:	003fc006 	br	10010dac <__alt_data_end+0xf8010dac>

10010eac <_malloc_r>:
10010eac:	defff504 	addi	sp,sp,-44
10010eb0:	dc800315 	stw	r18,12(sp)
10010eb4:	dfc00a15 	stw	ra,40(sp)
10010eb8:	df000915 	stw	fp,36(sp)
10010ebc:	ddc00815 	stw	r23,32(sp)
10010ec0:	dd800715 	stw	r22,28(sp)
10010ec4:	dd400615 	stw	r21,24(sp)
10010ec8:	dd000515 	stw	r20,20(sp)
10010ecc:	dcc00415 	stw	r19,16(sp)
10010ed0:	dc400215 	stw	r17,8(sp)
10010ed4:	dc000115 	stw	r16,4(sp)
10010ed8:	288002c4 	addi	r2,r5,11
10010edc:	00c00584 	movi	r3,22
10010ee0:	2025883a 	mov	r18,r4
10010ee4:	18807f2e 	bgeu	r3,r2,100110e4 <_malloc_r+0x238>
10010ee8:	047ffe04 	movi	r17,-8
10010eec:	1462703a 	and	r17,r2,r17
10010ef0:	8800a316 	blt	r17,zero,10011180 <_malloc_r+0x2d4>
10010ef4:	8940a236 	bltu	r17,r5,10011180 <_malloc_r+0x2d4>
10010ef8:	001f7980 	call	1001f798 <__malloc_lock>
10010efc:	00807dc4 	movi	r2,503
10010f00:	1441e92e 	bgeu	r2,r17,100116a8 <_malloc_r+0x7fc>
10010f04:	8804d27a 	srli	r2,r17,9
10010f08:	1000a126 	beq	r2,zero,10011190 <_malloc_r+0x2e4>
10010f0c:	00c00104 	movi	r3,4
10010f10:	18811e36 	bltu	r3,r2,1001138c <_malloc_r+0x4e0>
10010f14:	8804d1ba 	srli	r2,r17,6
10010f18:	12000e44 	addi	r8,r2,57
10010f1c:	11c00e04 	addi	r7,r2,56
10010f20:	4209883a 	add	r4,r8,r8
10010f24:	04c400b4 	movhi	r19,4098
10010f28:	2109883a 	add	r4,r4,r4
10010f2c:	9ccf8f04 	addi	r19,r19,15932
10010f30:	2109883a 	add	r4,r4,r4
10010f34:	9909883a 	add	r4,r19,r4
10010f38:	24000117 	ldw	r16,4(r4)
10010f3c:	213ffe04 	addi	r4,r4,-8
10010f40:	24009726 	beq	r4,r16,100111a0 <_malloc_r+0x2f4>
10010f44:	80800117 	ldw	r2,4(r16)
10010f48:	01bfff04 	movi	r6,-4
10010f4c:	014003c4 	movi	r5,15
10010f50:	1184703a 	and	r2,r2,r6
10010f54:	1447c83a 	sub	r3,r2,r17
10010f58:	28c00716 	blt	r5,r3,10010f78 <_malloc_r+0xcc>
10010f5c:	1800920e 	bge	r3,zero,100111a8 <_malloc_r+0x2fc>
10010f60:	84000317 	ldw	r16,12(r16)
10010f64:	24008e26 	beq	r4,r16,100111a0 <_malloc_r+0x2f4>
10010f68:	80800117 	ldw	r2,4(r16)
10010f6c:	1184703a 	and	r2,r2,r6
10010f70:	1447c83a 	sub	r3,r2,r17
10010f74:	28fff90e 	bge	r5,r3,10010f5c <__alt_data_end+0xf8010f5c>
10010f78:	3809883a 	mov	r4,r7
10010f7c:	018400b4 	movhi	r6,4098
10010f80:	9c000417 	ldw	r16,16(r19)
10010f84:	318f8f04 	addi	r6,r6,15932
10010f88:	32000204 	addi	r8,r6,8
10010f8c:	82013426 	beq	r16,r8,10011460 <_malloc_r+0x5b4>
10010f90:	80c00117 	ldw	r3,4(r16)
10010f94:	00bfff04 	movi	r2,-4
10010f98:	188e703a 	and	r7,r3,r2
10010f9c:	3c45c83a 	sub	r2,r7,r17
10010fa0:	00c003c4 	movi	r3,15
10010fa4:	18811f16 	blt	r3,r2,10011424 <_malloc_r+0x578>
10010fa8:	32000515 	stw	r8,20(r6)
10010fac:	32000415 	stw	r8,16(r6)
10010fb0:	10007f0e 	bge	r2,zero,100111b0 <_malloc_r+0x304>
10010fb4:	00807fc4 	movi	r2,511
10010fb8:	11c0fd36 	bltu	r2,r7,100113b0 <_malloc_r+0x504>
10010fbc:	3806d0fa 	srli	r3,r7,3
10010fc0:	01c00044 	movi	r7,1
10010fc4:	30800117 	ldw	r2,4(r6)
10010fc8:	19400044 	addi	r5,r3,1
10010fcc:	294b883a 	add	r5,r5,r5
10010fd0:	1807d0ba 	srai	r3,r3,2
10010fd4:	294b883a 	add	r5,r5,r5
10010fd8:	294b883a 	add	r5,r5,r5
10010fdc:	298b883a 	add	r5,r5,r6
10010fe0:	38c6983a 	sll	r3,r7,r3
10010fe4:	29c00017 	ldw	r7,0(r5)
10010fe8:	2a7ffe04 	addi	r9,r5,-8
10010fec:	1886b03a 	or	r3,r3,r2
10010ff0:	82400315 	stw	r9,12(r16)
10010ff4:	81c00215 	stw	r7,8(r16)
10010ff8:	30c00115 	stw	r3,4(r6)
10010ffc:	2c000015 	stw	r16,0(r5)
10011000:	3c000315 	stw	r16,12(r7)
10011004:	2005d0ba 	srai	r2,r4,2
10011008:	01400044 	movi	r5,1
1001100c:	288a983a 	sll	r5,r5,r2
10011010:	19406f36 	bltu	r3,r5,100111d0 <_malloc_r+0x324>
10011014:	28c4703a 	and	r2,r5,r3
10011018:	10000a1e 	bne	r2,zero,10011044 <_malloc_r+0x198>
1001101c:	00bfff04 	movi	r2,-4
10011020:	294b883a 	add	r5,r5,r5
10011024:	2088703a 	and	r4,r4,r2
10011028:	28c4703a 	and	r2,r5,r3
1001102c:	21000104 	addi	r4,r4,4
10011030:	1000041e 	bne	r2,zero,10011044 <_malloc_r+0x198>
10011034:	294b883a 	add	r5,r5,r5
10011038:	28c4703a 	and	r2,r5,r3
1001103c:	21000104 	addi	r4,r4,4
10011040:	103ffc26 	beq	r2,zero,10011034 <__alt_data_end+0xf8011034>
10011044:	02bfff04 	movi	r10,-4
10011048:	024003c4 	movi	r9,15
1001104c:	21800044 	addi	r6,r4,1
10011050:	318d883a 	add	r6,r6,r6
10011054:	318d883a 	add	r6,r6,r6
10011058:	318d883a 	add	r6,r6,r6
1001105c:	998d883a 	add	r6,r19,r6
10011060:	333ffe04 	addi	r12,r6,-8
10011064:	2017883a 	mov	r11,r4
10011068:	31800104 	addi	r6,r6,4
1001106c:	34000017 	ldw	r16,0(r6)
10011070:	31fffd04 	addi	r7,r6,-12
10011074:	81c0041e 	bne	r16,r7,10011088 <_malloc_r+0x1dc>
10011078:	0000fb06 	br	10011468 <_malloc_r+0x5bc>
1001107c:	1801030e 	bge	r3,zero,1001148c <_malloc_r+0x5e0>
10011080:	84000317 	ldw	r16,12(r16)
10011084:	81c0f826 	beq	r16,r7,10011468 <_malloc_r+0x5bc>
10011088:	80800117 	ldw	r2,4(r16)
1001108c:	1284703a 	and	r2,r2,r10
10011090:	1447c83a 	sub	r3,r2,r17
10011094:	48fff90e 	bge	r9,r3,1001107c <__alt_data_end+0xf801107c>
10011098:	80800317 	ldw	r2,12(r16)
1001109c:	81000217 	ldw	r4,8(r16)
100110a0:	89400054 	ori	r5,r17,1
100110a4:	81400115 	stw	r5,4(r16)
100110a8:	20800315 	stw	r2,12(r4)
100110ac:	11000215 	stw	r4,8(r2)
100110b0:	8463883a 	add	r17,r16,r17
100110b4:	9c400515 	stw	r17,20(r19)
100110b8:	9c400415 	stw	r17,16(r19)
100110bc:	18800054 	ori	r2,r3,1
100110c0:	88800115 	stw	r2,4(r17)
100110c4:	8a000315 	stw	r8,12(r17)
100110c8:	8a000215 	stw	r8,8(r17)
100110cc:	88e3883a 	add	r17,r17,r3
100110d0:	88c00015 	stw	r3,0(r17)
100110d4:	9009883a 	mov	r4,r18
100110d8:	001f7bc0 	call	1001f7bc <__malloc_unlock>
100110dc:	80800204 	addi	r2,r16,8
100110e0:	00001b06 	br	10011150 <_malloc_r+0x2a4>
100110e4:	04400404 	movi	r17,16
100110e8:	89402536 	bltu	r17,r5,10011180 <_malloc_r+0x2d4>
100110ec:	001f7980 	call	1001f798 <__malloc_lock>
100110f0:	00800184 	movi	r2,6
100110f4:	01000084 	movi	r4,2
100110f8:	04c400b4 	movhi	r19,4098
100110fc:	1085883a 	add	r2,r2,r2
10011100:	9ccf8f04 	addi	r19,r19,15932
10011104:	1085883a 	add	r2,r2,r2
10011108:	9885883a 	add	r2,r19,r2
1001110c:	14000117 	ldw	r16,4(r2)
10011110:	10fffe04 	addi	r3,r2,-8
10011114:	80c0d926 	beq	r16,r3,1001147c <_malloc_r+0x5d0>
10011118:	80c00117 	ldw	r3,4(r16)
1001111c:	81000317 	ldw	r4,12(r16)
10011120:	00bfff04 	movi	r2,-4
10011124:	1884703a 	and	r2,r3,r2
10011128:	81400217 	ldw	r5,8(r16)
1001112c:	8085883a 	add	r2,r16,r2
10011130:	10c00117 	ldw	r3,4(r2)
10011134:	29000315 	stw	r4,12(r5)
10011138:	21400215 	stw	r5,8(r4)
1001113c:	18c00054 	ori	r3,r3,1
10011140:	10c00115 	stw	r3,4(r2)
10011144:	9009883a 	mov	r4,r18
10011148:	001f7bc0 	call	1001f7bc <__malloc_unlock>
1001114c:	80800204 	addi	r2,r16,8
10011150:	dfc00a17 	ldw	ra,40(sp)
10011154:	df000917 	ldw	fp,36(sp)
10011158:	ddc00817 	ldw	r23,32(sp)
1001115c:	dd800717 	ldw	r22,28(sp)
10011160:	dd400617 	ldw	r21,24(sp)
10011164:	dd000517 	ldw	r20,20(sp)
10011168:	dcc00417 	ldw	r19,16(sp)
1001116c:	dc800317 	ldw	r18,12(sp)
10011170:	dc400217 	ldw	r17,8(sp)
10011174:	dc000117 	ldw	r16,4(sp)
10011178:	dec00b04 	addi	sp,sp,44
1001117c:	f800283a 	ret
10011180:	00800304 	movi	r2,12
10011184:	90800015 	stw	r2,0(r18)
10011188:	0005883a 	mov	r2,zero
1001118c:	003ff006 	br	10011150 <__alt_data_end+0xf8011150>
10011190:	01002004 	movi	r4,128
10011194:	02001004 	movi	r8,64
10011198:	01c00fc4 	movi	r7,63
1001119c:	003f6106 	br	10010f24 <__alt_data_end+0xf8010f24>
100111a0:	4009883a 	mov	r4,r8
100111a4:	003f7506 	br	10010f7c <__alt_data_end+0xf8010f7c>
100111a8:	81000317 	ldw	r4,12(r16)
100111ac:	003fde06 	br	10011128 <__alt_data_end+0xf8011128>
100111b0:	81c5883a 	add	r2,r16,r7
100111b4:	11400117 	ldw	r5,4(r2)
100111b8:	9009883a 	mov	r4,r18
100111bc:	29400054 	ori	r5,r5,1
100111c0:	11400115 	stw	r5,4(r2)
100111c4:	001f7bc0 	call	1001f7bc <__malloc_unlock>
100111c8:	80800204 	addi	r2,r16,8
100111cc:	003fe006 	br	10011150 <__alt_data_end+0xf8011150>
100111d0:	9c000217 	ldw	r16,8(r19)
100111d4:	00bfff04 	movi	r2,-4
100111d8:	85800117 	ldw	r22,4(r16)
100111dc:	b0ac703a 	and	r22,r22,r2
100111e0:	b4400336 	bltu	r22,r17,100111f0 <_malloc_r+0x344>
100111e4:	b445c83a 	sub	r2,r22,r17
100111e8:	00c003c4 	movi	r3,15
100111ec:	18805d16 	blt	r3,r2,10011364 <_malloc_r+0x4b8>
100111f0:	05c400b4 	movhi	r23,4098
100111f4:	008400b4 	movhi	r2,4098
100111f8:	109d7f04 	addi	r2,r2,30204
100111fc:	bdd51904 	addi	r23,r23,21604
10011200:	15400017 	ldw	r21,0(r2)
10011204:	b8c00017 	ldw	r3,0(r23)
10011208:	00bfffc4 	movi	r2,-1
1001120c:	858d883a 	add	r6,r16,r22
10011210:	8d6b883a 	add	r21,r17,r21
10011214:	1880ea26 	beq	r3,r2,100115c0 <_malloc_r+0x714>
10011218:	ad4403c4 	addi	r21,r21,4111
1001121c:	00bc0004 	movi	r2,-4096
10011220:	a8aa703a 	and	r21,r21,r2
10011224:	a80b883a 	mov	r5,r21
10011228:	9009883a 	mov	r4,r18
1001122c:	d9800015 	stw	r6,0(sp)
10011230:	001362c0 	call	1001362c <_sbrk_r>
10011234:	1029883a 	mov	r20,r2
10011238:	00bfffc4 	movi	r2,-1
1001123c:	d9800017 	ldw	r6,0(sp)
10011240:	a080e826 	beq	r20,r2,100115e4 <_malloc_r+0x738>
10011244:	a180a636 	bltu	r20,r6,100114e0 <_malloc_r+0x634>
10011248:	070400b4 	movhi	fp,4098
1001124c:	e71d8804 	addi	fp,fp,30240
10011250:	e0800017 	ldw	r2,0(fp)
10011254:	a887883a 	add	r3,r21,r2
10011258:	e0c00015 	stw	r3,0(fp)
1001125c:	3500e626 	beq	r6,r20,100115f8 <_malloc_r+0x74c>
10011260:	b9000017 	ldw	r4,0(r23)
10011264:	00bfffc4 	movi	r2,-1
10011268:	2080ee26 	beq	r4,r2,10011624 <_malloc_r+0x778>
1001126c:	a185c83a 	sub	r2,r20,r6
10011270:	10c5883a 	add	r2,r2,r3
10011274:	e0800015 	stw	r2,0(fp)
10011278:	a0c001cc 	andi	r3,r20,7
1001127c:	1800bc26 	beq	r3,zero,10011570 <_malloc_r+0x6c4>
10011280:	a0e9c83a 	sub	r20,r20,r3
10011284:	00840204 	movi	r2,4104
10011288:	a5000204 	addi	r20,r20,8
1001128c:	10c7c83a 	sub	r3,r2,r3
10011290:	a545883a 	add	r2,r20,r21
10011294:	1083ffcc 	andi	r2,r2,4095
10011298:	18abc83a 	sub	r21,r3,r2
1001129c:	a80b883a 	mov	r5,r21
100112a0:	9009883a 	mov	r4,r18
100112a4:	001362c0 	call	1001362c <_sbrk_r>
100112a8:	00ffffc4 	movi	r3,-1
100112ac:	10c0e126 	beq	r2,r3,10011634 <_malloc_r+0x788>
100112b0:	1505c83a 	sub	r2,r2,r20
100112b4:	1545883a 	add	r2,r2,r21
100112b8:	10800054 	ori	r2,r2,1
100112bc:	e0c00017 	ldw	r3,0(fp)
100112c0:	9d000215 	stw	r20,8(r19)
100112c4:	a0800115 	stw	r2,4(r20)
100112c8:	a8c7883a 	add	r3,r21,r3
100112cc:	e0c00015 	stw	r3,0(fp)
100112d0:	84c00e26 	beq	r16,r19,1001130c <_malloc_r+0x460>
100112d4:	018003c4 	movi	r6,15
100112d8:	3580a72e 	bgeu	r6,r22,10011578 <_malloc_r+0x6cc>
100112dc:	81400117 	ldw	r5,4(r16)
100112e0:	013ffe04 	movi	r4,-8
100112e4:	b0bffd04 	addi	r2,r22,-12
100112e8:	1104703a 	and	r2,r2,r4
100112ec:	2900004c 	andi	r4,r5,1
100112f0:	2088b03a 	or	r4,r4,r2
100112f4:	81000115 	stw	r4,4(r16)
100112f8:	01400144 	movi	r5,5
100112fc:	8089883a 	add	r4,r16,r2
10011300:	21400115 	stw	r5,4(r4)
10011304:	21400215 	stw	r5,8(r4)
10011308:	3080cd36 	bltu	r6,r2,10011640 <_malloc_r+0x794>
1001130c:	008400b4 	movhi	r2,4098
10011310:	109d7e04 	addi	r2,r2,30200
10011314:	11000017 	ldw	r4,0(r2)
10011318:	20c0012e 	bgeu	r4,r3,10011320 <_malloc_r+0x474>
1001131c:	10c00015 	stw	r3,0(r2)
10011320:	008400b4 	movhi	r2,4098
10011324:	109d7d04 	addi	r2,r2,30196
10011328:	11000017 	ldw	r4,0(r2)
1001132c:	9c000217 	ldw	r16,8(r19)
10011330:	20c0012e 	bgeu	r4,r3,10011338 <_malloc_r+0x48c>
10011334:	10c00015 	stw	r3,0(r2)
10011338:	80c00117 	ldw	r3,4(r16)
1001133c:	00bfff04 	movi	r2,-4
10011340:	1886703a 	and	r3,r3,r2
10011344:	1c45c83a 	sub	r2,r3,r17
10011348:	1c400236 	bltu	r3,r17,10011354 <_malloc_r+0x4a8>
1001134c:	00c003c4 	movi	r3,15
10011350:	18800416 	blt	r3,r2,10011364 <_malloc_r+0x4b8>
10011354:	9009883a 	mov	r4,r18
10011358:	001f7bc0 	call	1001f7bc <__malloc_unlock>
1001135c:	0005883a 	mov	r2,zero
10011360:	003f7b06 	br	10011150 <__alt_data_end+0xf8011150>
10011364:	88c00054 	ori	r3,r17,1
10011368:	80c00115 	stw	r3,4(r16)
1001136c:	8463883a 	add	r17,r16,r17
10011370:	10800054 	ori	r2,r2,1
10011374:	9c400215 	stw	r17,8(r19)
10011378:	88800115 	stw	r2,4(r17)
1001137c:	9009883a 	mov	r4,r18
10011380:	001f7bc0 	call	1001f7bc <__malloc_unlock>
10011384:	80800204 	addi	r2,r16,8
10011388:	003f7106 	br	10011150 <__alt_data_end+0xf8011150>
1001138c:	00c00504 	movi	r3,20
10011390:	18804a2e 	bgeu	r3,r2,100114bc <_malloc_r+0x610>
10011394:	00c01504 	movi	r3,84
10011398:	18806e36 	bltu	r3,r2,10011554 <_malloc_r+0x6a8>
1001139c:	8804d33a 	srli	r2,r17,12
100113a0:	12001bc4 	addi	r8,r2,111
100113a4:	11c01b84 	addi	r7,r2,110
100113a8:	4209883a 	add	r4,r8,r8
100113ac:	003edd06 	br	10010f24 <__alt_data_end+0xf8010f24>
100113b0:	3804d27a 	srli	r2,r7,9
100113b4:	00c00104 	movi	r3,4
100113b8:	1880442e 	bgeu	r3,r2,100114cc <_malloc_r+0x620>
100113bc:	00c00504 	movi	r3,20
100113c0:	18808136 	bltu	r3,r2,100115c8 <_malloc_r+0x71c>
100113c4:	11401704 	addi	r5,r2,92
100113c8:	10c016c4 	addi	r3,r2,91
100113cc:	294b883a 	add	r5,r5,r5
100113d0:	294b883a 	add	r5,r5,r5
100113d4:	294b883a 	add	r5,r5,r5
100113d8:	994b883a 	add	r5,r19,r5
100113dc:	28800017 	ldw	r2,0(r5)
100113e0:	018400b4 	movhi	r6,4098
100113e4:	297ffe04 	addi	r5,r5,-8
100113e8:	318f8f04 	addi	r6,r6,15932
100113ec:	28806526 	beq	r5,r2,10011584 <_malloc_r+0x6d8>
100113f0:	01bfff04 	movi	r6,-4
100113f4:	10c00117 	ldw	r3,4(r2)
100113f8:	1986703a 	and	r3,r3,r6
100113fc:	38c0022e 	bgeu	r7,r3,10011408 <_malloc_r+0x55c>
10011400:	10800217 	ldw	r2,8(r2)
10011404:	28bffb1e 	bne	r5,r2,100113f4 <__alt_data_end+0xf80113f4>
10011408:	11400317 	ldw	r5,12(r2)
1001140c:	98c00117 	ldw	r3,4(r19)
10011410:	81400315 	stw	r5,12(r16)
10011414:	80800215 	stw	r2,8(r16)
10011418:	2c000215 	stw	r16,8(r5)
1001141c:	14000315 	stw	r16,12(r2)
10011420:	003ef806 	br	10011004 <__alt_data_end+0xf8011004>
10011424:	88c00054 	ori	r3,r17,1
10011428:	80c00115 	stw	r3,4(r16)
1001142c:	8463883a 	add	r17,r16,r17
10011430:	34400515 	stw	r17,20(r6)
10011434:	34400415 	stw	r17,16(r6)
10011438:	10c00054 	ori	r3,r2,1
1001143c:	8a000315 	stw	r8,12(r17)
10011440:	8a000215 	stw	r8,8(r17)
10011444:	88c00115 	stw	r3,4(r17)
10011448:	88a3883a 	add	r17,r17,r2
1001144c:	88800015 	stw	r2,0(r17)
10011450:	9009883a 	mov	r4,r18
10011454:	001f7bc0 	call	1001f7bc <__malloc_unlock>
10011458:	80800204 	addi	r2,r16,8
1001145c:	003f3c06 	br	10011150 <__alt_data_end+0xf8011150>
10011460:	30c00117 	ldw	r3,4(r6)
10011464:	003ee706 	br	10011004 <__alt_data_end+0xf8011004>
10011468:	5ac00044 	addi	r11,r11,1
1001146c:	588000cc 	andi	r2,r11,3
10011470:	31800204 	addi	r6,r6,8
10011474:	103efd1e 	bne	r2,zero,1001106c <__alt_data_end+0xf801106c>
10011478:	00002406 	br	1001150c <_malloc_r+0x660>
1001147c:	14000317 	ldw	r16,12(r2)
10011480:	143f251e 	bne	r2,r16,10011118 <__alt_data_end+0xf8011118>
10011484:	21000084 	addi	r4,r4,2
10011488:	003ebc06 	br	10010f7c <__alt_data_end+0xf8010f7c>
1001148c:	8085883a 	add	r2,r16,r2
10011490:	10c00117 	ldw	r3,4(r2)
10011494:	81000317 	ldw	r4,12(r16)
10011498:	81400217 	ldw	r5,8(r16)
1001149c:	18c00054 	ori	r3,r3,1
100114a0:	10c00115 	stw	r3,4(r2)
100114a4:	29000315 	stw	r4,12(r5)
100114a8:	21400215 	stw	r5,8(r4)
100114ac:	9009883a 	mov	r4,r18
100114b0:	001f7bc0 	call	1001f7bc <__malloc_unlock>
100114b4:	80800204 	addi	r2,r16,8
100114b8:	003f2506 	br	10011150 <__alt_data_end+0xf8011150>
100114bc:	12001704 	addi	r8,r2,92
100114c0:	11c016c4 	addi	r7,r2,91
100114c4:	4209883a 	add	r4,r8,r8
100114c8:	003e9606 	br	10010f24 <__alt_data_end+0xf8010f24>
100114cc:	3804d1ba 	srli	r2,r7,6
100114d0:	11400e44 	addi	r5,r2,57
100114d4:	10c00e04 	addi	r3,r2,56
100114d8:	294b883a 	add	r5,r5,r5
100114dc:	003fbc06 	br	100113d0 <__alt_data_end+0xf80113d0>
100114e0:	84ff5926 	beq	r16,r19,10011248 <__alt_data_end+0xf8011248>
100114e4:	008400b4 	movhi	r2,4098
100114e8:	108f8f04 	addi	r2,r2,15932
100114ec:	14000217 	ldw	r16,8(r2)
100114f0:	00bfff04 	movi	r2,-4
100114f4:	80c00117 	ldw	r3,4(r16)
100114f8:	1886703a 	and	r3,r3,r2
100114fc:	003f9106 	br	10011344 <__alt_data_end+0xf8011344>
10011500:	60800217 	ldw	r2,8(r12)
10011504:	213fffc4 	addi	r4,r4,-1
10011508:	1300651e 	bne	r2,r12,100116a0 <_malloc_r+0x7f4>
1001150c:	208000cc 	andi	r2,r4,3
10011510:	633ffe04 	addi	r12,r12,-8
10011514:	103ffa1e 	bne	r2,zero,10011500 <__alt_data_end+0xf8011500>
10011518:	98800117 	ldw	r2,4(r19)
1001151c:	0146303a 	nor	r3,zero,r5
10011520:	1884703a 	and	r2,r3,r2
10011524:	98800115 	stw	r2,4(r19)
10011528:	294b883a 	add	r5,r5,r5
1001152c:	117f2836 	bltu	r2,r5,100111d0 <__alt_data_end+0xf80111d0>
10011530:	283f2726 	beq	r5,zero,100111d0 <__alt_data_end+0xf80111d0>
10011534:	2886703a 	and	r3,r5,r2
10011538:	5809883a 	mov	r4,r11
1001153c:	183ec31e 	bne	r3,zero,1001104c <__alt_data_end+0xf801104c>
10011540:	294b883a 	add	r5,r5,r5
10011544:	2886703a 	and	r3,r5,r2
10011548:	21000104 	addi	r4,r4,4
1001154c:	183ffc26 	beq	r3,zero,10011540 <__alt_data_end+0xf8011540>
10011550:	003ebe06 	br	1001104c <__alt_data_end+0xf801104c>
10011554:	00c05504 	movi	r3,340
10011558:	18801236 	bltu	r3,r2,100115a4 <_malloc_r+0x6f8>
1001155c:	8804d3fa 	srli	r2,r17,15
10011560:	12001e04 	addi	r8,r2,120
10011564:	11c01dc4 	addi	r7,r2,119
10011568:	4209883a 	add	r4,r8,r8
1001156c:	003e6d06 	br	10010f24 <__alt_data_end+0xf8010f24>
10011570:	00c40004 	movi	r3,4096
10011574:	003f4606 	br	10011290 <__alt_data_end+0xf8011290>
10011578:	00800044 	movi	r2,1
1001157c:	a0800115 	stw	r2,4(r20)
10011580:	003f7406 	br	10011354 <__alt_data_end+0xf8011354>
10011584:	1805d0ba 	srai	r2,r3,2
10011588:	01c00044 	movi	r7,1
1001158c:	30c00117 	ldw	r3,4(r6)
10011590:	388e983a 	sll	r7,r7,r2
10011594:	2805883a 	mov	r2,r5
10011598:	38c6b03a 	or	r3,r7,r3
1001159c:	30c00115 	stw	r3,4(r6)
100115a0:	003f9b06 	br	10011410 <__alt_data_end+0xf8011410>
100115a4:	00c15504 	movi	r3,1364
100115a8:	18801a36 	bltu	r3,r2,10011614 <_malloc_r+0x768>
100115ac:	8804d4ba 	srli	r2,r17,18
100115b0:	12001f44 	addi	r8,r2,125
100115b4:	11c01f04 	addi	r7,r2,124
100115b8:	4209883a 	add	r4,r8,r8
100115bc:	003e5906 	br	10010f24 <__alt_data_end+0xf8010f24>
100115c0:	ad400404 	addi	r21,r21,16
100115c4:	003f1706 	br	10011224 <__alt_data_end+0xf8011224>
100115c8:	00c01504 	movi	r3,84
100115cc:	18802336 	bltu	r3,r2,1001165c <_malloc_r+0x7b0>
100115d0:	3804d33a 	srli	r2,r7,12
100115d4:	11401bc4 	addi	r5,r2,111
100115d8:	10c01b84 	addi	r3,r2,110
100115dc:	294b883a 	add	r5,r5,r5
100115e0:	003f7b06 	br	100113d0 <__alt_data_end+0xf80113d0>
100115e4:	9c000217 	ldw	r16,8(r19)
100115e8:	00bfff04 	movi	r2,-4
100115ec:	80c00117 	ldw	r3,4(r16)
100115f0:	1886703a 	and	r3,r3,r2
100115f4:	003f5306 	br	10011344 <__alt_data_end+0xf8011344>
100115f8:	3083ffcc 	andi	r2,r6,4095
100115fc:	103f181e 	bne	r2,zero,10011260 <__alt_data_end+0xf8011260>
10011600:	99000217 	ldw	r4,8(r19)
10011604:	b545883a 	add	r2,r22,r21
10011608:	10800054 	ori	r2,r2,1
1001160c:	20800115 	stw	r2,4(r4)
10011610:	003f3e06 	br	1001130c <__alt_data_end+0xf801130c>
10011614:	01003f84 	movi	r4,254
10011618:	02001fc4 	movi	r8,127
1001161c:	01c01f84 	movi	r7,126
10011620:	003e4006 	br	10010f24 <__alt_data_end+0xf8010f24>
10011624:	008400b4 	movhi	r2,4098
10011628:	10951904 	addi	r2,r2,21604
1001162c:	15000015 	stw	r20,0(r2)
10011630:	003f1106 	br	10011278 <__alt_data_end+0xf8011278>
10011634:	00800044 	movi	r2,1
10011638:	002b883a 	mov	r21,zero
1001163c:	003f1f06 	br	100112bc <__alt_data_end+0xf80112bc>
10011640:	81400204 	addi	r5,r16,8
10011644:	9009883a 	mov	r4,r18
10011648:	00102840 	call	10010284 <_free_r>
1001164c:	008400b4 	movhi	r2,4098
10011650:	109d8804 	addi	r2,r2,30240
10011654:	10c00017 	ldw	r3,0(r2)
10011658:	003f2c06 	br	1001130c <__alt_data_end+0xf801130c>
1001165c:	00c05504 	movi	r3,340
10011660:	18800536 	bltu	r3,r2,10011678 <_malloc_r+0x7cc>
10011664:	3804d3fa 	srli	r2,r7,15
10011668:	11401e04 	addi	r5,r2,120
1001166c:	10c01dc4 	addi	r3,r2,119
10011670:	294b883a 	add	r5,r5,r5
10011674:	003f5606 	br	100113d0 <__alt_data_end+0xf80113d0>
10011678:	00c15504 	movi	r3,1364
1001167c:	18800536 	bltu	r3,r2,10011694 <_malloc_r+0x7e8>
10011680:	3804d4ba 	srli	r2,r7,18
10011684:	11401f44 	addi	r5,r2,125
10011688:	10c01f04 	addi	r3,r2,124
1001168c:	294b883a 	add	r5,r5,r5
10011690:	003f4f06 	br	100113d0 <__alt_data_end+0xf80113d0>
10011694:	01403f84 	movi	r5,254
10011698:	00c01f84 	movi	r3,126
1001169c:	003f4c06 	br	100113d0 <__alt_data_end+0xf80113d0>
100116a0:	98800117 	ldw	r2,4(r19)
100116a4:	003fa006 	br	10011528 <__alt_data_end+0xf8011528>
100116a8:	8808d0fa 	srli	r4,r17,3
100116ac:	20800044 	addi	r2,r4,1
100116b0:	1085883a 	add	r2,r2,r2
100116b4:	003e9006 	br	100110f8 <__alt_data_end+0xf80110f8>

100116b8 <_mbrtowc_r>:
100116b8:	defff704 	addi	sp,sp,-36
100116bc:	008400b4 	movhi	r2,4098
100116c0:	dc800715 	stw	r18,28(sp)
100116c4:	dc400615 	stw	r17,24(sp)
100116c8:	dc000515 	stw	r16,20(sp)
100116cc:	10951b04 	addi	r2,r2,21612
100116d0:	dfc00815 	stw	ra,32(sp)
100116d4:	2021883a 	mov	r16,r4
100116d8:	dc400917 	ldw	r17,36(sp)
100116dc:	14800017 	ldw	r18,0(r2)
100116e0:	30001626 	beq	r6,zero,1001173c <_mbrtowc_r+0x84>
100116e4:	d9400215 	stw	r5,8(sp)
100116e8:	d9800315 	stw	r6,12(sp)
100116ec:	d9c00415 	stw	r7,16(sp)
100116f0:	0010c900 	call	10010c90 <__locale_charset>
100116f4:	d9c00417 	ldw	r7,16(sp)
100116f8:	d9800317 	ldw	r6,12(sp)
100116fc:	d9400217 	ldw	r5,8(sp)
10011700:	d8800015 	stw	r2,0(sp)
10011704:	dc400115 	stw	r17,4(sp)
10011708:	8009883a 	mov	r4,r16
1001170c:	903ee83a 	callr	r18
10011710:	00ffffc4 	movi	r3,-1
10011714:	10c0031e 	bne	r2,r3,10011724 <_mbrtowc_r+0x6c>
10011718:	88000015 	stw	zero,0(r17)
1001171c:	00c02284 	movi	r3,138
10011720:	80c00015 	stw	r3,0(r16)
10011724:	dfc00817 	ldw	ra,32(sp)
10011728:	dc800717 	ldw	r18,28(sp)
1001172c:	dc400617 	ldw	r17,24(sp)
10011730:	dc000517 	ldw	r16,20(sp)
10011734:	dec00904 	addi	sp,sp,36
10011738:	f800283a 	ret
1001173c:	0010c900 	call	10010c90 <__locale_charset>
10011740:	018400b4 	movhi	r6,4098
10011744:	318b4f04 	addi	r6,r6,11580
10011748:	dc400115 	stw	r17,4(sp)
1001174c:	d8800015 	stw	r2,0(sp)
10011750:	01c00044 	movi	r7,1
10011754:	000b883a 	mov	r5,zero
10011758:	8009883a 	mov	r4,r16
1001175c:	903ee83a 	callr	r18
10011760:	003feb06 	br	10011710 <__alt_data_end+0xf8011710>

10011764 <mbrtowc>:
10011764:	defff704 	addi	sp,sp,-36
10011768:	008400b4 	movhi	r2,4098
1001176c:	dc800415 	stw	r18,16(sp)
10011770:	dc400315 	stw	r17,12(sp)
10011774:	10951604 	addi	r2,r2,21592
10011778:	dfc00815 	stw	ra,32(sp)
1001177c:	dd400715 	stw	r21,28(sp)
10011780:	dd000615 	stw	r20,24(sp)
10011784:	dcc00515 	stw	r19,20(sp)
10011788:	dc000215 	stw	r16,8(sp)
1001178c:	3825883a 	mov	r18,r7
10011790:	14400017 	ldw	r17,0(r2)
10011794:	28001c26 	beq	r5,zero,10011808 <mbrtowc+0xa4>
10011798:	008400b4 	movhi	r2,4098
1001179c:	10951b04 	addi	r2,r2,21612
100117a0:	15400017 	ldw	r21,0(r2)
100117a4:	2821883a 	mov	r16,r5
100117a8:	2027883a 	mov	r19,r4
100117ac:	3029883a 	mov	r20,r6
100117b0:	0010c900 	call	10010c90 <__locale_charset>
100117b4:	d8800015 	stw	r2,0(sp)
100117b8:	dc800115 	stw	r18,4(sp)
100117bc:	a00f883a 	mov	r7,r20
100117c0:	800d883a 	mov	r6,r16
100117c4:	980b883a 	mov	r5,r19
100117c8:	8809883a 	mov	r4,r17
100117cc:	a83ee83a 	callr	r21
100117d0:	00ffffc4 	movi	r3,-1
100117d4:	10c0031e 	bne	r2,r3,100117e4 <mbrtowc+0x80>
100117d8:	90000015 	stw	zero,0(r18)
100117dc:	00c02284 	movi	r3,138
100117e0:	88c00015 	stw	r3,0(r17)
100117e4:	dfc00817 	ldw	ra,32(sp)
100117e8:	dd400717 	ldw	r21,28(sp)
100117ec:	dd000617 	ldw	r20,24(sp)
100117f0:	dcc00517 	ldw	r19,20(sp)
100117f4:	dc800417 	ldw	r18,16(sp)
100117f8:	dc400317 	ldw	r17,12(sp)
100117fc:	dc000217 	ldw	r16,8(sp)
10011800:	dec00904 	addi	sp,sp,36
10011804:	f800283a 	ret
10011808:	008400b4 	movhi	r2,4098
1001180c:	10951b04 	addi	r2,r2,21612
10011810:	14000017 	ldw	r16,0(r2)
10011814:	0010c900 	call	10010c90 <__locale_charset>
10011818:	018400b4 	movhi	r6,4098
1001181c:	318b4f04 	addi	r6,r6,11580
10011820:	dc800115 	stw	r18,4(sp)
10011824:	d8800015 	stw	r2,0(sp)
10011828:	01c00044 	movi	r7,1
1001182c:	000b883a 	mov	r5,zero
10011830:	8809883a 	mov	r4,r17
10011834:	803ee83a 	callr	r16
10011838:	003fe506 	br	100117d0 <__alt_data_end+0xf80117d0>

1001183c <__ascii_mbtowc>:
1001183c:	deffff04 	addi	sp,sp,-4
10011840:	28000826 	beq	r5,zero,10011864 <__ascii_mbtowc+0x28>
10011844:	30000926 	beq	r6,zero,1001186c <__ascii_mbtowc+0x30>
10011848:	38000b26 	beq	r7,zero,10011878 <__ascii_mbtowc+0x3c>
1001184c:	30800003 	ldbu	r2,0(r6)
10011850:	28800015 	stw	r2,0(r5)
10011854:	30800003 	ldbu	r2,0(r6)
10011858:	1004c03a 	cmpne	r2,r2,zero
1001185c:	dec00104 	addi	sp,sp,4
10011860:	f800283a 	ret
10011864:	d80b883a 	mov	r5,sp
10011868:	303ff71e 	bne	r6,zero,10011848 <__alt_data_end+0xf8011848>
1001186c:	0005883a 	mov	r2,zero
10011870:	dec00104 	addi	sp,sp,4
10011874:	f800283a 	ret
10011878:	00bfff84 	movi	r2,-2
1001187c:	003ff706 	br	1001185c <__alt_data_end+0xf801185c>

10011880 <_mbtowc_r>:
10011880:	008400b4 	movhi	r2,4098
10011884:	defff804 	addi	sp,sp,-32
10011888:	10951b04 	addi	r2,r2,21612
1001188c:	dfc00715 	stw	ra,28(sp)
10011890:	dc000615 	stw	r16,24(sp)
10011894:	14000017 	ldw	r16,0(r2)
10011898:	d9000215 	stw	r4,8(sp)
1001189c:	d9400315 	stw	r5,12(sp)
100118a0:	d9800415 	stw	r6,16(sp)
100118a4:	d9c00515 	stw	r7,20(sp)
100118a8:	0010c900 	call	10010c90 <__locale_charset>
100118ac:	d8800015 	stw	r2,0(sp)
100118b0:	d8800817 	ldw	r2,32(sp)
100118b4:	d9c00517 	ldw	r7,20(sp)
100118b8:	d9800417 	ldw	r6,16(sp)
100118bc:	d9400317 	ldw	r5,12(sp)
100118c0:	d9000217 	ldw	r4,8(sp)
100118c4:	d8800115 	stw	r2,4(sp)
100118c8:	803ee83a 	callr	r16
100118cc:	dfc00717 	ldw	ra,28(sp)
100118d0:	dc000617 	ldw	r16,24(sp)
100118d4:	dec00804 	addi	sp,sp,32
100118d8:	f800283a 	ret

100118dc <memchr>:
100118dc:	208000cc 	andi	r2,r4,3
100118e0:	280f883a 	mov	r7,r5
100118e4:	10003426 	beq	r2,zero,100119b8 <memchr+0xdc>
100118e8:	30bfffc4 	addi	r2,r6,-1
100118ec:	30001a26 	beq	r6,zero,10011958 <memchr+0x7c>
100118f0:	20c00003 	ldbu	r3,0(r4)
100118f4:	29803fcc 	andi	r6,r5,255
100118f8:	30c0051e 	bne	r6,r3,10011910 <memchr+0x34>
100118fc:	00001806 	br	10011960 <memchr+0x84>
10011900:	10001526 	beq	r2,zero,10011958 <memchr+0x7c>
10011904:	20c00003 	ldbu	r3,0(r4)
10011908:	10bfffc4 	addi	r2,r2,-1
1001190c:	30c01426 	beq	r6,r3,10011960 <memchr+0x84>
10011910:	21000044 	addi	r4,r4,1
10011914:	20c000cc 	andi	r3,r4,3
10011918:	183ff91e 	bne	r3,zero,10011900 <__alt_data_end+0xf8011900>
1001191c:	020000c4 	movi	r8,3
10011920:	40801136 	bltu	r8,r2,10011968 <memchr+0x8c>
10011924:	10000c26 	beq	r2,zero,10011958 <memchr+0x7c>
10011928:	20c00003 	ldbu	r3,0(r4)
1001192c:	29403fcc 	andi	r5,r5,255
10011930:	28c00b26 	beq	r5,r3,10011960 <memchr+0x84>
10011934:	20c00044 	addi	r3,r4,1
10011938:	39803fcc 	andi	r6,r7,255
1001193c:	2089883a 	add	r4,r4,r2
10011940:	00000306 	br	10011950 <memchr+0x74>
10011944:	18c00044 	addi	r3,r3,1
10011948:	197fffc3 	ldbu	r5,-1(r3)
1001194c:	31400526 	beq	r6,r5,10011964 <memchr+0x88>
10011950:	1805883a 	mov	r2,r3
10011954:	20fffb1e 	bne	r4,r3,10011944 <__alt_data_end+0xf8011944>
10011958:	0005883a 	mov	r2,zero
1001195c:	f800283a 	ret
10011960:	2005883a 	mov	r2,r4
10011964:	f800283a 	ret
10011968:	28c03fcc 	andi	r3,r5,255
1001196c:	1812923a 	slli	r9,r3,8
10011970:	02ffbff4 	movhi	r11,65279
10011974:	02a02074 	movhi	r10,32897
10011978:	48d2b03a 	or	r9,r9,r3
1001197c:	4806943a 	slli	r3,r9,16
10011980:	5affbfc4 	addi	r11,r11,-257
10011984:	52a02004 	addi	r10,r10,-32640
10011988:	48d2b03a 	or	r9,r9,r3
1001198c:	20c00017 	ldw	r3,0(r4)
10011990:	48c6f03a 	xor	r3,r9,r3
10011994:	1acd883a 	add	r6,r3,r11
10011998:	00c6303a 	nor	r3,zero,r3
1001199c:	30c6703a 	and	r3,r6,r3
100119a0:	1a86703a 	and	r3,r3,r10
100119a4:	183fe01e 	bne	r3,zero,10011928 <__alt_data_end+0xf8011928>
100119a8:	10bfff04 	addi	r2,r2,-4
100119ac:	21000104 	addi	r4,r4,4
100119b0:	40bff636 	bltu	r8,r2,1001198c <__alt_data_end+0xf801198c>
100119b4:	003fdb06 	br	10011924 <__alt_data_end+0xf8011924>
100119b8:	3005883a 	mov	r2,r6
100119bc:	003fd706 	br	1001191c <__alt_data_end+0xf801191c>

100119c0 <memmove>:
100119c0:	2005883a 	mov	r2,r4
100119c4:	29000b2e 	bgeu	r5,r4,100119f4 <memmove+0x34>
100119c8:	298f883a 	add	r7,r5,r6
100119cc:	21c0092e 	bgeu	r4,r7,100119f4 <memmove+0x34>
100119d0:	2187883a 	add	r3,r4,r6
100119d4:	198bc83a 	sub	r5,r3,r6
100119d8:	30004826 	beq	r6,zero,10011afc <memmove+0x13c>
100119dc:	39ffffc4 	addi	r7,r7,-1
100119e0:	39000003 	ldbu	r4,0(r7)
100119e4:	18ffffc4 	addi	r3,r3,-1
100119e8:	19000005 	stb	r4,0(r3)
100119ec:	28fffb1e 	bne	r5,r3,100119dc <__alt_data_end+0xf80119dc>
100119f0:	f800283a 	ret
100119f4:	00c003c4 	movi	r3,15
100119f8:	1980412e 	bgeu	r3,r6,10011b00 <memmove+0x140>
100119fc:	2886b03a 	or	r3,r5,r2
10011a00:	18c000cc 	andi	r3,r3,3
10011a04:	1800401e 	bne	r3,zero,10011b08 <memmove+0x148>
10011a08:	33fffc04 	addi	r15,r6,-16
10011a0c:	781ed13a 	srli	r15,r15,4
10011a10:	28c00104 	addi	r3,r5,4
10011a14:	13400104 	addi	r13,r2,4
10011a18:	781c913a 	slli	r14,r15,4
10011a1c:	2b000204 	addi	r12,r5,8
10011a20:	12c00204 	addi	r11,r2,8
10011a24:	73800504 	addi	r14,r14,20
10011a28:	2a800304 	addi	r10,r5,12
10011a2c:	12400304 	addi	r9,r2,12
10011a30:	2b9d883a 	add	r14,r5,r14
10011a34:	2811883a 	mov	r8,r5
10011a38:	100f883a 	mov	r7,r2
10011a3c:	41000017 	ldw	r4,0(r8)
10011a40:	39c00404 	addi	r7,r7,16
10011a44:	18c00404 	addi	r3,r3,16
10011a48:	393ffc15 	stw	r4,-16(r7)
10011a4c:	193ffc17 	ldw	r4,-16(r3)
10011a50:	6b400404 	addi	r13,r13,16
10011a54:	5ac00404 	addi	r11,r11,16
10011a58:	693ffc15 	stw	r4,-16(r13)
10011a5c:	61000017 	ldw	r4,0(r12)
10011a60:	4a400404 	addi	r9,r9,16
10011a64:	42000404 	addi	r8,r8,16
10011a68:	593ffc15 	stw	r4,-16(r11)
10011a6c:	51000017 	ldw	r4,0(r10)
10011a70:	63000404 	addi	r12,r12,16
10011a74:	52800404 	addi	r10,r10,16
10011a78:	493ffc15 	stw	r4,-16(r9)
10011a7c:	1bbfef1e 	bne	r3,r14,10011a3c <__alt_data_end+0xf8011a3c>
10011a80:	79000044 	addi	r4,r15,1
10011a84:	2008913a 	slli	r4,r4,4
10011a88:	328003cc 	andi	r10,r6,15
10011a8c:	02c000c4 	movi	r11,3
10011a90:	1107883a 	add	r3,r2,r4
10011a94:	290b883a 	add	r5,r5,r4
10011a98:	5a801e2e 	bgeu	r11,r10,10011b14 <memmove+0x154>
10011a9c:	1813883a 	mov	r9,r3
10011aa0:	2811883a 	mov	r8,r5
10011aa4:	500f883a 	mov	r7,r10
10011aa8:	41000017 	ldw	r4,0(r8)
10011aac:	4a400104 	addi	r9,r9,4
10011ab0:	39ffff04 	addi	r7,r7,-4
10011ab4:	493fff15 	stw	r4,-4(r9)
10011ab8:	42000104 	addi	r8,r8,4
10011abc:	59fffa36 	bltu	r11,r7,10011aa8 <__alt_data_end+0xf8011aa8>
10011ac0:	513fff04 	addi	r4,r10,-4
10011ac4:	2008d0ba 	srli	r4,r4,2
10011ac8:	318000cc 	andi	r6,r6,3
10011acc:	21000044 	addi	r4,r4,1
10011ad0:	2109883a 	add	r4,r4,r4
10011ad4:	2109883a 	add	r4,r4,r4
10011ad8:	1907883a 	add	r3,r3,r4
10011adc:	290b883a 	add	r5,r5,r4
10011ae0:	30000b26 	beq	r6,zero,10011b10 <memmove+0x150>
10011ae4:	198d883a 	add	r6,r3,r6
10011ae8:	29c00003 	ldbu	r7,0(r5)
10011aec:	18c00044 	addi	r3,r3,1
10011af0:	29400044 	addi	r5,r5,1
10011af4:	19ffffc5 	stb	r7,-1(r3)
10011af8:	19bffb1e 	bne	r3,r6,10011ae8 <__alt_data_end+0xf8011ae8>
10011afc:	f800283a 	ret
10011b00:	1007883a 	mov	r3,r2
10011b04:	003ff606 	br	10011ae0 <__alt_data_end+0xf8011ae0>
10011b08:	1007883a 	mov	r3,r2
10011b0c:	003ff506 	br	10011ae4 <__alt_data_end+0xf8011ae4>
10011b10:	f800283a 	ret
10011b14:	500d883a 	mov	r6,r10
10011b18:	003ff106 	br	10011ae0 <__alt_data_end+0xf8011ae0>

10011b1c <memset>:
10011b1c:	20c000cc 	andi	r3,r4,3
10011b20:	2005883a 	mov	r2,r4
10011b24:	18004426 	beq	r3,zero,10011c38 <memset+0x11c>
10011b28:	31ffffc4 	addi	r7,r6,-1
10011b2c:	30004026 	beq	r6,zero,10011c30 <memset+0x114>
10011b30:	2813883a 	mov	r9,r5
10011b34:	200d883a 	mov	r6,r4
10011b38:	2007883a 	mov	r3,r4
10011b3c:	00000406 	br	10011b50 <memset+0x34>
10011b40:	3a3fffc4 	addi	r8,r7,-1
10011b44:	31800044 	addi	r6,r6,1
10011b48:	38003926 	beq	r7,zero,10011c30 <memset+0x114>
10011b4c:	400f883a 	mov	r7,r8
10011b50:	18c00044 	addi	r3,r3,1
10011b54:	32400005 	stb	r9,0(r6)
10011b58:	1a0000cc 	andi	r8,r3,3
10011b5c:	403ff81e 	bne	r8,zero,10011b40 <__alt_data_end+0xf8011b40>
10011b60:	010000c4 	movi	r4,3
10011b64:	21c02d2e 	bgeu	r4,r7,10011c1c <memset+0x100>
10011b68:	29003fcc 	andi	r4,r5,255
10011b6c:	200c923a 	slli	r6,r4,8
10011b70:	3108b03a 	or	r4,r6,r4
10011b74:	200c943a 	slli	r6,r4,16
10011b78:	218cb03a 	or	r6,r4,r6
10011b7c:	010003c4 	movi	r4,15
10011b80:	21c0182e 	bgeu	r4,r7,10011be4 <memset+0xc8>
10011b84:	3b3ffc04 	addi	r12,r7,-16
10011b88:	6018d13a 	srli	r12,r12,4
10011b8c:	1a000104 	addi	r8,r3,4
10011b90:	1ac00204 	addi	r11,r3,8
10011b94:	6008913a 	slli	r4,r12,4
10011b98:	1a800304 	addi	r10,r3,12
10011b9c:	1813883a 	mov	r9,r3
10011ba0:	21000504 	addi	r4,r4,20
10011ba4:	1909883a 	add	r4,r3,r4
10011ba8:	49800015 	stw	r6,0(r9)
10011bac:	41800015 	stw	r6,0(r8)
10011bb0:	59800015 	stw	r6,0(r11)
10011bb4:	51800015 	stw	r6,0(r10)
10011bb8:	42000404 	addi	r8,r8,16
10011bbc:	4a400404 	addi	r9,r9,16
10011bc0:	5ac00404 	addi	r11,r11,16
10011bc4:	52800404 	addi	r10,r10,16
10011bc8:	413ff71e 	bne	r8,r4,10011ba8 <__alt_data_end+0xf8011ba8>
10011bcc:	63000044 	addi	r12,r12,1
10011bd0:	6018913a 	slli	r12,r12,4
10011bd4:	39c003cc 	andi	r7,r7,15
10011bd8:	010000c4 	movi	r4,3
10011bdc:	1b07883a 	add	r3,r3,r12
10011be0:	21c00e2e 	bgeu	r4,r7,10011c1c <memset+0x100>
10011be4:	1813883a 	mov	r9,r3
10011be8:	3811883a 	mov	r8,r7
10011bec:	010000c4 	movi	r4,3
10011bf0:	49800015 	stw	r6,0(r9)
10011bf4:	423fff04 	addi	r8,r8,-4
10011bf8:	4a400104 	addi	r9,r9,4
10011bfc:	223ffc36 	bltu	r4,r8,10011bf0 <__alt_data_end+0xf8011bf0>
10011c00:	393fff04 	addi	r4,r7,-4
10011c04:	2008d0ba 	srli	r4,r4,2
10011c08:	39c000cc 	andi	r7,r7,3
10011c0c:	21000044 	addi	r4,r4,1
10011c10:	2109883a 	add	r4,r4,r4
10011c14:	2109883a 	add	r4,r4,r4
10011c18:	1907883a 	add	r3,r3,r4
10011c1c:	38000526 	beq	r7,zero,10011c34 <memset+0x118>
10011c20:	19cf883a 	add	r7,r3,r7
10011c24:	19400005 	stb	r5,0(r3)
10011c28:	18c00044 	addi	r3,r3,1
10011c2c:	38fffd1e 	bne	r7,r3,10011c24 <__alt_data_end+0xf8011c24>
10011c30:	f800283a 	ret
10011c34:	f800283a 	ret
10011c38:	2007883a 	mov	r3,r4
10011c3c:	300f883a 	mov	r7,r6
10011c40:	003fc706 	br	10011b60 <__alt_data_end+0xf8011b60>

10011c44 <_Balloc>:
10011c44:	20801317 	ldw	r2,76(r4)
10011c48:	defffc04 	addi	sp,sp,-16
10011c4c:	dc400115 	stw	r17,4(sp)
10011c50:	dc000015 	stw	r16,0(sp)
10011c54:	dfc00315 	stw	ra,12(sp)
10011c58:	dc800215 	stw	r18,8(sp)
10011c5c:	2023883a 	mov	r17,r4
10011c60:	2821883a 	mov	r16,r5
10011c64:	10000f26 	beq	r2,zero,10011ca4 <_Balloc+0x60>
10011c68:	8407883a 	add	r3,r16,r16
10011c6c:	18c7883a 	add	r3,r3,r3
10011c70:	10c7883a 	add	r3,r2,r3
10011c74:	18800017 	ldw	r2,0(r3)
10011c78:	10001126 	beq	r2,zero,10011cc0 <_Balloc+0x7c>
10011c7c:	11000017 	ldw	r4,0(r2)
10011c80:	19000015 	stw	r4,0(r3)
10011c84:	10000415 	stw	zero,16(r2)
10011c88:	10000315 	stw	zero,12(r2)
10011c8c:	dfc00317 	ldw	ra,12(sp)
10011c90:	dc800217 	ldw	r18,8(sp)
10011c94:	dc400117 	ldw	r17,4(sp)
10011c98:	dc000017 	ldw	r16,0(sp)
10011c9c:	dec00404 	addi	sp,sp,16
10011ca0:	f800283a 	ret
10011ca4:	01800844 	movi	r6,33
10011ca8:	01400104 	movi	r5,4
10011cac:	0019b000 	call	10019b00 <_calloc_r>
10011cb0:	88801315 	stw	r2,76(r17)
10011cb4:	103fec1e 	bne	r2,zero,10011c68 <__alt_data_end+0xf8011c68>
10011cb8:	0005883a 	mov	r2,zero
10011cbc:	003ff306 	br	10011c8c <__alt_data_end+0xf8011c8c>
10011cc0:	01400044 	movi	r5,1
10011cc4:	2c24983a 	sll	r18,r5,r16
10011cc8:	8809883a 	mov	r4,r17
10011ccc:	91800144 	addi	r6,r18,5
10011cd0:	318d883a 	add	r6,r6,r6
10011cd4:	318d883a 	add	r6,r6,r6
10011cd8:	0019b000 	call	10019b00 <_calloc_r>
10011cdc:	103ff626 	beq	r2,zero,10011cb8 <__alt_data_end+0xf8011cb8>
10011ce0:	14000115 	stw	r16,4(r2)
10011ce4:	14800215 	stw	r18,8(r2)
10011ce8:	003fe606 	br	10011c84 <__alt_data_end+0xf8011c84>

10011cec <_Bfree>:
10011cec:	28000826 	beq	r5,zero,10011d10 <_Bfree+0x24>
10011cf0:	28c00117 	ldw	r3,4(r5)
10011cf4:	20801317 	ldw	r2,76(r4)
10011cf8:	18c7883a 	add	r3,r3,r3
10011cfc:	18c7883a 	add	r3,r3,r3
10011d00:	10c5883a 	add	r2,r2,r3
10011d04:	10c00017 	ldw	r3,0(r2)
10011d08:	28c00015 	stw	r3,0(r5)
10011d0c:	11400015 	stw	r5,0(r2)
10011d10:	f800283a 	ret

10011d14 <__multadd>:
10011d14:	defff704 	addi	sp,sp,-36
10011d18:	dc800215 	stw	r18,8(sp)
10011d1c:	2c800417 	ldw	r18,16(r5)
10011d20:	dd800615 	stw	r22,24(sp)
10011d24:	dd400515 	stw	r21,20(sp)
10011d28:	dd000415 	stw	r20,16(sp)
10011d2c:	dcc00315 	stw	r19,12(sp)
10011d30:	dc400115 	stw	r17,4(sp)
10011d34:	dc000015 	stw	r16,0(sp)
10011d38:	dfc00815 	stw	ra,32(sp)
10011d3c:	ddc00715 	stw	r23,28(sp)
10011d40:	2827883a 	mov	r19,r5
10011d44:	2029883a 	mov	r20,r4
10011d48:	3023883a 	mov	r17,r6
10011d4c:	3821883a 	mov	r16,r7
10011d50:	2d400504 	addi	r21,r5,20
10011d54:	002d883a 	mov	r22,zero
10011d58:	adc00017 	ldw	r23,0(r21)
10011d5c:	880b883a 	mov	r5,r17
10011d60:	ad400104 	addi	r21,r21,4
10011d64:	b93fffcc 	andi	r4,r23,65535
10011d68:	0008ef00 	call	10008ef0 <__mulsi3>
10011d6c:	b808d43a 	srli	r4,r23,16
10011d70:	880b883a 	mov	r5,r17
10011d74:	1421883a 	add	r16,r2,r16
10011d78:	0008ef00 	call	10008ef0 <__mulsi3>
10011d7c:	800ed43a 	srli	r7,r16,16
10011d80:	80ffffcc 	andi	r3,r16,65535
10011d84:	b5800044 	addi	r22,r22,1
10011d88:	11c5883a 	add	r2,r2,r7
10011d8c:	100e943a 	slli	r7,r2,16
10011d90:	1020d43a 	srli	r16,r2,16
10011d94:	38c7883a 	add	r3,r7,r3
10011d98:	a8ffff15 	stw	r3,-4(r21)
10011d9c:	b4bfee16 	blt	r22,r18,10011d58 <__alt_data_end+0xf8011d58>
10011da0:	80000926 	beq	r16,zero,10011dc8 <__multadd+0xb4>
10011da4:	98800217 	ldw	r2,8(r19)
10011da8:	9080130e 	bge	r18,r2,10011df8 <__multadd+0xe4>
10011dac:	90800144 	addi	r2,r18,5
10011db0:	1085883a 	add	r2,r2,r2
10011db4:	1085883a 	add	r2,r2,r2
10011db8:	9885883a 	add	r2,r19,r2
10011dbc:	14000015 	stw	r16,0(r2)
10011dc0:	94800044 	addi	r18,r18,1
10011dc4:	9c800415 	stw	r18,16(r19)
10011dc8:	9805883a 	mov	r2,r19
10011dcc:	dfc00817 	ldw	ra,32(sp)
10011dd0:	ddc00717 	ldw	r23,28(sp)
10011dd4:	dd800617 	ldw	r22,24(sp)
10011dd8:	dd400517 	ldw	r21,20(sp)
10011ddc:	dd000417 	ldw	r20,16(sp)
10011de0:	dcc00317 	ldw	r19,12(sp)
10011de4:	dc800217 	ldw	r18,8(sp)
10011de8:	dc400117 	ldw	r17,4(sp)
10011dec:	dc000017 	ldw	r16,0(sp)
10011df0:	dec00904 	addi	sp,sp,36
10011df4:	f800283a 	ret
10011df8:	99400117 	ldw	r5,4(r19)
10011dfc:	a009883a 	mov	r4,r20
10011e00:	29400044 	addi	r5,r5,1
10011e04:	0011c440 	call	10011c44 <_Balloc>
10011e08:	99800417 	ldw	r6,16(r19)
10011e0c:	99400304 	addi	r5,r19,12
10011e10:	11000304 	addi	r4,r2,12
10011e14:	31800084 	addi	r6,r6,2
10011e18:	318d883a 	add	r6,r6,r6
10011e1c:	318d883a 	add	r6,r6,r6
10011e20:	1023883a 	mov	r17,r2
10011e24:	0009cd00 	call	10009cd0 <memcpy>
10011e28:	98000a26 	beq	r19,zero,10011e54 <__multadd+0x140>
10011e2c:	98c00117 	ldw	r3,4(r19)
10011e30:	a0801317 	ldw	r2,76(r20)
10011e34:	18c7883a 	add	r3,r3,r3
10011e38:	18c7883a 	add	r3,r3,r3
10011e3c:	10c5883a 	add	r2,r2,r3
10011e40:	10c00017 	ldw	r3,0(r2)
10011e44:	98c00015 	stw	r3,0(r19)
10011e48:	14c00015 	stw	r19,0(r2)
10011e4c:	8827883a 	mov	r19,r17
10011e50:	003fd606 	br	10011dac <__alt_data_end+0xf8011dac>
10011e54:	8827883a 	mov	r19,r17
10011e58:	003fd406 	br	10011dac <__alt_data_end+0xf8011dac>

10011e5c <__s2b>:
10011e5c:	defff904 	addi	sp,sp,-28
10011e60:	dc400115 	stw	r17,4(sp)
10011e64:	dc000015 	stw	r16,0(sp)
10011e68:	2023883a 	mov	r17,r4
10011e6c:	2821883a 	mov	r16,r5
10011e70:	39000204 	addi	r4,r7,8
10011e74:	01400244 	movi	r5,9
10011e78:	dcc00315 	stw	r19,12(sp)
10011e7c:	dc800215 	stw	r18,8(sp)
10011e80:	dfc00615 	stw	ra,24(sp)
10011e84:	dd400515 	stw	r21,20(sp)
10011e88:	dd000415 	stw	r20,16(sp)
10011e8c:	3825883a 	mov	r18,r7
10011e90:	3027883a 	mov	r19,r6
10011e94:	0009ad00 	call	10009ad0 <__divsi3>
10011e98:	00c00044 	movi	r3,1
10011e9c:	000b883a 	mov	r5,zero
10011ea0:	1880030e 	bge	r3,r2,10011eb0 <__s2b+0x54>
10011ea4:	18c7883a 	add	r3,r3,r3
10011ea8:	29400044 	addi	r5,r5,1
10011eac:	18bffd16 	blt	r3,r2,10011ea4 <__alt_data_end+0xf8011ea4>
10011eb0:	8809883a 	mov	r4,r17
10011eb4:	0011c440 	call	10011c44 <_Balloc>
10011eb8:	d8c00717 	ldw	r3,28(sp)
10011ebc:	10c00515 	stw	r3,20(r2)
10011ec0:	00c00044 	movi	r3,1
10011ec4:	10c00415 	stw	r3,16(r2)
10011ec8:	00c00244 	movi	r3,9
10011ecc:	1cc0210e 	bge	r3,r19,10011f54 <__s2b+0xf8>
10011ed0:	80eb883a 	add	r21,r16,r3
10011ed4:	a829883a 	mov	r20,r21
10011ed8:	84e1883a 	add	r16,r16,r19
10011edc:	a1c00007 	ldb	r7,0(r20)
10011ee0:	01800284 	movi	r6,10
10011ee4:	a5000044 	addi	r20,r20,1
10011ee8:	100b883a 	mov	r5,r2
10011eec:	39fff404 	addi	r7,r7,-48
10011ef0:	8809883a 	mov	r4,r17
10011ef4:	0011d140 	call	10011d14 <__multadd>
10011ef8:	a43ff81e 	bne	r20,r16,10011edc <__alt_data_end+0xf8011edc>
10011efc:	ace1883a 	add	r16,r21,r19
10011f00:	843ffe04 	addi	r16,r16,-8
10011f04:	9c800a0e 	bge	r19,r18,10011f30 <__s2b+0xd4>
10011f08:	94e5c83a 	sub	r18,r18,r19
10011f0c:	84a5883a 	add	r18,r16,r18
10011f10:	81c00007 	ldb	r7,0(r16)
10011f14:	01800284 	movi	r6,10
10011f18:	84000044 	addi	r16,r16,1
10011f1c:	100b883a 	mov	r5,r2
10011f20:	39fff404 	addi	r7,r7,-48
10011f24:	8809883a 	mov	r4,r17
10011f28:	0011d140 	call	10011d14 <__multadd>
10011f2c:	84bff81e 	bne	r16,r18,10011f10 <__alt_data_end+0xf8011f10>
10011f30:	dfc00617 	ldw	ra,24(sp)
10011f34:	dd400517 	ldw	r21,20(sp)
10011f38:	dd000417 	ldw	r20,16(sp)
10011f3c:	dcc00317 	ldw	r19,12(sp)
10011f40:	dc800217 	ldw	r18,8(sp)
10011f44:	dc400117 	ldw	r17,4(sp)
10011f48:	dc000017 	ldw	r16,0(sp)
10011f4c:	dec00704 	addi	sp,sp,28
10011f50:	f800283a 	ret
10011f54:	84000284 	addi	r16,r16,10
10011f58:	1827883a 	mov	r19,r3
10011f5c:	003fe906 	br	10011f04 <__alt_data_end+0xf8011f04>

10011f60 <__hi0bits>:
10011f60:	20bfffec 	andhi	r2,r4,65535
10011f64:	1000141e 	bne	r2,zero,10011fb8 <__hi0bits+0x58>
10011f68:	2008943a 	slli	r4,r4,16
10011f6c:	00800404 	movi	r2,16
10011f70:	20ffc02c 	andhi	r3,r4,65280
10011f74:	1800021e 	bne	r3,zero,10011f80 <__hi0bits+0x20>
10011f78:	2008923a 	slli	r4,r4,8
10011f7c:	10800204 	addi	r2,r2,8
10011f80:	20fc002c 	andhi	r3,r4,61440
10011f84:	1800021e 	bne	r3,zero,10011f90 <__hi0bits+0x30>
10011f88:	2008913a 	slli	r4,r4,4
10011f8c:	10800104 	addi	r2,r2,4
10011f90:	20f0002c 	andhi	r3,r4,49152
10011f94:	1800031e 	bne	r3,zero,10011fa4 <__hi0bits+0x44>
10011f98:	2109883a 	add	r4,r4,r4
10011f9c:	10800084 	addi	r2,r2,2
10011fa0:	2109883a 	add	r4,r4,r4
10011fa4:	20000316 	blt	r4,zero,10011fb4 <__hi0bits+0x54>
10011fa8:	2110002c 	andhi	r4,r4,16384
10011fac:	2000041e 	bne	r4,zero,10011fc0 <__hi0bits+0x60>
10011fb0:	00800804 	movi	r2,32
10011fb4:	f800283a 	ret
10011fb8:	0005883a 	mov	r2,zero
10011fbc:	003fec06 	br	10011f70 <__alt_data_end+0xf8011f70>
10011fc0:	10800044 	addi	r2,r2,1
10011fc4:	f800283a 	ret

10011fc8 <__lo0bits>:
10011fc8:	20c00017 	ldw	r3,0(r4)
10011fcc:	188001cc 	andi	r2,r3,7
10011fd0:	10000826 	beq	r2,zero,10011ff4 <__lo0bits+0x2c>
10011fd4:	1880004c 	andi	r2,r3,1
10011fd8:	1000211e 	bne	r2,zero,10012060 <__lo0bits+0x98>
10011fdc:	1880008c 	andi	r2,r3,2
10011fe0:	1000211e 	bne	r2,zero,10012068 <__lo0bits+0xa0>
10011fe4:	1806d0ba 	srli	r3,r3,2
10011fe8:	00800084 	movi	r2,2
10011fec:	20c00015 	stw	r3,0(r4)
10011ff0:	f800283a 	ret
10011ff4:	18bfffcc 	andi	r2,r3,65535
10011ff8:	10001326 	beq	r2,zero,10012048 <__lo0bits+0x80>
10011ffc:	0005883a 	mov	r2,zero
10012000:	19403fcc 	andi	r5,r3,255
10012004:	2800021e 	bne	r5,zero,10012010 <__lo0bits+0x48>
10012008:	1806d23a 	srli	r3,r3,8
1001200c:	10800204 	addi	r2,r2,8
10012010:	194003cc 	andi	r5,r3,15
10012014:	2800021e 	bne	r5,zero,10012020 <__lo0bits+0x58>
10012018:	1806d13a 	srli	r3,r3,4
1001201c:	10800104 	addi	r2,r2,4
10012020:	194000cc 	andi	r5,r3,3
10012024:	2800021e 	bne	r5,zero,10012030 <__lo0bits+0x68>
10012028:	1806d0ba 	srli	r3,r3,2
1001202c:	10800084 	addi	r2,r2,2
10012030:	1940004c 	andi	r5,r3,1
10012034:	2800081e 	bne	r5,zero,10012058 <__lo0bits+0x90>
10012038:	1806d07a 	srli	r3,r3,1
1001203c:	1800051e 	bne	r3,zero,10012054 <__lo0bits+0x8c>
10012040:	00800804 	movi	r2,32
10012044:	f800283a 	ret
10012048:	1806d43a 	srli	r3,r3,16
1001204c:	00800404 	movi	r2,16
10012050:	003feb06 	br	10012000 <__alt_data_end+0xf8012000>
10012054:	10800044 	addi	r2,r2,1
10012058:	20c00015 	stw	r3,0(r4)
1001205c:	f800283a 	ret
10012060:	0005883a 	mov	r2,zero
10012064:	f800283a 	ret
10012068:	1806d07a 	srli	r3,r3,1
1001206c:	00800044 	movi	r2,1
10012070:	20c00015 	stw	r3,0(r4)
10012074:	f800283a 	ret

10012078 <__i2b>:
10012078:	defffd04 	addi	sp,sp,-12
1001207c:	dc000015 	stw	r16,0(sp)
10012080:	04000044 	movi	r16,1
10012084:	dc400115 	stw	r17,4(sp)
10012088:	2823883a 	mov	r17,r5
1001208c:	800b883a 	mov	r5,r16
10012090:	dfc00215 	stw	ra,8(sp)
10012094:	0011c440 	call	10011c44 <_Balloc>
10012098:	14400515 	stw	r17,20(r2)
1001209c:	14000415 	stw	r16,16(r2)
100120a0:	dfc00217 	ldw	ra,8(sp)
100120a4:	dc400117 	ldw	r17,4(sp)
100120a8:	dc000017 	ldw	r16,0(sp)
100120ac:	dec00304 	addi	sp,sp,12
100120b0:	f800283a 	ret

100120b4 <__multiply>:
100120b4:	deffef04 	addi	sp,sp,-68
100120b8:	dc400815 	stw	r17,32(sp)
100120bc:	dc000715 	stw	r16,28(sp)
100120c0:	34400417 	ldw	r17,16(r6)
100120c4:	2c000417 	ldw	r16,16(r5)
100120c8:	dd800d15 	stw	r22,52(sp)
100120cc:	dc800915 	stw	r18,36(sp)
100120d0:	dfc01015 	stw	ra,64(sp)
100120d4:	df000f15 	stw	fp,60(sp)
100120d8:	ddc00e15 	stw	r23,56(sp)
100120dc:	dd400c15 	stw	r21,48(sp)
100120e0:	dd000b15 	stw	r20,44(sp)
100120e4:	dcc00a15 	stw	r19,40(sp)
100120e8:	2825883a 	mov	r18,r5
100120ec:	302d883a 	mov	r22,r6
100120f0:	8440050e 	bge	r16,r17,10012108 <__multiply+0x54>
100120f4:	8007883a 	mov	r3,r16
100120f8:	3025883a 	mov	r18,r6
100120fc:	8821883a 	mov	r16,r17
10012100:	282d883a 	mov	r22,r5
10012104:	1823883a 	mov	r17,r3
10012108:	90800217 	ldw	r2,8(r18)
1001210c:	8447883a 	add	r3,r16,r17
10012110:	d8c00215 	stw	r3,8(sp)
10012114:	91400117 	ldw	r5,4(r18)
10012118:	10c0010e 	bge	r2,r3,10012120 <__multiply+0x6c>
1001211c:	29400044 	addi	r5,r5,1
10012120:	0011c440 	call	10011c44 <_Balloc>
10012124:	d8c00217 	ldw	r3,8(sp)
10012128:	d8800615 	stw	r2,24(sp)
1001212c:	18eb883a 	add	r21,r3,r3
10012130:	ad6b883a 	add	r21,r21,r21
10012134:	10c00504 	addi	r3,r2,20
10012138:	1d6b883a 	add	r21,r3,r21
1001213c:	d8c00115 	stw	r3,4(sp)
10012140:	dd400315 	stw	r21,12(sp)
10012144:	1805883a 	mov	r2,r3
10012148:	1d40042e 	bgeu	r3,r21,1001215c <__multiply+0xa8>
1001214c:	d8c00317 	ldw	r3,12(sp)
10012150:	10000015 	stw	zero,0(r2)
10012154:	10800104 	addi	r2,r2,4
10012158:	10fffc36 	bltu	r2,r3,1001214c <__alt_data_end+0xf801214c>
1001215c:	8c63883a 	add	r17,r17,r17
10012160:	b5800504 	addi	r22,r22,20
10012164:	8c63883a 	add	r17,r17,r17
10012168:	94800504 	addi	r18,r18,20
1001216c:	8421883a 	add	r16,r16,r16
10012170:	b463883a 	add	r17,r22,r17
10012174:	8421883a 	add	r16,r16,r16
10012178:	dd800015 	stw	r22,0(sp)
1001217c:	dc800415 	stw	r18,16(sp)
10012180:	dc400515 	stw	r17,20(sp)
10012184:	9429883a 	add	r20,r18,r16
10012188:	b4404f2e 	bgeu	r22,r17,100122c8 <__multiply+0x214>
1001218c:	d8c00017 	ldw	r3,0(sp)
10012190:	1c800017 	ldw	r18,0(r3)
10012194:	947fffcc 	andi	r17,r18,65535
10012198:	88001e26 	beq	r17,zero,10012214 <__multiply+0x160>
1001219c:	dd800117 	ldw	r22,4(sp)
100121a0:	dd400417 	ldw	r21,16(sp)
100121a4:	0027883a 	mov	r19,zero
100121a8:	ac800017 	ldw	r18,0(r21)
100121ac:	b4000017 	ldw	r16,0(r22)
100121b0:	880b883a 	mov	r5,r17
100121b4:	913fffcc 	andi	r4,r18,65535
100121b8:	0008ef00 	call	10008ef0 <__mulsi3>
100121bc:	9008d43a 	srli	r4,r18,16
100121c0:	84bfffcc 	andi	r18,r16,65535
100121c4:	1485883a 	add	r2,r2,r18
100121c8:	14e5883a 	add	r18,r2,r19
100121cc:	8020d43a 	srli	r16,r16,16
100121d0:	9026d43a 	srli	r19,r18,16
100121d4:	880b883a 	mov	r5,r17
100121d8:	0008ef00 	call	10008ef0 <__mulsi3>
100121dc:	1405883a 	add	r2,r2,r16
100121e0:	14e1883a 	add	r16,r2,r19
100121e4:	90ffffcc 	andi	r3,r18,65535
100121e8:	8024943a 	slli	r18,r16,16
100121ec:	ad400104 	addi	r21,r21,4
100121f0:	b005883a 	mov	r2,r22
100121f4:	90c6b03a 	or	r3,r18,r3
100121f8:	b0c00015 	stw	r3,0(r22)
100121fc:	8026d43a 	srli	r19,r16,16
10012200:	b5800104 	addi	r22,r22,4
10012204:	ad3fe836 	bltu	r21,r20,100121a8 <__alt_data_end+0xf80121a8>
10012208:	d8c00017 	ldw	r3,0(sp)
1001220c:	14c00115 	stw	r19,4(r2)
10012210:	1c800017 	ldw	r18,0(r3)
10012214:	9024d43a 	srli	r18,r18,16
10012218:	90002226 	beq	r18,zero,100122a4 <__multiply+0x1f0>
1001221c:	d8c00117 	ldw	r3,4(sp)
10012220:	dd800417 	ldw	r22,16(sp)
10012224:	002f883a 	mov	r23,zero
10012228:	1f000017 	ldw	fp,0(r3)
1001222c:	1823883a 	mov	r17,r3
10012230:	182b883a 	mov	r21,r3
10012234:	e021883a 	mov	r16,fp
10012238:	00000106 	br	10012240 <__multiply+0x18c>
1001223c:	982b883a 	mov	r21,r19
10012240:	b100000b 	ldhu	r4,0(r22)
10012244:	8020d43a 	srli	r16,r16,16
10012248:	900b883a 	mov	r5,r18
1001224c:	0008ef00 	call	10008ef0 <__mulsi3>
10012250:	1405883a 	add	r2,r2,r16
10012254:	15ef883a 	add	r23,r2,r23
10012258:	b804943a 	slli	r2,r23,16
1001225c:	e0ffffcc 	andi	r3,fp,65535
10012260:	8c400104 	addi	r17,r17,4
10012264:	10c6b03a 	or	r3,r2,r3
10012268:	88ffff15 	stw	r3,-4(r17)
1001226c:	b5800104 	addi	r22,r22,4
10012270:	b13fff17 	ldw	r4,-4(r22)
10012274:	acc00104 	addi	r19,r21,4
10012278:	900b883a 	mov	r5,r18
1001227c:	2008d43a 	srli	r4,r4,16
10012280:	9c000017 	ldw	r16,0(r19)
10012284:	0008ef00 	call	10008ef0 <__mulsi3>
10012288:	b806d43a 	srli	r3,r23,16
1001228c:	813fffcc 	andi	r4,r16,65535
10012290:	1105883a 	add	r2,r2,r4
10012294:	10f9883a 	add	fp,r2,r3
10012298:	e02ed43a 	srli	r23,fp,16
1001229c:	b53fe736 	bltu	r22,r20,1001223c <__alt_data_end+0xf801223c>
100122a0:	af000115 	stw	fp,4(r21)
100122a4:	d8c00017 	ldw	r3,0(sp)
100122a8:	d9000517 	ldw	r4,20(sp)
100122ac:	18c00104 	addi	r3,r3,4
100122b0:	d8c00015 	stw	r3,0(sp)
100122b4:	d8c00117 	ldw	r3,4(sp)
100122b8:	18c00104 	addi	r3,r3,4
100122bc:	d8c00115 	stw	r3,4(sp)
100122c0:	d8c00017 	ldw	r3,0(sp)
100122c4:	193fb136 	bltu	r3,r4,1001218c <__alt_data_end+0xf801218c>
100122c8:	d8c00217 	ldw	r3,8(sp)
100122cc:	00c00c0e 	bge	zero,r3,10012300 <__multiply+0x24c>
100122d0:	d8c00317 	ldw	r3,12(sp)
100122d4:	18bfff17 	ldw	r2,-4(r3)
100122d8:	1d7fff04 	addi	r21,r3,-4
100122dc:	10000326 	beq	r2,zero,100122ec <__multiply+0x238>
100122e0:	00000706 	br	10012300 <__multiply+0x24c>
100122e4:	a8800017 	ldw	r2,0(r21)
100122e8:	1000051e 	bne	r2,zero,10012300 <__multiply+0x24c>
100122ec:	d8c00217 	ldw	r3,8(sp)
100122f0:	ad7fff04 	addi	r21,r21,-4
100122f4:	18ffffc4 	addi	r3,r3,-1
100122f8:	d8c00215 	stw	r3,8(sp)
100122fc:	183ff91e 	bne	r3,zero,100122e4 <__alt_data_end+0xf80122e4>
10012300:	d8c00617 	ldw	r3,24(sp)
10012304:	d9000217 	ldw	r4,8(sp)
10012308:	1805883a 	mov	r2,r3
1001230c:	19000415 	stw	r4,16(r3)
10012310:	dfc01017 	ldw	ra,64(sp)
10012314:	df000f17 	ldw	fp,60(sp)
10012318:	ddc00e17 	ldw	r23,56(sp)
1001231c:	dd800d17 	ldw	r22,52(sp)
10012320:	dd400c17 	ldw	r21,48(sp)
10012324:	dd000b17 	ldw	r20,44(sp)
10012328:	dcc00a17 	ldw	r19,40(sp)
1001232c:	dc800917 	ldw	r18,36(sp)
10012330:	dc400817 	ldw	r17,32(sp)
10012334:	dc000717 	ldw	r16,28(sp)
10012338:	dec01104 	addi	sp,sp,68
1001233c:	f800283a 	ret

10012340 <__pow5mult>:
10012340:	defffa04 	addi	sp,sp,-24
10012344:	dcc00315 	stw	r19,12(sp)
10012348:	dc000015 	stw	r16,0(sp)
1001234c:	dfc00515 	stw	ra,20(sp)
10012350:	dd000415 	stw	r20,16(sp)
10012354:	dc800215 	stw	r18,8(sp)
10012358:	dc400115 	stw	r17,4(sp)
1001235c:	308000cc 	andi	r2,r6,3
10012360:	3021883a 	mov	r16,r6
10012364:	2027883a 	mov	r19,r4
10012368:	10002f1e 	bne	r2,zero,10012428 <__pow5mult+0xe8>
1001236c:	2825883a 	mov	r18,r5
10012370:	8021d0ba 	srai	r16,r16,2
10012374:	80001a26 	beq	r16,zero,100123e0 <__pow5mult+0xa0>
10012378:	9c401217 	ldw	r17,72(r19)
1001237c:	8800061e 	bne	r17,zero,10012398 <__pow5mult+0x58>
10012380:	00003406 	br	10012454 <__pow5mult+0x114>
10012384:	8021d07a 	srai	r16,r16,1
10012388:	80001526 	beq	r16,zero,100123e0 <__pow5mult+0xa0>
1001238c:	88800017 	ldw	r2,0(r17)
10012390:	10001c26 	beq	r2,zero,10012404 <__pow5mult+0xc4>
10012394:	1023883a 	mov	r17,r2
10012398:	8080004c 	andi	r2,r16,1
1001239c:	103ff926 	beq	r2,zero,10012384 <__alt_data_end+0xf8012384>
100123a0:	880d883a 	mov	r6,r17
100123a4:	900b883a 	mov	r5,r18
100123a8:	9809883a 	mov	r4,r19
100123ac:	00120b40 	call	100120b4 <__multiply>
100123b0:	90001b26 	beq	r18,zero,10012420 <__pow5mult+0xe0>
100123b4:	91000117 	ldw	r4,4(r18)
100123b8:	98c01317 	ldw	r3,76(r19)
100123bc:	8021d07a 	srai	r16,r16,1
100123c0:	2109883a 	add	r4,r4,r4
100123c4:	2109883a 	add	r4,r4,r4
100123c8:	1907883a 	add	r3,r3,r4
100123cc:	19000017 	ldw	r4,0(r3)
100123d0:	91000015 	stw	r4,0(r18)
100123d4:	1c800015 	stw	r18,0(r3)
100123d8:	1025883a 	mov	r18,r2
100123dc:	803feb1e 	bne	r16,zero,1001238c <__alt_data_end+0xf801238c>
100123e0:	9005883a 	mov	r2,r18
100123e4:	dfc00517 	ldw	ra,20(sp)
100123e8:	dd000417 	ldw	r20,16(sp)
100123ec:	dcc00317 	ldw	r19,12(sp)
100123f0:	dc800217 	ldw	r18,8(sp)
100123f4:	dc400117 	ldw	r17,4(sp)
100123f8:	dc000017 	ldw	r16,0(sp)
100123fc:	dec00604 	addi	sp,sp,24
10012400:	f800283a 	ret
10012404:	880d883a 	mov	r6,r17
10012408:	880b883a 	mov	r5,r17
1001240c:	9809883a 	mov	r4,r19
10012410:	00120b40 	call	100120b4 <__multiply>
10012414:	88800015 	stw	r2,0(r17)
10012418:	10000015 	stw	zero,0(r2)
1001241c:	003fdd06 	br	10012394 <__alt_data_end+0xf8012394>
10012420:	1025883a 	mov	r18,r2
10012424:	003fd706 	br	10012384 <__alt_data_end+0xf8012384>
10012428:	10bfffc4 	addi	r2,r2,-1
1001242c:	1085883a 	add	r2,r2,r2
10012430:	00c400b4 	movhi	r3,4098
10012434:	18cc1204 	addi	r3,r3,12360
10012438:	1085883a 	add	r2,r2,r2
1001243c:	1885883a 	add	r2,r3,r2
10012440:	11800017 	ldw	r6,0(r2)
10012444:	000f883a 	mov	r7,zero
10012448:	0011d140 	call	10011d14 <__multadd>
1001244c:	1025883a 	mov	r18,r2
10012450:	003fc706 	br	10012370 <__alt_data_end+0xf8012370>
10012454:	05000044 	movi	r20,1
10012458:	a00b883a 	mov	r5,r20
1001245c:	9809883a 	mov	r4,r19
10012460:	0011c440 	call	10011c44 <_Balloc>
10012464:	1023883a 	mov	r17,r2
10012468:	00809c44 	movi	r2,625
1001246c:	88800515 	stw	r2,20(r17)
10012470:	8d000415 	stw	r20,16(r17)
10012474:	9c401215 	stw	r17,72(r19)
10012478:	88000015 	stw	zero,0(r17)
1001247c:	003fc606 	br	10012398 <__alt_data_end+0xf8012398>

10012480 <__lshift>:
10012480:	defff904 	addi	sp,sp,-28
10012484:	dd400515 	stw	r21,20(sp)
10012488:	dcc00315 	stw	r19,12(sp)
1001248c:	302bd17a 	srai	r21,r6,5
10012490:	2cc00417 	ldw	r19,16(r5)
10012494:	28800217 	ldw	r2,8(r5)
10012498:	dd000415 	stw	r20,16(sp)
1001249c:	ace7883a 	add	r19,r21,r19
100124a0:	dc800215 	stw	r18,8(sp)
100124a4:	dc400115 	stw	r17,4(sp)
100124a8:	dc000015 	stw	r16,0(sp)
100124ac:	dfc00615 	stw	ra,24(sp)
100124b0:	9c000044 	addi	r16,r19,1
100124b4:	2823883a 	mov	r17,r5
100124b8:	3029883a 	mov	r20,r6
100124bc:	2025883a 	mov	r18,r4
100124c0:	29400117 	ldw	r5,4(r5)
100124c4:	1400030e 	bge	r2,r16,100124d4 <__lshift+0x54>
100124c8:	1085883a 	add	r2,r2,r2
100124cc:	29400044 	addi	r5,r5,1
100124d0:	143ffd16 	blt	r2,r16,100124c8 <__alt_data_end+0xf80124c8>
100124d4:	9009883a 	mov	r4,r18
100124d8:	0011c440 	call	10011c44 <_Balloc>
100124dc:	10c00504 	addi	r3,r2,20
100124e0:	0540070e 	bge	zero,r21,10012500 <__lshift+0x80>
100124e4:	ad6b883a 	add	r21,r21,r21
100124e8:	ad6b883a 	add	r21,r21,r21
100124ec:	1809883a 	mov	r4,r3
100124f0:	1d47883a 	add	r3,r3,r21
100124f4:	20000015 	stw	zero,0(r4)
100124f8:	21000104 	addi	r4,r4,4
100124fc:	193ffd1e 	bne	r3,r4,100124f4 <__alt_data_end+0xf80124f4>
10012500:	8a000417 	ldw	r8,16(r17)
10012504:	89000504 	addi	r4,r17,20
10012508:	a18007cc 	andi	r6,r20,31
1001250c:	4211883a 	add	r8,r8,r8
10012510:	4211883a 	add	r8,r8,r8
10012514:	2211883a 	add	r8,r4,r8
10012518:	30002326 	beq	r6,zero,100125a8 <__lshift+0x128>
1001251c:	02400804 	movi	r9,32
10012520:	4993c83a 	sub	r9,r9,r6
10012524:	000b883a 	mov	r5,zero
10012528:	21c00017 	ldw	r7,0(r4)
1001252c:	1815883a 	mov	r10,r3
10012530:	18c00104 	addi	r3,r3,4
10012534:	398e983a 	sll	r7,r7,r6
10012538:	21000104 	addi	r4,r4,4
1001253c:	394ab03a 	or	r5,r7,r5
10012540:	197fff15 	stw	r5,-4(r3)
10012544:	217fff17 	ldw	r5,-4(r4)
10012548:	2a4ad83a 	srl	r5,r5,r9
1001254c:	223ff636 	bltu	r4,r8,10012528 <__alt_data_end+0xf8012528>
10012550:	51400115 	stw	r5,4(r10)
10012554:	28001a1e 	bne	r5,zero,100125c0 <__lshift+0x140>
10012558:	843fffc4 	addi	r16,r16,-1
1001255c:	14000415 	stw	r16,16(r2)
10012560:	88000826 	beq	r17,zero,10012584 <__lshift+0x104>
10012564:	89000117 	ldw	r4,4(r17)
10012568:	90c01317 	ldw	r3,76(r18)
1001256c:	2109883a 	add	r4,r4,r4
10012570:	2109883a 	add	r4,r4,r4
10012574:	1907883a 	add	r3,r3,r4
10012578:	19000017 	ldw	r4,0(r3)
1001257c:	89000015 	stw	r4,0(r17)
10012580:	1c400015 	stw	r17,0(r3)
10012584:	dfc00617 	ldw	ra,24(sp)
10012588:	dd400517 	ldw	r21,20(sp)
1001258c:	dd000417 	ldw	r20,16(sp)
10012590:	dcc00317 	ldw	r19,12(sp)
10012594:	dc800217 	ldw	r18,8(sp)
10012598:	dc400117 	ldw	r17,4(sp)
1001259c:	dc000017 	ldw	r16,0(sp)
100125a0:	dec00704 	addi	sp,sp,28
100125a4:	f800283a 	ret
100125a8:	21400017 	ldw	r5,0(r4)
100125ac:	18c00104 	addi	r3,r3,4
100125b0:	21000104 	addi	r4,r4,4
100125b4:	197fff15 	stw	r5,-4(r3)
100125b8:	223ffb36 	bltu	r4,r8,100125a8 <__alt_data_end+0xf80125a8>
100125bc:	003fe606 	br	10012558 <__alt_data_end+0xf8012558>
100125c0:	9c000084 	addi	r16,r19,2
100125c4:	003fe406 	br	10012558 <__alt_data_end+0xf8012558>

100125c8 <__mcmp>:
100125c8:	20800417 	ldw	r2,16(r4)
100125cc:	28c00417 	ldw	r3,16(r5)
100125d0:	10c5c83a 	sub	r2,r2,r3
100125d4:	1000111e 	bne	r2,zero,1001261c <__mcmp+0x54>
100125d8:	18c7883a 	add	r3,r3,r3
100125dc:	18c7883a 	add	r3,r3,r3
100125e0:	21000504 	addi	r4,r4,20
100125e4:	29400504 	addi	r5,r5,20
100125e8:	20c5883a 	add	r2,r4,r3
100125ec:	28cb883a 	add	r5,r5,r3
100125f0:	00000106 	br	100125f8 <__mcmp+0x30>
100125f4:	20800a2e 	bgeu	r4,r2,10012620 <__mcmp+0x58>
100125f8:	10bfff04 	addi	r2,r2,-4
100125fc:	297fff04 	addi	r5,r5,-4
10012600:	11800017 	ldw	r6,0(r2)
10012604:	28c00017 	ldw	r3,0(r5)
10012608:	30fffa26 	beq	r6,r3,100125f4 <__alt_data_end+0xf80125f4>
1001260c:	30c00236 	bltu	r6,r3,10012618 <__mcmp+0x50>
10012610:	00800044 	movi	r2,1
10012614:	f800283a 	ret
10012618:	00bfffc4 	movi	r2,-1
1001261c:	f800283a 	ret
10012620:	0005883a 	mov	r2,zero
10012624:	f800283a 	ret

10012628 <__mdiff>:
10012628:	28c00417 	ldw	r3,16(r5)
1001262c:	30800417 	ldw	r2,16(r6)
10012630:	defffa04 	addi	sp,sp,-24
10012634:	dcc00315 	stw	r19,12(sp)
10012638:	dc800215 	stw	r18,8(sp)
1001263c:	dfc00515 	stw	ra,20(sp)
10012640:	dd000415 	stw	r20,16(sp)
10012644:	dc400115 	stw	r17,4(sp)
10012648:	dc000015 	stw	r16,0(sp)
1001264c:	1887c83a 	sub	r3,r3,r2
10012650:	2825883a 	mov	r18,r5
10012654:	3027883a 	mov	r19,r6
10012658:	1800141e 	bne	r3,zero,100126ac <__mdiff+0x84>
1001265c:	1085883a 	add	r2,r2,r2
10012660:	1085883a 	add	r2,r2,r2
10012664:	2a000504 	addi	r8,r5,20
10012668:	34000504 	addi	r16,r6,20
1001266c:	4087883a 	add	r3,r8,r2
10012670:	8085883a 	add	r2,r16,r2
10012674:	00000106 	br	1001267c <__mdiff+0x54>
10012678:	40c0592e 	bgeu	r8,r3,100127e0 <__mdiff+0x1b8>
1001267c:	18ffff04 	addi	r3,r3,-4
10012680:	10bfff04 	addi	r2,r2,-4
10012684:	19c00017 	ldw	r7,0(r3)
10012688:	11400017 	ldw	r5,0(r2)
1001268c:	397ffa26 	beq	r7,r5,10012678 <__alt_data_end+0xf8012678>
10012690:	3940592e 	bgeu	r7,r5,100127f8 <__mdiff+0x1d0>
10012694:	9005883a 	mov	r2,r18
10012698:	4023883a 	mov	r17,r8
1001269c:	9825883a 	mov	r18,r19
100126a0:	05000044 	movi	r20,1
100126a4:	1027883a 	mov	r19,r2
100126a8:	00000406 	br	100126bc <__mdiff+0x94>
100126ac:	18005616 	blt	r3,zero,10012808 <__mdiff+0x1e0>
100126b0:	34400504 	addi	r17,r6,20
100126b4:	2c000504 	addi	r16,r5,20
100126b8:	0029883a 	mov	r20,zero
100126bc:	91400117 	ldw	r5,4(r18)
100126c0:	0011c440 	call	10011c44 <_Balloc>
100126c4:	92400417 	ldw	r9,16(r18)
100126c8:	9b000417 	ldw	r12,16(r19)
100126cc:	12c00504 	addi	r11,r2,20
100126d0:	4a51883a 	add	r8,r9,r9
100126d4:	6319883a 	add	r12,r12,r12
100126d8:	4211883a 	add	r8,r8,r8
100126dc:	6319883a 	add	r12,r12,r12
100126e0:	15000315 	stw	r20,12(r2)
100126e4:	8211883a 	add	r8,r16,r8
100126e8:	8b19883a 	add	r12,r17,r12
100126ec:	0007883a 	mov	r3,zero
100126f0:	81400017 	ldw	r5,0(r16)
100126f4:	89c00017 	ldw	r7,0(r17)
100126f8:	59800104 	addi	r6,r11,4
100126fc:	293fffcc 	andi	r4,r5,65535
10012700:	20c7883a 	add	r3,r4,r3
10012704:	393fffcc 	andi	r4,r7,65535
10012708:	1909c83a 	sub	r4,r3,r4
1001270c:	280ad43a 	srli	r5,r5,16
10012710:	380ed43a 	srli	r7,r7,16
10012714:	2007d43a 	srai	r3,r4,16
10012718:	213fffcc 	andi	r4,r4,65535
1001271c:	29cbc83a 	sub	r5,r5,r7
10012720:	28c7883a 	add	r3,r5,r3
10012724:	180a943a 	slli	r5,r3,16
10012728:	8c400104 	addi	r17,r17,4
1001272c:	84000104 	addi	r16,r16,4
10012730:	2908b03a 	or	r4,r5,r4
10012734:	59000015 	stw	r4,0(r11)
10012738:	1807d43a 	srai	r3,r3,16
1001273c:	3015883a 	mov	r10,r6
10012740:	3017883a 	mov	r11,r6
10012744:	8b3fea36 	bltu	r17,r12,100126f0 <__alt_data_end+0xf80126f0>
10012748:	8200162e 	bgeu	r16,r8,100127a4 <__mdiff+0x17c>
1001274c:	8017883a 	mov	r11,r16
10012750:	59400017 	ldw	r5,0(r11)
10012754:	31800104 	addi	r6,r6,4
10012758:	5ac00104 	addi	r11,r11,4
1001275c:	293fffcc 	andi	r4,r5,65535
10012760:	20c7883a 	add	r3,r4,r3
10012764:	280ed43a 	srli	r7,r5,16
10012768:	180bd43a 	srai	r5,r3,16
1001276c:	193fffcc 	andi	r4,r3,65535
10012770:	3947883a 	add	r3,r7,r5
10012774:	180a943a 	slli	r5,r3,16
10012778:	1807d43a 	srai	r3,r3,16
1001277c:	2908b03a 	or	r4,r5,r4
10012780:	313fff15 	stw	r4,-4(r6)
10012784:	5a3ff236 	bltu	r11,r8,10012750 <__alt_data_end+0xf8012750>
10012788:	0406303a 	nor	r3,zero,r16
1001278c:	1a07883a 	add	r3,r3,r8
10012790:	1806d0ba 	srli	r3,r3,2
10012794:	18c00044 	addi	r3,r3,1
10012798:	18c7883a 	add	r3,r3,r3
1001279c:	18c7883a 	add	r3,r3,r3
100127a0:	50d5883a 	add	r10,r10,r3
100127a4:	50ffff04 	addi	r3,r10,-4
100127a8:	2000041e 	bne	r4,zero,100127bc <__mdiff+0x194>
100127ac:	18ffff04 	addi	r3,r3,-4
100127b0:	19000017 	ldw	r4,0(r3)
100127b4:	4a7fffc4 	addi	r9,r9,-1
100127b8:	203ffc26 	beq	r4,zero,100127ac <__alt_data_end+0xf80127ac>
100127bc:	12400415 	stw	r9,16(r2)
100127c0:	dfc00517 	ldw	ra,20(sp)
100127c4:	dd000417 	ldw	r20,16(sp)
100127c8:	dcc00317 	ldw	r19,12(sp)
100127cc:	dc800217 	ldw	r18,8(sp)
100127d0:	dc400117 	ldw	r17,4(sp)
100127d4:	dc000017 	ldw	r16,0(sp)
100127d8:	dec00604 	addi	sp,sp,24
100127dc:	f800283a 	ret
100127e0:	000b883a 	mov	r5,zero
100127e4:	0011c440 	call	10011c44 <_Balloc>
100127e8:	00c00044 	movi	r3,1
100127ec:	10c00415 	stw	r3,16(r2)
100127f0:	10000515 	stw	zero,20(r2)
100127f4:	003ff206 	br	100127c0 <__alt_data_end+0xf80127c0>
100127f8:	8023883a 	mov	r17,r16
100127fc:	0029883a 	mov	r20,zero
10012800:	4021883a 	mov	r16,r8
10012804:	003fad06 	br	100126bc <__alt_data_end+0xf80126bc>
10012808:	9005883a 	mov	r2,r18
1001280c:	94400504 	addi	r17,r18,20
10012810:	9c000504 	addi	r16,r19,20
10012814:	9825883a 	mov	r18,r19
10012818:	05000044 	movi	r20,1
1001281c:	1027883a 	mov	r19,r2
10012820:	003fa606 	br	100126bc <__alt_data_end+0xf80126bc>

10012824 <__ulp>:
10012824:	295ffc2c 	andhi	r5,r5,32752
10012828:	00bf3034 	movhi	r2,64704
1001282c:	2887883a 	add	r3,r5,r2
10012830:	00c0020e 	bge	zero,r3,1001283c <__ulp+0x18>
10012834:	0005883a 	mov	r2,zero
10012838:	f800283a 	ret
1001283c:	00c7c83a 	sub	r3,zero,r3
10012840:	1807d53a 	srai	r3,r3,20
10012844:	008004c4 	movi	r2,19
10012848:	10c00b0e 	bge	r2,r3,10012878 <__ulp+0x54>
1001284c:	18bffb04 	addi	r2,r3,-20
10012850:	01000784 	movi	r4,30
10012854:	0007883a 	mov	r3,zero
10012858:	20800516 	blt	r4,r2,10012870 <__ulp+0x4c>
1001285c:	010007c4 	movi	r4,31
10012860:	2089c83a 	sub	r4,r4,r2
10012864:	00800044 	movi	r2,1
10012868:	1104983a 	sll	r2,r2,r4
1001286c:	f800283a 	ret
10012870:	00800044 	movi	r2,1
10012874:	f800283a 	ret
10012878:	01400234 	movhi	r5,8
1001287c:	28c7d83a 	sra	r3,r5,r3
10012880:	0005883a 	mov	r2,zero
10012884:	f800283a 	ret

10012888 <__b2d>:
10012888:	defffa04 	addi	sp,sp,-24
1001288c:	dc000015 	stw	r16,0(sp)
10012890:	24000417 	ldw	r16,16(r4)
10012894:	dc400115 	stw	r17,4(sp)
10012898:	24400504 	addi	r17,r4,20
1001289c:	8421883a 	add	r16,r16,r16
100128a0:	8421883a 	add	r16,r16,r16
100128a4:	8c21883a 	add	r16,r17,r16
100128a8:	dc800215 	stw	r18,8(sp)
100128ac:	84bfff17 	ldw	r18,-4(r16)
100128b0:	dd000415 	stw	r20,16(sp)
100128b4:	dcc00315 	stw	r19,12(sp)
100128b8:	9009883a 	mov	r4,r18
100128bc:	2829883a 	mov	r20,r5
100128c0:	dfc00515 	stw	ra,20(sp)
100128c4:	0011f600 	call	10011f60 <__hi0bits>
100128c8:	00c00804 	movi	r3,32
100128cc:	1889c83a 	sub	r4,r3,r2
100128d0:	a1000015 	stw	r4,0(r20)
100128d4:	01000284 	movi	r4,10
100128d8:	84ffff04 	addi	r19,r16,-4
100128dc:	20801216 	blt	r4,r2,10012928 <__b2d+0xa0>
100128e0:	018002c4 	movi	r6,11
100128e4:	308dc83a 	sub	r6,r6,r2
100128e8:	9186d83a 	srl	r3,r18,r6
100128ec:	18cffc34 	orhi	r3,r3,16368
100128f0:	8cc0212e 	bgeu	r17,r19,10012978 <__b2d+0xf0>
100128f4:	813ffe17 	ldw	r4,-8(r16)
100128f8:	218cd83a 	srl	r6,r4,r6
100128fc:	10800544 	addi	r2,r2,21
10012900:	9084983a 	sll	r2,r18,r2
10012904:	1184b03a 	or	r2,r2,r6
10012908:	dfc00517 	ldw	ra,20(sp)
1001290c:	dd000417 	ldw	r20,16(sp)
10012910:	dcc00317 	ldw	r19,12(sp)
10012914:	dc800217 	ldw	r18,8(sp)
10012918:	dc400117 	ldw	r17,4(sp)
1001291c:	dc000017 	ldw	r16,0(sp)
10012920:	dec00604 	addi	sp,sp,24
10012924:	f800283a 	ret
10012928:	8cc00f2e 	bgeu	r17,r19,10012968 <__b2d+0xe0>
1001292c:	117ffd44 	addi	r5,r2,-11
10012930:	80bffe17 	ldw	r2,-8(r16)
10012934:	28000e26 	beq	r5,zero,10012970 <__b2d+0xe8>
10012938:	1949c83a 	sub	r4,r3,r5
1001293c:	9164983a 	sll	r18,r18,r5
10012940:	1106d83a 	srl	r3,r2,r4
10012944:	81bffe04 	addi	r6,r16,-8
10012948:	948ffc34 	orhi	r18,r18,16368
1001294c:	90c6b03a 	or	r3,r18,r3
10012950:	89800e2e 	bgeu	r17,r6,1001298c <__b2d+0x104>
10012954:	81bffd17 	ldw	r6,-12(r16)
10012958:	1144983a 	sll	r2,r2,r5
1001295c:	310ad83a 	srl	r5,r6,r4
10012960:	2884b03a 	or	r2,r5,r2
10012964:	003fe806 	br	10012908 <__alt_data_end+0xf8012908>
10012968:	10bffd44 	addi	r2,r2,-11
1001296c:	1000041e 	bne	r2,zero,10012980 <__b2d+0xf8>
10012970:	90cffc34 	orhi	r3,r18,16368
10012974:	003fe406 	br	10012908 <__alt_data_end+0xf8012908>
10012978:	000d883a 	mov	r6,zero
1001297c:	003fdf06 	br	100128fc <__alt_data_end+0xf80128fc>
10012980:	90a4983a 	sll	r18,r18,r2
10012984:	0005883a 	mov	r2,zero
10012988:	003ff906 	br	10012970 <__alt_data_end+0xf8012970>
1001298c:	1144983a 	sll	r2,r2,r5
10012990:	003fdd06 	br	10012908 <__alt_data_end+0xf8012908>

10012994 <__d2b>:
10012994:	defff804 	addi	sp,sp,-32
10012998:	dc000215 	stw	r16,8(sp)
1001299c:	3021883a 	mov	r16,r6
100129a0:	dc400315 	stw	r17,12(sp)
100129a4:	8022907a 	slli	r17,r16,1
100129a8:	dd000615 	stw	r20,24(sp)
100129ac:	2829883a 	mov	r20,r5
100129b0:	01400044 	movi	r5,1
100129b4:	dcc00515 	stw	r19,20(sp)
100129b8:	dc800415 	stw	r18,16(sp)
100129bc:	dfc00715 	stw	ra,28(sp)
100129c0:	3825883a 	mov	r18,r7
100129c4:	8822d57a 	srli	r17,r17,21
100129c8:	0011c440 	call	10011c44 <_Balloc>
100129cc:	1027883a 	mov	r19,r2
100129d0:	00800434 	movhi	r2,16
100129d4:	10bfffc4 	addi	r2,r2,-1
100129d8:	808c703a 	and	r6,r16,r2
100129dc:	88000126 	beq	r17,zero,100129e4 <__d2b+0x50>
100129e0:	31800434 	orhi	r6,r6,16
100129e4:	d9800015 	stw	r6,0(sp)
100129e8:	a0002426 	beq	r20,zero,10012a7c <__d2b+0xe8>
100129ec:	d9000104 	addi	r4,sp,4
100129f0:	dd000115 	stw	r20,4(sp)
100129f4:	0011fc80 	call	10011fc8 <__lo0bits>
100129f8:	d8c00017 	ldw	r3,0(sp)
100129fc:	10002f1e 	bne	r2,zero,10012abc <__d2b+0x128>
10012a00:	d9000117 	ldw	r4,4(sp)
10012a04:	99000515 	stw	r4,20(r19)
10012a08:	1821003a 	cmpeq	r16,r3,zero
10012a0c:	01000084 	movi	r4,2
10012a10:	2421c83a 	sub	r16,r4,r16
10012a14:	98c00615 	stw	r3,24(r19)
10012a18:	9c000415 	stw	r16,16(r19)
10012a1c:	88001f1e 	bne	r17,zero,10012a9c <__d2b+0x108>
10012a20:	10bef384 	addi	r2,r2,-1074
10012a24:	90800015 	stw	r2,0(r18)
10012a28:	00900034 	movhi	r2,16384
10012a2c:	10bfffc4 	addi	r2,r2,-1
10012a30:	8085883a 	add	r2,r16,r2
10012a34:	1085883a 	add	r2,r2,r2
10012a38:	1085883a 	add	r2,r2,r2
10012a3c:	9885883a 	add	r2,r19,r2
10012a40:	11000517 	ldw	r4,20(r2)
10012a44:	8020917a 	slli	r16,r16,5
10012a48:	0011f600 	call	10011f60 <__hi0bits>
10012a4c:	d8c00817 	ldw	r3,32(sp)
10012a50:	8085c83a 	sub	r2,r16,r2
10012a54:	18800015 	stw	r2,0(r3)
10012a58:	9805883a 	mov	r2,r19
10012a5c:	dfc00717 	ldw	ra,28(sp)
10012a60:	dd000617 	ldw	r20,24(sp)
10012a64:	dcc00517 	ldw	r19,20(sp)
10012a68:	dc800417 	ldw	r18,16(sp)
10012a6c:	dc400317 	ldw	r17,12(sp)
10012a70:	dc000217 	ldw	r16,8(sp)
10012a74:	dec00804 	addi	sp,sp,32
10012a78:	f800283a 	ret
10012a7c:	d809883a 	mov	r4,sp
10012a80:	0011fc80 	call	10011fc8 <__lo0bits>
10012a84:	d8c00017 	ldw	r3,0(sp)
10012a88:	04000044 	movi	r16,1
10012a8c:	9c000415 	stw	r16,16(r19)
10012a90:	98c00515 	stw	r3,20(r19)
10012a94:	10800804 	addi	r2,r2,32
10012a98:	883fe126 	beq	r17,zero,10012a20 <__alt_data_end+0xf8012a20>
10012a9c:	00c00d44 	movi	r3,53
10012aa0:	8c7ef344 	addi	r17,r17,-1075
10012aa4:	88a3883a 	add	r17,r17,r2
10012aa8:	1885c83a 	sub	r2,r3,r2
10012aac:	d8c00817 	ldw	r3,32(sp)
10012ab0:	94400015 	stw	r17,0(r18)
10012ab4:	18800015 	stw	r2,0(r3)
10012ab8:	003fe706 	br	10012a58 <__alt_data_end+0xf8012a58>
10012abc:	01000804 	movi	r4,32
10012ac0:	2089c83a 	sub	r4,r4,r2
10012ac4:	1908983a 	sll	r4,r3,r4
10012ac8:	d9400117 	ldw	r5,4(sp)
10012acc:	1886d83a 	srl	r3,r3,r2
10012ad0:	2148b03a 	or	r4,r4,r5
10012ad4:	99000515 	stw	r4,20(r19)
10012ad8:	d8c00015 	stw	r3,0(sp)
10012adc:	003fca06 	br	10012a08 <__alt_data_end+0xf8012a08>

10012ae0 <__ratio>:
10012ae0:	defff904 	addi	sp,sp,-28
10012ae4:	dc400315 	stw	r17,12(sp)
10012ae8:	2823883a 	mov	r17,r5
10012aec:	d9400104 	addi	r5,sp,4
10012af0:	dfc00615 	stw	ra,24(sp)
10012af4:	dcc00515 	stw	r19,20(sp)
10012af8:	dc800415 	stw	r18,16(sp)
10012afc:	2027883a 	mov	r19,r4
10012b00:	dc000215 	stw	r16,8(sp)
10012b04:	00128880 	call	10012888 <__b2d>
10012b08:	d80b883a 	mov	r5,sp
10012b0c:	8809883a 	mov	r4,r17
10012b10:	1025883a 	mov	r18,r2
10012b14:	1821883a 	mov	r16,r3
10012b18:	00128880 	call	10012888 <__b2d>
10012b1c:	8a000417 	ldw	r8,16(r17)
10012b20:	99000417 	ldw	r4,16(r19)
10012b24:	d9400117 	ldw	r5,4(sp)
10012b28:	2209c83a 	sub	r4,r4,r8
10012b2c:	2010917a 	slli	r8,r4,5
10012b30:	d9000017 	ldw	r4,0(sp)
10012b34:	2909c83a 	sub	r4,r5,r4
10012b38:	4109883a 	add	r4,r8,r4
10012b3c:	01000e0e 	bge	zero,r4,10012b78 <__ratio+0x98>
10012b40:	2008953a 	slli	r4,r4,20
10012b44:	2421883a 	add	r16,r4,r16
10012b48:	100d883a 	mov	r6,r2
10012b4c:	180f883a 	mov	r7,r3
10012b50:	9009883a 	mov	r4,r18
10012b54:	800b883a 	mov	r5,r16
10012b58:	0008f180 	call	10008f18 <__divdf3>
10012b5c:	dfc00617 	ldw	ra,24(sp)
10012b60:	dcc00517 	ldw	r19,20(sp)
10012b64:	dc800417 	ldw	r18,16(sp)
10012b68:	dc400317 	ldw	r17,12(sp)
10012b6c:	dc000217 	ldw	r16,8(sp)
10012b70:	dec00704 	addi	sp,sp,28
10012b74:	f800283a 	ret
10012b78:	2008953a 	slli	r4,r4,20
10012b7c:	1907c83a 	sub	r3,r3,r4
10012b80:	003ff106 	br	10012b48 <__alt_data_end+0xf8012b48>

10012b84 <_mprec_log10>:
10012b84:	defffe04 	addi	sp,sp,-8
10012b88:	dc000015 	stw	r16,0(sp)
10012b8c:	dfc00115 	stw	ra,4(sp)
10012b90:	008005c4 	movi	r2,23
10012b94:	2021883a 	mov	r16,r4
10012b98:	11000d0e 	bge	r2,r4,10012bd0 <_mprec_log10+0x4c>
10012b9c:	0005883a 	mov	r2,zero
10012ba0:	00cffc34 	movhi	r3,16368
10012ba4:	843fffc4 	addi	r16,r16,-1
10012ba8:	000d883a 	mov	r6,zero
10012bac:	01d00934 	movhi	r7,16420
10012bb0:	1009883a 	mov	r4,r2
10012bb4:	180b883a 	mov	r5,r3
10012bb8:	001de6c0 	call	1001de6c <__muldf3>
10012bbc:	803ff91e 	bne	r16,zero,10012ba4 <__alt_data_end+0xf8012ba4>
10012bc0:	dfc00117 	ldw	ra,4(sp)
10012bc4:	dc000017 	ldw	r16,0(sp)
10012bc8:	dec00204 	addi	sp,sp,8
10012bcc:	f800283a 	ret
10012bd0:	202090fa 	slli	r16,r4,3
10012bd4:	008400b4 	movhi	r2,4098
10012bd8:	108c2904 	addi	r2,r2,12452
10012bdc:	1421883a 	add	r16,r2,r16
10012be0:	80800017 	ldw	r2,0(r16)
10012be4:	80c00117 	ldw	r3,4(r16)
10012be8:	dfc00117 	ldw	ra,4(sp)
10012bec:	dc000017 	ldw	r16,0(sp)
10012bf0:	dec00204 	addi	sp,sp,8
10012bf4:	f800283a 	ret

10012bf8 <__copybits>:
10012bf8:	297fffc4 	addi	r5,r5,-1
10012bfc:	280fd17a 	srai	r7,r5,5
10012c00:	30c00417 	ldw	r3,16(r6)
10012c04:	30800504 	addi	r2,r6,20
10012c08:	39c00044 	addi	r7,r7,1
10012c0c:	18c7883a 	add	r3,r3,r3
10012c10:	39cf883a 	add	r7,r7,r7
10012c14:	18c7883a 	add	r3,r3,r3
10012c18:	39cf883a 	add	r7,r7,r7
10012c1c:	10c7883a 	add	r3,r2,r3
10012c20:	21cf883a 	add	r7,r4,r7
10012c24:	10c00d2e 	bgeu	r2,r3,10012c5c <__copybits+0x64>
10012c28:	200b883a 	mov	r5,r4
10012c2c:	12000017 	ldw	r8,0(r2)
10012c30:	29400104 	addi	r5,r5,4
10012c34:	10800104 	addi	r2,r2,4
10012c38:	2a3fff15 	stw	r8,-4(r5)
10012c3c:	10fffb36 	bltu	r2,r3,10012c2c <__alt_data_end+0xf8012c2c>
10012c40:	1985c83a 	sub	r2,r3,r6
10012c44:	10bffac4 	addi	r2,r2,-21
10012c48:	1004d0ba 	srli	r2,r2,2
10012c4c:	10800044 	addi	r2,r2,1
10012c50:	1085883a 	add	r2,r2,r2
10012c54:	1085883a 	add	r2,r2,r2
10012c58:	2089883a 	add	r4,r4,r2
10012c5c:	21c0032e 	bgeu	r4,r7,10012c6c <__copybits+0x74>
10012c60:	20000015 	stw	zero,0(r4)
10012c64:	21000104 	addi	r4,r4,4
10012c68:	21fffd36 	bltu	r4,r7,10012c60 <__alt_data_end+0xf8012c60>
10012c6c:	f800283a 	ret

10012c70 <__any_on>:
10012c70:	20c00417 	ldw	r3,16(r4)
10012c74:	2805d17a 	srai	r2,r5,5
10012c78:	21000504 	addi	r4,r4,20
10012c7c:	18800d0e 	bge	r3,r2,10012cb4 <__any_on+0x44>
10012c80:	18c7883a 	add	r3,r3,r3
10012c84:	18c7883a 	add	r3,r3,r3
10012c88:	20c7883a 	add	r3,r4,r3
10012c8c:	20c0192e 	bgeu	r4,r3,10012cf4 <__any_on+0x84>
10012c90:	18bfff17 	ldw	r2,-4(r3)
10012c94:	18ffff04 	addi	r3,r3,-4
10012c98:	1000041e 	bne	r2,zero,10012cac <__any_on+0x3c>
10012c9c:	20c0142e 	bgeu	r4,r3,10012cf0 <__any_on+0x80>
10012ca0:	18ffff04 	addi	r3,r3,-4
10012ca4:	19400017 	ldw	r5,0(r3)
10012ca8:	283ffc26 	beq	r5,zero,10012c9c <__alt_data_end+0xf8012c9c>
10012cac:	00800044 	movi	r2,1
10012cb0:	f800283a 	ret
10012cb4:	10c00a0e 	bge	r2,r3,10012ce0 <__any_on+0x70>
10012cb8:	1085883a 	add	r2,r2,r2
10012cbc:	1085883a 	add	r2,r2,r2
10012cc0:	294007cc 	andi	r5,r5,31
10012cc4:	2087883a 	add	r3,r4,r2
10012cc8:	283ff026 	beq	r5,zero,10012c8c <__alt_data_end+0xf8012c8c>
10012ccc:	19800017 	ldw	r6,0(r3)
10012cd0:	3144d83a 	srl	r2,r6,r5
10012cd4:	114a983a 	sll	r5,r2,r5
10012cd8:	317ff41e 	bne	r6,r5,10012cac <__alt_data_end+0xf8012cac>
10012cdc:	003feb06 	br	10012c8c <__alt_data_end+0xf8012c8c>
10012ce0:	1085883a 	add	r2,r2,r2
10012ce4:	1085883a 	add	r2,r2,r2
10012ce8:	2087883a 	add	r3,r4,r2
10012cec:	003fe706 	br	10012c8c <__alt_data_end+0xf8012c8c>
10012cf0:	f800283a 	ret
10012cf4:	0005883a 	mov	r2,zero
10012cf8:	f800283a 	ret

10012cfc <_putc_r>:
10012cfc:	defffc04 	addi	sp,sp,-16
10012d00:	dc000215 	stw	r16,8(sp)
10012d04:	dfc00315 	stw	ra,12(sp)
10012d08:	2021883a 	mov	r16,r4
10012d0c:	20000226 	beq	r4,zero,10012d18 <_putc_r+0x1c>
10012d10:	20800e17 	ldw	r2,56(r4)
10012d14:	10001b26 	beq	r2,zero,10012d84 <_putc_r+0x88>
10012d18:	30800217 	ldw	r2,8(r6)
10012d1c:	10bfffc4 	addi	r2,r2,-1
10012d20:	30800215 	stw	r2,8(r6)
10012d24:	10000a16 	blt	r2,zero,10012d50 <_putc_r+0x54>
10012d28:	30800017 	ldw	r2,0(r6)
10012d2c:	11400005 	stb	r5,0(r2)
10012d30:	30800017 	ldw	r2,0(r6)
10012d34:	10c00044 	addi	r3,r2,1
10012d38:	30c00015 	stw	r3,0(r6)
10012d3c:	10800003 	ldbu	r2,0(r2)
10012d40:	dfc00317 	ldw	ra,12(sp)
10012d44:	dc000217 	ldw	r16,8(sp)
10012d48:	dec00404 	addi	sp,sp,16
10012d4c:	f800283a 	ret
10012d50:	30c00617 	ldw	r3,24(r6)
10012d54:	10c00616 	blt	r2,r3,10012d70 <_putc_r+0x74>
10012d58:	30800017 	ldw	r2,0(r6)
10012d5c:	00c00284 	movi	r3,10
10012d60:	11400005 	stb	r5,0(r2)
10012d64:	30800017 	ldw	r2,0(r6)
10012d68:	11400003 	ldbu	r5,0(r2)
10012d6c:	28fff11e 	bne	r5,r3,10012d34 <__alt_data_end+0xf8012d34>
10012d70:	8009883a 	mov	r4,r16
10012d74:	dfc00317 	ldw	ra,12(sp)
10012d78:	dc000217 	ldw	r16,8(sp)
10012d7c:	dec00404 	addi	sp,sp,16
10012d80:	00198f41 	jmpi	100198f4 <__swbuf_r>
10012d84:	d9400015 	stw	r5,0(sp)
10012d88:	d9800115 	stw	r6,4(sp)
10012d8c:	000fea00 	call	1000fea0 <__sinit>
10012d90:	d9800117 	ldw	r6,4(sp)
10012d94:	d9400017 	ldw	r5,0(sp)
10012d98:	003fdf06 	br	10012d18 <__alt_data_end+0xf8012d18>

10012d9c <putc>:
10012d9c:	008400b4 	movhi	r2,4098
10012da0:	defffc04 	addi	sp,sp,-16
10012da4:	10951604 	addi	r2,r2,21592
10012da8:	dc000115 	stw	r16,4(sp)
10012dac:	14000017 	ldw	r16,0(r2)
10012db0:	dc400215 	stw	r17,8(sp)
10012db4:	dfc00315 	stw	ra,12(sp)
10012db8:	2023883a 	mov	r17,r4
10012dbc:	80000226 	beq	r16,zero,10012dc8 <putc+0x2c>
10012dc0:	80800e17 	ldw	r2,56(r16)
10012dc4:	10001a26 	beq	r2,zero,10012e30 <putc+0x94>
10012dc8:	28800217 	ldw	r2,8(r5)
10012dcc:	10bfffc4 	addi	r2,r2,-1
10012dd0:	28800215 	stw	r2,8(r5)
10012dd4:	10000b16 	blt	r2,zero,10012e04 <putc+0x68>
10012dd8:	28800017 	ldw	r2,0(r5)
10012ddc:	14400005 	stb	r17,0(r2)
10012de0:	28800017 	ldw	r2,0(r5)
10012de4:	10c00044 	addi	r3,r2,1
10012de8:	28c00015 	stw	r3,0(r5)
10012dec:	10800003 	ldbu	r2,0(r2)
10012df0:	dfc00317 	ldw	ra,12(sp)
10012df4:	dc400217 	ldw	r17,8(sp)
10012df8:	dc000117 	ldw	r16,4(sp)
10012dfc:	dec00404 	addi	sp,sp,16
10012e00:	f800283a 	ret
10012e04:	28c00617 	ldw	r3,24(r5)
10012e08:	10c00e16 	blt	r2,r3,10012e44 <putc+0xa8>
10012e0c:	28800017 	ldw	r2,0(r5)
10012e10:	01000284 	movi	r4,10
10012e14:	14400005 	stb	r17,0(r2)
10012e18:	28800017 	ldw	r2,0(r5)
10012e1c:	10c00003 	ldbu	r3,0(r2)
10012e20:	193ff01e 	bne	r3,r4,10012de4 <__alt_data_end+0xf8012de4>
10012e24:	280d883a 	mov	r6,r5
10012e28:	180b883a 	mov	r5,r3
10012e2c:	00000706 	br	10012e4c <putc+0xb0>
10012e30:	8009883a 	mov	r4,r16
10012e34:	d9400015 	stw	r5,0(sp)
10012e38:	000fea00 	call	1000fea0 <__sinit>
10012e3c:	d9400017 	ldw	r5,0(sp)
10012e40:	003fe106 	br	10012dc8 <__alt_data_end+0xf8012dc8>
10012e44:	280d883a 	mov	r6,r5
10012e48:	880b883a 	mov	r5,r17
10012e4c:	8009883a 	mov	r4,r16
10012e50:	dfc00317 	ldw	ra,12(sp)
10012e54:	dc400217 	ldw	r17,8(sp)
10012e58:	dc000117 	ldw	r16,4(sp)
10012e5c:	dec00404 	addi	sp,sp,16
10012e60:	00198f41 	jmpi	100198f4 <__swbuf_r>

10012e64 <_realloc_r>:
10012e64:	defff604 	addi	sp,sp,-40
10012e68:	dc800215 	stw	r18,8(sp)
10012e6c:	dfc00915 	stw	ra,36(sp)
10012e70:	df000815 	stw	fp,32(sp)
10012e74:	ddc00715 	stw	r23,28(sp)
10012e78:	dd800615 	stw	r22,24(sp)
10012e7c:	dd400515 	stw	r21,20(sp)
10012e80:	dd000415 	stw	r20,16(sp)
10012e84:	dcc00315 	stw	r19,12(sp)
10012e88:	dc400115 	stw	r17,4(sp)
10012e8c:	dc000015 	stw	r16,0(sp)
10012e90:	3025883a 	mov	r18,r6
10012e94:	2800b726 	beq	r5,zero,10013174 <_realloc_r+0x310>
10012e98:	282b883a 	mov	r21,r5
10012e9c:	2029883a 	mov	r20,r4
10012ea0:	001f7980 	call	1001f798 <__malloc_lock>
10012ea4:	a8bfff17 	ldw	r2,-4(r21)
10012ea8:	043fff04 	movi	r16,-4
10012eac:	90c002c4 	addi	r3,r18,11
10012eb0:	01000584 	movi	r4,22
10012eb4:	acfffe04 	addi	r19,r21,-8
10012eb8:	1420703a 	and	r16,r2,r16
10012ebc:	20c0332e 	bgeu	r4,r3,10012f8c <_realloc_r+0x128>
10012ec0:	047ffe04 	movi	r17,-8
10012ec4:	1c62703a 	and	r17,r3,r17
10012ec8:	8807883a 	mov	r3,r17
10012ecc:	88005816 	blt	r17,zero,10013030 <_realloc_r+0x1cc>
10012ed0:	8c805736 	bltu	r17,r18,10013030 <_realloc_r+0x1cc>
10012ed4:	80c0300e 	bge	r16,r3,10012f98 <_realloc_r+0x134>
10012ed8:	070400b4 	movhi	fp,4098
10012edc:	e70f8f04 	addi	fp,fp,15932
10012ee0:	e1c00217 	ldw	r7,8(fp)
10012ee4:	9c09883a 	add	r4,r19,r16
10012ee8:	22000117 	ldw	r8,4(r4)
10012eec:	21c06326 	beq	r4,r7,1001307c <_realloc_r+0x218>
10012ef0:	017fff84 	movi	r5,-2
10012ef4:	414a703a 	and	r5,r8,r5
10012ef8:	214b883a 	add	r5,r4,r5
10012efc:	29800117 	ldw	r6,4(r5)
10012f00:	3180004c 	andi	r6,r6,1
10012f04:	30003f26 	beq	r6,zero,10013004 <_realloc_r+0x1a0>
10012f08:	1080004c 	andi	r2,r2,1
10012f0c:	10008326 	beq	r2,zero,1001311c <_realloc_r+0x2b8>
10012f10:	900b883a 	mov	r5,r18
10012f14:	a009883a 	mov	r4,r20
10012f18:	0010eac0 	call	10010eac <_malloc_r>
10012f1c:	1025883a 	mov	r18,r2
10012f20:	10011e26 	beq	r2,zero,1001339c <_realloc_r+0x538>
10012f24:	a93fff17 	ldw	r4,-4(r21)
10012f28:	10fffe04 	addi	r3,r2,-8
10012f2c:	00bfff84 	movi	r2,-2
10012f30:	2084703a 	and	r2,r4,r2
10012f34:	9885883a 	add	r2,r19,r2
10012f38:	1880ee26 	beq	r3,r2,100132f4 <_realloc_r+0x490>
10012f3c:	81bfff04 	addi	r6,r16,-4
10012f40:	00800904 	movi	r2,36
10012f44:	1180b836 	bltu	r2,r6,10013228 <_realloc_r+0x3c4>
10012f48:	00c004c4 	movi	r3,19
10012f4c:	19809636 	bltu	r3,r6,100131a8 <_realloc_r+0x344>
10012f50:	9005883a 	mov	r2,r18
10012f54:	a807883a 	mov	r3,r21
10012f58:	19000017 	ldw	r4,0(r3)
10012f5c:	11000015 	stw	r4,0(r2)
10012f60:	19000117 	ldw	r4,4(r3)
10012f64:	11000115 	stw	r4,4(r2)
10012f68:	18c00217 	ldw	r3,8(r3)
10012f6c:	10c00215 	stw	r3,8(r2)
10012f70:	a80b883a 	mov	r5,r21
10012f74:	a009883a 	mov	r4,r20
10012f78:	00102840 	call	10010284 <_free_r>
10012f7c:	a009883a 	mov	r4,r20
10012f80:	001f7bc0 	call	1001f7bc <__malloc_unlock>
10012f84:	9005883a 	mov	r2,r18
10012f88:	00001206 	br	10012fd4 <_realloc_r+0x170>
10012f8c:	00c00404 	movi	r3,16
10012f90:	1823883a 	mov	r17,r3
10012f94:	003fce06 	br	10012ed0 <__alt_data_end+0xf8012ed0>
10012f98:	a825883a 	mov	r18,r21
10012f9c:	8445c83a 	sub	r2,r16,r17
10012fa0:	00c003c4 	movi	r3,15
10012fa4:	18802636 	bltu	r3,r2,10013040 <_realloc_r+0x1dc>
10012fa8:	99800117 	ldw	r6,4(r19)
10012fac:	9c07883a 	add	r3,r19,r16
10012fb0:	3180004c 	andi	r6,r6,1
10012fb4:	3420b03a 	or	r16,r6,r16
10012fb8:	9c000115 	stw	r16,4(r19)
10012fbc:	18800117 	ldw	r2,4(r3)
10012fc0:	10800054 	ori	r2,r2,1
10012fc4:	18800115 	stw	r2,4(r3)
10012fc8:	a009883a 	mov	r4,r20
10012fcc:	001f7bc0 	call	1001f7bc <__malloc_unlock>
10012fd0:	9005883a 	mov	r2,r18
10012fd4:	dfc00917 	ldw	ra,36(sp)
10012fd8:	df000817 	ldw	fp,32(sp)
10012fdc:	ddc00717 	ldw	r23,28(sp)
10012fe0:	dd800617 	ldw	r22,24(sp)
10012fe4:	dd400517 	ldw	r21,20(sp)
10012fe8:	dd000417 	ldw	r20,16(sp)
10012fec:	dcc00317 	ldw	r19,12(sp)
10012ff0:	dc800217 	ldw	r18,8(sp)
10012ff4:	dc400117 	ldw	r17,4(sp)
10012ff8:	dc000017 	ldw	r16,0(sp)
10012ffc:	dec00a04 	addi	sp,sp,40
10013000:	f800283a 	ret
10013004:	017fff04 	movi	r5,-4
10013008:	414a703a 	and	r5,r8,r5
1001300c:	814d883a 	add	r6,r16,r5
10013010:	30c01f16 	blt	r6,r3,10013090 <_realloc_r+0x22c>
10013014:	20800317 	ldw	r2,12(r4)
10013018:	20c00217 	ldw	r3,8(r4)
1001301c:	a825883a 	mov	r18,r21
10013020:	3021883a 	mov	r16,r6
10013024:	18800315 	stw	r2,12(r3)
10013028:	10c00215 	stw	r3,8(r2)
1001302c:	003fdb06 	br	10012f9c <__alt_data_end+0xf8012f9c>
10013030:	00800304 	movi	r2,12
10013034:	a0800015 	stw	r2,0(r20)
10013038:	0005883a 	mov	r2,zero
1001303c:	003fe506 	br	10012fd4 <__alt_data_end+0xf8012fd4>
10013040:	98c00117 	ldw	r3,4(r19)
10013044:	9c4b883a 	add	r5,r19,r17
10013048:	11000054 	ori	r4,r2,1
1001304c:	18c0004c 	andi	r3,r3,1
10013050:	1c62b03a 	or	r17,r3,r17
10013054:	9c400115 	stw	r17,4(r19)
10013058:	29000115 	stw	r4,4(r5)
1001305c:	2885883a 	add	r2,r5,r2
10013060:	10c00117 	ldw	r3,4(r2)
10013064:	29400204 	addi	r5,r5,8
10013068:	a009883a 	mov	r4,r20
1001306c:	18c00054 	ori	r3,r3,1
10013070:	10c00115 	stw	r3,4(r2)
10013074:	00102840 	call	10010284 <_free_r>
10013078:	003fd306 	br	10012fc8 <__alt_data_end+0xf8012fc8>
1001307c:	017fff04 	movi	r5,-4
10013080:	414a703a 	and	r5,r8,r5
10013084:	89800404 	addi	r6,r17,16
10013088:	8151883a 	add	r8,r16,r5
1001308c:	4180590e 	bge	r8,r6,100131f4 <_realloc_r+0x390>
10013090:	1080004c 	andi	r2,r2,1
10013094:	103f9e1e 	bne	r2,zero,10012f10 <__alt_data_end+0xf8012f10>
10013098:	adbffe17 	ldw	r22,-8(r21)
1001309c:	00bfff04 	movi	r2,-4
100130a0:	9dadc83a 	sub	r22,r19,r22
100130a4:	b1800117 	ldw	r6,4(r22)
100130a8:	3084703a 	and	r2,r6,r2
100130ac:	20002026 	beq	r4,zero,10013130 <_realloc_r+0x2cc>
100130b0:	80af883a 	add	r23,r16,r2
100130b4:	b96f883a 	add	r23,r23,r5
100130b8:	21c05f26 	beq	r4,r7,10013238 <_realloc_r+0x3d4>
100130bc:	b8c01c16 	blt	r23,r3,10013130 <_realloc_r+0x2cc>
100130c0:	20800317 	ldw	r2,12(r4)
100130c4:	20c00217 	ldw	r3,8(r4)
100130c8:	81bfff04 	addi	r6,r16,-4
100130cc:	01000904 	movi	r4,36
100130d0:	18800315 	stw	r2,12(r3)
100130d4:	10c00215 	stw	r3,8(r2)
100130d8:	b0c00217 	ldw	r3,8(r22)
100130dc:	b0800317 	ldw	r2,12(r22)
100130e0:	b4800204 	addi	r18,r22,8
100130e4:	18800315 	stw	r2,12(r3)
100130e8:	10c00215 	stw	r3,8(r2)
100130ec:	21801b36 	bltu	r4,r6,1001315c <_realloc_r+0x2f8>
100130f0:	008004c4 	movi	r2,19
100130f4:	1180352e 	bgeu	r2,r6,100131cc <_realloc_r+0x368>
100130f8:	a8800017 	ldw	r2,0(r21)
100130fc:	b0800215 	stw	r2,8(r22)
10013100:	a8800117 	ldw	r2,4(r21)
10013104:	b0800315 	stw	r2,12(r22)
10013108:	008006c4 	movi	r2,27
1001310c:	11807f36 	bltu	r2,r6,1001330c <_realloc_r+0x4a8>
10013110:	b0800404 	addi	r2,r22,16
10013114:	ad400204 	addi	r21,r21,8
10013118:	00002d06 	br	100131d0 <_realloc_r+0x36c>
1001311c:	adbffe17 	ldw	r22,-8(r21)
10013120:	00bfff04 	movi	r2,-4
10013124:	9dadc83a 	sub	r22,r19,r22
10013128:	b1000117 	ldw	r4,4(r22)
1001312c:	2084703a 	and	r2,r4,r2
10013130:	b03f7726 	beq	r22,zero,10012f10 <__alt_data_end+0xf8012f10>
10013134:	80af883a 	add	r23,r16,r2
10013138:	b8ff7516 	blt	r23,r3,10012f10 <__alt_data_end+0xf8012f10>
1001313c:	b0800317 	ldw	r2,12(r22)
10013140:	b0c00217 	ldw	r3,8(r22)
10013144:	81bfff04 	addi	r6,r16,-4
10013148:	01000904 	movi	r4,36
1001314c:	18800315 	stw	r2,12(r3)
10013150:	10c00215 	stw	r3,8(r2)
10013154:	b4800204 	addi	r18,r22,8
10013158:	21bfe52e 	bgeu	r4,r6,100130f0 <__alt_data_end+0xf80130f0>
1001315c:	a80b883a 	mov	r5,r21
10013160:	9009883a 	mov	r4,r18
10013164:	00119c00 	call	100119c0 <memmove>
10013168:	b821883a 	mov	r16,r23
1001316c:	b027883a 	mov	r19,r22
10013170:	003f8a06 	br	10012f9c <__alt_data_end+0xf8012f9c>
10013174:	300b883a 	mov	r5,r6
10013178:	dfc00917 	ldw	ra,36(sp)
1001317c:	df000817 	ldw	fp,32(sp)
10013180:	ddc00717 	ldw	r23,28(sp)
10013184:	dd800617 	ldw	r22,24(sp)
10013188:	dd400517 	ldw	r21,20(sp)
1001318c:	dd000417 	ldw	r20,16(sp)
10013190:	dcc00317 	ldw	r19,12(sp)
10013194:	dc800217 	ldw	r18,8(sp)
10013198:	dc400117 	ldw	r17,4(sp)
1001319c:	dc000017 	ldw	r16,0(sp)
100131a0:	dec00a04 	addi	sp,sp,40
100131a4:	0010eac1 	jmpi	10010eac <_malloc_r>
100131a8:	a8c00017 	ldw	r3,0(r21)
100131ac:	90c00015 	stw	r3,0(r18)
100131b0:	a8c00117 	ldw	r3,4(r21)
100131b4:	90c00115 	stw	r3,4(r18)
100131b8:	00c006c4 	movi	r3,27
100131bc:	19804536 	bltu	r3,r6,100132d4 <_realloc_r+0x470>
100131c0:	90800204 	addi	r2,r18,8
100131c4:	a8c00204 	addi	r3,r21,8
100131c8:	003f6306 	br	10012f58 <__alt_data_end+0xf8012f58>
100131cc:	9005883a 	mov	r2,r18
100131d0:	a8c00017 	ldw	r3,0(r21)
100131d4:	b821883a 	mov	r16,r23
100131d8:	b027883a 	mov	r19,r22
100131dc:	10c00015 	stw	r3,0(r2)
100131e0:	a8c00117 	ldw	r3,4(r21)
100131e4:	10c00115 	stw	r3,4(r2)
100131e8:	a8c00217 	ldw	r3,8(r21)
100131ec:	10c00215 	stw	r3,8(r2)
100131f0:	003f6a06 	br	10012f9c <__alt_data_end+0xf8012f9c>
100131f4:	9c67883a 	add	r19,r19,r17
100131f8:	4445c83a 	sub	r2,r8,r17
100131fc:	e4c00215 	stw	r19,8(fp)
10013200:	10800054 	ori	r2,r2,1
10013204:	98800115 	stw	r2,4(r19)
10013208:	a8bfff17 	ldw	r2,-4(r21)
1001320c:	a009883a 	mov	r4,r20
10013210:	1080004c 	andi	r2,r2,1
10013214:	1462b03a 	or	r17,r2,r17
10013218:	ac7fff15 	stw	r17,-4(r21)
1001321c:	001f7bc0 	call	1001f7bc <__malloc_unlock>
10013220:	a805883a 	mov	r2,r21
10013224:	003f6b06 	br	10012fd4 <__alt_data_end+0xf8012fd4>
10013228:	a80b883a 	mov	r5,r21
1001322c:	9009883a 	mov	r4,r18
10013230:	00119c00 	call	100119c0 <memmove>
10013234:	003f4e06 	br	10012f70 <__alt_data_end+0xf8012f70>
10013238:	89000404 	addi	r4,r17,16
1001323c:	b93fbc16 	blt	r23,r4,10013130 <__alt_data_end+0xf8013130>
10013240:	b0800317 	ldw	r2,12(r22)
10013244:	b0c00217 	ldw	r3,8(r22)
10013248:	81bfff04 	addi	r6,r16,-4
1001324c:	01000904 	movi	r4,36
10013250:	18800315 	stw	r2,12(r3)
10013254:	10c00215 	stw	r3,8(r2)
10013258:	b4800204 	addi	r18,r22,8
1001325c:	21804336 	bltu	r4,r6,1001336c <_realloc_r+0x508>
10013260:	008004c4 	movi	r2,19
10013264:	11803f2e 	bgeu	r2,r6,10013364 <_realloc_r+0x500>
10013268:	a8800017 	ldw	r2,0(r21)
1001326c:	b0800215 	stw	r2,8(r22)
10013270:	a8800117 	ldw	r2,4(r21)
10013274:	b0800315 	stw	r2,12(r22)
10013278:	008006c4 	movi	r2,27
1001327c:	11803f36 	bltu	r2,r6,1001337c <_realloc_r+0x518>
10013280:	b0800404 	addi	r2,r22,16
10013284:	ad400204 	addi	r21,r21,8
10013288:	a8c00017 	ldw	r3,0(r21)
1001328c:	10c00015 	stw	r3,0(r2)
10013290:	a8c00117 	ldw	r3,4(r21)
10013294:	10c00115 	stw	r3,4(r2)
10013298:	a8c00217 	ldw	r3,8(r21)
1001329c:	10c00215 	stw	r3,8(r2)
100132a0:	b447883a 	add	r3,r22,r17
100132a4:	bc45c83a 	sub	r2,r23,r17
100132a8:	e0c00215 	stw	r3,8(fp)
100132ac:	10800054 	ori	r2,r2,1
100132b0:	18800115 	stw	r2,4(r3)
100132b4:	b0800117 	ldw	r2,4(r22)
100132b8:	a009883a 	mov	r4,r20
100132bc:	1080004c 	andi	r2,r2,1
100132c0:	1462b03a 	or	r17,r2,r17
100132c4:	b4400115 	stw	r17,4(r22)
100132c8:	001f7bc0 	call	1001f7bc <__malloc_unlock>
100132cc:	9005883a 	mov	r2,r18
100132d0:	003f4006 	br	10012fd4 <__alt_data_end+0xf8012fd4>
100132d4:	a8c00217 	ldw	r3,8(r21)
100132d8:	90c00215 	stw	r3,8(r18)
100132dc:	a8c00317 	ldw	r3,12(r21)
100132e0:	90c00315 	stw	r3,12(r18)
100132e4:	30801126 	beq	r6,r2,1001332c <_realloc_r+0x4c8>
100132e8:	90800404 	addi	r2,r18,16
100132ec:	a8c00404 	addi	r3,r21,16
100132f0:	003f1906 	br	10012f58 <__alt_data_end+0xf8012f58>
100132f4:	90ffff17 	ldw	r3,-4(r18)
100132f8:	00bfff04 	movi	r2,-4
100132fc:	a825883a 	mov	r18,r21
10013300:	1884703a 	and	r2,r3,r2
10013304:	80a1883a 	add	r16,r16,r2
10013308:	003f2406 	br	10012f9c <__alt_data_end+0xf8012f9c>
1001330c:	a8800217 	ldw	r2,8(r21)
10013310:	b0800415 	stw	r2,16(r22)
10013314:	a8800317 	ldw	r2,12(r21)
10013318:	b0800515 	stw	r2,20(r22)
1001331c:	31000a26 	beq	r6,r4,10013348 <_realloc_r+0x4e4>
10013320:	b0800604 	addi	r2,r22,24
10013324:	ad400404 	addi	r21,r21,16
10013328:	003fa906 	br	100131d0 <__alt_data_end+0xf80131d0>
1001332c:	a9000417 	ldw	r4,16(r21)
10013330:	90800604 	addi	r2,r18,24
10013334:	a8c00604 	addi	r3,r21,24
10013338:	91000415 	stw	r4,16(r18)
1001333c:	a9000517 	ldw	r4,20(r21)
10013340:	91000515 	stw	r4,20(r18)
10013344:	003f0406 	br	10012f58 <__alt_data_end+0xf8012f58>
10013348:	a8c00417 	ldw	r3,16(r21)
1001334c:	ad400604 	addi	r21,r21,24
10013350:	b0800804 	addi	r2,r22,32
10013354:	b0c00615 	stw	r3,24(r22)
10013358:	a8ffff17 	ldw	r3,-4(r21)
1001335c:	b0c00715 	stw	r3,28(r22)
10013360:	003f9b06 	br	100131d0 <__alt_data_end+0xf80131d0>
10013364:	9005883a 	mov	r2,r18
10013368:	003fc706 	br	10013288 <__alt_data_end+0xf8013288>
1001336c:	a80b883a 	mov	r5,r21
10013370:	9009883a 	mov	r4,r18
10013374:	00119c00 	call	100119c0 <memmove>
10013378:	003fc906 	br	100132a0 <__alt_data_end+0xf80132a0>
1001337c:	a8800217 	ldw	r2,8(r21)
10013380:	b0800415 	stw	r2,16(r22)
10013384:	a8800317 	ldw	r2,12(r21)
10013388:	b0800515 	stw	r2,20(r22)
1001338c:	31000726 	beq	r6,r4,100133ac <_realloc_r+0x548>
10013390:	b0800604 	addi	r2,r22,24
10013394:	ad400404 	addi	r21,r21,16
10013398:	003fbb06 	br	10013288 <__alt_data_end+0xf8013288>
1001339c:	a009883a 	mov	r4,r20
100133a0:	001f7bc0 	call	1001f7bc <__malloc_unlock>
100133a4:	0005883a 	mov	r2,zero
100133a8:	003f0a06 	br	10012fd4 <__alt_data_end+0xf8012fd4>
100133ac:	a8c00417 	ldw	r3,16(r21)
100133b0:	ad400604 	addi	r21,r21,24
100133b4:	b0800804 	addi	r2,r22,32
100133b8:	b0c00615 	stw	r3,24(r22)
100133bc:	a8ffff17 	ldw	r3,-4(r21)
100133c0:	b0c00715 	stw	r3,28(r22)
100133c4:	003fb006 	br	10013288 <__alt_data_end+0xf8013288>

100133c8 <lflush>:
100133c8:	2080030b 	ldhu	r2,12(r4)
100133cc:	00c00244 	movi	r3,9
100133d0:	1080024c 	andi	r2,r2,9
100133d4:	10c00226 	beq	r2,r3,100133e0 <lflush+0x18>
100133d8:	0005883a 	mov	r2,zero
100133dc:	f800283a 	ret
100133e0:	000fb101 	jmpi	1000fb10 <fflush>

100133e4 <__srefill_r>:
100133e4:	defffc04 	addi	sp,sp,-16
100133e8:	dc400115 	stw	r17,4(sp)
100133ec:	dc000015 	stw	r16,0(sp)
100133f0:	dfc00315 	stw	ra,12(sp)
100133f4:	dc800215 	stw	r18,8(sp)
100133f8:	2023883a 	mov	r17,r4
100133fc:	2821883a 	mov	r16,r5
10013400:	20000226 	beq	r4,zero,1001340c <__srefill_r+0x28>
10013404:	20800e17 	ldw	r2,56(r4)
10013408:	10003c26 	beq	r2,zero,100134fc <__srefill_r+0x118>
1001340c:	80c0030b 	ldhu	r3,12(r16)
10013410:	1908000c 	andi	r4,r3,8192
10013414:	1805883a 	mov	r2,r3
10013418:	2000071e 	bne	r4,zero,10013438 <__srefill_r+0x54>
1001341c:	81001917 	ldw	r4,100(r16)
10013420:	18880014 	ori	r2,r3,8192
10013424:	00f7ffc4 	movi	r3,-8193
10013428:	20c8703a 	and	r4,r4,r3
1001342c:	8080030d 	sth	r2,12(r16)
10013430:	1007883a 	mov	r3,r2
10013434:	81001915 	stw	r4,100(r16)
10013438:	80000115 	stw	zero,4(r16)
1001343c:	1100080c 	andi	r4,r2,32
10013440:	2000571e 	bne	r4,zero,100135a0 <__srefill_r+0x1bc>
10013444:	1100010c 	andi	r4,r2,4
10013448:	20001f26 	beq	r4,zero,100134c8 <__srefill_r+0xe4>
1001344c:	81400c17 	ldw	r5,48(r16)
10013450:	28000826 	beq	r5,zero,10013474 <__srefill_r+0x90>
10013454:	80801004 	addi	r2,r16,64
10013458:	28800226 	beq	r5,r2,10013464 <__srefill_r+0x80>
1001345c:	8809883a 	mov	r4,r17
10013460:	00102840 	call	10010284 <_free_r>
10013464:	80800f17 	ldw	r2,60(r16)
10013468:	80000c15 	stw	zero,48(r16)
1001346c:	80800115 	stw	r2,4(r16)
10013470:	1000391e 	bne	r2,zero,10013558 <__srefill_r+0x174>
10013474:	80800417 	ldw	r2,16(r16)
10013478:	10004b26 	beq	r2,zero,100135a8 <__srefill_r+0x1c4>
1001347c:	8480030b 	ldhu	r18,12(r16)
10013480:	908000cc 	andi	r2,r18,3
10013484:	10001f1e 	bne	r2,zero,10013504 <__srefill_r+0x120>
10013488:	81800417 	ldw	r6,16(r16)
1001348c:	80800817 	ldw	r2,32(r16)
10013490:	81c00517 	ldw	r7,20(r16)
10013494:	81400717 	ldw	r5,28(r16)
10013498:	81800015 	stw	r6,0(r16)
1001349c:	8809883a 	mov	r4,r17
100134a0:	103ee83a 	callr	r2
100134a4:	80800115 	stw	r2,4(r16)
100134a8:	00800e0e 	bge	zero,r2,100134e4 <__srefill_r+0x100>
100134ac:	0005883a 	mov	r2,zero
100134b0:	dfc00317 	ldw	ra,12(sp)
100134b4:	dc800217 	ldw	r18,8(sp)
100134b8:	dc400117 	ldw	r17,4(sp)
100134bc:	dc000017 	ldw	r16,0(sp)
100134c0:	dec00404 	addi	sp,sp,16
100134c4:	f800283a 	ret
100134c8:	1100040c 	andi	r4,r2,16
100134cc:	20003026 	beq	r4,zero,10013590 <__srefill_r+0x1ac>
100134d0:	1080020c 	andi	r2,r2,8
100134d4:	1000241e 	bne	r2,zero,10013568 <__srefill_r+0x184>
100134d8:	18c00114 	ori	r3,r3,4
100134dc:	80c0030d 	sth	r3,12(r16)
100134e0:	003fe406 	br	10013474 <__alt_data_end+0xf8013474>
100134e4:	80c0030b 	ldhu	r3,12(r16)
100134e8:	1000161e 	bne	r2,zero,10013544 <__srefill_r+0x160>
100134ec:	18c00814 	ori	r3,r3,32
100134f0:	00bfffc4 	movi	r2,-1
100134f4:	80c0030d 	sth	r3,12(r16)
100134f8:	003fed06 	br	100134b0 <__alt_data_end+0xf80134b0>
100134fc:	000fea00 	call	1000fea0 <__sinit>
10013500:	003fc206 	br	1001340c <__alt_data_end+0xf801340c>
10013504:	008400b4 	movhi	r2,4098
10013508:	10951504 	addi	r2,r2,21588
1001350c:	11000017 	ldw	r4,0(r2)
10013510:	01440074 	movhi	r5,4097
10013514:	00800044 	movi	r2,1
10013518:	294cf204 	addi	r5,r5,13256
1001351c:	8080030d 	sth	r2,12(r16)
10013520:	0010a5c0 	call	10010a5c <_fwalk>
10013524:	00800244 	movi	r2,9
10013528:	8480030d 	sth	r18,12(r16)
1001352c:	9480024c 	andi	r18,r18,9
10013530:	90bfd51e 	bne	r18,r2,10013488 <__alt_data_end+0xf8013488>
10013534:	800b883a 	mov	r5,r16
10013538:	8809883a 	mov	r4,r17
1001353c:	000f8980 	call	1000f898 <__sflush_r>
10013540:	003fd106 	br	10013488 <__alt_data_end+0xf8013488>
10013544:	18c01014 	ori	r3,r3,64
10013548:	80000115 	stw	zero,4(r16)
1001354c:	00bfffc4 	movi	r2,-1
10013550:	80c0030d 	sth	r3,12(r16)
10013554:	003fd606 	br	100134b0 <__alt_data_end+0xf80134b0>
10013558:	80c00e17 	ldw	r3,56(r16)
1001355c:	0005883a 	mov	r2,zero
10013560:	80c00015 	stw	r3,0(r16)
10013564:	003fd206 	br	100134b0 <__alt_data_end+0xf80134b0>
10013568:	800b883a 	mov	r5,r16
1001356c:	8809883a 	mov	r4,r17
10013570:	000fab40 	call	1000fab4 <_fflush_r>
10013574:	10000a1e 	bne	r2,zero,100135a0 <__srefill_r+0x1bc>
10013578:	8080030b 	ldhu	r2,12(r16)
1001357c:	00fffdc4 	movi	r3,-9
10013580:	80000215 	stw	zero,8(r16)
10013584:	1886703a 	and	r3,r3,r2
10013588:	80000615 	stw	zero,24(r16)
1001358c:	003fd206 	br	100134d8 <__alt_data_end+0xf80134d8>
10013590:	00800244 	movi	r2,9
10013594:	88800015 	stw	r2,0(r17)
10013598:	18c01014 	ori	r3,r3,64
1001359c:	80c0030d 	sth	r3,12(r16)
100135a0:	00bfffc4 	movi	r2,-1
100135a4:	003fc206 	br	100134b0 <__alt_data_end+0xf80134b0>
100135a8:	800b883a 	mov	r5,r16
100135ac:	8809883a 	mov	r4,r17
100135b0:	0010cf00 	call	10010cf0 <__smakebuf_r>
100135b4:	003fb106 	br	1001347c <__alt_data_end+0xf801347c>

100135b8 <__fpclassifyd>:
100135b8:	00a00034 	movhi	r2,32768
100135bc:	10bfffc4 	addi	r2,r2,-1
100135c0:	2884703a 	and	r2,r5,r2
100135c4:	10000726 	beq	r2,zero,100135e4 <__fpclassifyd+0x2c>
100135c8:	00fffc34 	movhi	r3,65520
100135cc:	019ff834 	movhi	r6,32736
100135d0:	28c7883a 	add	r3,r5,r3
100135d4:	31bfffc4 	addi	r6,r6,-1
100135d8:	30c00536 	bltu	r6,r3,100135f0 <__fpclassifyd+0x38>
100135dc:	00800104 	movi	r2,4
100135e0:	f800283a 	ret
100135e4:	2000021e 	bne	r4,zero,100135f0 <__fpclassifyd+0x38>
100135e8:	00800084 	movi	r2,2
100135ec:	f800283a 	ret
100135f0:	00dffc34 	movhi	r3,32752
100135f4:	019ff834 	movhi	r6,32736
100135f8:	28cb883a 	add	r5,r5,r3
100135fc:	31bfffc4 	addi	r6,r6,-1
10013600:	317ff62e 	bgeu	r6,r5,100135dc <__alt_data_end+0xf80135dc>
10013604:	01400434 	movhi	r5,16
10013608:	297fffc4 	addi	r5,r5,-1
1001360c:	28800236 	bltu	r5,r2,10013618 <__fpclassifyd+0x60>
10013610:	008000c4 	movi	r2,3
10013614:	f800283a 	ret
10013618:	10c00226 	beq	r2,r3,10013624 <__fpclassifyd+0x6c>
1001361c:	0005883a 	mov	r2,zero
10013620:	f800283a 	ret
10013624:	2005003a 	cmpeq	r2,r4,zero
10013628:	f800283a 	ret

1001362c <_sbrk_r>:
1001362c:	defffd04 	addi	sp,sp,-12
10013630:	dc000015 	stw	r16,0(sp)
10013634:	040400b4 	movhi	r16,4098
10013638:	dc400115 	stw	r17,4(sp)
1001363c:	841d8004 	addi	r16,r16,30208
10013640:	2023883a 	mov	r17,r4
10013644:	2809883a 	mov	r4,r5
10013648:	dfc00215 	stw	ra,8(sp)
1001364c:	80000015 	stw	zero,0(r16)
10013650:	001f9a40 	call	1001f9a4 <sbrk>
10013654:	00ffffc4 	movi	r3,-1
10013658:	10c00526 	beq	r2,r3,10013670 <_sbrk_r+0x44>
1001365c:	dfc00217 	ldw	ra,8(sp)
10013660:	dc400117 	ldw	r17,4(sp)
10013664:	dc000017 	ldw	r16,0(sp)
10013668:	dec00304 	addi	sp,sp,12
1001366c:	f800283a 	ret
10013670:	80c00017 	ldw	r3,0(r16)
10013674:	183ff926 	beq	r3,zero,1001365c <__alt_data_end+0xf801365c>
10013678:	88c00015 	stw	r3,0(r17)
1001367c:	003ff706 	br	1001365c <__alt_data_end+0xf801365c>

10013680 <__sccl>:
10013680:	2a000003 	ldbu	r8,0(r5)
10013684:	00801784 	movi	r2,94
10013688:	40802a26 	beq	r8,r2,10013734 <__sccl+0xb4>
1001368c:	29400044 	addi	r5,r5,1
10013690:	000f883a 	mov	r7,zero
10013694:	0013883a 	mov	r9,zero
10013698:	2007883a 	mov	r3,r4
1001369c:	21804004 	addi	r6,r4,256
100136a0:	19c00005 	stb	r7,0(r3)
100136a4:	18c00044 	addi	r3,r3,1
100136a8:	19bffd1e 	bne	r3,r6,100136a0 <__alt_data_end+0xf80136a0>
100136ac:	40001126 	beq	r8,zero,100136f4 <__sccl+0x74>
100136b0:	00800044 	movi	r2,1
100136b4:	124fc83a 	sub	r7,r2,r9
100136b8:	02800b44 	movi	r10,45
100136bc:	02c01744 	movi	r11,93
100136c0:	2205883a 	add	r2,r4,r8
100136c4:	11c00005 	stb	r7,0(r2)
100136c8:	28800044 	addi	r2,r5,1
100136cc:	28c00003 	ldbu	r3,0(r5)
100136d0:	1a800a26 	beq	r3,r10,100136fc <__sccl+0x7c>
100136d4:	1ac00426 	beq	r3,r11,100136e8 <__sccl+0x68>
100136d8:	18000426 	beq	r3,zero,100136ec <__sccl+0x6c>
100136dc:	1811883a 	mov	r8,r3
100136e0:	100b883a 	mov	r5,r2
100136e4:	003ff606 	br	100136c0 <__alt_data_end+0xf80136c0>
100136e8:	f800283a 	ret
100136ec:	2805883a 	mov	r2,r5
100136f0:	f800283a 	ret
100136f4:	28bfffc4 	addi	r2,r5,-1
100136f8:	f800283a 	ret
100136fc:	12400003 	ldbu	r9,0(r2)
10013700:	4ac01126 	beq	r9,r11,10013748 <__sccl+0xc8>
10013704:	4a001016 	blt	r9,r8,10013748 <__sccl+0xc8>
10013708:	41800044 	addi	r6,r8,1
1001370c:	29400084 	addi	r5,r5,2
10013710:	2187883a 	add	r3,r4,r6
10013714:	00000106 	br	1001371c <__sccl+0x9c>
10013718:	31800044 	addi	r6,r6,1
1001371c:	19c00005 	stb	r7,0(r3)
10013720:	3011883a 	mov	r8,r6
10013724:	18c00044 	addi	r3,r3,1
10013728:	327ffb16 	blt	r6,r9,10013718 <__alt_data_end+0xf8013718>
1001372c:	10800084 	addi	r2,r2,2
10013730:	003fe606 	br	100136cc <__alt_data_end+0xf80136cc>
10013734:	2a000043 	ldbu	r8,1(r5)
10013738:	01c00044 	movi	r7,1
1001373c:	29400084 	addi	r5,r5,2
10013740:	02400044 	movi	r9,1
10013744:	003fd406 	br	10013698 <__alt_data_end+0xf8013698>
10013748:	5011883a 	mov	r8,r10
1001374c:	003fe406 	br	100136e0 <__alt_data_end+0xf80136e0>

10013750 <nanf>:
10013750:	009ff034 	movhi	r2,32704
10013754:	f800283a 	ret

10013758 <_sprintf_r>:
10013758:	deffe404 	addi	sp,sp,-112
1001375c:	2807883a 	mov	r3,r5
10013760:	dfc01a15 	stw	ra,104(sp)
10013764:	d9c01b15 	stw	r7,108(sp)
10013768:	00a00034 	movhi	r2,32768
1001376c:	10bfffc4 	addi	r2,r2,-1
10013770:	02008204 	movi	r8,520
10013774:	d8800215 	stw	r2,8(sp)
10013778:	d8800515 	stw	r2,20(sp)
1001377c:	d9c01b04 	addi	r7,sp,108
10013780:	d80b883a 	mov	r5,sp
10013784:	00bfffc4 	movi	r2,-1
10013788:	d8c00015 	stw	r3,0(sp)
1001378c:	d8c00415 	stw	r3,16(sp)
10013790:	da00030d 	sth	r8,12(sp)
10013794:	d880038d 	sth	r2,14(sp)
10013798:	0015cc00 	call	10015cc0 <___svfprintf_internal_r>
1001379c:	d8c00017 	ldw	r3,0(sp)
100137a0:	18000005 	stb	zero,0(r3)
100137a4:	dfc01a17 	ldw	ra,104(sp)
100137a8:	dec01c04 	addi	sp,sp,112
100137ac:	f800283a 	ret

100137b0 <sprintf>:
100137b0:	deffe304 	addi	sp,sp,-116
100137b4:	2007883a 	mov	r3,r4
100137b8:	dfc01a15 	stw	ra,104(sp)
100137bc:	d9801b15 	stw	r6,108(sp)
100137c0:	d9c01c15 	stw	r7,112(sp)
100137c4:	010400b4 	movhi	r4,4098
100137c8:	21151604 	addi	r4,r4,21592
100137cc:	21000017 	ldw	r4,0(r4)
100137d0:	00a00034 	movhi	r2,32768
100137d4:	10bfffc4 	addi	r2,r2,-1
100137d8:	280d883a 	mov	r6,r5
100137dc:	02008204 	movi	r8,520
100137e0:	d8800215 	stw	r2,8(sp)
100137e4:	d8800515 	stw	r2,20(sp)
100137e8:	d9c01b04 	addi	r7,sp,108
100137ec:	d80b883a 	mov	r5,sp
100137f0:	00bfffc4 	movi	r2,-1
100137f4:	d8c00015 	stw	r3,0(sp)
100137f8:	d8c00415 	stw	r3,16(sp)
100137fc:	da00030d 	sth	r8,12(sp)
10013800:	d880038d 	sth	r2,14(sp)
10013804:	0015cc00 	call	10015cc0 <___svfprintf_internal_r>
10013808:	d8c00017 	ldw	r3,0(sp)
1001380c:	18000005 	stb	zero,0(r3)
10013810:	dfc01a17 	ldw	ra,104(sp)
10013814:	dec01d04 	addi	sp,sp,116
10013818:	f800283a 	ret

1001381c <__sread>:
1001381c:	defffe04 	addi	sp,sp,-8
10013820:	dc000015 	stw	r16,0(sp)
10013824:	2821883a 	mov	r16,r5
10013828:	2940038f 	ldh	r5,14(r5)
1001382c:	dfc00115 	stw	ra,4(sp)
10013830:	001aba40 	call	1001aba4 <_read_r>
10013834:	10000716 	blt	r2,zero,10013854 <__sread+0x38>
10013838:	80c01417 	ldw	r3,80(r16)
1001383c:	1887883a 	add	r3,r3,r2
10013840:	80c01415 	stw	r3,80(r16)
10013844:	dfc00117 	ldw	ra,4(sp)
10013848:	dc000017 	ldw	r16,0(sp)
1001384c:	dec00204 	addi	sp,sp,8
10013850:	f800283a 	ret
10013854:	80c0030b 	ldhu	r3,12(r16)
10013858:	18fbffcc 	andi	r3,r3,61439
1001385c:	80c0030d 	sth	r3,12(r16)
10013860:	dfc00117 	ldw	ra,4(sp)
10013864:	dc000017 	ldw	r16,0(sp)
10013868:	dec00204 	addi	sp,sp,8
1001386c:	f800283a 	ret

10013870 <__seofread>:
10013870:	0005883a 	mov	r2,zero
10013874:	f800283a 	ret

10013878 <__swrite>:
10013878:	2880030b 	ldhu	r2,12(r5)
1001387c:	defffb04 	addi	sp,sp,-20
10013880:	dcc00315 	stw	r19,12(sp)
10013884:	dc800215 	stw	r18,8(sp)
10013888:	dc400115 	stw	r17,4(sp)
1001388c:	dc000015 	stw	r16,0(sp)
10013890:	dfc00415 	stw	ra,16(sp)
10013894:	10c0400c 	andi	r3,r2,256
10013898:	2821883a 	mov	r16,r5
1001389c:	2023883a 	mov	r17,r4
100138a0:	3025883a 	mov	r18,r6
100138a4:	3827883a 	mov	r19,r7
100138a8:	18000526 	beq	r3,zero,100138c0 <__swrite+0x48>
100138ac:	2940038f 	ldh	r5,14(r5)
100138b0:	01c00084 	movi	r7,2
100138b4:	000d883a 	mov	r6,zero
100138b8:	001ab440 	call	1001ab44 <_lseek_r>
100138bc:	8080030b 	ldhu	r2,12(r16)
100138c0:	8140038f 	ldh	r5,14(r16)
100138c4:	10bbffcc 	andi	r2,r2,61439
100138c8:	980f883a 	mov	r7,r19
100138cc:	900d883a 	mov	r6,r18
100138d0:	8809883a 	mov	r4,r17
100138d4:	8080030d 	sth	r2,12(r16)
100138d8:	dfc00417 	ldw	ra,16(sp)
100138dc:	dcc00317 	ldw	r19,12(sp)
100138e0:	dc800217 	ldw	r18,8(sp)
100138e4:	dc400117 	ldw	r17,4(sp)
100138e8:	dc000017 	ldw	r16,0(sp)
100138ec:	dec00504 	addi	sp,sp,20
100138f0:	0019a4c1 	jmpi	10019a4c <_write_r>

100138f4 <__sseek>:
100138f4:	defffe04 	addi	sp,sp,-8
100138f8:	dc000015 	stw	r16,0(sp)
100138fc:	2821883a 	mov	r16,r5
10013900:	2940038f 	ldh	r5,14(r5)
10013904:	dfc00115 	stw	ra,4(sp)
10013908:	001ab440 	call	1001ab44 <_lseek_r>
1001390c:	00ffffc4 	movi	r3,-1
10013910:	10c00826 	beq	r2,r3,10013934 <__sseek+0x40>
10013914:	80c0030b 	ldhu	r3,12(r16)
10013918:	80801415 	stw	r2,80(r16)
1001391c:	18c40014 	ori	r3,r3,4096
10013920:	80c0030d 	sth	r3,12(r16)
10013924:	dfc00117 	ldw	ra,4(sp)
10013928:	dc000017 	ldw	r16,0(sp)
1001392c:	dec00204 	addi	sp,sp,8
10013930:	f800283a 	ret
10013934:	80c0030b 	ldhu	r3,12(r16)
10013938:	18fbffcc 	andi	r3,r3,61439
1001393c:	80c0030d 	sth	r3,12(r16)
10013940:	dfc00117 	ldw	ra,4(sp)
10013944:	dc000017 	ldw	r16,0(sp)
10013948:	dec00204 	addi	sp,sp,8
1001394c:	f800283a 	ret

10013950 <__sclose>:
10013950:	2940038f 	ldh	r5,14(r5)
10013954:	0019aac1 	jmpi	10019aac <_close_r>

10013958 <strcmp>:
10013958:	2144b03a 	or	r2,r4,r5
1001395c:	108000cc 	andi	r2,r2,3
10013960:	1000171e 	bne	r2,zero,100139c0 <strcmp+0x68>
10013964:	20800017 	ldw	r2,0(r4)
10013968:	28c00017 	ldw	r3,0(r5)
1001396c:	10c0141e 	bne	r2,r3,100139c0 <strcmp+0x68>
10013970:	027fbff4 	movhi	r9,65279
10013974:	4a7fbfc4 	addi	r9,r9,-257
10013978:	0086303a 	nor	r3,zero,r2
1001397c:	02202074 	movhi	r8,32897
10013980:	1245883a 	add	r2,r2,r9
10013984:	42202004 	addi	r8,r8,-32640
10013988:	10c4703a 	and	r2,r2,r3
1001398c:	1204703a 	and	r2,r2,r8
10013990:	10000226 	beq	r2,zero,1001399c <strcmp+0x44>
10013994:	00002306 	br	10013a24 <strcmp+0xcc>
10013998:	1000221e 	bne	r2,zero,10013a24 <strcmp+0xcc>
1001399c:	21000104 	addi	r4,r4,4
100139a0:	20c00017 	ldw	r3,0(r4)
100139a4:	29400104 	addi	r5,r5,4
100139a8:	29800017 	ldw	r6,0(r5)
100139ac:	1a4f883a 	add	r7,r3,r9
100139b0:	00c4303a 	nor	r2,zero,r3
100139b4:	3884703a 	and	r2,r7,r2
100139b8:	1204703a 	and	r2,r2,r8
100139bc:	19bff626 	beq	r3,r6,10013998 <__alt_data_end+0xf8013998>
100139c0:	20800003 	ldbu	r2,0(r4)
100139c4:	10c03fcc 	andi	r3,r2,255
100139c8:	18c0201c 	xori	r3,r3,128
100139cc:	18ffe004 	addi	r3,r3,-128
100139d0:	18000c26 	beq	r3,zero,10013a04 <strcmp+0xac>
100139d4:	29800007 	ldb	r6,0(r5)
100139d8:	19800326 	beq	r3,r6,100139e8 <strcmp+0x90>
100139dc:	00001306 	br	10013a2c <strcmp+0xd4>
100139e0:	29800007 	ldb	r6,0(r5)
100139e4:	11800b1e 	bne	r2,r6,10013a14 <strcmp+0xbc>
100139e8:	21000044 	addi	r4,r4,1
100139ec:	20c00003 	ldbu	r3,0(r4)
100139f0:	29400044 	addi	r5,r5,1
100139f4:	18803fcc 	andi	r2,r3,255
100139f8:	1080201c 	xori	r2,r2,128
100139fc:	10bfe004 	addi	r2,r2,-128
10013a00:	103ff71e 	bne	r2,zero,100139e0 <__alt_data_end+0xf80139e0>
10013a04:	0007883a 	mov	r3,zero
10013a08:	28800003 	ldbu	r2,0(r5)
10013a0c:	1885c83a 	sub	r2,r3,r2
10013a10:	f800283a 	ret
10013a14:	28800003 	ldbu	r2,0(r5)
10013a18:	18c03fcc 	andi	r3,r3,255
10013a1c:	1885c83a 	sub	r2,r3,r2
10013a20:	f800283a 	ret
10013a24:	0005883a 	mov	r2,zero
10013a28:	f800283a 	ret
10013a2c:	10c03fcc 	andi	r3,r2,255
10013a30:	003ff506 	br	10013a08 <__alt_data_end+0xf8013a08>

10013a34 <sulp>:
10013a34:	defffd04 	addi	sp,sp,-12
10013a38:	dc400115 	stw	r17,4(sp)
10013a3c:	3023883a 	mov	r17,r6
10013a40:	dc000015 	stw	r16,0(sp)
10013a44:	dfc00215 	stw	ra,8(sp)
10013a48:	2821883a 	mov	r16,r5
10013a4c:	00128240 	call	10012824 <__ulp>
10013a50:	88000c26 	beq	r17,zero,10013a84 <sulp+0x50>
10013a54:	841ffc2c 	andhi	r16,r16,32752
10013a58:	8020d53a 	srli	r16,r16,20
10013a5c:	01c01ac4 	movi	r7,107
10013a60:	3c21c83a 	sub	r16,r7,r16
10013a64:	0400070e 	bge	zero,r16,10013a84 <sulp+0x50>
10013a68:	8020953a 	slli	r16,r16,20
10013a6c:	01cffc34 	movhi	r7,16368
10013a70:	000d883a 	mov	r6,zero
10013a74:	81cf883a 	add	r7,r16,r7
10013a78:	1009883a 	mov	r4,r2
10013a7c:	180b883a 	mov	r5,r3
10013a80:	001de6c0 	call	1001de6c <__muldf3>
10013a84:	dfc00217 	ldw	ra,8(sp)
10013a88:	dc400117 	ldw	r17,4(sp)
10013a8c:	dc000017 	ldw	r16,0(sp)
10013a90:	dec00304 	addi	sp,sp,12
10013a94:	f800283a 	ret

10013a98 <_strtod_r>:
10013a98:	deffe204 	addi	sp,sp,-120
10013a9c:	ddc01b15 	stw	r23,108(sp)
10013aa0:	dd801a15 	stw	r22,104(sp)
10013aa4:	dc401515 	stw	r17,84(sp)
10013aa8:	dfc01d15 	stw	ra,116(sp)
10013aac:	df001c15 	stw	fp,112(sp)
10013ab0:	dd401915 	stw	r21,100(sp)
10013ab4:	dd001815 	stw	r20,96(sp)
10013ab8:	dcc01715 	stw	r19,92(sp)
10013abc:	dc801615 	stw	r18,88(sp)
10013ac0:	dc001415 	stw	r16,80(sp)
10013ac4:	d8000515 	stw	zero,20(sp)
10013ac8:	d9400615 	stw	r5,24(sp)
10013acc:	2807883a 	mov	r3,r5
10013ad0:	1f000003 	ldbu	fp,0(r3)
10013ad4:	01c40074 	movhi	r7,4097
10013ad8:	2023883a 	mov	r17,r4
10013adc:	d9400715 	stw	r5,28(sp)
10013ae0:	d9800915 	stw	r6,36(sp)
10013ae4:	01000b44 	movi	r4,45
10013ae8:	e0803fcc 	andi	r2,fp,255
10013aec:	39cec304 	addi	r7,r7,15116
10013af0:	002f883a 	mov	r23,zero
10013af4:	002d883a 	mov	r22,zero
10013af8:	20809c36 	bltu	r4,r2,10013d6c <_strtod_r+0x2d4>
10013afc:	100490ba 	slli	r2,r2,2
10013b00:	11c5883a 	add	r2,r2,r7
10013b04:	10800017 	ldw	r2,0(r2)
10013b08:	1000683a 	jmp	r2
10013b0c:	10013bcc 	andi	zero,r2,1263
10013b10:	10013d6c 	andhi	zero,r2,1269
10013b14:	10013d6c 	andhi	zero,r2,1269
10013b18:	10013d6c 	andhi	zero,r2,1269
10013b1c:	10013d6c 	andhi	zero,r2,1269
10013b20:	10013d6c 	andhi	zero,r2,1269
10013b24:	10013d6c 	andhi	zero,r2,1269
10013b28:	10013d6c 	andhi	zero,r2,1269
10013b2c:	10013d6c 	andhi	zero,r2,1269
10013b30:	10013d58 	cmpnei	zero,r2,1269
10013b34:	10013d58 	cmpnei	zero,r2,1269
10013b38:	10013d58 	cmpnei	zero,r2,1269
10013b3c:	10013d58 	cmpnei	zero,r2,1269
10013b40:	10013d58 	cmpnei	zero,r2,1269
10013b44:	10013d6c 	andhi	zero,r2,1269
10013b48:	10013d6c 	andhi	zero,r2,1269
10013b4c:	10013d6c 	andhi	zero,r2,1269
10013b50:	10013d6c 	andhi	zero,r2,1269
10013b54:	10013d6c 	andhi	zero,r2,1269
10013b58:	10013d6c 	andhi	zero,r2,1269
10013b5c:	10013d6c 	andhi	zero,r2,1269
10013b60:	10013d6c 	andhi	zero,r2,1269
10013b64:	10013d6c 	andhi	zero,r2,1269
10013b68:	10013d6c 	andhi	zero,r2,1269
10013b6c:	10013d6c 	andhi	zero,r2,1269
10013b70:	10013d6c 	andhi	zero,r2,1269
10013b74:	10013d6c 	andhi	zero,r2,1269
10013b78:	10013d6c 	andhi	zero,r2,1269
10013b7c:	10013d6c 	andhi	zero,r2,1269
10013b80:	10013d6c 	andhi	zero,r2,1269
10013b84:	10013d6c 	andhi	zero,r2,1269
10013b88:	10013d6c 	andhi	zero,r2,1269
10013b8c:	10013d58 	cmpnei	zero,r2,1269
10013b90:	10013d6c 	andhi	zero,r2,1269
10013b94:	10013d6c 	andhi	zero,r2,1269
10013b98:	10013d6c 	andhi	zero,r2,1269
10013b9c:	10013d6c 	andhi	zero,r2,1269
10013ba0:	10013d6c 	andhi	zero,r2,1269
10013ba4:	10013d6c 	andhi	zero,r2,1269
10013ba8:	10013d6c 	andhi	zero,r2,1269
10013bac:	10013d6c 	andhi	zero,r2,1269
10013bb0:	10013d6c 	andhi	zero,r2,1269
10013bb4:	10013d6c 	andhi	zero,r2,1269
10013bb8:	10013c30 	cmpltui	zero,r2,1264
10013bbc:	10013d6c 	andhi	zero,r2,1269
10013bc0:	10013d4c 	andi	zero,r2,1269
10013bc4:	00801244 	movi	r2,73
10013bc8:	b8844726 	beq	r23,r2,10014ce8 <_strtod_r+0x1250>
10013bcc:	d9000917 	ldw	r4,36(sp)
10013bd0:	d8000815 	stw	zero,32(sp)
10013bd4:	0039883a 	mov	fp,zero
10013bd8:	20000726 	beq	r4,zero,10013bf8 <_strtod_r+0x160>
10013bdc:	dc800717 	ldw	r18,28(sp)
10013be0:	d8000a15 	stw	zero,40(sp)
10013be4:	d9400917 	ldw	r5,36(sp)
10013be8:	2c800015 	stw	r18,0(r5)
10013bec:	d8800a17 	ldw	r2,40(sp)
10013bf0:	10000126 	beq	r2,zero,10013bf8 <_strtod_r+0x160>
10013bf4:	e720003c 	xorhi	fp,fp,32768
10013bf8:	d8800817 	ldw	r2,32(sp)
10013bfc:	e007883a 	mov	r3,fp
10013c00:	dfc01d17 	ldw	ra,116(sp)
10013c04:	df001c17 	ldw	fp,112(sp)
10013c08:	ddc01b17 	ldw	r23,108(sp)
10013c0c:	dd801a17 	ldw	r22,104(sp)
10013c10:	dd401917 	ldw	r21,100(sp)
10013c14:	dd001817 	ldw	r20,96(sp)
10013c18:	dcc01717 	ldw	r19,92(sp)
10013c1c:	dc801617 	ldw	r18,88(sp)
10013c20:	dc401517 	ldw	r17,84(sp)
10013c24:	dc001417 	ldw	r16,80(sp)
10013c28:	dec01e04 	addi	sp,sp,120
10013c2c:	f800283a 	ret
10013c30:	d8000a15 	stw	zero,40(sp)
10013c34:	1c000044 	addi	r16,r3,1
10013c38:	dc000615 	stw	r16,24(sp)
10013c3c:	1f000043 	ldbu	fp,1(r3)
10013c40:	e0803fcc 	andi	r2,fp,255
10013c44:	1080201c 	xori	r2,r2,128
10013c48:	10bfe004 	addi	r2,r2,-128
10013c4c:	103fdf26 	beq	r2,zero,10013bcc <__alt_data_end+0xf8013bcc>
10013c50:	e1003fcc 	andi	r4,fp,255
10013c54:	2100201c 	xori	r4,r4,128
10013c58:	213fe004 	addi	r4,r4,-128
10013c5c:	00800c04 	movi	r2,48
10013c60:	2080d426 	beq	r4,r2,10013fb4 <_strtod_r+0x51c>
10013c64:	dc000815 	stw	r16,32(sp)
10013c68:	d8000c15 	stw	zero,48(sp)
10013c6c:	e0bff404 	addi	r2,fp,-48
10013c70:	10803fcc 	andi	r2,r2,255
10013c74:	05400244 	movi	r21,9
10013c78:	a8837836 	bltu	r21,r2,10014a5c <_strtod_r+0xfc4>
10013c7c:	dc800817 	ldw	r18,32(sp)
10013c80:	0029883a 	mov	r20,zero
10013c84:	0027883a 	mov	r19,zero
10013c88:	0021883a 	mov	r16,zero
10013c8c:	05800204 	movi	r22,8
10013c90:	b4003916 	blt	r22,r16,10013d78 <_strtod_r+0x2e0>
10013c94:	e7003fcc 	andi	fp,fp,255
10013c98:	9809883a 	mov	r4,r19
10013c9c:	01400284 	movi	r5,10
10013ca0:	e700201c 	xori	fp,fp,128
10013ca4:	0008ef00 	call	10008ef0 <__mulsi3>
10013ca8:	e73fe004 	addi	fp,fp,-128
10013cac:	1705883a 	add	r2,r2,fp
10013cb0:	14fff404 	addi	r19,r2,-48
10013cb4:	94800044 	addi	r18,r18,1
10013cb8:	dc800615 	stw	r18,24(sp)
10013cbc:	97000003 	ldbu	fp,0(r18)
10013cc0:	84000044 	addi	r16,r16,1
10013cc4:	e0bff404 	addi	r2,fp,-48
10013cc8:	10803fcc 	andi	r2,r2,255
10013ccc:	a8bff02e 	bgeu	r21,r2,10013c90 <__alt_data_end+0xf8013c90>
10013cd0:	e5c03fcc 	andi	r23,fp,255
10013cd4:	bdc0201c 	xori	r23,r23,128
10013cd8:	bdffe004 	addi	r23,r23,-128
10013cdc:	8809883a 	mov	r4,r17
10013ce0:	0010cc00 	call	10010cc0 <_localeconv_r>
10013ce4:	8809883a 	mov	r4,r17
10013ce8:	15400017 	ldw	r21,0(r2)
10013cec:	0010cc00 	call	10010cc0 <_localeconv_r>
10013cf0:	11000017 	ldw	r4,0(r2)
10013cf4:	0009fe40 	call	10009fe4 <strlen>
10013cf8:	100d883a 	mov	r6,r2
10013cfc:	a80b883a 	mov	r5,r21
10013d00:	9009883a 	mov	r4,r18
10013d04:	001ac040 	call	1001ac04 <strncmp>
10013d08:	1000bd26 	beq	r2,zero,10014000 <_strtod_r+0x568>
10013d0c:	8039883a 	mov	fp,r16
10013d10:	002d883a 	mov	r22,zero
10013d14:	d8000b15 	stw	zero,44(sp)
10013d18:	0025883a 	mov	r18,zero
10013d1c:	00801944 	movi	r2,101
10013d20:	b8806026 	beq	r23,r2,10013ea4 <_strtod_r+0x40c>
10013d24:	00801144 	movi	r2,69
10013d28:	b8805e26 	beq	r23,r2,10013ea4 <_strtod_r+0x40c>
10013d2c:	0009883a 	mov	r4,zero
10013d30:	e0001a1e 	bne	fp,zero,10013d9c <_strtod_r+0x304>
10013d34:	b000cd26 	beq	r22,zero,1001406c <_strtod_r+0x5d4>
10013d38:	d8000815 	stw	zero,32(sp)
10013d3c:	d9000917 	ldw	r4,36(sp)
10013d40:	203faa26 	beq	r4,zero,10013bec <__alt_data_end+0xf8013bec>
10013d44:	dc800617 	ldw	r18,24(sp)
10013d48:	003fa606 	br	10013be4 <__alt_data_end+0xf8013be4>
10013d4c:	00800044 	movi	r2,1
10013d50:	d8800a15 	stw	r2,40(sp)
10013d54:	003fb706 	br	10013c34 <__alt_data_end+0xf8013c34>
10013d58:	18c00044 	addi	r3,r3,1
10013d5c:	d8c00615 	stw	r3,24(sp)
10013d60:	1f000003 	ldbu	fp,0(r3)
10013d64:	e0803fcc 	andi	r2,fp,255
10013d68:	20bf642e 	bgeu	r4,r2,10013afc <__alt_data_end+0xf8013afc>
10013d6c:	1821883a 	mov	r16,r3
10013d70:	d8000a15 	stw	zero,40(sp)
10013d74:	003fb606 	br	10013c50 <__alt_data_end+0xf8013c50>
10013d78:	e7003fcc 	andi	fp,fp,255
10013d7c:	a009883a 	mov	r4,r20
10013d80:	01400284 	movi	r5,10
10013d84:	e700201c 	xori	fp,fp,128
10013d88:	0008ef00 	call	10008ef0 <__mulsi3>
10013d8c:	e73fe004 	addi	fp,fp,-128
10013d90:	1705883a 	add	r2,r2,fp
10013d94:	153ff404 	addi	r20,r2,-48
10013d98:	003fc606 	br	10013cb4 <__alt_data_end+0xf8013cb4>
10013d9c:	d8c00b17 	ldw	r3,44(sp)
10013da0:	20ebc83a 	sub	r21,r4,r3
10013da4:	8000011e 	bne	r16,zero,10013dac <_strtod_r+0x314>
10013da8:	e021883a 	mov	r16,fp
10013dac:	00800404 	movi	r2,16
10013db0:	e025883a 	mov	r18,fp
10013db4:	1700010e 	bge	r2,fp,10013dbc <_strtod_r+0x324>
10013db8:	1025883a 	mov	r18,r2
10013dbc:	9809883a 	mov	r4,r19
10013dc0:	00099c40 	call	100099c4 <__floatunsidf>
10013dc4:	102f883a 	mov	r23,r2
10013dc8:	00800244 	movi	r2,9
10013dcc:	182d883a 	mov	r22,r3
10013dd0:	1480150e 	bge	r2,r18,10013e28 <_strtod_r+0x390>
10013dd4:	90bffdc4 	addi	r2,r18,-9
10013dd8:	100490fa 	slli	r2,r2,3
10013ddc:	180b883a 	mov	r5,r3
10013de0:	00c400b4 	movhi	r3,4098
10013de4:	18cc2904 	addi	r3,r3,12452
10013de8:	1885883a 	add	r2,r3,r2
10013dec:	11800017 	ldw	r6,0(r2)
10013df0:	11c00117 	ldw	r7,4(r2)
10013df4:	b809883a 	mov	r4,r23
10013df8:	001de6c0 	call	1001de6c <__muldf3>
10013dfc:	a009883a 	mov	r4,r20
10013e00:	102f883a 	mov	r23,r2
10013e04:	182d883a 	mov	r22,r3
10013e08:	00099c40 	call	100099c4 <__floatunsidf>
10013e0c:	b809883a 	mov	r4,r23
10013e10:	b00b883a 	mov	r5,r22
10013e14:	100d883a 	mov	r6,r2
10013e18:	180f883a 	mov	r7,r3
10013e1c:	001d3680 	call	1001d368 <__adddf3>
10013e20:	102f883a 	mov	r23,r2
10013e24:	182d883a 	mov	r22,r3
10013e28:	008003c4 	movi	r2,15
10013e2c:	17009416 	blt	r2,fp,10014080 <_strtod_r+0x5e8>
10013e30:	a8001926 	beq	r21,zero,10013e98 <_strtod_r+0x400>
10013e34:	05439c0e 	bge	zero,r21,10014ca8 <_strtod_r+0x1210>
10013e38:	00c00584 	movi	r3,22
10013e3c:	1d430f16 	blt	r3,r21,10014a7c <_strtod_r+0xfe4>
10013e40:	a82a90fa 	slli	r21,r21,3
10013e44:	008400b4 	movhi	r2,4098
10013e48:	108c2904 	addi	r2,r2,12452
10013e4c:	1545883a 	add	r2,r2,r21
10013e50:	11000017 	ldw	r4,0(r2)
10013e54:	11400117 	ldw	r5,4(r2)
10013e58:	b80d883a 	mov	r6,r23
10013e5c:	b00f883a 	mov	r7,r22
10013e60:	001de6c0 	call	1001de6c <__muldf3>
10013e64:	d8800815 	stw	r2,32(sp)
10013e68:	1839883a 	mov	fp,r3
10013e6c:	003fb306 	br	10013d3c <__alt_data_end+0xf8013d3c>
10013e70:	014400b4 	movhi	r5,4098
10013e74:	294c5f04 	addi	r5,r5,12668
10013e78:	d9800204 	addi	r6,sp,8
10013e7c:	d9000604 	addi	r4,sp,24
10013e80:	001a8940 	call	1001a894 <__hexnan>
10013e84:	00c00144 	movi	r3,5
10013e88:	10c2161e 	bne	r2,r3,100146e4 <_strtod_r+0xc4c>
10013e8c:	dd800317 	ldw	r22,12(sp)
10013e90:	ddc00217 	ldw	r23,8(sp)
10013e94:	b59ffc34 	orhi	r22,r22,32752
10013e98:	ddc00815 	stw	r23,32(sp)
10013e9c:	b039883a 	mov	fp,r22
10013ea0:	003fa606 	br	10013d3c <__alt_data_end+0xf8013d3c>
10013ea4:	e001a926 	beq	fp,zero,1001454c <_strtod_r+0xab4>
10013ea8:	d8c00617 	ldw	r3,24(sp)
10013eac:	18800044 	addi	r2,r3,1
10013eb0:	d8800615 	stw	r2,24(sp)
10013eb4:	d8c00715 	stw	r3,28(sp)
10013eb8:	18c00047 	ldb	r3,1(r3)
10013ebc:	00800ac4 	movi	r2,43
10013ec0:	1881e526 	beq	r3,r2,10014658 <_strtod_r+0xbc0>
10013ec4:	00800b44 	movi	r2,45
10013ec8:	1881dc26 	beq	r3,r2,1001463c <_strtod_r+0xba4>
10013ecc:	182f883a 	mov	r23,r3
10013ed0:	d8000e15 	stw	zero,56(sp)
10013ed4:	b8bff404 	addi	r2,r23,-48
10013ed8:	01000244 	movi	r4,9
10013edc:	2081ab36 	bltu	r4,r2,1001458c <_strtod_r+0xaf4>
10013ee0:	00800c04 	movi	r2,48
10013ee4:	b880071e 	bne	r23,r2,10013f04 <_strtod_r+0x46c>
10013ee8:	d8800617 	ldw	r2,24(sp)
10013eec:	b809883a 	mov	r4,r23
10013ef0:	10800044 	addi	r2,r2,1
10013ef4:	d8800615 	stw	r2,24(sp)
10013ef8:	15c00007 	ldb	r23,0(r2)
10013efc:	10800044 	addi	r2,r2,1
10013f00:	b93ffc26 	beq	r23,r4,10013ef4 <__alt_data_end+0xf8013ef4>
10013f04:	b8bff3c4 	addi	r2,r23,-49
10013f08:	01000204 	movi	r4,8
10013f0c:	20bf8736 	bltu	r4,r2,10013d2c <__alt_data_end+0xf8013d2c>
10013f10:	d8c00617 	ldw	r3,24(sp)
10013f14:	b93ff404 	addi	r4,r23,-48
10013f18:	01400244 	movi	r5,9
10013f1c:	1ac00044 	addi	r11,r3,1
10013f20:	dac00615 	stw	r11,24(sp)
10013f24:	d8c00d15 	stw	r3,52(sp)
10013f28:	18c00043 	ldbu	r3,1(r3)
10013f2c:	18bff404 	addi	r2,r3,-48
10013f30:	1dc03fcc 	andi	r23,r3,255
10013f34:	bdc0201c 	xori	r23,r23,128
10013f38:	10803fcc 	andi	r2,r2,255
10013f3c:	bdffe004 	addi	r23,r23,-128
10013f40:	28801136 	bltu	r5,r2,10013f88 <_strtod_r+0x4f0>
10013f44:	d8c00d17 	ldw	r3,52(sp)
10013f48:	1d400084 	addi	r21,r3,2
10013f4c:	01400284 	movi	r5,10
10013f50:	0008ef00 	call	10008ef0 <__mulsi3>
10013f54:	dd400615 	stw	r21,24(sp)
10013f58:	a9400003 	ldbu	r5,0(r21)
10013f5c:	15c5883a 	add	r2,r2,r23
10013f60:	a817883a 	mov	r11,r21
10013f64:	28fff404 	addi	r3,r5,-48
10013f68:	2dc03fcc 	andi	r23,r5,255
10013f6c:	bdc0201c 	xori	r23,r23,128
10013f70:	18c03fcc 	andi	r3,r3,255
10013f74:	01400244 	movi	r5,9
10013f78:	113ff404 	addi	r4,r2,-48
10013f7c:	bdffe004 	addi	r23,r23,-128
10013f80:	ad400044 	addi	r21,r21,1
10013f84:	28fff12e 	bgeu	r5,r3,10013f4c <__alt_data_end+0xf8013f4c>
10013f88:	d8c00d17 	ldw	r3,52(sp)
10013f8c:	00800204 	movi	r2,8
10013f90:	58d7c83a 	sub	r11,r11,r3
10013f94:	12c2ab16 	blt	r2,r11,10014a44 <_strtod_r+0xfac>
10013f98:	009387c4 	movi	r2,19999
10013f9c:	1100010e 	bge	r2,r4,10013fa4 <_strtod_r+0x50c>
10013fa0:	1009883a 	mov	r4,r2
10013fa4:	d8c00e17 	ldw	r3,56(sp)
10013fa8:	183f6126 	beq	r3,zero,10013d30 <__alt_data_end+0xf8013d30>
10013fac:	0109c83a 	sub	r4,zero,r4
10013fb0:	003f5f06 	br	10013d30 <__alt_data_end+0xf8013d30>
10013fb4:	80800047 	ldb	r2,1(r16)
10013fb8:	00c01604 	movi	r3,88
10013fbc:	10c20026 	beq	r2,r3,100147c0 <_strtod_r+0xd28>
10013fc0:	00c01e04 	movi	r3,120
10013fc4:	10c1fe26 	beq	r2,r3,100147c0 <_strtod_r+0xd28>
10013fc8:	80800044 	addi	r2,r16,1
10013fcc:	1021883a 	mov	r16,r2
10013fd0:	d8800615 	stw	r2,24(sp)
10013fd4:	10800044 	addi	r2,r2,1
10013fd8:	173fffc3 	ldbu	fp,-1(r2)
10013fdc:	e0c03fcc 	andi	r3,fp,255
10013fe0:	18c0201c 	xori	r3,r3,128
10013fe4:	18ffe004 	addi	r3,r3,-128
10013fe8:	193ff826 	beq	r3,r4,10013fcc <__alt_data_end+0xf8013fcc>
10013fec:	18002126 	beq	r3,zero,10014074 <_strtod_r+0x5dc>
10013ff0:	00c00044 	movi	r3,1
10013ff4:	dc000815 	stw	r16,32(sp)
10013ff8:	d8c00c15 	stw	r3,48(sp)
10013ffc:	003f1b06 	br	10013c6c <__alt_data_end+0xf8013c6c>
10014000:	8809883a 	mov	r4,r17
10014004:	0010cc00 	call	10010cc0 <_localeconv_r>
10014008:	11000017 	ldw	r4,0(r2)
1001400c:	0009fe40 	call	10009fe4 <strlen>
10014010:	d8c00617 	ldw	r3,24(sp)
10014014:	1885883a 	add	r2,r3,r2
10014018:	d8800615 	stw	r2,24(sp)
1001401c:	15c00007 	ldb	r23,0(r2)
10014020:	8001771e 	bne	r16,zero,10014600 <_strtod_r+0xb68>
10014024:	01000c04 	movi	r4,48
10014028:	b903581e 	bne	r23,r4,10014d8c <_strtod_r+0x12f4>
1001402c:	11000044 	addi	r4,r2,1
10014030:	b80b883a 	mov	r5,r23
10014034:	d9000615 	stw	r4,24(sp)
10014038:	25c00007 	ldb	r23,0(r4)
1001403c:	20adc83a 	sub	r22,r4,r2
10014040:	21000044 	addi	r4,r4,1
10014044:	b97ffb26 	beq	r23,r5,10014034 <__alt_data_end+0xf8014034>
10014048:	b8bff3c4 	addi	r2,r23,-49
1001404c:	01000204 	movi	r4,8
10014050:	2083002e 	bgeu	r4,r2,10014c54 <_strtod_r+0x11bc>
10014054:	00801944 	movi	r2,101
10014058:	b8813a26 	beq	r23,r2,10014544 <_strtod_r+0xaac>
1001405c:	0039883a 	mov	fp,zero
10014060:	d8000b15 	stw	zero,44(sp)
10014064:	04800044 	movi	r18,1
10014068:	003f2e06 	br	10013d24 <__alt_data_end+0xf8013d24>
1001406c:	d8c00c17 	ldw	r3,48(sp)
10014070:	18017d26 	beq	r3,zero,10014668 <_strtod_r+0xbd0>
10014074:	d8000815 	stw	zero,32(sp)
10014078:	0039883a 	mov	fp,zero
1001407c:	003f2f06 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014080:	e4a5c83a 	sub	r18,fp,r18
10014084:	9565883a 	add	r18,r18,r21
10014088:	0482370e 	bge	zero,r18,10014968 <_strtod_r+0xed0>
1001408c:	908003cc 	andi	r2,r18,15
10014090:	10000b26 	beq	r2,zero,100140c0 <_strtod_r+0x628>
10014094:	100490fa 	slli	r2,r2,3
10014098:	00c400b4 	movhi	r3,4098
1001409c:	18cc2904 	addi	r3,r3,12452
100140a0:	1885883a 	add	r2,r3,r2
100140a4:	11000017 	ldw	r4,0(r2)
100140a8:	11400117 	ldw	r5,4(r2)
100140ac:	b80d883a 	mov	r6,r23
100140b0:	b00f883a 	mov	r7,r22
100140b4:	001de6c0 	call	1001de6c <__muldf3>
100140b8:	102f883a 	mov	r23,r2
100140bc:	182d883a 	mov	r22,r3
100140c0:	053ffc04 	movi	r20,-16
100140c4:	9524703a 	and	r18,r18,r20
100140c8:	90003826 	beq	r18,zero,100141ac <_strtod_r+0x714>
100140cc:	00804d04 	movi	r2,308
100140d0:	1481eb16 	blt	r2,r18,10014880 <_strtod_r+0xde8>
100140d4:	9029d13a 	srai	r20,r18,4
100140d8:	02c00044 	movi	r11,1
100140dc:	5d03900e 	bge	r11,r20,10014f20 <_strtod_r+0x1488>
100140e0:	010400b4 	movhi	r4,4098
100140e4:	210c1f04 	addi	r4,r4,12412
100140e8:	2011883a 	mov	r8,r4
100140ec:	0025883a 	mov	r18,zero
100140f0:	880b883a 	mov	r5,r17
100140f4:	d9000715 	stw	r4,28(sp)
100140f8:	dc000b15 	stw	r16,44(sp)
100140fc:	9023883a 	mov	r17,r18
10014100:	b805883a 	mov	r2,r23
10014104:	b007883a 	mov	r3,r22
10014108:	0009883a 	mov	r4,zero
1001410c:	4021883a 	mov	r16,r8
10014110:	2825883a 	mov	r18,r5
10014114:	a180004c 	andi	r6,r20,1
10014118:	30000826 	beq	r6,zero,1001413c <_strtod_r+0x6a4>
1001411c:	81800017 	ldw	r6,0(r16)
10014120:	81c00117 	ldw	r7,4(r16)
10014124:	1009883a 	mov	r4,r2
10014128:	180b883a 	mov	r5,r3
1001412c:	dac01315 	stw	r11,76(sp)
10014130:	001de6c0 	call	1001de6c <__muldf3>
10014134:	dac01317 	ldw	r11,76(sp)
10014138:	01000044 	movi	r4,1
1001413c:	a029d07a 	srai	r20,r20,1
10014140:	8c400044 	addi	r17,r17,1
10014144:	84000204 	addi	r16,r16,8
10014148:	a2fff21e 	bne	r20,r11,10014114 <__alt_data_end+0xf8014114>
1001414c:	900b883a 	mov	r5,r18
10014150:	21003fcc 	andi	r4,r4,255
10014154:	8825883a 	mov	r18,r17
10014158:	dc000b17 	ldw	r16,44(sp)
1001415c:	2823883a 	mov	r17,r5
10014160:	2003c01e 	bne	r4,zero,10015064 <_strtod_r+0x15cc>
10014164:	901490fa 	slli	r10,r18,3
10014168:	d8800717 	ldw	r2,28(sp)
1001416c:	01ff2c34 	movhi	r7,64688
10014170:	b80d883a 	mov	r6,r23
10014174:	12a5883a 	add	r18,r2,r10
10014178:	91000017 	ldw	r4,0(r18)
1001417c:	91400117 	ldw	r5,4(r18)
10014180:	b1cf883a 	add	r7,r22,r7
10014184:	001de6c0 	call	1001de6c <__muldf3>
10014188:	102f883a 	mov	r23,r2
1001418c:	011f2834 	movhi	r4,31904
10014190:	189ffc2c 	andhi	r2,r3,32752
10014194:	2081ba36 	bltu	r4,r2,10014880 <_strtod_r+0xde8>
10014198:	011f2434 	movhi	r4,31888
1001419c:	20834a2e 	bgeu	r4,r2,10014ec8 <_strtod_r+0x1430>
100141a0:	059ffc34 	movhi	r22,32752
100141a4:	b5bfffc4 	addi	r22,r22,-1
100141a8:	05ffffc4 	movi	r23,-1
100141ac:	d8000715 	stw	zero,28(sp)
100141b0:	d9400817 	ldw	r5,32(sp)
100141b4:	dcc00015 	stw	r19,0(sp)
100141b8:	e00f883a 	mov	r7,fp
100141bc:	800d883a 	mov	r6,r16
100141c0:	8809883a 	mov	r4,r17
100141c4:	0011e5c0 	call	10011e5c <__s2b>
100141c8:	d8800b15 	stw	r2,44(sp)
100141cc:	1001ac26 	beq	r2,zero,10014880 <_strtod_r+0xde8>
100141d0:	a807d7fa 	srai	r3,r21,31
100141d4:	0545c83a 	sub	r2,zero,r21
100141d8:	dd400c15 	stw	r21,48(sp)
100141dc:	1886703a 	and	r3,r3,r2
100141e0:	d8c00e15 	stw	r3,56(sp)
100141e4:	a8015916 	blt	r21,zero,1001474c <_strtod_r+0xcb4>
100141e8:	d9400b17 	ldw	r5,44(sp)
100141ec:	0011883a 	mov	r8,zero
100141f0:	0021883a 	mov	r16,zero
100141f4:	29400304 	addi	r5,r5,12
100141f8:	d9401115 	stw	r5,68(sp)
100141fc:	4025883a 	mov	r18,r8
10014200:	d8800b17 	ldw	r2,44(sp)
10014204:	8809883a 	mov	r4,r17
10014208:	11400117 	ldw	r5,4(r2)
1001420c:	0011c440 	call	10011c44 <_Balloc>
10014210:	1027883a 	mov	r19,r2
10014214:	10015226 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
10014218:	d8c00b17 	ldw	r3,44(sp)
1001421c:	d9401117 	ldw	r5,68(sp)
10014220:	11000304 	addi	r4,r2,12
10014224:	19800417 	ldw	r6,16(r3)
10014228:	31800084 	addi	r6,r6,2
1001422c:	318d883a 	add	r6,r6,r6
10014230:	318d883a 	add	r6,r6,r6
10014234:	0009cd00 	call	10009cd0 <memcpy>
10014238:	d9000204 	addi	r4,sp,8
1001423c:	d9000015 	stw	r4,0(sp)
10014240:	d9c00404 	addi	r7,sp,16
10014244:	b80b883a 	mov	r5,r23
10014248:	b00d883a 	mov	r6,r22
1001424c:	8809883a 	mov	r4,r17
10014250:	00129940 	call	10012994 <__d2b>
10014254:	d8800515 	stw	r2,20(sp)
10014258:	ddc00815 	stw	r23,32(sp)
1001425c:	dd801215 	stw	r22,72(sp)
10014260:	10029f26 	beq	r2,zero,10014ce0 <_strtod_r+0x1248>
10014264:	01400044 	movi	r5,1
10014268:	8809883a 	mov	r4,r17
1001426c:	00120780 	call	10012078 <__i2b>
10014270:	1021883a 	mov	r16,r2
10014274:	10013a26 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
10014278:	d8800417 	ldw	r2,16(sp)
1001427c:	1000b816 	blt	r2,zero,10014560 <_strtod_r+0xac8>
10014280:	d9400e17 	ldw	r5,56(sp)
10014284:	d9000c17 	ldw	r4,48(sp)
10014288:	28a9883a 	add	r20,r5,r2
1001428c:	d9400717 	ldw	r5,28(sp)
10014290:	dd400217 	ldw	r21,8(sp)
10014294:	073f0084 	movi	fp,-1022
10014298:	1147c83a 	sub	r3,r2,r5
1001429c:	1d47883a 	add	r3,r3,r21
100142a0:	00800d84 	movi	r2,54
100142a4:	18ffffc4 	addi	r3,r3,-1
100142a8:	156bc83a 	sub	r21,r2,r21
100142ac:	1f00950e 	bge	r3,fp,10014504 <_strtod_r+0xa6c>
100142b0:	e0f9c83a 	sub	fp,fp,r3
100142b4:	008007c4 	movi	r2,31
100142b8:	af2bc83a 	sub	r21,r21,fp
100142bc:	1700ac16 	blt	r2,fp,10014570 <_strtod_r+0xad8>
100142c0:	00800044 	movi	r2,1
100142c4:	1704983a 	sll	r2,r2,fp
100142c8:	d8000d15 	stw	zero,52(sp)
100142cc:	d8800f15 	stw	r2,60(sp)
100142d0:	2547883a 	add	r3,r4,r21
100142d4:	d9000717 	ldw	r4,28(sp)
100142d8:	a56b883a 	add	r21,r20,r21
100142dc:	20f9883a 	add	fp,r4,r3
100142e0:	a009883a 	mov	r4,r20
100142e4:	ad00010e 	bge	r21,r20,100142ec <_strtod_r+0x854>
100142e8:	a809883a 	mov	r4,r21
100142ec:	e005883a 	mov	r2,fp
100142f0:	2700010e 	bge	r4,fp,100142f8 <_strtod_r+0x860>
100142f4:	2005883a 	mov	r2,r4
100142f8:	0080030e 	bge	zero,r2,10014308 <_strtod_r+0x870>
100142fc:	a8abc83a 	sub	r21,r21,r2
10014300:	e0b9c83a 	sub	fp,fp,r2
10014304:	a0a9c83a 	sub	r20,r20,r2
10014308:	d9400e17 	ldw	r5,56(sp)
1001430c:	28001126 	beq	r5,zero,10014354 <_strtod_r+0x8bc>
10014310:	280d883a 	mov	r6,r5
10014314:	8809883a 	mov	r4,r17
10014318:	800b883a 	mov	r5,r16
1001431c:	00123400 	call	10012340 <__pow5mult>
10014320:	1021883a 	mov	r16,r2
10014324:	10010e26 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
10014328:	d9800517 	ldw	r6,20(sp)
1001432c:	100b883a 	mov	r5,r2
10014330:	8809883a 	mov	r4,r17
10014334:	00120b40 	call	100120b4 <__multiply>
10014338:	10010926 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
1001433c:	d9400517 	ldw	r5,20(sp)
10014340:	8809883a 	mov	r4,r17
10014344:	d8801315 	stw	r2,76(sp)
10014348:	0011cec0 	call	10011cec <_Bfree>
1001434c:	d8801317 	ldw	r2,76(sp)
10014350:	d8800515 	stw	r2,20(sp)
10014354:	0540060e 	bge	zero,r21,10014370 <_strtod_r+0x8d8>
10014358:	d9400517 	ldw	r5,20(sp)
1001435c:	a80d883a 	mov	r6,r21
10014360:	8809883a 	mov	r4,r17
10014364:	00124800 	call	10012480 <__lshift>
10014368:	d8800515 	stw	r2,20(sp)
1001436c:	10025c26 	beq	r2,zero,10014ce0 <_strtod_r+0x1248>
10014370:	d8800c17 	ldw	r2,48(sp)
10014374:	10000626 	beq	r2,zero,10014390 <_strtod_r+0x8f8>
10014378:	d9800c17 	ldw	r6,48(sp)
1001437c:	980b883a 	mov	r5,r19
10014380:	8809883a 	mov	r4,r17
10014384:	00123400 	call	10012340 <__pow5mult>
10014388:	1027883a 	mov	r19,r2
1001438c:	1000f426 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
10014390:	0700060e 	bge	zero,fp,100143ac <_strtod_r+0x914>
10014394:	980b883a 	mov	r5,r19
10014398:	e00d883a 	mov	r6,fp
1001439c:	8809883a 	mov	r4,r17
100143a0:	00124800 	call	10012480 <__lshift>
100143a4:	1027883a 	mov	r19,r2
100143a8:	1000ed26 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
100143ac:	0500060e 	bge	zero,r20,100143c8 <_strtod_r+0x930>
100143b0:	800b883a 	mov	r5,r16
100143b4:	a00d883a 	mov	r6,r20
100143b8:	8809883a 	mov	r4,r17
100143bc:	00124800 	call	10012480 <__lshift>
100143c0:	1021883a 	mov	r16,r2
100143c4:	1000e626 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
100143c8:	d9400517 	ldw	r5,20(sp)
100143cc:	980d883a 	mov	r6,r19
100143d0:	8809883a 	mov	r4,r17
100143d4:	00126280 	call	10012628 <__mdiff>
100143d8:	1025883a 	mov	r18,r2
100143dc:	1000e026 	beq	r2,zero,10014760 <_strtod_r+0xcc8>
100143e0:	15400317 	ldw	r21,12(r2)
100143e4:	800b883a 	mov	r5,r16
100143e8:	10000315 	stw	zero,12(r2)
100143ec:	1009883a 	mov	r4,r2
100143f0:	00125c80 	call	100125c8 <__mcmp>
100143f4:	10026716 	blt	r2,zero,10014d94 <_strtod_r+0x12fc>
100143f8:	10029626 	beq	r2,zero,10014e54 <_strtod_r+0x13bc>
100143fc:	800b883a 	mov	r5,r16
10014400:	9009883a 	mov	r4,r18
10014404:	0012ae00 	call	10012ae0 <__ratio>
10014408:	000d883a 	mov	r6,zero
1001440c:	01d00034 	movhi	r7,16384
10014410:	1009883a 	mov	r4,r2
10014414:	180b883a 	mov	r5,r3
10014418:	1039883a 	mov	fp,r2
1001441c:	1829883a 	mov	r20,r3
10014420:	001dd780 	call	1001dd78 <__ledf2>
10014424:	00803b16 	blt	zero,r2,10014514 <_strtod_r+0xa7c>
10014428:	a8005e26 	beq	r21,zero,100145a4 <_strtod_r+0xb0c>
1001442c:	050ffc34 	movhi	r20,16368
10014430:	d8000f15 	stw	zero,60(sp)
10014434:	d8001015 	stw	zero,64(sp)
10014438:	dd000d15 	stw	r20,52(sp)
1001443c:	b71ffc2c 	andhi	fp,r22,32752
10014440:	009ff834 	movhi	r2,32736
10014444:	e080f226 	beq	fp,r2,10014810 <_strtod_r+0xd78>
10014448:	d9000717 	ldw	r4,28(sp)
1001444c:	20000c26 	beq	r4,zero,10014480 <_strtod_r+0x9e8>
10014450:	0081a834 	movhi	r2,1696
10014454:	17000a36 	bltu	r2,fp,10014480 <_strtod_r+0x9e8>
10014458:	d9001017 	ldw	r4,64(sp)
1001445c:	d9400d17 	ldw	r5,52(sp)
10014460:	01d07834 	movhi	r7,16864
10014464:	39ffffc4 	addi	r7,r7,-1
10014468:	01bff034 	movhi	r6,65472
1001446c:	001dd780 	call	1001dd78 <__ledf2>
10014470:	0080a70e 	bge	zero,r2,10014710 <_strtod_r+0xc78>
10014474:	0081ac34 	movhi	r2,1712
10014478:	a091883a 	add	r8,r20,r2
1001447c:	4729c83a 	sub	r20,r8,fp
10014480:	b809883a 	mov	r4,r23
10014484:	b00b883a 	mov	r5,r22
10014488:	00128240 	call	10012824 <__ulp>
1001448c:	d9000f17 	ldw	r4,60(sp)
10014490:	a00b883a 	mov	r5,r20
10014494:	100d883a 	mov	r6,r2
10014498:	180f883a 	mov	r7,r3
1001449c:	001de6c0 	call	1001de6c <__muldf3>
100144a0:	b80d883a 	mov	r6,r23
100144a4:	b00f883a 	mov	r7,r22
100144a8:	1009883a 	mov	r4,r2
100144ac:	180b883a 	mov	r5,r3
100144b0:	001d3680 	call	1001d368 <__adddf3>
100144b4:	102f883a 	mov	r23,r2
100144b8:	182d883a 	mov	r22,r3
100144bc:	1829883a 	mov	r20,r3
100144c0:	d9000717 	ldw	r4,28(sp)
100144c4:	2000021e 	bne	r4,zero,100144d0 <_strtod_r+0xa38>
100144c8:	a09ffc2c 	andhi	r2,r20,32752
100144cc:	e080f126 	beq	fp,r2,10014894 <_strtod_r+0xdfc>
100144d0:	d9400517 	ldw	r5,20(sp)
100144d4:	8809883a 	mov	r4,r17
100144d8:	0011cec0 	call	10011cec <_Bfree>
100144dc:	980b883a 	mov	r5,r19
100144e0:	8809883a 	mov	r4,r17
100144e4:	0011cec0 	call	10011cec <_Bfree>
100144e8:	800b883a 	mov	r5,r16
100144ec:	8809883a 	mov	r4,r17
100144f0:	0011cec0 	call	10011cec <_Bfree>
100144f4:	900b883a 	mov	r5,r18
100144f8:	8809883a 	mov	r4,r17
100144fc:	0011cec0 	call	10011cec <_Bfree>
10014500:	003f3f06 	br	10014200 <__alt_data_end+0xf8014200>
10014504:	00c00044 	movi	r3,1
10014508:	d8000d15 	stw	zero,52(sp)
1001450c:	d8c00f15 	stw	r3,60(sp)
10014510:	003f6f06 	br	100142d0 <__alt_data_end+0xf80142d0>
10014514:	000d883a 	mov	r6,zero
10014518:	01cff834 	movhi	r7,16352
1001451c:	e009883a 	mov	r4,fp
10014520:	a00b883a 	mov	r5,r20
10014524:	001de6c0 	call	1001de6c <__muldf3>
10014528:	d8801015 	stw	r2,64(sp)
1001452c:	d8c00d15 	stw	r3,52(sp)
10014530:	a8001a1e 	bne	r21,zero,1001459c <_strtod_r+0xb04>
10014534:	1a20003c 	xorhi	r8,r3,32768
10014538:	d8800f15 	stw	r2,60(sp)
1001453c:	4029883a 	mov	r20,r8
10014540:	003fbe06 	br	1001443c <__alt_data_end+0xf801443c>
10014544:	d8000b15 	stw	zero,44(sp)
10014548:	04800044 	movi	r18,1
1001454c:	b000021e 	bne	r22,zero,10014558 <_strtod_r+0xac0>
10014550:	d8c00c17 	ldw	r3,48(sp)
10014554:	183d9d26 	beq	r3,zero,10013bcc <__alt_data_end+0xf8013bcc>
10014558:	0039883a 	mov	fp,zero
1001455c:	003e5206 	br	10013ea8 <__alt_data_end+0xf8013ea8>
10014560:	d8c00c17 	ldw	r3,48(sp)
10014564:	dd000e17 	ldw	r20,56(sp)
10014568:	1889c83a 	sub	r4,r3,r2
1001456c:	003f4706 	br	1001428c <__alt_data_end+0xf801428c>
10014570:	00bef884 	movi	r2,-1054
10014574:	07000044 	movi	fp,1
10014578:	10c5c83a 	sub	r2,r2,r3
1001457c:	e084983a 	sll	r2,fp,r2
10014580:	df000f15 	stw	fp,60(sp)
10014584:	d8800d15 	stw	r2,52(sp)
10014588:	003f5106 	br	100142d0 <__alt_data_end+0xf80142d0>
1001458c:	d8c00717 	ldw	r3,28(sp)
10014590:	0009883a 	mov	r4,zero
10014594:	d8c00615 	stw	r3,24(sp)
10014598:	003de506 	br	10013d30 <__alt_data_end+0xf8013d30>
1001459c:	da000d17 	ldw	r8,52(sp)
100145a0:	003fe506 	br	10014538 <__alt_data_end+0xf8014538>
100145a4:	b800521e 	bne	r23,zero,100146f0 <_strtod_r+0xc58>
100145a8:	01000434 	movhi	r4,16
100145ac:	213fffc4 	addi	r4,r4,-1
100145b0:	b104703a 	and	r2,r22,r4
100145b4:	1000501e 	bne	r2,zero,100146f8 <_strtod_r+0xc60>
100145b8:	000d883a 	mov	r6,zero
100145bc:	01cffc34 	movhi	r7,16368
100145c0:	e009883a 	mov	r4,fp
100145c4:	a00b883a 	mov	r5,r20
100145c8:	001dd780 	call	1001dd78 <__ledf2>
100145cc:	10024216 	blt	r2,zero,10014ed8 <_strtod_r+0x1440>
100145d0:	a00b883a 	mov	r5,r20
100145d4:	000d883a 	mov	r6,zero
100145d8:	01cff834 	movhi	r7,16352
100145dc:	e009883a 	mov	r4,fp
100145e0:	001de6c0 	call	1001de6c <__muldf3>
100145e4:	d8801015 	stw	r2,64(sp)
100145e8:	d8c00d15 	stw	r3,52(sp)
100145ec:	1029883a 	mov	r20,r2
100145f0:	1a20003c 	xorhi	r8,r3,32768
100145f4:	dd000f15 	stw	r20,60(sp)
100145f8:	4029883a 	mov	r20,r8
100145fc:	003f8f06 	br	1001443c <__alt_data_end+0xf801443c>
10014600:	8039883a 	mov	fp,r16
10014604:	002d883a 	mov	r22,zero
10014608:	d8000b15 	stw	zero,44(sp)
1001460c:	bd7ff404 	addi	r21,r23,-48
10014610:	00800244 	movi	r2,9
10014614:	15401236 	bltu	r2,r21,10014660 <_strtod_r+0xbc8>
10014618:	dd400e15 	stw	r21,56(sp)
1001461c:	b0800044 	addi	r2,r22,1
10014620:	a801701e 	bne	r21,zero,10014be4 <_strtod_r+0x114c>
10014624:	ddc00617 	ldw	r23,24(sp)
10014628:	102d883a 	mov	r22,r2
1001462c:	b8800044 	addi	r2,r23,1
10014630:	d8800615 	stw	r2,24(sp)
10014634:	bdc00047 	ldb	r23,1(r23)
10014638:	003ff406 	br	1001460c <__alt_data_end+0xf801460c>
1001463c:	00c00044 	movi	r3,1
10014640:	d8c00e15 	stw	r3,56(sp)
10014644:	d8c00717 	ldw	r3,28(sp)
10014648:	18800084 	addi	r2,r3,2
1001464c:	d8800615 	stw	r2,24(sp)
10014650:	1dc00087 	ldb	r23,2(r3)
10014654:	003e1f06 	br	10013ed4 <__alt_data_end+0xf8013ed4>
10014658:	d8000e15 	stw	zero,56(sp)
1001465c:	003ff906 	br	10014644 <__alt_data_end+0xf8014644>
10014660:	04800044 	movi	r18,1
10014664:	003dad06 	br	10013d1c <__alt_data_end+0xf8013d1c>
10014668:	903d581e 	bne	r18,zero,10013bcc <__alt_data_end+0xf8013bcc>
1001466c:	00801384 	movi	r2,78
10014670:	b8800526 	beq	r23,r2,10014688 <_strtod_r+0xbf0>
10014674:	15fd530e 	bge	r2,r23,10013bc4 <__alt_data_end+0xf8013bc4>
10014678:	00801a44 	movi	r2,105
1001467c:	b8819a26 	beq	r23,r2,10014ce8 <_strtod_r+0x1250>
10014680:	00801b84 	movi	r2,110
10014684:	b8bd511e 	bne	r23,r2,10013bcc <__alt_data_end+0xf8013bcc>
10014688:	014400b4 	movhi	r5,4098
1001468c:	d9000617 	ldw	r4,24(sp)
10014690:	294c5e04 	addi	r5,r5,12664
10014694:	01c00644 	movi	r7,25
10014698:	00000b06 	br	100146c8 <_strtod_r+0xc30>
1001469c:	21000044 	addi	r4,r4,1
100146a0:	20800003 	ldbu	r2,0(r4)
100146a4:	10ffefc4 	addi	r3,r2,-65
100146a8:	10803fcc 	andi	r2,r2,255
100146ac:	1080201c 	xori	r2,r2,128
100146b0:	18c03fcc 	andi	r3,r3,255
100146b4:	10bfe004 	addi	r2,r2,-128
100146b8:	38c00136 	bltu	r7,r3,100146c0 <_strtod_r+0xc28>
100146bc:	10800804 	addi	r2,r2,32
100146c0:	29400044 	addi	r5,r5,1
100146c4:	11bd411e 	bne	r2,r6,10013bcc <__alt_data_end+0xf8013bcc>
100146c8:	29800007 	ldb	r6,0(r5)
100146cc:	303ff31e 	bne	r6,zero,1001469c <__alt_data_end+0xf801469c>
100146d0:	20800044 	addi	r2,r4,1
100146d4:	d8800615 	stw	r2,24(sp)
100146d8:	20c00047 	ldb	r3,1(r4)
100146dc:	00800a04 	movi	r2,40
100146e0:	18bde326 	beq	r3,r2,10013e70 <__alt_data_end+0xf8013e70>
100146e4:	05bffe34 	movhi	r22,65528
100146e8:	002f883a 	mov	r23,zero
100146ec:	003dea06 	br	10013e98 <__alt_data_end+0xf8013e98>
100146f0:	00800044 	movi	r2,1
100146f4:	b880ff26 	beq	r23,r2,10014af4 <_strtod_r+0x105c>
100146f8:	014ffc34 	movhi	r5,16368
100146fc:	d8000f15 	stw	zero,60(sp)
10014700:	052ffc34 	movhi	r20,49136
10014704:	d8001015 	stw	zero,64(sp)
10014708:	d9400d15 	stw	r5,52(sp)
1001470c:	003f4b06 	br	1001443c <__alt_data_end+0xf801443c>
10014710:	d9001017 	ldw	r4,64(sp)
10014714:	d9400d17 	ldw	r5,52(sp)
10014718:	001c5380 	call	1001c538 <__fixunsdfsi>
1001471c:	1000f126 	beq	r2,zero,10014ae4 <_strtod_r+0x104c>
10014720:	1009883a 	mov	r4,r2
10014724:	00099c40 	call	100099c4 <__floatunsidf>
10014728:	d8801015 	stw	r2,64(sp)
1001472c:	d8c00d15 	stw	r3,52(sp)
10014730:	a800ea1e 	bne	r21,zero,10014adc <_strtod_r+0x1044>
10014734:	d8800d17 	ldw	r2,52(sp)
10014738:	1220003c 	xorhi	r8,r2,32768
1001473c:	d8c01017 	ldw	r3,64(sp)
10014740:	4029883a 	mov	r20,r8
10014744:	d8c00f15 	stw	r3,60(sp)
10014748:	003f4a06 	br	10014474 <__alt_data_end+0xf8014474>
1001474c:	d8000c15 	stw	zero,48(sp)
10014750:	003ea506 	br	100141e8 <__alt_data_end+0xf80141e8>
10014754:	d8c00817 	ldw	r3,32(sp)
10014758:	00bfffc4 	movi	r2,-1
1001475c:	1880441e 	bne	r3,r2,10014870 <_strtod_r+0xdd8>
10014760:	9011883a 	mov	r8,r18
10014764:	d8800517 	ldw	r2,20(sp)
10014768:	00c00884 	movi	r3,34
1001476c:	88c00015 	stw	r3,0(r17)
10014770:	d8000815 	stw	zero,32(sp)
10014774:	071ffc34 	movhi	fp,32752
10014778:	100b883a 	mov	r5,r2
1001477c:	8809883a 	mov	r4,r17
10014780:	da001315 	stw	r8,76(sp)
10014784:	0011cec0 	call	10011cec <_Bfree>
10014788:	980b883a 	mov	r5,r19
1001478c:	8809883a 	mov	r4,r17
10014790:	0011cec0 	call	10011cec <_Bfree>
10014794:	800b883a 	mov	r5,r16
10014798:	8809883a 	mov	r4,r17
1001479c:	0011cec0 	call	10011cec <_Bfree>
100147a0:	d9400b17 	ldw	r5,44(sp)
100147a4:	8809883a 	mov	r4,r17
100147a8:	0011cec0 	call	10011cec <_Bfree>
100147ac:	da001317 	ldw	r8,76(sp)
100147b0:	8809883a 	mov	r4,r17
100147b4:	400b883a 	mov	r5,r8
100147b8:	0011cec0 	call	10011cec <_Bfree>
100147bc:	003d5f06 	br	10013d3c <__alt_data_end+0xf8013d3c>
100147c0:	d8c00a17 	ldw	r3,40(sp)
100147c4:	d8800504 	addi	r2,sp,20
100147c8:	018400b4 	movhi	r6,4098
100147cc:	318c6404 	addi	r6,r6,12688
100147d0:	d8c00115 	stw	r3,4(sp)
100147d4:	d8800015 	stw	r2,0(sp)
100147d8:	d9c00404 	addi	r7,sp,16
100147dc:	d9400604 	addi	r5,sp,24
100147e0:	8809883a 	mov	r4,r17
100147e4:	001a0440 	call	1001a044 <__gethex>
100147e8:	148001cc 	andi	r18,r2,7
100147ec:	903e2126 	beq	r18,zero,10014074 <__alt_data_end+0xf8014074>
100147f0:	00c00184 	movi	r3,6
100147f4:	90c0c71e 	bne	r18,r3,10014b14 <_strtod_r+0x107c>
100147f8:	84000044 	addi	r16,r16,1
100147fc:	dc000615 	stw	r16,24(sp)
10014800:	d8000815 	stw	zero,32(sp)
10014804:	0039883a 	mov	fp,zero
10014808:	d8000a15 	stw	zero,40(sp)
1001480c:	003d4b06 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014810:	00bf2c34 	movhi	r2,64688
10014814:	b0ad883a 	add	r22,r22,r2
10014818:	b809883a 	mov	r4,r23
1001481c:	b00b883a 	mov	r5,r22
10014820:	00128240 	call	10012824 <__ulp>
10014824:	d9000f17 	ldw	r4,60(sp)
10014828:	100d883a 	mov	r6,r2
1001482c:	180f883a 	mov	r7,r3
10014830:	a00b883a 	mov	r5,r20
10014834:	001de6c0 	call	1001de6c <__muldf3>
10014838:	b80d883a 	mov	r6,r23
1001483c:	1009883a 	mov	r4,r2
10014840:	b00f883a 	mov	r7,r22
10014844:	180b883a 	mov	r5,r3
10014848:	001d3680 	call	1001d368 <__adddf3>
1001484c:	011f2834 	movhi	r4,31904
10014850:	102f883a 	mov	r23,r2
10014854:	213fffc4 	addi	r4,r4,-1
10014858:	189ffc2c 	andhi	r2,r3,32752
1001485c:	20807b2e 	bgeu	r4,r2,10014a4c <_strtod_r+0xfb4>
10014860:	d9401217 	ldw	r5,72(sp)
10014864:	009ffc34 	movhi	r2,32752
10014868:	10bfffc4 	addi	r2,r2,-1
1001486c:	28bfb926 	beq	r5,r2,10014754 <__alt_data_end+0xf8014754>
10014870:	059ffc34 	movhi	r22,32752
10014874:	b5bfffc4 	addi	r22,r22,-1
10014878:	05ffffc4 	movi	r23,-1
1001487c:	003f1406 	br	100144d0 <__alt_data_end+0xf80144d0>
10014880:	00800884 	movi	r2,34
10014884:	88800015 	stw	r2,0(r17)
10014888:	d8000815 	stw	zero,32(sp)
1001488c:	071ffc34 	movhi	fp,32752
10014890:	003d2a06 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014894:	d9400d17 	ldw	r5,52(sp)
10014898:	d9001017 	ldw	r4,64(sp)
1001489c:	001efd40 	call	1001efd4 <__fixdfsi>
100148a0:	1009883a 	mov	r4,r2
100148a4:	00098e80 	call	100098e8 <__floatsidf>
100148a8:	d9001017 	ldw	r4,64(sp)
100148ac:	d9400d17 	ldw	r5,52(sp)
100148b0:	100d883a 	mov	r6,r2
100148b4:	180f883a 	mov	r7,r3
100148b8:	001e6d80 	call	1001e6d8 <__subdf3>
100148bc:	1011883a 	mov	r8,r2
100148c0:	1839883a 	mov	fp,r3
100148c4:	a800121e 	bne	r21,zero,10014910 <_strtod_r+0xe78>
100148c8:	b800111e 	bne	r23,zero,10014910 <_strtod_r+0xe78>
100148cc:	01400434 	movhi	r5,16
100148d0:	297fffc4 	addi	r5,r5,-1
100148d4:	a168703a 	and	r20,r20,r5
100148d8:	a0000d1e 	bne	r20,zero,10014910 <_strtod_r+0xe78>
100148dc:	01a52834 	movhi	r6,38048
100148e0:	01cff434 	movhi	r7,16336
100148e4:	318d6544 	addi	r6,r6,13717
100148e8:	39ffffc4 	addi	r7,r7,-1
100148ec:	1009883a 	mov	r4,r2
100148f0:	180b883a 	mov	r5,r3
100148f4:	001dd780 	call	1001dd78 <__ledf2>
100148f8:	103ef50e 	bge	r2,zero,100144d0 <__alt_data_end+0xf80144d0>
100148fc:	9011883a 	mov	r8,r18
10014900:	d8800517 	ldw	r2,20(sp)
10014904:	d8000815 	stw	zero,32(sp)
10014908:	b039883a 	mov	fp,r22
1001490c:	003f9a06 	br	10014778 <__alt_data_end+0xf8014778>
10014910:	01a52834 	movhi	r6,38048
10014914:	01cff834 	movhi	r7,16352
10014918:	4009883a 	mov	r4,r8
1001491c:	318d6544 	addi	r6,r6,13717
10014920:	39ffffc4 	addi	r7,r7,-1
10014924:	e00b883a 	mov	r5,fp
10014928:	da001315 	stw	r8,76(sp)
1001492c:	001dd780 	call	1001dd78 <__ledf2>
10014930:	da001317 	ldw	r8,76(sp)
10014934:	10000716 	blt	r2,zero,10014954 <_strtod_r+0xebc>
10014938:	018d6c34 	movhi	r6,13744
1001493c:	31b94d44 	addi	r6,r6,-6859
10014940:	01cff834 	movhi	r7,16352
10014944:	4009883a 	mov	r4,r8
10014948:	e00b883a 	mov	r5,fp
1001494c:	001dc9c0 	call	1001dc9c <__gedf2>
10014950:	00bedf0e 	bge	zero,r2,100144d0 <__alt_data_end+0xf80144d0>
10014954:	9011883a 	mov	r8,r18
10014958:	d8800517 	ldw	r2,20(sp)
1001495c:	ddc00815 	stw	r23,32(sp)
10014960:	b039883a 	mov	fp,r22
10014964:	003f8406 	br	10014778 <__alt_data_end+0xf8014778>
10014968:	903e1026 	beq	r18,zero,100141ac <__alt_data_end+0xf80141ac>
1001496c:	04a5c83a 	sub	r18,zero,r18
10014970:	908003cc 	andi	r2,r18,15
10014974:	10000b26 	beq	r2,zero,100149a4 <_strtod_r+0xf0c>
10014978:	100490fa 	slli	r2,r2,3
1001497c:	00c400b4 	movhi	r3,4098
10014980:	18cc2904 	addi	r3,r3,12452
10014984:	1885883a 	add	r2,r3,r2
10014988:	11800017 	ldw	r6,0(r2)
1001498c:	11c00117 	ldw	r7,4(r2)
10014990:	b809883a 	mov	r4,r23
10014994:	b00b883a 	mov	r5,r22
10014998:	0008f180 	call	10008f18 <__divdf3>
1001499c:	102f883a 	mov	r23,r2
100149a0:	182d883a 	mov	r22,r3
100149a4:	9025d13a 	srai	r18,r18,4
100149a8:	903e0026 	beq	r18,zero,100141ac <__alt_data_end+0xf80141ac>
100149ac:	008007c4 	movi	r2,31
100149b0:	14801f16 	blt	r2,r18,10014a30 <_strtod_r+0xf98>
100149b4:	9080040c 	andi	r2,r18,16
100149b8:	10018d26 	beq	r2,zero,10014ff0 <_strtod_r+0x1558>
100149bc:	00c01a84 	movi	r3,106
100149c0:	d8c00715 	stw	r3,28(sp)
100149c4:	04817e0e 	bge	zero,r18,10014fc0 <_strtod_r+0x1528>
100149c8:	050400b4 	movhi	r20,4098
100149cc:	a50c6904 	addi	r20,r20,12708
100149d0:	b805883a 	mov	r2,r23
100149d4:	b007883a 	mov	r3,r22
100149d8:	0009883a 	mov	r4,zero
100149dc:	9180004c 	andi	r6,r18,1
100149e0:	30000626 	beq	r6,zero,100149fc <_strtod_r+0xf64>
100149e4:	a1800017 	ldw	r6,0(r20)
100149e8:	a1c00117 	ldw	r7,4(r20)
100149ec:	1009883a 	mov	r4,r2
100149f0:	180b883a 	mov	r5,r3
100149f4:	001de6c0 	call	1001de6c <__muldf3>
100149f8:	01000044 	movi	r4,1
100149fc:	9025d07a 	srai	r18,r18,1
10014a00:	a5000204 	addi	r20,r20,8
10014a04:	903ff51e 	bne	r18,zero,100149dc <__alt_data_end+0xf80149dc>
10014a08:	21003fcc 	andi	r4,r4,255
10014a0c:	2001891e 	bne	r4,zero,10015034 <_strtod_r+0x159c>
10014a10:	d9000717 	ldw	r4,28(sp)
10014a14:	20016a1e 	bne	r4,zero,10014fc0 <_strtod_r+0x1528>
10014a18:	000d883a 	mov	r6,zero
10014a1c:	000f883a 	mov	r7,zero
10014a20:	b809883a 	mov	r4,r23
10014a24:	b00b883a 	mov	r5,r22
10014a28:	001dc140 	call	1001dc14 <__eqdf2>
10014a2c:	103de01e 	bne	r2,zero,100141b0 <__alt_data_end+0xf80141b0>
10014a30:	00800884 	movi	r2,34
10014a34:	88800015 	stw	r2,0(r17)
10014a38:	d8000815 	stw	zero,32(sp)
10014a3c:	0039883a 	mov	fp,zero
10014a40:	003cbe06 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014a44:	011387c4 	movi	r4,19999
10014a48:	003d5606 	br	10013fa4 <__alt_data_end+0xf8013fa4>
10014a4c:	0580d434 	movhi	r22,848
10014a50:	1dad883a 	add	r22,r3,r22
10014a54:	b029883a 	mov	r20,r22
10014a58:	003e9906 	br	100144c0 <__alt_data_end+0xf80144c0>
10014a5c:	e5c03fcc 	andi	r23,fp,255
10014a60:	bdc0201c 	xori	r23,r23,128
10014a64:	bdffe004 	addi	r23,r23,-128
10014a68:	dc800817 	ldw	r18,32(sp)
10014a6c:	0029883a 	mov	r20,zero
10014a70:	0027883a 	mov	r19,zero
10014a74:	0021883a 	mov	r16,zero
10014a78:	003c9806 	br	10013cdc <__alt_data_end+0xf8013cdc>
10014a7c:	00c00944 	movi	r3,37
10014a80:	1f07c83a 	sub	r3,r3,fp
10014a84:	1d7d7e16 	blt	r3,r21,10014080 <__alt_data_end+0xf8014080>
10014a88:	1721c83a 	sub	r16,r2,fp
10014a8c:	800490fa 	slli	r2,r16,3
10014a90:	044400b4 	movhi	r17,4098
10014a94:	8c4c2904 	addi	r17,r17,12452
10014a98:	8885883a 	add	r2,r17,r2
10014a9c:	11000017 	ldw	r4,0(r2)
10014aa0:	11400117 	ldw	r5,4(r2)
10014aa4:	b80d883a 	mov	r6,r23
10014aa8:	b00f883a 	mov	r7,r22
10014aac:	001de6c0 	call	1001de6c <__muldf3>
10014ab0:	ac2bc83a 	sub	r21,r21,r16
10014ab4:	a80c90fa 	slli	r6,r21,3
10014ab8:	1009883a 	mov	r4,r2
10014abc:	180b883a 	mov	r5,r3
10014ac0:	8985883a 	add	r2,r17,r6
10014ac4:	11800017 	ldw	r6,0(r2)
10014ac8:	11c00117 	ldw	r7,4(r2)
10014acc:	001de6c0 	call	1001de6c <__muldf3>
10014ad0:	d8800815 	stw	r2,32(sp)
10014ad4:	1839883a 	mov	fp,r3
10014ad8:	003c9806 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014adc:	da000d17 	ldw	r8,52(sp)
10014ae0:	003f1606 	br	1001473c <__alt_data_end+0xf801473c>
10014ae4:	014ffc34 	movhi	r5,16368
10014ae8:	d8001015 	stw	zero,64(sp)
10014aec:	d9400d15 	stw	r5,52(sp)
10014af0:	003f0f06 	br	10014730 <__alt_data_end+0xf8014730>
10014af4:	b03f001e 	bne	r22,zero,100146f8 <__alt_data_end+0xf80146f8>
10014af8:	9011883a 	mov	r8,r18
10014afc:	00800884 	movi	r2,34
10014b00:	88800015 	stw	r2,0(r17)
10014b04:	d8000815 	stw	zero,32(sp)
10014b08:	d8800517 	ldw	r2,20(sp)
10014b0c:	0039883a 	mov	fp,zero
10014b10:	003f1906 	br	10014778 <__alt_data_end+0xf8014778>
10014b14:	d9800517 	ldw	r6,20(sp)
10014b18:	30000826 	beq	r6,zero,10014b3c <_strtod_r+0x10a4>
10014b1c:	01400d44 	movi	r5,53
10014b20:	d9000204 	addi	r4,sp,8
10014b24:	d8801315 	stw	r2,76(sp)
10014b28:	0012bf80 	call	10012bf8 <__copybits>
10014b2c:	d9400517 	ldw	r5,20(sp)
10014b30:	8809883a 	mov	r4,r17
10014b34:	0011cec0 	call	10011cec <_Bfree>
10014b38:	d8801317 	ldw	r2,76(sp)
10014b3c:	00c00184 	movi	r3,6
10014b40:	1c800f36 	bltu	r3,r18,10014b80 <_strtod_r+0x10e8>
10014b44:	902490ba 	slli	r18,r18,2
10014b48:	00c40074 	movhi	r3,4097
10014b4c:	18d2d704 	addi	r3,r3,19292
10014b50:	90e5883a 	add	r18,r18,r3
10014b54:	90c00017 	ldw	r3,0(r18)
10014b58:	1800683a 	jmp	r3
10014b5c:	10014bd8 	cmpnei	zero,r2,1327
10014b60:	10014bb0 	cmpltui	zero,r2,1326
10014b64:	10014b94 	ori	zero,r2,1326
10014b68:	10014b78 	rdprs	zero,r2,1325
10014b6c:	10014ba0 	cmpeqi	zero,r2,1326
10014b70:	10014bb0 	cmpltui	zero,r2,1326
10014b74:	10014bd8 	cmpnei	zero,r2,1327
10014b78:	059ffc34 	movhi	r22,32752
10014b7c:	002f883a 	mov	r23,zero
10014b80:	1080020c 	andi	r2,r2,8
10014b84:	ddc00815 	stw	r23,32(sp)
10014b88:	103cc426 	beq	r2,zero,10013e9c <__alt_data_end+0xf8013e9c>
10014b8c:	b7200034 	orhi	fp,r22,32768
10014b90:	003c6a06 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014b94:	ddc00217 	ldw	r23,8(sp)
10014b98:	dd800317 	ldw	r22,12(sp)
10014b9c:	003ff806 	br	10014b80 <__alt_data_end+0xf8014b80>
10014ba0:	05a00034 	movhi	r22,32768
10014ba4:	b5bfffc4 	addi	r22,r22,-1
10014ba8:	05ffffc4 	movi	r23,-1
10014bac:	003ff406 	br	10014b80 <__alt_data_end+0xf8014b80>
10014bb0:	d8c00417 	ldw	r3,16(sp)
10014bb4:	dd800317 	ldw	r22,12(sp)
10014bb8:	013ffc34 	movhi	r4,65520
10014bbc:	18c10cc4 	addi	r3,r3,1075
10014bc0:	1806953a 	slli	r3,r3,20
10014bc4:	213fffc4 	addi	r4,r4,-1
10014bc8:	b12c703a 	and	r22,r22,r4
10014bcc:	ddc00217 	ldw	r23,8(sp)
10014bd0:	b0ecb03a 	or	r22,r22,r3
10014bd4:	003fea06 	br	10014b80 <__alt_data_end+0xf8014b80>
10014bd8:	002d883a 	mov	r22,zero
10014bdc:	002f883a 	mov	r23,zero
10014be0:	003fe706 	br	10014b80 <__alt_data_end+0xf8014b80>
10014be4:	d8c00b17 	ldw	r3,44(sp)
10014be8:	b72d883a 	add	r22,r22,fp
10014bec:	1887883a 	add	r3,r3,r2
10014bf0:	d8c00b15 	stw	r3,44(sp)
10014bf4:	00c00044 	movi	r3,1
10014bf8:	10c11126 	beq	r2,r3,10015040 <_strtod_r+0x15a8>
10014bfc:	05c00204 	movi	r23,8
10014c00:	04800404 	movi	r18,16
10014c04:	e7000044 	addi	fp,fp,1
10014c08:	e0bfffc4 	addi	r2,fp,-1
10014c0c:	b8802016 	blt	r23,r2,10014c90 <_strtod_r+0x11f8>
10014c10:	9809883a 	mov	r4,r19
10014c14:	01400284 	movi	r5,10
10014c18:	0008ef00 	call	10008ef0 <__mulsi3>
10014c1c:	1027883a 	mov	r19,r2
10014c20:	e5bff81e 	bne	fp,r22,10014c04 <__alt_data_end+0xf8014c04>
10014c24:	ddc00617 	ldw	r23,24(sp)
10014c28:	e7000044 	addi	fp,fp,1
10014c2c:	00800204 	movi	r2,8
10014c30:	1580100e 	bge	r2,r22,10014c74 <_strtod_r+0x11dc>
10014c34:	00800404 	movi	r2,16
10014c38:	002d883a 	mov	r22,zero
10014c3c:	173e7b16 	blt	r2,fp,1001462c <__alt_data_end+0xf801462c>
10014c40:	a009883a 	mov	r4,r20
10014c44:	01400284 	movi	r5,10
10014c48:	0008ef00 	call	10008ef0 <__mulsi3>
10014c4c:	a8a9883a 	add	r20,r21,r2
10014c50:	003e7606 	br	1001462c <__alt_data_end+0xf801462c>
10014c54:	d9000617 	ldw	r4,24(sp)
10014c58:	bdfff404 	addi	r23,r23,-48
10014c5c:	b5800044 	addi	r22,r22,1
10014c60:	ddc00e15 	stw	r23,56(sp)
10014c64:	d9000815 	stw	r4,32(sp)
10014c68:	dd800b15 	stw	r22,44(sp)
10014c6c:	202f883a 	mov	r23,r4
10014c70:	07000044 	movi	fp,1
10014c74:	9809883a 	mov	r4,r19
10014c78:	01400284 	movi	r5,10
10014c7c:	0008ef00 	call	10008ef0 <__mulsi3>
10014c80:	d8c00e17 	ldw	r3,56(sp)
10014c84:	002d883a 	mov	r22,zero
10014c88:	18a7883a 	add	r19,r3,r2
10014c8c:	003e6706 	br	1001462c <__alt_data_end+0xf801462c>
10014c90:	973fe316 	blt	r18,fp,10014c20 <__alt_data_end+0xf8014c20>
10014c94:	a009883a 	mov	r4,r20
10014c98:	01400284 	movi	r5,10
10014c9c:	0008ef00 	call	10008ef0 <__mulsi3>
10014ca0:	1029883a 	mov	r20,r2
10014ca4:	003fde06 	br	10014c20 <__alt_data_end+0xf8014c20>
10014ca8:	00bffa84 	movi	r2,-22
10014cac:	a8bcf416 	blt	r21,r2,10014080 <__alt_data_end+0xf8014080>
10014cb0:	a82a90fa 	slli	r21,r21,3
10014cb4:	008400b4 	movhi	r2,4098
10014cb8:	108c2904 	addi	r2,r2,12452
10014cbc:	1545c83a 	sub	r2,r2,r21
10014cc0:	11800017 	ldw	r6,0(r2)
10014cc4:	11c00117 	ldw	r7,4(r2)
10014cc8:	b809883a 	mov	r4,r23
10014ccc:	b00b883a 	mov	r5,r22
10014cd0:	0008f180 	call	10008f18 <__divdf3>
10014cd4:	d8800815 	stw	r2,32(sp)
10014cd8:	1839883a 	mov	fp,r3
10014cdc:	003c1706 	br	10013d3c <__alt_data_end+0xf8013d3c>
10014ce0:	9011883a 	mov	r8,r18
10014ce4:	003ea006 	br	10014768 <__alt_data_end+0xf8014768>
10014ce8:	014400b4 	movhi	r5,4098
10014cec:	d9000617 	ldw	r4,24(sp)
10014cf0:	294c5b04 	addi	r5,r5,12652
10014cf4:	01c00644 	movi	r7,25
10014cf8:	00000b06 	br	10014d28 <_strtod_r+0x1290>
10014cfc:	21000044 	addi	r4,r4,1
10014d00:	20800003 	ldbu	r2,0(r4)
10014d04:	10ffefc4 	addi	r3,r2,-65
10014d08:	10803fcc 	andi	r2,r2,255
10014d0c:	1080201c 	xori	r2,r2,128
10014d10:	18c03fcc 	andi	r3,r3,255
10014d14:	10bfe004 	addi	r2,r2,-128
10014d18:	38c00136 	bltu	r7,r3,10014d20 <_strtod_r+0x1288>
10014d1c:	10800804 	addi	r2,r2,32
10014d20:	29400044 	addi	r5,r5,1
10014d24:	11bba91e 	bne	r2,r6,10013bcc <__alt_data_end+0xf8013bcc>
10014d28:	29800007 	ldb	r6,0(r5)
10014d2c:	303ff31e 	bne	r6,zero,10014cfc <__alt_data_end+0xf8014cfc>
10014d30:	018400b4 	movhi	r6,4098
10014d34:	d9000615 	stw	r4,24(sp)
10014d38:	318c5c04 	addi	r6,r6,12656
10014d3c:	200b883a 	mov	r5,r4
10014d40:	02000644 	movi	r8,25
10014d44:	00000a06 	br	10014d70 <_strtod_r+0x12d8>
10014d48:	28800003 	ldbu	r2,0(r5)
10014d4c:	10ffefc4 	addi	r3,r2,-65
10014d50:	10803fcc 	andi	r2,r2,255
10014d54:	1080201c 	xori	r2,r2,128
10014d58:	18c03fcc 	andi	r3,r3,255
10014d5c:	10bfe004 	addi	r2,r2,-128
10014d60:	40c00136 	bltu	r8,r3,10014d68 <_strtod_r+0x12d0>
10014d64:	10800804 	addi	r2,r2,32
10014d68:	31800044 	addi	r6,r6,1
10014d6c:	11c0691e 	bne	r2,r7,10014f14 <_strtod_r+0x147c>
10014d70:	31c00007 	ldb	r7,0(r6)
10014d74:	29400044 	addi	r5,r5,1
10014d78:	383ff31e 	bne	r7,zero,10014d48 <__alt_data_end+0xf8014d48>
10014d7c:	d9400615 	stw	r5,24(sp)
10014d80:	059ffc34 	movhi	r22,32752
10014d84:	002f883a 	mov	r23,zero
10014d88:	003c4306 	br	10013e98 <__alt_data_end+0xf8013e98>
10014d8c:	002d883a 	mov	r22,zero
10014d90:	003cad06 	br	10014048 <__alt_data_end+0xf8014048>
10014d94:	9011883a 	mov	r8,r18
10014d98:	df001217 	ldw	fp,72(sp)
10014d9c:	a800461e 	bne	r21,zero,10014eb8 <_strtod_r+0x1420>
10014da0:	b800451e 	bne	r23,zero,10014eb8 <_strtod_r+0x1420>
10014da4:	00800434 	movhi	r2,16
10014da8:	10bfffc4 	addi	r2,r2,-1
10014dac:	b084703a 	and	r2,r22,r2
10014db0:	1000411e 	bne	r2,zero,10014eb8 <_strtod_r+0x1420>
10014db4:	b49ffc2c 	andhi	r18,r22,32752
10014db8:	0081ac34 	movhi	r2,1712
10014dbc:	14803e2e 	bgeu	r2,r18,10014eb8 <_strtod_r+0x1420>
10014dc0:	40800517 	ldw	r2,20(r8)
10014dc4:	1000031e 	bne	r2,zero,10014dd4 <_strtod_r+0x133c>
10014dc8:	40800417 	ldw	r2,16(r8)
10014dcc:	00c00044 	movi	r3,1
10014dd0:	1880390e 	bge	r3,r2,10014eb8 <_strtod_r+0x1420>
10014dd4:	400b883a 	mov	r5,r8
10014dd8:	01800044 	movi	r6,1
10014ddc:	8809883a 	mov	r4,r17
10014de0:	00124800 	call	10012480 <__lshift>
10014de4:	800b883a 	mov	r5,r16
10014de8:	1009883a 	mov	r4,r2
10014dec:	d8801315 	stw	r2,76(sp)
10014df0:	00125c80 	call	100125c8 <__mcmp>
10014df4:	da001317 	ldw	r8,76(sp)
10014df8:	00802f0e 	bge	zero,r2,10014eb8 <_strtod_r+0x1420>
10014dfc:	d9000717 	ldw	r4,28(sp)
10014e00:	20008026 	beq	r4,zero,10015004 <_strtod_r+0x156c>
10014e04:	0081ac34 	movhi	r2,1712
10014e08:	14807e16 	blt	r2,r18,10015004 <_strtod_r+0x156c>
10014e0c:	0080dc34 	movhi	r2,880
10014e10:	14bf3a0e 	bge	r2,r18,10014afc <__alt_data_end+0xf8014afc>
10014e14:	d9000817 	ldw	r4,32(sp)
10014e18:	e00b883a 	mov	r5,fp
10014e1c:	000d883a 	mov	r6,zero
10014e20:	01ce5434 	movhi	r7,14672
10014e24:	da001315 	stw	r8,76(sp)
10014e28:	001de6c0 	call	1001de6c <__muldf3>
10014e2c:	d8800815 	stw	r2,32(sp)
10014e30:	1839883a 	mov	fp,r3
10014e34:	da001317 	ldw	r8,76(sp)
10014e38:	1800211e 	bne	r3,zero,10014ec0 <_strtod_r+0x1428>
10014e3c:	d8c00817 	ldw	r3,32(sp)
10014e40:	d8800517 	ldw	r2,20(sp)
10014e44:	183e4c1e 	bne	r3,zero,10014778 <__alt_data_end+0xf8014778>
10014e48:	00c00884 	movi	r3,34
10014e4c:	88c00015 	stw	r3,0(r17)
10014e50:	003e4906 	br	10014778 <__alt_data_end+0xf8014778>
10014e54:	00800434 	movhi	r2,16
10014e58:	9011883a 	mov	r8,r18
10014e5c:	df001217 	ldw	fp,72(sp)
10014e60:	10bfffc4 	addi	r2,r2,-1
10014e64:	a8002226 	beq	r21,zero,10014ef0 <_strtod_r+0x1458>
10014e68:	b086703a 	and	r3,r22,r2
10014e6c:	18804126 	beq	r3,r2,10014f74 <_strtod_r+0x14dc>
10014e70:	d8c00d17 	ldw	r3,52(sp)
10014e74:	18002326 	beq	r3,zero,10014f04 <_strtod_r+0x146c>
10014e78:	1da4703a 	and	r18,r3,r22
10014e7c:	90000e26 	beq	r18,zero,10014eb8 <_strtod_r+0x1420>
10014e80:	da001315 	stw	r8,76(sp)
10014e84:	d9800717 	ldw	r6,28(sp)
10014e88:	b809883a 	mov	r4,r23
10014e8c:	b00b883a 	mov	r5,r22
10014e90:	a8002826 	beq	r21,zero,10014f34 <_strtod_r+0x149c>
10014e94:	0013a340 	call	10013a34 <sulp>
10014e98:	100d883a 	mov	r6,r2
10014e9c:	180f883a 	mov	r7,r3
10014ea0:	b809883a 	mov	r4,r23
10014ea4:	b00b883a 	mov	r5,r22
10014ea8:	001d3680 	call	1001d368 <__adddf3>
10014eac:	da001317 	ldw	r8,76(sp)
10014eb0:	d8800815 	stw	r2,32(sp)
10014eb4:	1839883a 	mov	fp,r3
10014eb8:	d8800717 	ldw	r2,28(sp)
10014ebc:	103fd51e 	bne	r2,zero,10014e14 <__alt_data_end+0xf8014e14>
10014ec0:	d8800517 	ldw	r2,20(sp)
10014ec4:	003e2c06 	br	10014778 <__alt_data_end+0xf8014778>
10014ec8:	0580d434 	movhi	r22,848
10014ecc:	1dad883a 	add	r22,r3,r22
10014ed0:	d8000715 	stw	zero,28(sp)
10014ed4:	003cb606 	br	100141b0 <__alt_data_end+0xf80141b0>
10014ed8:	008ff834 	movhi	r2,16352
10014edc:	0029883a 	mov	r20,zero
10014ee0:	022ff834 	movhi	r8,49120
10014ee4:	d8001015 	stw	zero,64(sp)
10014ee8:	d8800d15 	stw	r2,52(sp)
10014eec:	003dc106 	br	100145f4 <__alt_data_end+0xf80145f4>
10014ef0:	b084703a 	and	r2,r22,r2
10014ef4:	103fde1e 	bne	r2,zero,10014e70 <__alt_data_end+0xf8014e70>
10014ef8:	b83fdd1e 	bne	r23,zero,10014e70 <__alt_data_end+0xf8014e70>
10014efc:	b49ffc2c 	andhi	r18,r22,32752
10014f00:	003fbe06 	br	10014dfc <__alt_data_end+0xf8014dfc>
10014f04:	d8c00f17 	ldw	r3,60(sp)
10014f08:	1de8703a 	and	r20,r3,r23
10014f0c:	a03fea26 	beq	r20,zero,10014eb8 <__alt_data_end+0xf8014eb8>
10014f10:	003fdb06 	br	10014e80 <__alt_data_end+0xf8014e80>
10014f14:	21000044 	addi	r4,r4,1
10014f18:	d9000615 	stw	r4,24(sp)
10014f1c:	003f9806 	br	10014d80 <__alt_data_end+0xf8014d80>
10014f20:	014400b4 	movhi	r5,4098
10014f24:	294c1f04 	addi	r5,r5,12412
10014f28:	d9400715 	stw	r5,28(sp)
10014f2c:	0025883a 	mov	r18,zero
10014f30:	003c8c06 	br	10014164 <__alt_data_end+0xf8014164>
10014f34:	0013a340 	call	10013a34 <sulp>
10014f38:	100d883a 	mov	r6,r2
10014f3c:	180f883a 	mov	r7,r3
10014f40:	b809883a 	mov	r4,r23
10014f44:	b00b883a 	mov	r5,r22
10014f48:	001e6d80 	call	1001e6d8 <__subdf3>
10014f4c:	000d883a 	mov	r6,zero
10014f50:	000f883a 	mov	r7,zero
10014f54:	1009883a 	mov	r4,r2
10014f58:	180b883a 	mov	r5,r3
10014f5c:	d8800815 	stw	r2,32(sp)
10014f60:	1839883a 	mov	fp,r3
10014f64:	001dc140 	call	1001dc14 <__eqdf2>
10014f68:	da001317 	ldw	r8,76(sp)
10014f6c:	103ee326 	beq	r2,zero,10014afc <__alt_data_end+0xf8014afc>
10014f70:	003fd106 	br	10014eb8 <__alt_data_end+0xf8014eb8>
10014f74:	d8c00717 	ldw	r3,28(sp)
10014f78:	18002026 	beq	r3,zero,10014ffc <_strtod_r+0x1564>
10014f7c:	b09ffc2c 	andhi	r2,r22,32752
10014f80:	00c1a834 	movhi	r3,1696
10014f84:	18801d36 	bltu	r3,r2,10014ffc <_strtod_r+0x1564>
10014f88:	1004d53a 	srli	r2,r2,20
10014f8c:	00c01ac4 	movi	r3,107
10014f90:	1887c83a 	sub	r3,r3,r2
10014f94:	00bfffc4 	movi	r2,-1
10014f98:	10c4983a 	sll	r2,r2,r3
10014f9c:	15ffb41e 	bne	r2,r23,10014e70 <__alt_data_end+0xf8014e70>
10014fa0:	00dffc34 	movhi	r3,32752
10014fa4:	18ffffc4 	addi	r3,r3,-1
10014fa8:	b0c03126 	beq	r22,r3,10015070 <_strtod_r+0x15d8>
10014fac:	b59ffc2c 	andhi	r22,r22,32752
10014fb0:	00800434 	movhi	r2,16
10014fb4:	d8000815 	stw	zero,32(sp)
10014fb8:	b0b9883a 	add	fp,r22,r2
10014fbc:	003fbe06 	br	10014eb8 <__alt_data_end+0xf8014eb8>
10014fc0:	b49ffc2c 	andhi	r18,r22,32752
10014fc4:	9024d53a 	srli	r18,r18,20
10014fc8:	00801ac4 	movi	r2,107
10014fcc:	14a5c83a 	sub	r18,r2,r18
10014fd0:	04be910e 	bge	zero,r18,10014a18 <__alt_data_end+0xf8014a18>
10014fd4:	008007c4 	movi	r2,31
10014fd8:	1480120e 	bge	r2,r18,10015024 <_strtod_r+0x158c>
10014fdc:	00800d04 	movi	r2,52
10014fe0:	002f883a 	mov	r23,zero
10014fe4:	14801a0e 	bge	r2,r18,10015050 <_strtod_r+0x15b8>
10014fe8:	0580dc34 	movhi	r22,880
10014fec:	003e8a06 	br	10014a18 <__alt_data_end+0xf8014a18>
10014ff0:	d8000715 	stw	zero,28(sp)
10014ff4:	04be7416 	blt	zero,r18,100149c8 <__alt_data_end+0xf80149c8>
10014ff8:	003e8706 	br	10014a18 <__alt_data_end+0xf8014a18>
10014ffc:	00bfffc4 	movi	r2,-1
10015000:	003fe606 	br	10014f9c <__alt_data_end+0xf8014f9c>
10015004:	073ffc34 	movhi	fp,65520
10015008:	9725883a 	add	r18,r18,fp
1001500c:	017fffc4 	movi	r5,-1
10015010:	07000434 	movhi	fp,16
10015014:	e179883a 	add	fp,fp,r5
10015018:	d9400815 	stw	r5,32(sp)
1001501c:	9738b03a 	or	fp,r18,fp
10015020:	003fa506 	br	10014eb8 <__alt_data_end+0xf8014eb8>
10015024:	00bfffc4 	movi	r2,-1
10015028:	14a4983a 	sll	r18,r2,r18
1001502c:	95ee703a 	and	r23,r18,r23
10015030:	003e7906 	br	10014a18 <__alt_data_end+0xf8014a18>
10015034:	102f883a 	mov	r23,r2
10015038:	182d883a 	mov	r22,r3
1001503c:	003e7406 	br	10014a10 <__alt_data_end+0xf8014a10>
10015040:	e02d883a 	mov	r22,fp
10015044:	ddc00617 	ldw	r23,24(sp)
10015048:	e0f9883a 	add	fp,fp,r3
1001504c:	003ef706 	br	10014c2c <__alt_data_end+0xf8014c2c>
10015050:	94bff804 	addi	r18,r18,-32
10015054:	00bfffc4 	movi	r2,-1
10015058:	14a4983a 	sll	r18,r2,r18
1001505c:	95ac703a 	and	r22,r18,r22
10015060:	003e6d06 	br	10014a18 <__alt_data_end+0xf8014a18>
10015064:	102f883a 	mov	r23,r2
10015068:	182d883a 	mov	r22,r3
1001506c:	003c3d06 	br	10014164 <__alt_data_end+0xf8014164>
10015070:	00ffffc4 	movi	r3,-1
10015074:	10ffcd1e 	bne	r2,r3,10014fac <__alt_data_end+0xf8014fac>
10015078:	003dba06 	br	10014764 <__alt_data_end+0xf8014764>

1001507c <strtod>:
1001507c:	008400b4 	movhi	r2,4098
10015080:	10951604 	addi	r2,r2,21592
10015084:	280d883a 	mov	r6,r5
10015088:	200b883a 	mov	r5,r4
1001508c:	11000017 	ldw	r4,0(r2)
10015090:	0013a981 	jmpi	10013a98 <_strtod_r>

10015094 <strtof>:
10015094:	defffb04 	addi	sp,sp,-20
10015098:	dcc00315 	stw	r19,12(sp)
1001509c:	04c400b4 	movhi	r19,4098
100150a0:	9cd51604 	addi	r19,r19,21592
100150a4:	280d883a 	mov	r6,r5
100150a8:	200b883a 	mov	r5,r4
100150ac:	99000017 	ldw	r4,0(r19)
100150b0:	dfc00415 	stw	ra,16(sp)
100150b4:	dc800215 	stw	r18,8(sp)
100150b8:	dc400115 	stw	r17,4(sp)
100150bc:	dc000015 	stw	r16,0(sp)
100150c0:	0013a980 	call	10013a98 <_strtod_r>
100150c4:	1009883a 	mov	r4,r2
100150c8:	180b883a 	mov	r5,r3
100150cc:	1025883a 	mov	r18,r2
100150d0:	1823883a 	mov	r17,r3
100150d4:	001f0540 	call	1001f054 <__truncdfsf2>
100150d8:	000b883a 	mov	r5,zero
100150dc:	1009883a 	mov	r4,r2
100150e0:	1021883a 	mov	r16,r2
100150e4:	001d16c0 	call	1001d16c <__eqsf2>
100150e8:	1000111e 	bne	r2,zero,10015130 <strtof+0x9c>
100150ec:	000d883a 	mov	r6,zero
100150f0:	000f883a 	mov	r7,zero
100150f4:	9009883a 	mov	r4,r18
100150f8:	880b883a 	mov	r5,r17
100150fc:	001dc140 	call	1001dc14 <__eqdf2>
10015100:	10000b26 	beq	r2,zero,10015130 <strtof+0x9c>
10015104:	98800017 	ldw	r2,0(r19)
10015108:	00c00884 	movi	r3,34
1001510c:	10c00015 	stw	r3,0(r2)
10015110:	8005883a 	mov	r2,r16
10015114:	dfc00417 	ldw	ra,16(sp)
10015118:	dcc00317 	ldw	r19,12(sp)
1001511c:	dc800217 	ldw	r18,8(sp)
10015120:	dc400117 	ldw	r17,4(sp)
10015124:	dc000017 	ldw	r16,0(sp)
10015128:	dec00504 	addi	sp,sp,20
1001512c:	f800283a 	ret
10015130:	015fe034 	movhi	r5,32640
10015134:	297fffc4 	addi	r5,r5,-1
10015138:	8009883a 	mov	r4,r16
1001513c:	001d1e40 	call	1001d1e4 <__gesf2>
10015140:	0080070e 	bge	zero,r2,10015160 <strtof+0xcc>
10015144:	01dffc34 	movhi	r7,32752
10015148:	39ffffc4 	addi	r7,r7,-1
1001514c:	01bfffc4 	movi	r6,-1
10015150:	9009883a 	mov	r4,r18
10015154:	880b883a 	mov	r5,r17
10015158:	001dc9c0 	call	1001dc9c <__gedf2>
1001515c:	00bfe90e 	bge	zero,r2,10015104 <__alt_data_end+0xf8015104>
10015160:	017fe034 	movhi	r5,65408
10015164:	297fffc4 	addi	r5,r5,-1
10015168:	8009883a 	mov	r4,r16
1001516c:	001d2a00 	call	1001d2a0 <__lesf2>
10015170:	103fe70e 	bge	r2,zero,10015110 <__alt_data_end+0xf8015110>
10015174:	01fffc34 	movhi	r7,65520
10015178:	39ffffc4 	addi	r7,r7,-1
1001517c:	01bfffc4 	movi	r6,-1
10015180:	9009883a 	mov	r4,r18
10015184:	880b883a 	mov	r5,r17
10015188:	001dd780 	call	1001dd78 <__ledf2>
1001518c:	103fdd0e 	bge	r2,zero,10015104 <__alt_data_end+0xf8015104>
10015190:	003fdf06 	br	10015110 <__alt_data_end+0xf8015110>

10015194 <_strtol_r>:
10015194:	008400b4 	movhi	r2,4098
10015198:	defff204 	addi	sp,sp,-56
1001519c:	10951704 	addi	r2,r2,21596
100151a0:	dd800a15 	stw	r22,40(sp)
100151a4:	15800017 	ldw	r22,0(r2)
100151a8:	df000c15 	stw	fp,48(sp)
100151ac:	d9000315 	stw	r4,12(sp)
100151b0:	dfc00d15 	stw	ra,52(sp)
100151b4:	ddc00b15 	stw	r23,44(sp)
100151b8:	dd400915 	stw	r21,36(sp)
100151bc:	dd000815 	stw	r20,32(sp)
100151c0:	dcc00715 	stw	r19,28(sp)
100151c4:	dc800615 	stw	r18,24(sp)
100151c8:	dc400515 	stw	r17,20(sp)
100151cc:	dc000415 	stw	r16,16(sp)
100151d0:	d9400215 	stw	r5,8(sp)
100151d4:	d9800015 	stw	r6,0(sp)
100151d8:	3839883a 	mov	fp,r7
100151dc:	2809883a 	mov	r4,r5
100151e0:	24000003 	ldbu	r16,0(r4)
100151e4:	24400044 	addi	r17,r4,1
100151e8:	2007883a 	mov	r3,r4
100151ec:	b405883a 	add	r2,r22,r16
100151f0:	10800043 	ldbu	r2,1(r2)
100151f4:	8809883a 	mov	r4,r17
100151f8:	1080020c 	andi	r2,r2,8
100151fc:	103ff81e 	bne	r2,zero,100151e0 <__alt_data_end+0xf80151e0>
10015200:	00800b44 	movi	r2,45
10015204:	80805526 	beq	r16,r2,1001535c <_strtol_r+0x1c8>
10015208:	00800ac4 	movi	r2,43
1001520c:	80806026 	beq	r16,r2,10015390 <_strtol_r+0x1fc>
10015210:	0029883a 	mov	r20,zero
10015214:	e0004726 	beq	fp,zero,10015334 <_strtol_r+0x1a0>
10015218:	00800404 	movi	r2,16
1001521c:	e0806626 	beq	fp,r2,100153b8 <_strtol_r+0x224>
10015220:	e027883a 	mov	r19,fp
10015224:	00a00034 	movhi	r2,32768
10015228:	a025003a 	cmpeq	r18,r20,zero
1001522c:	14a5c83a 	sub	r18,r2,r18
10015230:	9009883a 	mov	r4,r18
10015234:	980b883a 	mov	r5,r19
10015238:	0009c2c0 	call	10009c2c <__umodsi3>
1001523c:	9009883a 	mov	r4,r18
10015240:	980b883a 	mov	r5,r19
10015244:	d8800115 	stw	r2,4(sp)
10015248:	0009bc80 	call	10009bc8 <__udivsi3>
1001524c:	b407883a 	add	r3,r22,r16
10015250:	18c00043 	ldbu	r3,1(r3)
10015254:	102b883a 	mov	r21,r2
10015258:	0009883a 	mov	r4,zero
1001525c:	1940010c 	andi	r5,r3,4
10015260:	0005883a 	mov	r2,zero
10015264:	04800044 	movi	r18,1
10015268:	05ffffc4 	movi	r23,-1
1001526c:	28000f26 	beq	r5,zero,100152ac <_strtol_r+0x118>
10015270:	843ff404 	addi	r16,r16,-48
10015274:	8700130e 	bge	r16,fp,100152c4 <_strtol_r+0x130>
10015278:	15c00626 	beq	r2,r23,10015294 <_strtol_r+0x100>
1001527c:	a9002936 	bltu	r21,r4,10015324 <_strtol_r+0x190>
10015280:	25402626 	beq	r4,r21,1001531c <_strtol_r+0x188>
10015284:	980b883a 	mov	r5,r19
10015288:	0008ef00 	call	10008ef0 <__mulsi3>
1001528c:	8089883a 	add	r4,r16,r2
10015290:	00800044 	movi	r2,1
10015294:	8c000003 	ldbu	r16,0(r17)
10015298:	8c400044 	addi	r17,r17,1
1001529c:	b407883a 	add	r3,r22,r16
100152a0:	18c00043 	ldbu	r3,1(r3)
100152a4:	1940010c 	andi	r5,r3,4
100152a8:	283ff11e 	bne	r5,zero,10015270 <__alt_data_end+0xf8015270>
100152ac:	18c000cc 	andi	r3,r3,3
100152b0:	18000426 	beq	r3,zero,100152c4 <_strtol_r+0x130>
100152b4:	1c801d26 	beq	r3,r18,1001532c <_strtol_r+0x198>
100152b8:	00c015c4 	movi	r3,87
100152bc:	80e1c83a 	sub	r16,r16,r3
100152c0:	873fed16 	blt	r16,fp,10015278 <__alt_data_end+0xf8015278>
100152c4:	00ffffc4 	movi	r3,-1
100152c8:	10c02826 	beq	r2,r3,1001536c <_strtol_r+0x1d8>
100152cc:	a0001e1e 	bne	r20,zero,10015348 <_strtol_r+0x1b4>
100152d0:	d8c00017 	ldw	r3,0(sp)
100152d4:	18004326 	beq	r3,zero,100153e4 <_strtol_r+0x250>
100152d8:	10001d1e 	bne	r2,zero,10015350 <_strtol_r+0x1bc>
100152dc:	dd800217 	ldw	r22,8(sp)
100152e0:	2005883a 	mov	r2,r4
100152e4:	d8c00017 	ldw	r3,0(sp)
100152e8:	1d800015 	stw	r22,0(r3)
100152ec:	dfc00d17 	ldw	ra,52(sp)
100152f0:	df000c17 	ldw	fp,48(sp)
100152f4:	ddc00b17 	ldw	r23,44(sp)
100152f8:	dd800a17 	ldw	r22,40(sp)
100152fc:	dd400917 	ldw	r21,36(sp)
10015300:	dd000817 	ldw	r20,32(sp)
10015304:	dcc00717 	ldw	r19,28(sp)
10015308:	dc800617 	ldw	r18,24(sp)
1001530c:	dc400517 	ldw	r17,20(sp)
10015310:	dc000417 	ldw	r16,16(sp)
10015314:	dec00e04 	addi	sp,sp,56
10015318:	f800283a 	ret
1001531c:	d8c00117 	ldw	r3,4(sp)
10015320:	1c3fd80e 	bge	r3,r16,10015284 <__alt_data_end+0xf8015284>
10015324:	00bfffc4 	movi	r2,-1
10015328:	003fda06 	br	10015294 <__alt_data_end+0xf8015294>
1001532c:	00c00dc4 	movi	r3,55
10015330:	003fe206 	br	100152bc <__alt_data_end+0xf80152bc>
10015334:	00800c04 	movi	r2,48
10015338:	80801926 	beq	r16,r2,100153a0 <_strtol_r+0x20c>
1001533c:	07000284 	movi	fp,10
10015340:	e027883a 	mov	r19,fp
10015344:	003fb706 	br	10015224 <__alt_data_end+0xf8015224>
10015348:	0109c83a 	sub	r4,zero,r4
1001534c:	003fe006 	br	100152d0 <__alt_data_end+0xf80152d0>
10015350:	2005883a 	mov	r2,r4
10015354:	8dbfffc4 	addi	r22,r17,-1
10015358:	003fe206 	br	100152e4 <__alt_data_end+0xf80152e4>
1001535c:	1c400084 	addi	r17,r3,2
10015360:	1c000043 	ldbu	r16,1(r3)
10015364:	05000044 	movi	r20,1
10015368:	003faa06 	br	10015214 <__alt_data_end+0xf8015214>
1001536c:	d9000317 	ldw	r4,12(sp)
10015370:	00c00884 	movi	r3,34
10015374:	a005003a 	cmpeq	r2,r20,zero
10015378:	20c00015 	stw	r3,0(r4)
1001537c:	00e00034 	movhi	r3,32768
10015380:	1885c83a 	sub	r2,r3,r2
10015384:	d8c00017 	ldw	r3,0(sp)
10015388:	183ff21e 	bne	r3,zero,10015354 <__alt_data_end+0xf8015354>
1001538c:	003fd706 	br	100152ec <__alt_data_end+0xf80152ec>
10015390:	1c400084 	addi	r17,r3,2
10015394:	1c000043 	ldbu	r16,1(r3)
10015398:	0029883a 	mov	r20,zero
1001539c:	003f9d06 	br	10015214 <__alt_data_end+0xf8015214>
100153a0:	88800003 	ldbu	r2,0(r17)
100153a4:	00c01604 	movi	r3,88
100153a8:	108037cc 	andi	r2,r2,223
100153ac:	10c00826 	beq	r2,r3,100153d0 <_strtol_r+0x23c>
100153b0:	07000204 	movi	fp,8
100153b4:	003f9a06 	br	10015220 <__alt_data_end+0xf8015220>
100153b8:	00800c04 	movi	r2,48
100153bc:	80bf981e 	bne	r16,r2,10015220 <__alt_data_end+0xf8015220>
100153c0:	88800003 	ldbu	r2,0(r17)
100153c4:	00c01604 	movi	r3,88
100153c8:	108037cc 	andi	r2,r2,223
100153cc:	10ff941e 	bne	r2,r3,10015220 <__alt_data_end+0xf8015220>
100153d0:	04c00404 	movi	r19,16
100153d4:	8c000043 	ldbu	r16,1(r17)
100153d8:	9839883a 	mov	fp,r19
100153dc:	8c400084 	addi	r17,r17,2
100153e0:	003f9006 	br	10015224 <__alt_data_end+0xf8015224>
100153e4:	2005883a 	mov	r2,r4
100153e8:	003fc006 	br	100152ec <__alt_data_end+0xf80152ec>

100153ec <strtol>:
100153ec:	008400b4 	movhi	r2,4098
100153f0:	10951604 	addi	r2,r2,21592
100153f4:	300f883a 	mov	r7,r6
100153f8:	280d883a 	mov	r6,r5
100153fc:	200b883a 	mov	r5,r4
10015400:	11000017 	ldw	r4,0(r2)
10015404:	00151941 	jmpi	10015194 <_strtol_r>

10015408 <_strtoll_r>:
10015408:	008400b4 	movhi	r2,4098
1001540c:	deffef04 	addi	sp,sp,-68
10015410:	10951704 	addi	r2,r2,21596
10015414:	dd800d15 	stw	r22,52(sp)
10015418:	15800017 	ldw	r22,0(r2)
1001541c:	df000f15 	stw	fp,60(sp)
10015420:	d9000515 	stw	r4,20(sp)
10015424:	dfc01015 	stw	ra,64(sp)
10015428:	ddc00e15 	stw	r23,56(sp)
1001542c:	dd400c15 	stw	r21,48(sp)
10015430:	dd000b15 	stw	r20,44(sp)
10015434:	dcc00a15 	stw	r19,40(sp)
10015438:	dc800915 	stw	r18,36(sp)
1001543c:	dc400815 	stw	r17,32(sp)
10015440:	dc000715 	stw	r16,28(sp)
10015444:	d9400415 	stw	r5,16(sp)
10015448:	d9800215 	stw	r6,8(sp)
1001544c:	3839883a 	mov	fp,r7
10015450:	2809883a 	mov	r4,r5
10015454:	22000003 	ldbu	r8,0(r4)
10015458:	24400044 	addi	r17,r4,1
1001545c:	2007883a 	mov	r3,r4
10015460:	b205883a 	add	r2,r22,r8
10015464:	10800043 	ldbu	r2,1(r2)
10015468:	8809883a 	mov	r4,r17
1001546c:	1080020c 	andi	r2,r2,8
10015470:	103ff81e 	bne	r2,zero,10015454 <__alt_data_end+0xf8015454>
10015474:	00800b44 	movi	r2,45
10015478:	40807e26 	beq	r8,r2,10015674 <_strtoll_r+0x26c>
1001547c:	00800ac4 	movi	r2,43
10015480:	40808126 	beq	r8,r2,10015688 <_strtoll_r+0x280>
10015484:	d8000115 	stw	zero,4(sp)
10015488:	e0000b26 	beq	fp,zero,100154b8 <_strtoll_r+0xb0>
1001548c:	00800404 	movi	r2,16
10015490:	e0808926 	beq	fp,r2,100156b8 <_strtoll_r+0x2b0>
10015494:	e00bd7fa 	srai	r5,fp,31
10015498:	d9000117 	ldw	r4,4(sp)
1001549c:	e025883a 	mov	r18,fp
100154a0:	d9400015 	stw	r5,0(sp)
100154a4:	20000b1e 	bne	r4,zero,100154d4 <_strtoll_r+0xcc>
100154a8:	04200034 	movhi	r16,32768
100154ac:	843fffc4 	addi	r16,r16,-1
100154b0:	053fffc4 	movi	r20,-1
100154b4:	00000906 	br	100154dc <_strtoll_r+0xd4>
100154b8:	00800c04 	movi	r2,48
100154bc:	40807626 	beq	r8,r2,10015698 <_strtoll_r+0x290>
100154c0:	04800284 	movi	r18,10
100154c4:	d8000015 	stw	zero,0(sp)
100154c8:	9039883a 	mov	fp,r18
100154cc:	d9000117 	ldw	r4,4(sp)
100154d0:	203ff526 	beq	r4,zero,100154a8 <__alt_data_end+0xf80154a8>
100154d4:	0029883a 	mov	r20,zero
100154d8:	04200034 	movhi	r16,32768
100154dc:	d9c00017 	ldw	r7,0(sp)
100154e0:	a009883a 	mov	r4,r20
100154e4:	800b883a 	mov	r5,r16
100154e8:	900d883a 	mov	r6,r18
100154ec:	da000615 	stw	r8,24(sp)
100154f0:	001cba80 	call	1001cba8 <__umoddi3>
100154f4:	d9c00017 	ldw	r7,0(sp)
100154f8:	a009883a 	mov	r4,r20
100154fc:	800b883a 	mov	r5,r16
10015500:	900d883a 	mov	r6,r18
10015504:	d8800315 	stw	r2,12(sp)
10015508:	001c5ac0 	call	1001c5ac <__udivdi3>
1001550c:	da000617 	ldw	r8,24(sp)
10015510:	1829883a 	mov	r20,r3
10015514:	882f883a 	mov	r23,r17
10015518:	b207883a 	add	r3,r22,r8
1001551c:	19800043 	ldbu	r6,1(r3)
10015520:	1021883a 	mov	r16,r2
10015524:	000f883a 	mov	r7,zero
10015528:	30c0010c 	andi	r3,r6,4
1001552c:	0009883a 	mov	r4,zero
10015530:	000b883a 	mov	r5,zero
10015534:	04400044 	movi	r17,1
10015538:	057fffc4 	movi	r21,-1
1001553c:	18000d26 	beq	r3,zero,10015574 <_strtoll_r+0x16c>
10015540:	44fff404 	addi	r19,r8,-48
10015544:	9f00110e 	bge	r19,fp,1001558c <_strtoll_r+0x184>
10015548:	3d400426 	beq	r7,r21,1001555c <_strtoll_r+0x154>
1001554c:	a1400236 	bltu	r20,r5,10015558 <_strtoll_r+0x150>
10015550:	2d002a1e 	bne	r5,r20,100155fc <_strtoll_r+0x1f4>
10015554:	8100292e 	bgeu	r16,r4,100155fc <_strtoll_r+0x1f4>
10015558:	01ffffc4 	movi	r7,-1
1001555c:	ba000003 	ldbu	r8,0(r23)
10015560:	bdc00044 	addi	r23,r23,1
10015564:	b207883a 	add	r3,r22,r8
10015568:	19800043 	ldbu	r6,1(r3)
1001556c:	30c0010c 	andi	r3,r6,4
10015570:	183ff31e 	bne	r3,zero,10015540 <__alt_data_end+0xf8015540>
10015574:	318000cc 	andi	r6,r6,3
10015578:	30000426 	beq	r6,zero,1001558c <_strtoll_r+0x184>
1001557c:	34402b26 	beq	r6,r17,1001562c <_strtoll_r+0x224>
10015580:	00c015c4 	movi	r3,87
10015584:	40e7c83a 	sub	r19,r8,r3
10015588:	9f3fef16 	blt	r19,fp,10015548 <__alt_data_end+0xf8015548>
1001558c:	00bfffc4 	movi	r2,-1
10015590:	38802c26 	beq	r7,r2,10015644 <_strtoll_r+0x23c>
10015594:	d8800117 	ldw	r2,4(sp)
10015598:	10000426 	beq	r2,zero,100155ac <_strtoll_r+0x1a4>
1001559c:	0109c83a 	sub	r4,zero,r4
100155a0:	2004c03a 	cmpne	r2,r4,zero
100155a4:	0151c83a 	sub	r8,zero,r5
100155a8:	408bc83a 	sub	r5,r8,r2
100155ac:	d8800217 	ldw	r2,8(sp)
100155b0:	10005026 	beq	r2,zero,100156f4 <_strtoll_r+0x2ec>
100155b4:	2005883a 	mov	r2,r4
100155b8:	2807883a 	mov	r3,r5
100155bc:	38002b1e 	bne	r7,zero,1001566c <_strtoll_r+0x264>
100155c0:	dd800417 	ldw	r22,16(sp)
100155c4:	d9000217 	ldw	r4,8(sp)
100155c8:	25800015 	stw	r22,0(r4)
100155cc:	dfc01017 	ldw	ra,64(sp)
100155d0:	df000f17 	ldw	fp,60(sp)
100155d4:	ddc00e17 	ldw	r23,56(sp)
100155d8:	dd800d17 	ldw	r22,52(sp)
100155dc:	dd400c17 	ldw	r21,48(sp)
100155e0:	dd000b17 	ldw	r20,44(sp)
100155e4:	dcc00a17 	ldw	r19,40(sp)
100155e8:	dc800917 	ldw	r18,36(sp)
100155ec:	dc400817 	ldw	r17,32(sp)
100155f0:	dc000717 	ldw	r16,28(sp)
100155f4:	dec01104 	addi	sp,sp,68
100155f8:	f800283a 	ret
100155fc:	24000d26 	beq	r4,r16,10015634 <_strtoll_r+0x22c>
10015600:	d9c00017 	ldw	r7,0(sp)
10015604:	900d883a 	mov	r6,r18
10015608:	001c42c0 	call	1001c42c <__muldi3>
1001560c:	980bd7fa 	srai	r5,r19,31
10015610:	9885883a 	add	r2,r19,r2
10015614:	14d1803a 	cmpltu	r8,r2,r19
10015618:	28c7883a 	add	r3,r5,r3
1001561c:	1009883a 	mov	r4,r2
10015620:	40cb883a 	add	r5,r8,r3
10015624:	01c00044 	movi	r7,1
10015628:	003fcc06 	br	1001555c <__alt_data_end+0xf801555c>
1001562c:	00c00dc4 	movi	r3,55
10015630:	003fd406 	br	10015584 <__alt_data_end+0xf8015584>
10015634:	2d3ff21e 	bne	r5,r20,10015600 <__alt_data_end+0xf8015600>
10015638:	d8800317 	ldw	r2,12(sp)
1001563c:	14ffc616 	blt	r2,r19,10015558 <__alt_data_end+0xf8015558>
10015640:	003fef06 	br	10015600 <__alt_data_end+0xf8015600>
10015644:	d9000117 	ldw	r4,4(sp)
10015648:	2000271e 	bne	r4,zero,100156e8 <_strtoll_r+0x2e0>
1001564c:	00e00034 	movhi	r3,32768
10015650:	18ffffc4 	addi	r3,r3,-1
10015654:	3805883a 	mov	r2,r7
10015658:	d9400517 	ldw	r5,20(sp)
1001565c:	01000884 	movi	r4,34
10015660:	29000015 	stw	r4,0(r5)
10015664:	d9000217 	ldw	r4,8(sp)
10015668:	203fd826 	beq	r4,zero,100155cc <__alt_data_end+0xf80155cc>
1001566c:	bdbfffc4 	addi	r22,r23,-1
10015670:	003fd406 	br	100155c4 <__alt_data_end+0xf80155c4>
10015674:	00800044 	movi	r2,1
10015678:	1c400084 	addi	r17,r3,2
1001567c:	1a000043 	ldbu	r8,1(r3)
10015680:	d8800115 	stw	r2,4(sp)
10015684:	003f8006 	br	10015488 <__alt_data_end+0xf8015488>
10015688:	1c400084 	addi	r17,r3,2
1001568c:	1a000043 	ldbu	r8,1(r3)
10015690:	d8000115 	stw	zero,4(sp)
10015694:	003f7c06 	br	10015488 <__alt_data_end+0xf8015488>
10015698:	88800003 	ldbu	r2,0(r17)
1001569c:	00c01604 	movi	r3,88
100156a0:	108037cc 	andi	r2,r2,223
100156a4:	10c00a26 	beq	r2,r3,100156d0 <_strtoll_r+0x2c8>
100156a8:	04800204 	movi	r18,8
100156ac:	d8000015 	stw	zero,0(sp)
100156b0:	9039883a 	mov	fp,r18
100156b4:	003f8506 	br	100154cc <__alt_data_end+0xf80154cc>
100156b8:	00800c04 	movi	r2,48
100156bc:	4080101e 	bne	r8,r2,10015700 <_strtoll_r+0x2f8>
100156c0:	88800003 	ldbu	r2,0(r17)
100156c4:	00c01604 	movi	r3,88
100156c8:	108037cc 	andi	r2,r2,223
100156cc:	10c00c1e 	bne	r2,r3,10015700 <_strtoll_r+0x2f8>
100156d0:	04800404 	movi	r18,16
100156d4:	8a000043 	ldbu	r8,1(r17)
100156d8:	d8000015 	stw	zero,0(sp)
100156dc:	8c400084 	addi	r17,r17,2
100156e0:	9039883a 	mov	fp,r18
100156e4:	003f7906 	br	100154cc <__alt_data_end+0xf80154cc>
100156e8:	0005883a 	mov	r2,zero
100156ec:	00e00034 	movhi	r3,32768
100156f0:	003fd906 	br	10015658 <__alt_data_end+0xf8015658>
100156f4:	2005883a 	mov	r2,r4
100156f8:	2807883a 	mov	r3,r5
100156fc:	003fb306 	br	100155cc <__alt_data_end+0xf80155cc>
10015700:	e025883a 	mov	r18,fp
10015704:	d8000015 	stw	zero,0(sp)
10015708:	003f7006 	br	100154cc <__alt_data_end+0xf80154cc>

1001570c <_strtoul_r>:
1001570c:	008400b4 	movhi	r2,4098
10015710:	defff204 	addi	sp,sp,-56
10015714:	10951704 	addi	r2,r2,21596
10015718:	dd800a15 	stw	r22,40(sp)
1001571c:	15800017 	ldw	r22,0(r2)
10015720:	df000c15 	stw	fp,48(sp)
10015724:	dd400915 	stw	r21,36(sp)
10015728:	d9000315 	stw	r4,12(sp)
1001572c:	dfc00d15 	stw	ra,52(sp)
10015730:	ddc00b15 	stw	r23,44(sp)
10015734:	dd000815 	stw	r20,32(sp)
10015738:	dcc00715 	stw	r19,28(sp)
1001573c:	dc800615 	stw	r18,24(sp)
10015740:	dc400515 	stw	r17,20(sp)
10015744:	dc000415 	stw	r16,16(sp)
10015748:	d9400015 	stw	r5,0(sp)
1001574c:	302b883a 	mov	r21,r6
10015750:	3839883a 	mov	fp,r7
10015754:	2809883a 	mov	r4,r5
10015758:	24000003 	ldbu	r16,0(r4)
1001575c:	24400044 	addi	r17,r4,1
10015760:	2007883a 	mov	r3,r4
10015764:	b405883a 	add	r2,r22,r16
10015768:	10800043 	ldbu	r2,1(r2)
1001576c:	8809883a 	mov	r4,r17
10015770:	1080020c 	andi	r2,r2,8
10015774:	103ff81e 	bne	r2,zero,10015758 <__alt_data_end+0xf8015758>
10015778:	00800b44 	movi	r2,45
1001577c:	80805826 	beq	r16,r2,100158e0 <_strtoul_r+0x1d4>
10015780:	00800ac4 	movi	r2,43
10015784:	80805b26 	beq	r16,r2,100158f4 <_strtoul_r+0x1e8>
10015788:	d8000215 	stw	zero,8(sp)
1001578c:	e0000d26 	beq	fp,zero,100157c4 <_strtoul_r+0xb8>
10015790:	00800404 	movi	r2,16
10015794:	e0806626 	beq	fp,r2,10015930 <_strtoul_r+0x224>
10015798:	013fffc4 	movi	r4,-1
1001579c:	e00b883a 	mov	r5,fp
100157a0:	0009bc80 	call	10009bc8 <__udivsi3>
100157a4:	e00b883a 	mov	r5,fp
100157a8:	013fffc4 	movi	r4,-1
100157ac:	1025883a 	mov	r18,r2
100157b0:	0009c2c0 	call	10009c2c <__umodsi3>
100157b4:	d8800115 	stw	r2,4(sp)
100157b8:	e027883a 	mov	r19,fp
100157bc:	902f883a 	mov	r23,r18
100157c0:	00000806 	br	100157e4 <_strtoul_r+0xd8>
100157c4:	00800c04 	movi	r2,48
100157c8:	80804e26 	beq	r16,r2,10015904 <_strtoul_r+0x1f8>
100157cc:	07000284 	movi	fp,10
100157d0:	00c00144 	movi	r3,5
100157d4:	05c666b4 	movhi	r23,6554
100157d8:	d8c00115 	stw	r3,4(sp)
100157dc:	bde66644 	addi	r23,r23,-26215
100157e0:	e027883a 	mov	r19,fp
100157e4:	b407883a 	add	r3,r22,r16
100157e8:	18c00043 	ldbu	r3,1(r3)
100157ec:	0005883a 	mov	r2,zero
100157f0:	0009883a 	mov	r4,zero
100157f4:	1940010c 	andi	r5,r3,4
100157f8:	04800044 	movi	r18,1
100157fc:	053fffc4 	movi	r20,-1
10015800:	28000f26 	beq	r5,zero,10015840 <_strtoul_r+0x134>
10015804:	843ff404 	addi	r16,r16,-48
10015808:	8700130e 	bge	r16,fp,10015858 <_strtoul_r+0x14c>
1001580c:	15000626 	beq	r2,r20,10015828 <_strtoul_r+0x11c>
10015810:	b9002836 	bltu	r23,r4,100158b4 <_strtoul_r+0x1a8>
10015814:	25c02526 	beq	r4,r23,100158ac <_strtoul_r+0x1a0>
10015818:	980b883a 	mov	r5,r19
1001581c:	0008ef00 	call	10008ef0 <__mulsi3>
10015820:	8089883a 	add	r4,r16,r2
10015824:	00800044 	movi	r2,1
10015828:	8c000003 	ldbu	r16,0(r17)
1001582c:	8c400044 	addi	r17,r17,1
10015830:	b407883a 	add	r3,r22,r16
10015834:	18c00043 	ldbu	r3,1(r3)
10015838:	1940010c 	andi	r5,r3,4
1001583c:	283ff11e 	bne	r5,zero,10015804 <__alt_data_end+0xf8015804>
10015840:	18c000cc 	andi	r3,r3,3
10015844:	18000426 	beq	r3,zero,10015858 <_strtoul_r+0x14c>
10015848:	1c801c26 	beq	r3,r18,100158bc <_strtoul_r+0x1b0>
1001584c:	00c015c4 	movi	r3,87
10015850:	80e1c83a 	sub	r16,r16,r3
10015854:	873fed16 	blt	r16,fp,1001580c <__alt_data_end+0xf801580c>
10015858:	10001a16 	blt	r2,zero,100158c4 <_strtoul_r+0x1b8>
1001585c:	d8c00217 	ldw	r3,8(sp)
10015860:	18000126 	beq	r3,zero,10015868 <_strtoul_r+0x15c>
10015864:	0109c83a 	sub	r4,zero,r4
10015868:	a8000326 	beq	r21,zero,10015878 <_strtoul_r+0x16c>
1001586c:	dd000017 	ldw	r20,0(sp)
10015870:	1000191e 	bne	r2,zero,100158d8 <_strtoul_r+0x1cc>
10015874:	ad000015 	stw	r20,0(r21)
10015878:	2005883a 	mov	r2,r4
1001587c:	dfc00d17 	ldw	ra,52(sp)
10015880:	df000c17 	ldw	fp,48(sp)
10015884:	ddc00b17 	ldw	r23,44(sp)
10015888:	dd800a17 	ldw	r22,40(sp)
1001588c:	dd400917 	ldw	r21,36(sp)
10015890:	dd000817 	ldw	r20,32(sp)
10015894:	dcc00717 	ldw	r19,28(sp)
10015898:	dc800617 	ldw	r18,24(sp)
1001589c:	dc400517 	ldw	r17,20(sp)
100158a0:	dc000417 	ldw	r16,16(sp)
100158a4:	dec00e04 	addi	sp,sp,56
100158a8:	f800283a 	ret
100158ac:	d8c00117 	ldw	r3,4(sp)
100158b0:	1c3fd90e 	bge	r3,r16,10015818 <__alt_data_end+0xf8015818>
100158b4:	00bfffc4 	movi	r2,-1
100158b8:	003fdb06 	br	10015828 <__alt_data_end+0xf8015828>
100158bc:	00c00dc4 	movi	r3,55
100158c0:	003fe306 	br	10015850 <__alt_data_end+0xf8015850>
100158c4:	d8c00317 	ldw	r3,12(sp)
100158c8:	00800884 	movi	r2,34
100158cc:	013fffc4 	movi	r4,-1
100158d0:	18800015 	stw	r2,0(r3)
100158d4:	a83fe826 	beq	r21,zero,10015878 <__alt_data_end+0xf8015878>
100158d8:	8d3fffc4 	addi	r20,r17,-1
100158dc:	003fe506 	br	10015874 <__alt_data_end+0xf8015874>
100158e0:	1c400084 	addi	r17,r3,2
100158e4:	1c000043 	ldbu	r16,1(r3)
100158e8:	00c00044 	movi	r3,1
100158ec:	d8c00215 	stw	r3,8(sp)
100158f0:	003fa606 	br	1001578c <__alt_data_end+0xf801578c>
100158f4:	1c400084 	addi	r17,r3,2
100158f8:	1c000043 	ldbu	r16,1(r3)
100158fc:	d8000215 	stw	zero,8(sp)
10015900:	003fa206 	br	1001578c <__alt_data_end+0xf801578c>
10015904:	88800003 	ldbu	r2,0(r17)
10015908:	00c01604 	movi	r3,88
1001590c:	108037cc 	andi	r2,r2,223
10015910:	10c00d26 	beq	r2,r3,10015948 <_strtoul_r+0x23c>
10015914:	07000204 	movi	fp,8
10015918:	00c001c4 	movi	r3,7
1001591c:	05c80034 	movhi	r23,8192
10015920:	d8c00115 	stw	r3,4(sp)
10015924:	bdffffc4 	addi	r23,r23,-1
10015928:	e027883a 	mov	r19,fp
1001592c:	003fad06 	br	100157e4 <__alt_data_end+0xf80157e4>
10015930:	00800c04 	movi	r2,48
10015934:	80800d1e 	bne	r16,r2,1001596c <_strtoul_r+0x260>
10015938:	88800003 	ldbu	r2,0(r17)
1001593c:	00c01604 	movi	r3,88
10015940:	108037cc 	andi	r2,r2,223
10015944:	10c0091e 	bne	r2,r3,1001596c <_strtoul_r+0x260>
10015948:	04c00404 	movi	r19,16
1001594c:	00c003c4 	movi	r3,15
10015950:	04840034 	movhi	r18,4096
10015954:	8c000043 	ldbu	r16,1(r17)
10015958:	d8c00115 	stw	r3,4(sp)
1001595c:	8c400084 	addi	r17,r17,2
10015960:	94bfffc4 	addi	r18,r18,-1
10015964:	9839883a 	mov	fp,r19
10015968:	003f9406 	br	100157bc <__alt_data_end+0xf80157bc>
1001596c:	00c003c4 	movi	r3,15
10015970:	05c40034 	movhi	r23,4096
10015974:	d8c00115 	stw	r3,4(sp)
10015978:	bdffffc4 	addi	r23,r23,-1
1001597c:	e027883a 	mov	r19,fp
10015980:	003f9806 	br	100157e4 <__alt_data_end+0xf80157e4>

10015984 <strtoul>:
10015984:	008400b4 	movhi	r2,4098
10015988:	10951604 	addi	r2,r2,21592
1001598c:	300f883a 	mov	r7,r6
10015990:	280d883a 	mov	r6,r5
10015994:	200b883a 	mov	r5,r4
10015998:	11000017 	ldw	r4,0(r2)
1001599c:	001570c1 	jmpi	1001570c <_strtoul_r>

100159a0 <_strtoull_r>:
100159a0:	008400b4 	movhi	r2,4098
100159a4:	deffef04 	addi	sp,sp,-68
100159a8:	10951704 	addi	r2,r2,21596
100159ac:	dd800d15 	stw	r22,52(sp)
100159b0:	15800017 	ldw	r22,0(r2)
100159b4:	df000f15 	stw	fp,60(sp)
100159b8:	d9000515 	stw	r4,20(sp)
100159bc:	dfc01015 	stw	ra,64(sp)
100159c0:	ddc00e15 	stw	r23,56(sp)
100159c4:	dd400c15 	stw	r21,48(sp)
100159c8:	dd000b15 	stw	r20,44(sp)
100159cc:	dcc00a15 	stw	r19,40(sp)
100159d0:	dc800915 	stw	r18,36(sp)
100159d4:	dc400815 	stw	r17,32(sp)
100159d8:	dc000715 	stw	r16,28(sp)
100159dc:	d9400215 	stw	r5,8(sp)
100159e0:	d9800115 	stw	r6,4(sp)
100159e4:	3839883a 	mov	fp,r7
100159e8:	2809883a 	mov	r4,r5
100159ec:	22000003 	ldbu	r8,0(r4)
100159f0:	24400044 	addi	r17,r4,1
100159f4:	2007883a 	mov	r3,r4
100159f8:	b205883a 	add	r2,r22,r8
100159fc:	10800043 	ldbu	r2,1(r2)
10015a00:	8809883a 	mov	r4,r17
10015a04:	1080020c 	andi	r2,r2,8
10015a08:	103ff81e 	bne	r2,zero,100159ec <__alt_data_end+0xf80159ec>
10015a0c:	00800b44 	movi	r2,45
10015a10:	40807726 	beq	r8,r2,10015bf0 <_strtoull_r+0x250>
10015a14:	00800ac4 	movi	r2,43
10015a18:	40807a26 	beq	r8,r2,10015c04 <_strtoull_r+0x264>
10015a1c:	d8000415 	stw	zero,16(sp)
10015a20:	e0001426 	beq	fp,zero,10015a74 <_strtoull_r+0xd4>
10015a24:	00800404 	movi	r2,16
10015a28:	e0808826 	beq	fp,r2,10015c4c <_strtoull_r+0x2ac>
10015a2c:	e025d7fa 	srai	r18,fp,31
10015a30:	013fffc4 	movi	r4,-1
10015a34:	200b883a 	mov	r5,r4
10015a38:	e00d883a 	mov	r6,fp
10015a3c:	900f883a 	mov	r7,r18
10015a40:	da000615 	stw	r8,24(sp)
10015a44:	001c5ac0 	call	1001c5ac <__udivdi3>
10015a48:	013fffc4 	movi	r4,-1
10015a4c:	e00d883a 	mov	r6,fp
10015a50:	900f883a 	mov	r7,r18
10015a54:	200b883a 	mov	r5,r4
10015a58:	1021883a 	mov	r16,r2
10015a5c:	182f883a 	mov	r23,r3
10015a60:	001cba80 	call	1001cba8 <__umoddi3>
10015a64:	d8800315 	stw	r2,12(sp)
10015a68:	df000015 	stw	fp,0(sp)
10015a6c:	da000617 	ldw	r8,24(sp)
10015a70:	00000c06 	br	10015aa4 <_strtoull_r+0x104>
10015a74:	00800c04 	movi	r2,48
10015a78:	40806626 	beq	r8,r2,10015c14 <_strtoull_r+0x274>
10015a7c:	00800284 	movi	r2,10
10015a80:	00c00144 	movi	r3,5
10015a84:	042666b4 	movhi	r16,39322
10015a88:	05c666b4 	movhi	r23,6554
10015a8c:	d8800015 	stw	r2,0(sp)
10015a90:	d8c00315 	stw	r3,12(sp)
10015a94:	84266644 	addi	r16,r16,-26215
10015a98:	bde66644 	addi	r23,r23,-26215
10015a9c:	0025883a 	mov	r18,zero
10015aa0:	1039883a 	mov	fp,r2
10015aa4:	b205883a 	add	r2,r22,r8
10015aa8:	11800043 	ldbu	r6,1(r2)
10015aac:	882b883a 	mov	r21,r17
10015ab0:	000f883a 	mov	r7,zero
10015ab4:	3080010c 	andi	r2,r6,4
10015ab8:	0009883a 	mov	r4,zero
10015abc:	000b883a 	mov	r5,zero
10015ac0:	04400044 	movi	r17,1
10015ac4:	053fffc4 	movi	r20,-1
10015ac8:	10000d26 	beq	r2,zero,10015b00 <_strtoull_r+0x160>
10015acc:	44fff404 	addi	r19,r8,-48
10015ad0:	9f00110e 	bge	r19,fp,10015b18 <_strtoull_r+0x178>
10015ad4:	3d000426 	beq	r7,r20,10015ae8 <_strtoull_r+0x148>
10015ad8:	b9400236 	bltu	r23,r5,10015ae4 <_strtoull_r+0x144>
10015adc:	2dc0291e 	bne	r5,r23,10015b84 <_strtoull_r+0x1e4>
10015ae0:	8100282e 	bgeu	r16,r4,10015b84 <_strtoull_r+0x1e4>
10015ae4:	01ffffc4 	movi	r7,-1
10015ae8:	aa000003 	ldbu	r8,0(r21)
10015aec:	ad400044 	addi	r21,r21,1
10015af0:	b205883a 	add	r2,r22,r8
10015af4:	11800043 	ldbu	r6,1(r2)
10015af8:	3080010c 	andi	r2,r6,4
10015afc:	103ff31e 	bne	r2,zero,10015acc <__alt_data_end+0xf8015acc>
10015b00:	318000cc 	andi	r6,r6,3
10015b04:	30000426 	beq	r6,zero,10015b18 <_strtoull_r+0x178>
10015b08:	34402a26 	beq	r6,r17,10015bb4 <_strtoull_r+0x214>
10015b0c:	00c015c4 	movi	r3,87
10015b10:	40e7c83a 	sub	r19,r8,r3
10015b14:	9f3fef16 	blt	r19,fp,10015ad4 <__alt_data_end+0xf8015ad4>
10015b18:	38002c16 	blt	r7,zero,10015bcc <_strtoull_r+0x22c>
10015b1c:	d8c00417 	ldw	r3,16(sp)
10015b20:	18000426 	beq	r3,zero,10015b34 <_strtoull_r+0x194>
10015b24:	0109c83a 	sub	r4,zero,r4
10015b28:	2004c03a 	cmpne	r2,r4,zero
10015b2c:	0151c83a 	sub	r8,zero,r5
10015b30:	408bc83a 	sub	r5,r8,r2
10015b34:	d8800117 	ldw	r2,4(sp)
10015b38:	10000426 	beq	r2,zero,10015b4c <_strtoull_r+0x1ac>
10015b3c:	dd000217 	ldw	r20,8(sp)
10015b40:	3800291e 	bne	r7,zero,10015be8 <_strtoull_r+0x248>
10015b44:	d8c00117 	ldw	r3,4(sp)
10015b48:	1d000015 	stw	r20,0(r3)
10015b4c:	2005883a 	mov	r2,r4
10015b50:	2807883a 	mov	r3,r5
10015b54:	dfc01017 	ldw	ra,64(sp)
10015b58:	df000f17 	ldw	fp,60(sp)
10015b5c:	ddc00e17 	ldw	r23,56(sp)
10015b60:	dd800d17 	ldw	r22,52(sp)
10015b64:	dd400c17 	ldw	r21,48(sp)
10015b68:	dd000b17 	ldw	r20,44(sp)
10015b6c:	dcc00a17 	ldw	r19,40(sp)
10015b70:	dc800917 	ldw	r18,36(sp)
10015b74:	dc400817 	ldw	r17,32(sp)
10015b78:	dc000717 	ldw	r16,28(sp)
10015b7c:	dec01104 	addi	sp,sp,68
10015b80:	f800283a 	ret
10015b84:	24000d26 	beq	r4,r16,10015bbc <_strtoull_r+0x21c>
10015b88:	d9800017 	ldw	r6,0(sp)
10015b8c:	900f883a 	mov	r7,r18
10015b90:	001c42c0 	call	1001c42c <__muldi3>
10015b94:	980bd7fa 	srai	r5,r19,31
10015b98:	9885883a 	add	r2,r19,r2
10015b9c:	14d1803a 	cmpltu	r8,r2,r19
10015ba0:	28c7883a 	add	r3,r5,r3
10015ba4:	1009883a 	mov	r4,r2
10015ba8:	40cb883a 	add	r5,r8,r3
10015bac:	01c00044 	movi	r7,1
10015bb0:	003fcd06 	br	10015ae8 <__alt_data_end+0xf8015ae8>
10015bb4:	00c00dc4 	movi	r3,55
10015bb8:	003fd506 	br	10015b10 <__alt_data_end+0xf8015b10>
10015bbc:	2dfff21e 	bne	r5,r23,10015b88 <__alt_data_end+0xf8015b88>
10015bc0:	d8c00317 	ldw	r3,12(sp)
10015bc4:	1cffc716 	blt	r3,r19,10015ae4 <__alt_data_end+0xf8015ae4>
10015bc8:	003fef06 	br	10015b88 <__alt_data_end+0xf8015b88>
10015bcc:	d8c00517 	ldw	r3,20(sp)
10015bd0:	00800884 	movi	r2,34
10015bd4:	013fffc4 	movi	r4,-1
10015bd8:	18800015 	stw	r2,0(r3)
10015bdc:	d8800117 	ldw	r2,4(sp)
10015be0:	200b883a 	mov	r5,r4
10015be4:	103fd926 	beq	r2,zero,10015b4c <__alt_data_end+0xf8015b4c>
10015be8:	ad3fffc4 	addi	r20,r21,-1
10015bec:	003fd506 	br	10015b44 <__alt_data_end+0xf8015b44>
10015bf0:	00800044 	movi	r2,1
10015bf4:	1c400084 	addi	r17,r3,2
10015bf8:	1a000043 	ldbu	r8,1(r3)
10015bfc:	d8800415 	stw	r2,16(sp)
10015c00:	003f8706 	br	10015a20 <__alt_data_end+0xf8015a20>
10015c04:	1c400084 	addi	r17,r3,2
10015c08:	1a000043 	ldbu	r8,1(r3)
10015c0c:	d8000415 	stw	zero,16(sp)
10015c10:	003f8306 	br	10015a20 <__alt_data_end+0xf8015a20>
10015c14:	88800003 	ldbu	r2,0(r17)
10015c18:	00c01604 	movi	r3,88
10015c1c:	108037cc 	andi	r2,r2,223
10015c20:	10c01026 	beq	r2,r3,10015c64 <_strtoull_r+0x2c4>
10015c24:	00c00204 	movi	r3,8
10015c28:	008001c4 	movi	r2,7
10015c2c:	043fffc4 	movi	r16,-1
10015c30:	05c80034 	movhi	r23,8192
10015c34:	d8c00015 	stw	r3,0(sp)
10015c38:	d8800315 	stw	r2,12(sp)
10015c3c:	bc2f883a 	add	r23,r23,r16
10015c40:	0025883a 	mov	r18,zero
10015c44:	1839883a 	mov	fp,r3
10015c48:	003f9606 	br	10015aa4 <__alt_data_end+0xf8015aa4>
10015c4c:	00800c04 	movi	r2,48
10015c50:	4080101e 	bne	r8,r2,10015c94 <_strtoull_r+0x2f4>
10015c54:	88800003 	ldbu	r2,0(r17)
10015c58:	00c01604 	movi	r3,88
10015c5c:	108037cc 	andi	r2,r2,223
10015c60:	10c0141e 	bne	r2,r3,10015cb4 <_strtoull_r+0x314>
10015c64:	00c00404 	movi	r3,16
10015c68:	008003c4 	movi	r2,15
10015c6c:	043fffc4 	movi	r16,-1
10015c70:	05c40034 	movhi	r23,4096
10015c74:	8a000043 	ldbu	r8,1(r17)
10015c78:	d8c00015 	stw	r3,0(sp)
10015c7c:	d8800315 	stw	r2,12(sp)
10015c80:	8c400084 	addi	r17,r17,2
10015c84:	bc2f883a 	add	r23,r23,r16
10015c88:	0025883a 	mov	r18,zero
10015c8c:	1839883a 	mov	fp,r3
10015c90:	003f8406 	br	10015aa4 <__alt_data_end+0xf8015aa4>
10015c94:	008003c4 	movi	r2,15
10015c98:	d8800315 	stw	r2,12(sp)
10015c9c:	043fffc4 	movi	r16,-1
10015ca0:	05c40034 	movhi	r23,4096
10015ca4:	bc2f883a 	add	r23,r23,r16
10015ca8:	df000015 	stw	fp,0(sp)
10015cac:	0025883a 	mov	r18,zero
10015cb0:	003f7c06 	br	10015aa4 <__alt_data_end+0xf8015aa4>
10015cb4:	00c003c4 	movi	r3,15
10015cb8:	d8c00315 	stw	r3,12(sp)
10015cbc:	003ff706 	br	10015c9c <__alt_data_end+0xf8015c9c>

10015cc0 <___svfprintf_internal_r>:
10015cc0:	deffb704 	addi	sp,sp,-292
10015cc4:	dfc04815 	stw	ra,288(sp)
10015cc8:	ddc04615 	stw	r23,280(sp)
10015ccc:	d9402d15 	stw	r5,180(sp)
10015cd0:	d9003915 	stw	r4,228(sp)
10015cd4:	302f883a 	mov	r23,r6
10015cd8:	d9c02e15 	stw	r7,184(sp)
10015cdc:	df004715 	stw	fp,284(sp)
10015ce0:	dd804515 	stw	r22,276(sp)
10015ce4:	dd404415 	stw	r21,272(sp)
10015ce8:	dd004315 	stw	r20,268(sp)
10015cec:	dcc04215 	stw	r19,264(sp)
10015cf0:	dc804115 	stw	r18,260(sp)
10015cf4:	dc404015 	stw	r17,256(sp)
10015cf8:	dc003f15 	stw	r16,252(sp)
10015cfc:	0010cc00 	call	10010cc0 <_localeconv_r>
10015d00:	10800017 	ldw	r2,0(r2)
10015d04:	1009883a 	mov	r4,r2
10015d08:	d8803415 	stw	r2,208(sp)
10015d0c:	0009fe40 	call	10009fe4 <strlen>
10015d10:	d8c02d17 	ldw	r3,180(sp)
10015d14:	d8803815 	stw	r2,224(sp)
10015d18:	1880030b 	ldhu	r2,12(r3)
10015d1c:	1080200c 	andi	r2,r2,128
10015d20:	10000226 	beq	r2,zero,10015d2c <___svfprintf_internal_r+0x6c>
10015d24:	18800417 	ldw	r2,16(r3)
10015d28:	1006b126 	beq	r2,zero,100177f0 <___svfprintf_internal_r+0x1b30>
10015d2c:	dcc03917 	ldw	r19,228(sp)
10015d30:	d8c00404 	addi	r3,sp,16
10015d34:	054400b4 	movhi	r21,4098
10015d38:	d9001e04 	addi	r4,sp,120
10015d3c:	ad4c7304 	addi	r21,r21,12748
10015d40:	d8c01e15 	stw	r3,120(sp)
10015d44:	d8002015 	stw	zero,128(sp)
10015d48:	d8001f15 	stw	zero,124(sp)
10015d4c:	d8003315 	stw	zero,204(sp)
10015d50:	d8003615 	stw	zero,216(sp)
10015d54:	d8003715 	stw	zero,220(sp)
10015d58:	1811883a 	mov	r8,r3
10015d5c:	d8003a15 	stw	zero,232(sp)
10015d60:	d8003b15 	stw	zero,236(sp)
10015d64:	d8002f15 	stw	zero,188(sp)
10015d68:	d9002815 	stw	r4,160(sp)
10015d6c:	b8800007 	ldb	r2,0(r23)
10015d70:	10027726 	beq	r2,zero,10016750 <___svfprintf_internal_r+0xa90>
10015d74:	00c00944 	movi	r3,37
10015d78:	b823883a 	mov	r17,r23
10015d7c:	10c0021e 	bne	r2,r3,10015d88 <___svfprintf_internal_r+0xc8>
10015d80:	00001406 	br	10015dd4 <___svfprintf_internal_r+0x114>
10015d84:	10c00326 	beq	r2,r3,10015d94 <___svfprintf_internal_r+0xd4>
10015d88:	8c400044 	addi	r17,r17,1
10015d8c:	88800007 	ldb	r2,0(r17)
10015d90:	103ffc1e 	bne	r2,zero,10015d84 <__alt_data_end+0xf8015d84>
10015d94:	8de1c83a 	sub	r16,r17,r23
10015d98:	80000e26 	beq	r16,zero,10015dd4 <___svfprintf_internal_r+0x114>
10015d9c:	d8c02017 	ldw	r3,128(sp)
10015da0:	d8801f17 	ldw	r2,124(sp)
10015da4:	45c00015 	stw	r23,0(r8)
10015da8:	1c07883a 	add	r3,r3,r16
10015dac:	10800044 	addi	r2,r2,1
10015db0:	d8c02015 	stw	r3,128(sp)
10015db4:	44000115 	stw	r16,4(r8)
10015db8:	d8801f15 	stw	r2,124(sp)
10015dbc:	00c001c4 	movi	r3,7
10015dc0:	18809916 	blt	r3,r2,10016028 <___svfprintf_internal_r+0x368>
10015dc4:	42000204 	addi	r8,r8,8
10015dc8:	d9402f17 	ldw	r5,188(sp)
10015dcc:	2c0b883a 	add	r5,r5,r16
10015dd0:	d9402f15 	stw	r5,188(sp)
10015dd4:	88800007 	ldb	r2,0(r17)
10015dd8:	10009a26 	beq	r2,zero,10016044 <___svfprintf_internal_r+0x384>
10015ddc:	8dc00044 	addi	r23,r17,1
10015de0:	8c400047 	ldb	r17,1(r17)
10015de4:	0021883a 	mov	r16,zero
10015de8:	00bfffc4 	movi	r2,-1
10015dec:	0025883a 	mov	r18,zero
10015df0:	dc002905 	stb	r16,164(sp)
10015df4:	d8002785 	stb	zero,158(sp)
10015df8:	d8002b05 	stb	zero,172(sp)
10015dfc:	d8802a15 	stw	r2,168(sp)
10015e00:	d8003115 	stw	zero,196(sp)
10015e04:	05001604 	movi	r20,88
10015e08:	05800244 	movi	r22,9
10015e0c:	4039883a 	mov	fp,r8
10015e10:	9021883a 	mov	r16,r18
10015e14:	bdc00044 	addi	r23,r23,1
10015e18:	88bff804 	addi	r2,r17,-32
10015e1c:	a0831e36 	bltu	r20,r2,10016a98 <___svfprintf_internal_r+0xdd8>
10015e20:	100490ba 	slli	r2,r2,2
10015e24:	00c40074 	movhi	r3,4097
10015e28:	18d78e04 	addi	r3,r3,24120
10015e2c:	10c5883a 	add	r2,r2,r3
10015e30:	10800017 	ldw	r2,0(r2)
10015e34:	1000683a 	jmp	r2
10015e38:	100169e0 	cmpeqi	zero,r2,1447
10015e3c:	10016a98 	cmpnei	zero,r2,1450
10015e40:	10016a98 	cmpnei	zero,r2,1450
10015e44:	100169d4 	ori	zero,r2,1447
10015e48:	10016a98 	cmpnei	zero,r2,1450
10015e4c:	10016a98 	cmpnei	zero,r2,1450
10015e50:	10016a98 	cmpnei	zero,r2,1450
10015e54:	10016a98 	cmpnei	zero,r2,1450
10015e58:	10016a98 	cmpnei	zero,r2,1450
10015e5c:	10016a98 	cmpnei	zero,r2,1450
10015e60:	100160a0 	cmpeqi	zero,r2,1410
10015e64:	100168e4 	muli	zero,r2,1443
10015e68:	10016a98 	cmpnei	zero,r2,1450
10015e6c:	10015fac 	andhi	zero,r2,1406
10015e70:	100160c4 	addi	zero,r2,1411
10015e74:	10016a98 	cmpnei	zero,r2,1450
10015e78:	10016150 	cmplti	zero,r2,1413
10015e7c:	10016114 	ori	zero,r2,1412
10015e80:	10016114 	ori	zero,r2,1412
10015e84:	10016114 	ori	zero,r2,1412
10015e88:	10016114 	ori	zero,r2,1412
10015e8c:	10016114 	ori	zero,r2,1412
10015e90:	10016114 	ori	zero,r2,1412
10015e94:	10016114 	ori	zero,r2,1412
10015e98:	10016114 	ori	zero,r2,1412
10015e9c:	10016114 	ori	zero,r2,1412
10015ea0:	10016a98 	cmpnei	zero,r2,1450
10015ea4:	10016a98 	cmpnei	zero,r2,1450
10015ea8:	10016a98 	cmpnei	zero,r2,1450
10015eac:	10016a98 	cmpnei	zero,r2,1450
10015eb0:	10016a98 	cmpnei	zero,r2,1450
10015eb4:	10016a98 	cmpnei	zero,r2,1450
10015eb8:	10016a98 	cmpnei	zero,r2,1450
10015ebc:	10016a98 	cmpnei	zero,r2,1450
10015ec0:	10016a98 	cmpnei	zero,r2,1450
10015ec4:	10016a98 	cmpnei	zero,r2,1450
10015ec8:	10016214 	ori	zero,r2,1416
10015ecc:	1001615c 	xori	zero,r2,1413
10015ed0:	10016a98 	cmpnei	zero,r2,1450
10015ed4:	1001615c 	xori	zero,r2,1413
10015ed8:	10016a98 	cmpnei	zero,r2,1450
10015edc:	10016a98 	cmpnei	zero,r2,1450
10015ee0:	10016a98 	cmpnei	zero,r2,1450
10015ee4:	10016a98 	cmpnei	zero,r2,1450
10015ee8:	10016208 	cmpgei	zero,r2,1416
10015eec:	10016a98 	cmpnei	zero,r2,1450
10015ef0:	10016a98 	cmpnei	zero,r2,1450
10015ef4:	100162dc 	xori	zero,r2,1419
10015ef8:	10016a98 	cmpnei	zero,r2,1450
10015efc:	10016a98 	cmpnei	zero,r2,1450
10015f00:	10016a98 	cmpnei	zero,r2,1450
10015f04:	10016a98 	cmpnei	zero,r2,1450
10015f08:	10016a98 	cmpnei	zero,r2,1450
10015f0c:	10016758 	cmpnei	zero,r2,1437
10015f10:	10016a98 	cmpnei	zero,r2,1450
10015f14:	10016a98 	cmpnei	zero,r2,1450
10015f18:	100167c4 	addi	zero,r2,1439
10015f1c:	10016a98 	cmpnei	zero,r2,1450
10015f20:	10016a98 	cmpnei	zero,r2,1450
10015f24:	10016a98 	cmpnei	zero,r2,1450
10015f28:	10016a98 	cmpnei	zero,r2,1450
10015f2c:	10016a98 	cmpnei	zero,r2,1450
10015f30:	10016a98 	cmpnei	zero,r2,1450
10015f34:	10016a98 	cmpnei	zero,r2,1450
10015f38:	10016a98 	cmpnei	zero,r2,1450
10015f3c:	10016a98 	cmpnei	zero,r2,1450
10015f40:	10016a98 	cmpnei	zero,r2,1450
10015f44:	10016880 	call	11001688 <_gp+0xfd423c>
10015f48:	10016a00 	call	110016a0 <_gp+0xfd4254>
10015f4c:	1001615c 	xori	zero,r2,1413
10015f50:	1001615c 	xori	zero,r2,1413
10015f54:	1001615c 	xori	zero,r2,1413
10015f58:	10016a74 	orhi	zero,r2,1449
10015f5c:	10016a00 	call	110016a0 <_gp+0xfd4254>
10015f60:	10016a98 	cmpnei	zero,r2,1450
10015f64:	10016a98 	cmpnei	zero,r2,1450
10015f68:	10016a20 	cmpeqi	zero,r2,1448
10015f6c:	10016a98 	cmpnei	zero,r2,1450
10015f70:	10016a34 	orhi	zero,r2,1448
10015f74:	100168c4 	addi	zero,r2,1443
10015f78:	10015fb8 	rdprs	zero,r2,1406
10015f7c:	100168fc 	xorhi	zero,r2,1443
10015f80:	10016a98 	cmpnei	zero,r2,1450
10015f84:	10016908 	cmpgei	zero,r2,1444
10015f88:	10016a98 	cmpnei	zero,r2,1450
10015f8c:	1001696c 	andhi	zero,r2,1445
10015f90:	10016a98 	cmpnei	zero,r2,1450
10015f94:	10016a98 	cmpnei	zero,r2,1450
10015f98:	1001698c 	andi	zero,r2,1446
10015f9c:	d8c03117 	ldw	r3,196(sp)
10015fa0:	d8802e15 	stw	r2,184(sp)
10015fa4:	00c7c83a 	sub	r3,zero,r3
10015fa8:	d8c03115 	stw	r3,196(sp)
10015fac:	84000114 	ori	r16,r16,4
10015fb0:	bc400007 	ldb	r17,0(r23)
10015fb4:	003f9706 	br	10015e14 <__alt_data_end+0xf8015e14>
10015fb8:	00800c04 	movi	r2,48
10015fbc:	d8802705 	stb	r2,156(sp)
10015fc0:	00801e04 	movi	r2,120
10015fc4:	d8802745 	stb	r2,157(sp)
10015fc8:	d9002a17 	ldw	r4,168(sp)
10015fcc:	d8802e17 	ldw	r2,184(sp)
10015fd0:	d8002785 	stb	zero,158(sp)
10015fd4:	e011883a 	mov	r8,fp
10015fd8:	10c00104 	addi	r3,r2,4
10015fdc:	15000017 	ldw	r20,0(r2)
10015fe0:	002d883a 	mov	r22,zero
10015fe4:	80800094 	ori	r2,r16,2
10015fe8:	2002b616 	blt	r4,zero,10016ac4 <___svfprintf_internal_r+0xe04>
10015fec:	00bfdfc4 	movi	r2,-129
10015ff0:	80a4703a 	and	r18,r16,r2
10015ff4:	d8c02e15 	stw	r3,184(sp)
10015ff8:	94800094 	ori	r18,r18,2
10015ffc:	a002a01e 	bne	r20,zero,10016a80 <___svfprintf_internal_r+0xdc0>
10016000:	014400b4 	movhi	r5,4098
10016004:	294b5004 	addi	r5,r5,11584
10016008:	d9403a15 	stw	r5,232(sp)
1001600c:	04401e04 	movi	r17,120
10016010:	d8c02a17 	ldw	r3,168(sp)
10016014:	0039883a 	mov	fp,zero
10016018:	1801e626 	beq	r3,zero,100167b4 <___svfprintf_internal_r+0xaf4>
1001601c:	0029883a 	mov	r20,zero
10016020:	002d883a 	mov	r22,zero
10016024:	00020506 	br	1001683c <___svfprintf_internal_r+0xb7c>
10016028:	d9402d17 	ldw	r5,180(sp)
1001602c:	d9801e04 	addi	r6,sp,120
10016030:	9809883a 	mov	r4,r19
10016034:	001acd40 	call	1001acd4 <__ssprint_r>
10016038:	1000081e 	bne	r2,zero,1001605c <___svfprintf_internal_r+0x39c>
1001603c:	da000404 	addi	r8,sp,16
10016040:	003f6106 	br	10015dc8 <__alt_data_end+0xf8015dc8>
10016044:	d8802017 	ldw	r2,128(sp)
10016048:	10000426 	beq	r2,zero,1001605c <___svfprintf_internal_r+0x39c>
1001604c:	d9402d17 	ldw	r5,180(sp)
10016050:	d9003917 	ldw	r4,228(sp)
10016054:	d9801e04 	addi	r6,sp,120
10016058:	001acd40 	call	1001acd4 <__ssprint_r>
1001605c:	d8802d17 	ldw	r2,180(sp)
10016060:	10c0030b 	ldhu	r3,12(r2)
10016064:	d8802f17 	ldw	r2,188(sp)
10016068:	18c0100c 	andi	r3,r3,64
1001606c:	1806251e 	bne	r3,zero,10017904 <___svfprintf_internal_r+0x1c44>
10016070:	dfc04817 	ldw	ra,288(sp)
10016074:	df004717 	ldw	fp,284(sp)
10016078:	ddc04617 	ldw	r23,280(sp)
1001607c:	dd804517 	ldw	r22,276(sp)
10016080:	dd404417 	ldw	r21,272(sp)
10016084:	dd004317 	ldw	r20,268(sp)
10016088:	dcc04217 	ldw	r19,264(sp)
1001608c:	dc804117 	ldw	r18,260(sp)
10016090:	dc404017 	ldw	r17,256(sp)
10016094:	dc003f17 	ldw	r16,252(sp)
10016098:	dec04904 	addi	sp,sp,292
1001609c:	f800283a 	ret
100160a0:	d9002e17 	ldw	r4,184(sp)
100160a4:	d9402e17 	ldw	r5,184(sp)
100160a8:	21000017 	ldw	r4,0(r4)
100160ac:	28800104 	addi	r2,r5,4
100160b0:	d9003115 	stw	r4,196(sp)
100160b4:	203fb916 	blt	r4,zero,10015f9c <__alt_data_end+0xf8015f9c>
100160b8:	d8802e15 	stw	r2,184(sp)
100160bc:	bc400007 	ldb	r17,0(r23)
100160c0:	003f5406 	br	10015e14 <__alt_data_end+0xf8015e14>
100160c4:	bc400007 	ldb	r17,0(r23)
100160c8:	01000a84 	movi	r4,42
100160cc:	b8c00044 	addi	r3,r23,1
100160d0:	89076926 	beq	r17,r4,10017e78 <___svfprintf_internal_r+0x21b8>
100160d4:	8cbff404 	addi	r18,r17,-48
100160d8:	b486b936 	bltu	r22,r18,10017bc0 <___svfprintf_internal_r+0x1f00>
100160dc:	0009883a 	mov	r4,zero
100160e0:	1823883a 	mov	r17,r3
100160e4:	01400284 	movi	r5,10
100160e8:	0008ef00 	call	10008ef0 <__mulsi3>
100160ec:	88c00007 	ldb	r3,0(r17)
100160f0:	1489883a 	add	r4,r2,r18
100160f4:	8dc00044 	addi	r23,r17,1
100160f8:	1cbff404 	addi	r18,r3,-48
100160fc:	b823883a 	mov	r17,r23
10016100:	b4bff82e 	bgeu	r22,r18,100160e4 <__alt_data_end+0xf80160e4>
10016104:	1823883a 	mov	r17,r3
10016108:	20060416 	blt	r4,zero,1001791c <___svfprintf_internal_r+0x1c5c>
1001610c:	d9002a15 	stw	r4,168(sp)
10016110:	003f4106 	br	10015e18 <__alt_data_end+0xf8015e18>
10016114:	8cbff404 	addi	r18,r17,-48
10016118:	d8003115 	stw	zero,196(sp)
1001611c:	0009883a 	mov	r4,zero
10016120:	b823883a 	mov	r17,r23
10016124:	01400284 	movi	r5,10
10016128:	0008ef00 	call	10008ef0 <__mulsi3>
1001612c:	88c00007 	ldb	r3,0(r17)
10016130:	9089883a 	add	r4,r18,r2
10016134:	bdc00044 	addi	r23,r23,1
10016138:	1cbff404 	addi	r18,r3,-48
1001613c:	b823883a 	mov	r17,r23
10016140:	b4bff82e 	bgeu	r22,r18,10016124 <__alt_data_end+0xf8016124>
10016144:	1823883a 	mov	r17,r3
10016148:	d9003115 	stw	r4,196(sp)
1001614c:	003f3206 	br	10015e18 <__alt_data_end+0xf8015e18>
10016150:	84002014 	ori	r16,r16,128
10016154:	bc400007 	ldb	r17,0(r23)
10016158:	003f2e06 	br	10015e14 <__alt_data_end+0xf8015e14>
1001615c:	8025883a 	mov	r18,r16
10016160:	dc002903 	ldbu	r16,164(sp)
10016164:	e011883a 	mov	r8,fp
10016168:	84003fcc 	andi	r16,r16,255
1001616c:	8007721e 	bne	r16,zero,10017f38 <___svfprintf_internal_r+0x2278>
10016170:	9080020c 	andi	r2,r18,8
10016174:	1004a526 	beq	r2,zero,1001740c <___svfprintf_internal_r+0x174c>
10016178:	d9002e17 	ldw	r4,184(sp)
1001617c:	d9402e17 	ldw	r5,184(sp)
10016180:	d8802e17 	ldw	r2,184(sp)
10016184:	21000017 	ldw	r4,0(r4)
10016188:	29400117 	ldw	r5,4(r5)
1001618c:	10800204 	addi	r2,r2,8
10016190:	d9003615 	stw	r4,216(sp)
10016194:	d9403715 	stw	r5,220(sp)
10016198:	d8802e15 	stw	r2,184(sp)
1001619c:	d9003617 	ldw	r4,216(sp)
100161a0:	d9403717 	ldw	r5,220(sp)
100161a4:	da003e15 	stw	r8,248(sp)
100161a8:	04000044 	movi	r16,1
100161ac:	00135b80 	call	100135b8 <__fpclassifyd>
100161b0:	da003e17 	ldw	r8,248(sp)
100161b4:	1404731e 	bne	r2,r16,10017384 <___svfprintf_internal_r+0x16c4>
100161b8:	d9003617 	ldw	r4,216(sp)
100161bc:	d9403717 	ldw	r5,220(sp)
100161c0:	000d883a 	mov	r6,zero
100161c4:	000f883a 	mov	r7,zero
100161c8:	001dd780 	call	1001dd78 <__ledf2>
100161cc:	da003e17 	ldw	r8,248(sp)
100161d0:	10061b16 	blt	r2,zero,10017a40 <___svfprintf_internal_r+0x1d80>
100161d4:	df002783 	ldbu	fp,158(sp)
100161d8:	008011c4 	movi	r2,71
100161dc:	1445810e 	bge	r2,r17,100177e4 <___svfprintf_internal_r+0x1b24>
100161e0:	040400b4 	movhi	r16,4098
100161e4:	840b4804 	addi	r16,r16,11552
100161e8:	00c000c4 	movi	r3,3
100161ec:	00bfdfc4 	movi	r2,-129
100161f0:	d8c02915 	stw	r3,164(sp)
100161f4:	90a4703a 	and	r18,r18,r2
100161f8:	d8c02b15 	stw	r3,172(sp)
100161fc:	d8002a15 	stw	zero,168(sp)
10016200:	d8003215 	stw	zero,200(sp)
10016204:	00006c06 	br	100163b8 <___svfprintf_internal_r+0x6f8>
10016208:	84000214 	ori	r16,r16,8
1001620c:	bc400007 	ldb	r17,0(r23)
10016210:	003f0006 	br	10015e14 <__alt_data_end+0xf8015e14>
10016214:	8025883a 	mov	r18,r16
10016218:	dc002903 	ldbu	r16,164(sp)
1001621c:	e011883a 	mov	r8,fp
10016220:	84003fcc 	andi	r16,r16,255
10016224:	80073f1e 	bne	r16,zero,10017f24 <___svfprintf_internal_r+0x2264>
10016228:	94800414 	ori	r18,r18,16
1001622c:	9080080c 	andi	r2,r18,32
10016230:	1003bb26 	beq	r2,zero,10017120 <___svfprintf_internal_r+0x1460>
10016234:	d9002e17 	ldw	r4,184(sp)
10016238:	20800117 	ldw	r2,4(r4)
1001623c:	25000017 	ldw	r20,0(r4)
10016240:	21000204 	addi	r4,r4,8
10016244:	d9002e15 	stw	r4,184(sp)
10016248:	102d883a 	mov	r22,r2
1001624c:	1003bd16 	blt	r2,zero,10017144 <___svfprintf_internal_r+0x1484>
10016250:	d9002a17 	ldw	r4,168(sp)
10016254:	df002783 	ldbu	fp,158(sp)
10016258:	2003d016 	blt	r4,zero,1001719c <___svfprintf_internal_r+0x14dc>
1001625c:	00ffdfc4 	movi	r3,-129
10016260:	a584b03a 	or	r2,r20,r22
10016264:	90e4703a 	and	r18,r18,r3
10016268:	10015026 	beq	r2,zero,100167ac <___svfprintf_internal_r+0xaec>
1001626c:	b0037026 	beq	r22,zero,10017030 <___svfprintf_internal_r+0x1370>
10016270:	dc402915 	stw	r17,164(sp)
10016274:	dc001e04 	addi	r16,sp,120
10016278:	b023883a 	mov	r17,r22
1001627c:	402d883a 	mov	r22,r8
10016280:	a009883a 	mov	r4,r20
10016284:	880b883a 	mov	r5,r17
10016288:	01800284 	movi	r6,10
1001628c:	000f883a 	mov	r7,zero
10016290:	001cba80 	call	1001cba8 <__umoddi3>
10016294:	10800c04 	addi	r2,r2,48
10016298:	843fffc4 	addi	r16,r16,-1
1001629c:	a009883a 	mov	r4,r20
100162a0:	880b883a 	mov	r5,r17
100162a4:	80800005 	stb	r2,0(r16)
100162a8:	01800284 	movi	r6,10
100162ac:	000f883a 	mov	r7,zero
100162b0:	001c5ac0 	call	1001c5ac <__udivdi3>
100162b4:	1029883a 	mov	r20,r2
100162b8:	10c4b03a 	or	r2,r2,r3
100162bc:	1823883a 	mov	r17,r3
100162c0:	103fef1e 	bne	r2,zero,10016280 <__alt_data_end+0xf8016280>
100162c4:	d8c02817 	ldw	r3,160(sp)
100162c8:	dc402917 	ldw	r17,164(sp)
100162cc:	b011883a 	mov	r8,r22
100162d0:	1c07c83a 	sub	r3,r3,r16
100162d4:	d8c02b15 	stw	r3,172(sp)
100162d8:	00003106 	br	100163a0 <___svfprintf_internal_r+0x6e0>
100162dc:	8025883a 	mov	r18,r16
100162e0:	dc002903 	ldbu	r16,164(sp)
100162e4:	e011883a 	mov	r8,fp
100162e8:	84003fcc 	andi	r16,r16,255
100162ec:	80070a1e 	bne	r16,zero,10017f18 <___svfprintf_internal_r+0x2258>
100162f0:	94800414 	ori	r18,r18,16
100162f4:	9080080c 	andi	r2,r18,32
100162f8:	1002f626 	beq	r2,zero,10016ed4 <___svfprintf_internal_r+0x1214>
100162fc:	d9002e17 	ldw	r4,184(sp)
10016300:	d9402a17 	ldw	r5,168(sp)
10016304:	d8002785 	stb	zero,158(sp)
10016308:	20800204 	addi	r2,r4,8
1001630c:	25000017 	ldw	r20,0(r4)
10016310:	25800117 	ldw	r22,4(r4)
10016314:	28043716 	blt	r5,zero,100173f4 <___svfprintf_internal_r+0x1734>
10016318:	013fdfc4 	movi	r4,-129
1001631c:	a586b03a 	or	r3,r20,r22
10016320:	d8802e15 	stw	r2,184(sp)
10016324:	9124703a 	and	r18,r18,r4
10016328:	1802f71e 	bne	r3,zero,10016f08 <___svfprintf_internal_r+0x1248>
1001632c:	d9402a17 	ldw	r5,168(sp)
10016330:	0039883a 	mov	fp,zero
10016334:	2806df26 	beq	r5,zero,10017eb4 <___svfprintf_internal_r+0x21f4>
10016338:	0029883a 	mov	r20,zero
1001633c:	002d883a 	mov	r22,zero
10016340:	dc001e04 	addi	r16,sp,120
10016344:	a006d0fa 	srli	r3,r20,3
10016348:	b008977a 	slli	r4,r22,29
1001634c:	b02cd0fa 	srli	r22,r22,3
10016350:	a50001cc 	andi	r20,r20,7
10016354:	a0800c04 	addi	r2,r20,48
10016358:	843fffc4 	addi	r16,r16,-1
1001635c:	20e8b03a 	or	r20,r4,r3
10016360:	80800005 	stb	r2,0(r16)
10016364:	a586b03a 	or	r3,r20,r22
10016368:	183ff61e 	bne	r3,zero,10016344 <__alt_data_end+0xf8016344>
1001636c:	90c0004c 	andi	r3,r18,1
10016370:	18013f26 	beq	r3,zero,10016870 <___svfprintf_internal_r+0xbb0>
10016374:	10803fcc 	andi	r2,r2,255
10016378:	1080201c 	xori	r2,r2,128
1001637c:	10bfe004 	addi	r2,r2,-128
10016380:	00c00c04 	movi	r3,48
10016384:	10c13a26 	beq	r2,r3,10016870 <___svfprintf_internal_r+0xbb0>
10016388:	80ffffc5 	stb	r3,-1(r16)
1001638c:	d8c02817 	ldw	r3,160(sp)
10016390:	80bfffc4 	addi	r2,r16,-1
10016394:	1021883a 	mov	r16,r2
10016398:	1887c83a 	sub	r3,r3,r2
1001639c:	d8c02b15 	stw	r3,172(sp)
100163a0:	d8802b17 	ldw	r2,172(sp)
100163a4:	d9002a17 	ldw	r4,168(sp)
100163a8:	1100010e 	bge	r2,r4,100163b0 <___svfprintf_internal_r+0x6f0>
100163ac:	2005883a 	mov	r2,r4
100163b0:	d8802915 	stw	r2,164(sp)
100163b4:	d8003215 	stw	zero,200(sp)
100163b8:	e7003fcc 	andi	fp,fp,255
100163bc:	e700201c 	xori	fp,fp,128
100163c0:	e73fe004 	addi	fp,fp,-128
100163c4:	e0000326 	beq	fp,zero,100163d4 <___svfprintf_internal_r+0x714>
100163c8:	d8c02917 	ldw	r3,164(sp)
100163cc:	18c00044 	addi	r3,r3,1
100163d0:	d8c02915 	stw	r3,164(sp)
100163d4:	90c0008c 	andi	r3,r18,2
100163d8:	d8c02c15 	stw	r3,176(sp)
100163dc:	18000326 	beq	r3,zero,100163ec <___svfprintf_internal_r+0x72c>
100163e0:	d8c02917 	ldw	r3,164(sp)
100163e4:	18c00084 	addi	r3,r3,2
100163e8:	d8c02915 	stw	r3,164(sp)
100163ec:	90c0210c 	andi	r3,r18,132
100163f0:	d8c03015 	stw	r3,192(sp)
100163f4:	1801c31e 	bne	r3,zero,10016b04 <___svfprintf_internal_r+0xe44>
100163f8:	d9003117 	ldw	r4,196(sp)
100163fc:	d8c02917 	ldw	r3,164(sp)
10016400:	20e9c83a 	sub	r20,r4,r3
10016404:	0501bf0e 	bge	zero,r20,10016b04 <___svfprintf_internal_r+0xe44>
10016408:	02400404 	movi	r9,16
1001640c:	d8c02017 	ldw	r3,128(sp)
10016410:	d8801f17 	ldw	r2,124(sp)
10016414:	4d053d0e 	bge	r9,r20,1001790c <___svfprintf_internal_r+0x1c4c>
10016418:	014400b4 	movhi	r5,4098
1001641c:	294c7704 	addi	r5,r5,12764
10016420:	dc403c15 	stw	r17,240(sp)
10016424:	d9403515 	stw	r5,212(sp)
10016428:	a023883a 	mov	r17,r20
1001642c:	482d883a 	mov	r22,r9
10016430:	9029883a 	mov	r20,r18
10016434:	070001c4 	movi	fp,7
10016438:	8025883a 	mov	r18,r16
1001643c:	dc002d17 	ldw	r16,180(sp)
10016440:	00000306 	br	10016450 <___svfprintf_internal_r+0x790>
10016444:	8c7ffc04 	addi	r17,r17,-16
10016448:	42000204 	addi	r8,r8,8
1001644c:	b440130e 	bge	r22,r17,1001649c <___svfprintf_internal_r+0x7dc>
10016450:	010400b4 	movhi	r4,4098
10016454:	18c00404 	addi	r3,r3,16
10016458:	10800044 	addi	r2,r2,1
1001645c:	210c7704 	addi	r4,r4,12764
10016460:	41000015 	stw	r4,0(r8)
10016464:	45800115 	stw	r22,4(r8)
10016468:	d8c02015 	stw	r3,128(sp)
1001646c:	d8801f15 	stw	r2,124(sp)
10016470:	e0bff40e 	bge	fp,r2,10016444 <__alt_data_end+0xf8016444>
10016474:	d9801e04 	addi	r6,sp,120
10016478:	800b883a 	mov	r5,r16
1001647c:	9809883a 	mov	r4,r19
10016480:	001acd40 	call	1001acd4 <__ssprint_r>
10016484:	103ef51e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016488:	8c7ffc04 	addi	r17,r17,-16
1001648c:	d8c02017 	ldw	r3,128(sp)
10016490:	d8801f17 	ldw	r2,124(sp)
10016494:	da000404 	addi	r8,sp,16
10016498:	b47fed16 	blt	r22,r17,10016450 <__alt_data_end+0xf8016450>
1001649c:	9021883a 	mov	r16,r18
100164a0:	a025883a 	mov	r18,r20
100164a4:	8829883a 	mov	r20,r17
100164a8:	dc403c17 	ldw	r17,240(sp)
100164ac:	d9403517 	ldw	r5,212(sp)
100164b0:	a0c7883a 	add	r3,r20,r3
100164b4:	10800044 	addi	r2,r2,1
100164b8:	41400015 	stw	r5,0(r8)
100164bc:	45000115 	stw	r20,4(r8)
100164c0:	d8c02015 	stw	r3,128(sp)
100164c4:	d8801f15 	stw	r2,124(sp)
100164c8:	010001c4 	movi	r4,7
100164cc:	2082c116 	blt	r4,r2,10016fd4 <___svfprintf_internal_r+0x1314>
100164d0:	df002787 	ldb	fp,158(sp)
100164d4:	42000204 	addi	r8,r8,8
100164d8:	e0000c26 	beq	fp,zero,1001650c <___svfprintf_internal_r+0x84c>
100164dc:	d8801f17 	ldw	r2,124(sp)
100164e0:	d9002784 	addi	r4,sp,158
100164e4:	18c00044 	addi	r3,r3,1
100164e8:	10800044 	addi	r2,r2,1
100164ec:	41000015 	stw	r4,0(r8)
100164f0:	01000044 	movi	r4,1
100164f4:	41000115 	stw	r4,4(r8)
100164f8:	d8c02015 	stw	r3,128(sp)
100164fc:	d8801f15 	stw	r2,124(sp)
10016500:	010001c4 	movi	r4,7
10016504:	20825a16 	blt	r4,r2,10016e70 <___svfprintf_internal_r+0x11b0>
10016508:	42000204 	addi	r8,r8,8
1001650c:	d8802c17 	ldw	r2,176(sp)
10016510:	10000c26 	beq	r2,zero,10016544 <___svfprintf_internal_r+0x884>
10016514:	d8801f17 	ldw	r2,124(sp)
10016518:	d9002704 	addi	r4,sp,156
1001651c:	18c00084 	addi	r3,r3,2
10016520:	10800044 	addi	r2,r2,1
10016524:	41000015 	stw	r4,0(r8)
10016528:	01000084 	movi	r4,2
1001652c:	41000115 	stw	r4,4(r8)
10016530:	d8c02015 	stw	r3,128(sp)
10016534:	d8801f15 	stw	r2,124(sp)
10016538:	010001c4 	movi	r4,7
1001653c:	20825416 	blt	r4,r2,10016e90 <___svfprintf_internal_r+0x11d0>
10016540:	42000204 	addi	r8,r8,8
10016544:	d9003017 	ldw	r4,192(sp)
10016548:	00802004 	movi	r2,128
1001654c:	2081b926 	beq	r4,r2,10016c34 <___svfprintf_internal_r+0xf74>
10016550:	d9402a17 	ldw	r5,168(sp)
10016554:	d8802b17 	ldw	r2,172(sp)
10016558:	28adc83a 	sub	r22,r5,r2
1001655c:	05802f0e 	bge	zero,r22,1001661c <___svfprintf_internal_r+0x95c>
10016560:	07000404 	movi	fp,16
10016564:	d8801f17 	ldw	r2,124(sp)
10016568:	e583e20e 	bge	fp,r22,100174f4 <___svfprintf_internal_r+0x1834>
1001656c:	014400b4 	movhi	r5,4098
10016570:	294c7304 	addi	r5,r5,12748
10016574:	dc402a15 	stw	r17,168(sp)
10016578:	d9402c15 	stw	r5,176(sp)
1001657c:	b023883a 	mov	r17,r22
10016580:	050001c4 	movi	r20,7
10016584:	902d883a 	mov	r22,r18
10016588:	8025883a 	mov	r18,r16
1001658c:	dc002d17 	ldw	r16,180(sp)
10016590:	00000306 	br	100165a0 <___svfprintf_internal_r+0x8e0>
10016594:	8c7ffc04 	addi	r17,r17,-16
10016598:	42000204 	addi	r8,r8,8
1001659c:	e440110e 	bge	fp,r17,100165e4 <___svfprintf_internal_r+0x924>
100165a0:	18c00404 	addi	r3,r3,16
100165a4:	10800044 	addi	r2,r2,1
100165a8:	45400015 	stw	r21,0(r8)
100165ac:	47000115 	stw	fp,4(r8)
100165b0:	d8c02015 	stw	r3,128(sp)
100165b4:	d8801f15 	stw	r2,124(sp)
100165b8:	a0bff60e 	bge	r20,r2,10016594 <__alt_data_end+0xf8016594>
100165bc:	d9801e04 	addi	r6,sp,120
100165c0:	800b883a 	mov	r5,r16
100165c4:	9809883a 	mov	r4,r19
100165c8:	001acd40 	call	1001acd4 <__ssprint_r>
100165cc:	103ea31e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
100165d0:	8c7ffc04 	addi	r17,r17,-16
100165d4:	d8c02017 	ldw	r3,128(sp)
100165d8:	d8801f17 	ldw	r2,124(sp)
100165dc:	da000404 	addi	r8,sp,16
100165e0:	e47fef16 	blt	fp,r17,100165a0 <__alt_data_end+0xf80165a0>
100165e4:	9021883a 	mov	r16,r18
100165e8:	b025883a 	mov	r18,r22
100165ec:	882d883a 	mov	r22,r17
100165f0:	dc402a17 	ldw	r17,168(sp)
100165f4:	d9002c17 	ldw	r4,176(sp)
100165f8:	1d87883a 	add	r3,r3,r22
100165fc:	10800044 	addi	r2,r2,1
10016600:	41000015 	stw	r4,0(r8)
10016604:	45800115 	stw	r22,4(r8)
10016608:	d8c02015 	stw	r3,128(sp)
1001660c:	d8801f15 	stw	r2,124(sp)
10016610:	010001c4 	movi	r4,7
10016614:	20820e16 	blt	r4,r2,10016e50 <___svfprintf_internal_r+0x1190>
10016618:	42000204 	addi	r8,r8,8
1001661c:	9080400c 	andi	r2,r18,256
10016620:	10013a1e 	bne	r2,zero,10016b0c <___svfprintf_internal_r+0xe4c>
10016624:	d9402b17 	ldw	r5,172(sp)
10016628:	d8801f17 	ldw	r2,124(sp)
1001662c:	44000015 	stw	r16,0(r8)
10016630:	1947883a 	add	r3,r3,r5
10016634:	10800044 	addi	r2,r2,1
10016638:	41400115 	stw	r5,4(r8)
1001663c:	d8c02015 	stw	r3,128(sp)
10016640:	d8801f15 	stw	r2,124(sp)
10016644:	010001c4 	movi	r4,7
10016648:	2081f316 	blt	r4,r2,10016e18 <___svfprintf_internal_r+0x1158>
1001664c:	42000204 	addi	r8,r8,8
10016650:	9480010c 	andi	r18,r18,4
10016654:	90003226 	beq	r18,zero,10016720 <___svfprintf_internal_r+0xa60>
10016658:	d9403117 	ldw	r5,196(sp)
1001665c:	d8802917 	ldw	r2,164(sp)
10016660:	28a1c83a 	sub	r16,r5,r2
10016664:	04002e0e 	bge	zero,r16,10016720 <___svfprintf_internal_r+0xa60>
10016668:	04400404 	movi	r17,16
1001666c:	d8801f17 	ldw	r2,124(sp)
10016670:	8c04db0e 	bge	r17,r16,100179e0 <___svfprintf_internal_r+0x1d20>
10016674:	014400b4 	movhi	r5,4098
10016678:	294c7704 	addi	r5,r5,12764
1001667c:	d9403515 	stw	r5,212(sp)
10016680:	048001c4 	movi	r18,7
10016684:	dd002d17 	ldw	r20,180(sp)
10016688:	00000306 	br	10016698 <___svfprintf_internal_r+0x9d8>
1001668c:	843ffc04 	addi	r16,r16,-16
10016690:	42000204 	addi	r8,r8,8
10016694:	8c00130e 	bge	r17,r16,100166e4 <___svfprintf_internal_r+0xa24>
10016698:	010400b4 	movhi	r4,4098
1001669c:	18c00404 	addi	r3,r3,16
100166a0:	10800044 	addi	r2,r2,1
100166a4:	210c7704 	addi	r4,r4,12764
100166a8:	41000015 	stw	r4,0(r8)
100166ac:	44400115 	stw	r17,4(r8)
100166b0:	d8c02015 	stw	r3,128(sp)
100166b4:	d8801f15 	stw	r2,124(sp)
100166b8:	90bff40e 	bge	r18,r2,1001668c <__alt_data_end+0xf801668c>
100166bc:	d9801e04 	addi	r6,sp,120
100166c0:	a00b883a 	mov	r5,r20
100166c4:	9809883a 	mov	r4,r19
100166c8:	001acd40 	call	1001acd4 <__ssprint_r>
100166cc:	103e631e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
100166d0:	843ffc04 	addi	r16,r16,-16
100166d4:	d8c02017 	ldw	r3,128(sp)
100166d8:	d8801f17 	ldw	r2,124(sp)
100166dc:	da000404 	addi	r8,sp,16
100166e0:	8c3fed16 	blt	r17,r16,10016698 <__alt_data_end+0xf8016698>
100166e4:	d9403517 	ldw	r5,212(sp)
100166e8:	1c07883a 	add	r3,r3,r16
100166ec:	10800044 	addi	r2,r2,1
100166f0:	41400015 	stw	r5,0(r8)
100166f4:	44000115 	stw	r16,4(r8)
100166f8:	d8c02015 	stw	r3,128(sp)
100166fc:	d8801f15 	stw	r2,124(sp)
10016700:	010001c4 	movi	r4,7
10016704:	2080060e 	bge	r4,r2,10016720 <___svfprintf_internal_r+0xa60>
10016708:	d9402d17 	ldw	r5,180(sp)
1001670c:	d9801e04 	addi	r6,sp,120
10016710:	9809883a 	mov	r4,r19
10016714:	001acd40 	call	1001acd4 <__ssprint_r>
10016718:	103e501e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
1001671c:	d8c02017 	ldw	r3,128(sp)
10016720:	d8803117 	ldw	r2,196(sp)
10016724:	d9002917 	ldw	r4,164(sp)
10016728:	1100010e 	bge	r2,r4,10016730 <___svfprintf_internal_r+0xa70>
1001672c:	2005883a 	mov	r2,r4
10016730:	d9402f17 	ldw	r5,188(sp)
10016734:	288b883a 	add	r5,r5,r2
10016738:	d9402f15 	stw	r5,188(sp)
1001673c:	1801be1e 	bne	r3,zero,10016e38 <___svfprintf_internal_r+0x1178>
10016740:	b8800007 	ldb	r2,0(r23)
10016744:	d8001f15 	stw	zero,124(sp)
10016748:	da000404 	addi	r8,sp,16
1001674c:	103d891e 	bne	r2,zero,10015d74 <__alt_data_end+0xf8015d74>
10016750:	b823883a 	mov	r17,r23
10016754:	003d9f06 	br	10015dd4 <__alt_data_end+0xf8015dd4>
10016758:	8025883a 	mov	r18,r16
1001675c:	dc002903 	ldbu	r16,164(sp)
10016760:	e011883a 	mov	r8,fp
10016764:	84003fcc 	andi	r16,r16,255
10016768:	8005e61e 	bne	r16,zero,10017f04 <___svfprintf_internal_r+0x2244>
1001676c:	94800414 	ori	r18,r18,16
10016770:	9080080c 	andi	r2,r18,32
10016774:	10022026 	beq	r2,zero,10016ff8 <___svfprintf_internal_r+0x1338>
10016778:	d9002e17 	ldw	r4,184(sp)
1001677c:	d9402a17 	ldw	r5,168(sp)
10016780:	d8002785 	stb	zero,158(sp)
10016784:	20c00204 	addi	r3,r4,8
10016788:	25000017 	ldw	r20,0(r4)
1001678c:	25800117 	ldw	r22,4(r4)
10016790:	2803ad16 	blt	r5,zero,10017648 <___svfprintf_internal_r+0x1988>
10016794:	013fdfc4 	movi	r4,-129
10016798:	a584b03a 	or	r2,r20,r22
1001679c:	d8c02e15 	stw	r3,184(sp)
100167a0:	9124703a 	and	r18,r18,r4
100167a4:	0039883a 	mov	fp,zero
100167a8:	103eb01e 	bne	r2,zero,1001626c <__alt_data_end+0xf801626c>
100167ac:	d8802a17 	ldw	r2,168(sp)
100167b0:	1002e71e 	bne	r2,zero,10017350 <___svfprintf_internal_r+0x1690>
100167b4:	d8002a15 	stw	zero,168(sp)
100167b8:	d8002b15 	stw	zero,172(sp)
100167bc:	dc001e04 	addi	r16,sp,120
100167c0:	003ef706 	br	100163a0 <__alt_data_end+0xf80163a0>
100167c4:	8025883a 	mov	r18,r16
100167c8:	dc002903 	ldbu	r16,164(sp)
100167cc:	e011883a 	mov	r8,fp
100167d0:	84003fcc 	andi	r16,r16,255
100167d4:	8005c81e 	bne	r16,zero,10017ef8 <___svfprintf_internal_r+0x2238>
100167d8:	010400b4 	movhi	r4,4098
100167dc:	210b4b04 	addi	r4,r4,11564
100167e0:	d9003a15 	stw	r4,232(sp)
100167e4:	9080080c 	andi	r2,r18,32
100167e8:	10007226 	beq	r2,zero,100169b4 <___svfprintf_internal_r+0xcf4>
100167ec:	d9402e17 	ldw	r5,184(sp)
100167f0:	2d000017 	ldw	r20,0(r5)
100167f4:	2d800117 	ldw	r22,4(r5)
100167f8:	29400204 	addi	r5,r5,8
100167fc:	d9402e15 	stw	r5,184(sp)
10016800:	9080004c 	andi	r2,r18,1
10016804:	1001aa26 	beq	r2,zero,10016eb0 <___svfprintf_internal_r+0x11f0>
10016808:	a584b03a 	or	r2,r20,r22
1001680c:	10032526 	beq	r2,zero,100174a4 <___svfprintf_internal_r+0x17e4>
10016810:	d8c02a17 	ldw	r3,168(sp)
10016814:	00800c04 	movi	r2,48
10016818:	d8802705 	stb	r2,156(sp)
1001681c:	dc402745 	stb	r17,157(sp)
10016820:	d8002785 	stb	zero,158(sp)
10016824:	90800094 	ori	r2,r18,2
10016828:	1804a316 	blt	r3,zero,10017ab8 <___svfprintf_internal_r+0x1df8>
1001682c:	00bfdfc4 	movi	r2,-129
10016830:	90a4703a 	and	r18,r18,r2
10016834:	94800094 	ori	r18,r18,2
10016838:	0039883a 	mov	fp,zero
1001683c:	d9003a17 	ldw	r4,232(sp)
10016840:	dc001e04 	addi	r16,sp,120
10016844:	a08003cc 	andi	r2,r20,15
10016848:	b006973a 	slli	r3,r22,28
1001684c:	2085883a 	add	r2,r4,r2
10016850:	a028d13a 	srli	r20,r20,4
10016854:	10800003 	ldbu	r2,0(r2)
10016858:	b02cd13a 	srli	r22,r22,4
1001685c:	843fffc4 	addi	r16,r16,-1
10016860:	1d28b03a 	or	r20,r3,r20
10016864:	80800005 	stb	r2,0(r16)
10016868:	a584b03a 	or	r2,r20,r22
1001686c:	103ff51e 	bne	r2,zero,10016844 <__alt_data_end+0xf8016844>
10016870:	d8c02817 	ldw	r3,160(sp)
10016874:	1c07c83a 	sub	r3,r3,r16
10016878:	d8c02b15 	stw	r3,172(sp)
1001687c:	003ec806 	br	100163a0 <__alt_data_end+0xf80163a0>
10016880:	d8c02e17 	ldw	r3,184(sp)
10016884:	d9002e17 	ldw	r4,184(sp)
10016888:	8025883a 	mov	r18,r16
1001688c:	18800017 	ldw	r2,0(r3)
10016890:	21000104 	addi	r4,r4,4
10016894:	00c00044 	movi	r3,1
10016898:	e011883a 	mov	r8,fp
1001689c:	d8c02915 	stw	r3,164(sp)
100168a0:	d8002785 	stb	zero,158(sp)
100168a4:	d8801405 	stb	r2,80(sp)
100168a8:	d9002e15 	stw	r4,184(sp)
100168ac:	d8c02b15 	stw	r3,172(sp)
100168b0:	d8002a15 	stw	zero,168(sp)
100168b4:	d8003215 	stw	zero,200(sp)
100168b8:	dc001404 	addi	r16,sp,80
100168bc:	0039883a 	mov	fp,zero
100168c0:	003ec406 	br	100163d4 <__alt_data_end+0xf80163d4>
100168c4:	8025883a 	mov	r18,r16
100168c8:	dc002903 	ldbu	r16,164(sp)
100168cc:	e011883a 	mov	r8,fp
100168d0:	84003fcc 	andi	r16,r16,255
100168d4:	803e8726 	beq	r16,zero,100162f4 <__alt_data_end+0xf80162f4>
100168d8:	d8c02b03 	ldbu	r3,172(sp)
100168dc:	d8c02785 	stb	r3,158(sp)
100168e0:	003e8406 	br	100162f4 <__alt_data_end+0xf80162f4>
100168e4:	00c00044 	movi	r3,1
100168e8:	d8c02905 	stb	r3,164(sp)
100168ec:	00c00ac4 	movi	r3,43
100168f0:	d8c02b05 	stb	r3,172(sp)
100168f4:	bc400007 	ldb	r17,0(r23)
100168f8:	003d4606 	br	10015e14 <__alt_data_end+0xf8015e14>
100168fc:	84000814 	ori	r16,r16,32
10016900:	bc400007 	ldb	r17,0(r23)
10016904:	003d4306 	br	10015e14 <__alt_data_end+0xf8015e14>
10016908:	d8802e17 	ldw	r2,184(sp)
1001690c:	8025883a 	mov	r18,r16
10016910:	d8002785 	stb	zero,158(sp)
10016914:	14000017 	ldw	r16,0(r2)
10016918:	e011883a 	mov	r8,fp
1001691c:	15000104 	addi	r20,r2,4
10016920:	80042126 	beq	r16,zero,100179a8 <___svfprintf_internal_r+0x1ce8>
10016924:	d8c02a17 	ldw	r3,168(sp)
10016928:	1803ee16 	blt	r3,zero,100178e4 <___svfprintf_internal_r+0x1c24>
1001692c:	180d883a 	mov	r6,r3
10016930:	000b883a 	mov	r5,zero
10016934:	8009883a 	mov	r4,r16
10016938:	df003e15 	stw	fp,248(sp)
1001693c:	00118dc0 	call	100118dc <memchr>
10016940:	da003e17 	ldw	r8,248(sp)
10016944:	10046a26 	beq	r2,zero,10017af0 <___svfprintf_internal_r+0x1e30>
10016948:	1405c83a 	sub	r2,r2,r16
1001694c:	d8802b15 	stw	r2,172(sp)
10016950:	1003ea16 	blt	r2,zero,100178fc <___svfprintf_internal_r+0x1c3c>
10016954:	df002783 	ldbu	fp,158(sp)
10016958:	d8802915 	stw	r2,164(sp)
1001695c:	dd002e15 	stw	r20,184(sp)
10016960:	d8002a15 	stw	zero,168(sp)
10016964:	d8003215 	stw	zero,200(sp)
10016968:	003e9306 	br	100163b8 <__alt_data_end+0xf80163b8>
1001696c:	8025883a 	mov	r18,r16
10016970:	dc002903 	ldbu	r16,164(sp)
10016974:	e011883a 	mov	r8,fp
10016978:	84003fcc 	andi	r16,r16,255
1001697c:	803f7c26 	beq	r16,zero,10016770 <__alt_data_end+0xf8016770>
10016980:	d8c02b03 	ldbu	r3,172(sp)
10016984:	d8c02785 	stb	r3,158(sp)
10016988:	003f7906 	br	10016770 <__alt_data_end+0xf8016770>
1001698c:	8025883a 	mov	r18,r16
10016990:	dc002903 	ldbu	r16,164(sp)
10016994:	e011883a 	mov	r8,fp
10016998:	84003fcc 	andi	r16,r16,255
1001699c:	8005741e 	bne	r16,zero,10017f70 <___svfprintf_internal_r+0x22b0>
100169a0:	010400b4 	movhi	r4,4098
100169a4:	210b5004 	addi	r4,r4,11584
100169a8:	d9003a15 	stw	r4,232(sp)
100169ac:	9080080c 	andi	r2,r18,32
100169b0:	103f8e1e 	bne	r2,zero,100167ec <__alt_data_end+0xf80167ec>
100169b4:	9080040c 	andi	r2,r18,16
100169b8:	1002a726 	beq	r2,zero,10017458 <___svfprintf_internal_r+0x1798>
100169bc:	d8802e17 	ldw	r2,184(sp)
100169c0:	002d883a 	mov	r22,zero
100169c4:	15000017 	ldw	r20,0(r2)
100169c8:	10800104 	addi	r2,r2,4
100169cc:	d8802e15 	stw	r2,184(sp)
100169d0:	003f8b06 	br	10016800 <__alt_data_end+0xf8016800>
100169d4:	84000054 	ori	r16,r16,1
100169d8:	bc400007 	ldb	r17,0(r23)
100169dc:	003d0d06 	br	10015e14 <__alt_data_end+0xf8015e14>
100169e0:	d8802b07 	ldb	r2,172(sp)
100169e4:	1002a41e 	bne	r2,zero,10017478 <___svfprintf_internal_r+0x17b8>
100169e8:	00c00044 	movi	r3,1
100169ec:	d8c02905 	stb	r3,164(sp)
100169f0:	00c00804 	movi	r3,32
100169f4:	d8c02b05 	stb	r3,172(sp)
100169f8:	bc400007 	ldb	r17,0(r23)
100169fc:	003d0506 	br	10015e14 <__alt_data_end+0xf8015e14>
10016a00:	8025883a 	mov	r18,r16
10016a04:	dc002903 	ldbu	r16,164(sp)
10016a08:	e011883a 	mov	r8,fp
10016a0c:	84003fcc 	andi	r16,r16,255
10016a10:	803e0626 	beq	r16,zero,1001622c <__alt_data_end+0xf801622c>
10016a14:	d8c02b03 	ldbu	r3,172(sp)
10016a18:	d8c02785 	stb	r3,158(sp)
10016a1c:	003e0306 	br	1001622c <__alt_data_end+0xf801622c>
10016a20:	bc400007 	ldb	r17,0(r23)
10016a24:	00801b04 	movi	r2,108
10016a28:	88830a26 	beq	r17,r2,10017654 <___svfprintf_internal_r+0x1994>
10016a2c:	84000414 	ori	r16,r16,16
10016a30:	003cf806 	br	10015e14 <__alt_data_end+0xf8015e14>
10016a34:	8025883a 	mov	r18,r16
10016a38:	dc002903 	ldbu	r16,164(sp)
10016a3c:	e011883a 	mov	r8,fp
10016a40:	84003fcc 	andi	r16,r16,255
10016a44:	8005471e 	bne	r16,zero,10017f64 <___svfprintf_internal_r+0x22a4>
10016a48:	9080080c 	andi	r2,r18,32
10016a4c:	10028c26 	beq	r2,zero,10017480 <___svfprintf_internal_r+0x17c0>
10016a50:	d9002e17 	ldw	r4,184(sp)
10016a54:	d9402f17 	ldw	r5,188(sp)
10016a58:	20800017 	ldw	r2,0(r4)
10016a5c:	2807d7fa 	srai	r3,r5,31
10016a60:	21000104 	addi	r4,r4,4
10016a64:	d9002e15 	stw	r4,184(sp)
10016a68:	11400015 	stw	r5,0(r2)
10016a6c:	10c00115 	stw	r3,4(r2)
10016a70:	003cbe06 	br	10015d6c <__alt_data_end+0xf8015d6c>
10016a74:	84001014 	ori	r16,r16,64
10016a78:	bc400007 	ldb	r17,0(r23)
10016a7c:	003ce506 	br	10015e14 <__alt_data_end+0xf8015e14>
10016a80:	010400b4 	movhi	r4,4098
10016a84:	210b5004 	addi	r4,r4,11584
10016a88:	0039883a 	mov	fp,zero
10016a8c:	d9003a15 	stw	r4,232(sp)
10016a90:	04401e04 	movi	r17,120
10016a94:	003f6906 	br	1001683c <__alt_data_end+0xf801683c>
10016a98:	8025883a 	mov	r18,r16
10016a9c:	dc002903 	ldbu	r16,164(sp)
10016aa0:	e011883a 	mov	r8,fp
10016aa4:	84003fcc 	andi	r16,r16,255
10016aa8:	8005261e 	bne	r16,zero,10017f44 <___svfprintf_internal_r+0x2284>
10016aac:	883d6526 	beq	r17,zero,10016044 <__alt_data_end+0xf8016044>
10016ab0:	00c00044 	movi	r3,1
10016ab4:	d8c02915 	stw	r3,164(sp)
10016ab8:	dc401405 	stb	r17,80(sp)
10016abc:	d8002785 	stb	zero,158(sp)
10016ac0:	003f7a06 	br	100168ac <__alt_data_end+0xf80168ac>
10016ac4:	010400b4 	movhi	r4,4098
10016ac8:	210b5004 	addi	r4,r4,11584
10016acc:	d9003a15 	stw	r4,232(sp)
10016ad0:	d8c02e15 	stw	r3,184(sp)
10016ad4:	1025883a 	mov	r18,r2
10016ad8:	04401e04 	movi	r17,120
10016adc:	a584b03a 	or	r2,r20,r22
10016ae0:	1000fa1e 	bne	r2,zero,10016ecc <___svfprintf_internal_r+0x120c>
10016ae4:	0039883a 	mov	fp,zero
10016ae8:	00800084 	movi	r2,2
10016aec:	10803fcc 	andi	r2,r2,255
10016af0:	00c00044 	movi	r3,1
10016af4:	10c21626 	beq	r2,r3,10017350 <___svfprintf_internal_r+0x1690>
10016af8:	00c00084 	movi	r3,2
10016afc:	10fe0e1e 	bne	r2,r3,10016338 <__alt_data_end+0xf8016338>
10016b00:	003d4606 	br	1001601c <__alt_data_end+0xf801601c>
10016b04:	d8c02017 	ldw	r3,128(sp)
10016b08:	003e7306 	br	100164d8 <__alt_data_end+0xf80164d8>
10016b0c:	00801944 	movi	r2,101
10016b10:	14407c0e 	bge	r2,r17,10016d04 <___svfprintf_internal_r+0x1044>
10016b14:	d9003617 	ldw	r4,216(sp)
10016b18:	d9403717 	ldw	r5,220(sp)
10016b1c:	000d883a 	mov	r6,zero
10016b20:	000f883a 	mov	r7,zero
10016b24:	d8c03d15 	stw	r3,244(sp)
10016b28:	da003e15 	stw	r8,248(sp)
10016b2c:	001dc140 	call	1001dc14 <__eqdf2>
10016b30:	d8c03d17 	ldw	r3,244(sp)
10016b34:	da003e17 	ldw	r8,248(sp)
10016b38:	1000f51e 	bne	r2,zero,10016f10 <___svfprintf_internal_r+0x1250>
10016b3c:	d8801f17 	ldw	r2,124(sp)
10016b40:	010400b4 	movhi	r4,4098
10016b44:	210b5704 	addi	r4,r4,11612
10016b48:	18c00044 	addi	r3,r3,1
10016b4c:	10800044 	addi	r2,r2,1
10016b50:	41000015 	stw	r4,0(r8)
10016b54:	01000044 	movi	r4,1
10016b58:	41000115 	stw	r4,4(r8)
10016b5c:	d8c02015 	stw	r3,128(sp)
10016b60:	d8801f15 	stw	r2,124(sp)
10016b64:	010001c4 	movi	r4,7
10016b68:	20826616 	blt	r4,r2,10017504 <___svfprintf_internal_r+0x1844>
10016b6c:	42000204 	addi	r8,r8,8
10016b70:	d8802617 	ldw	r2,152(sp)
10016b74:	d9403317 	ldw	r5,204(sp)
10016b78:	11400216 	blt	r2,r5,10016b84 <___svfprintf_internal_r+0xec4>
10016b7c:	9080004c 	andi	r2,r18,1
10016b80:	103eb326 	beq	r2,zero,10016650 <__alt_data_end+0xf8016650>
10016b84:	d8803817 	ldw	r2,224(sp)
10016b88:	d9003417 	ldw	r4,208(sp)
10016b8c:	d9403817 	ldw	r5,224(sp)
10016b90:	1887883a 	add	r3,r3,r2
10016b94:	d8801f17 	ldw	r2,124(sp)
10016b98:	41000015 	stw	r4,0(r8)
10016b9c:	41400115 	stw	r5,4(r8)
10016ba0:	10800044 	addi	r2,r2,1
10016ba4:	d8c02015 	stw	r3,128(sp)
10016ba8:	d8801f15 	stw	r2,124(sp)
10016bac:	010001c4 	movi	r4,7
10016bb0:	2082af16 	blt	r4,r2,10017670 <___svfprintf_internal_r+0x19b0>
10016bb4:	42000204 	addi	r8,r8,8
10016bb8:	d8803317 	ldw	r2,204(sp)
10016bbc:	143fffc4 	addi	r16,r2,-1
10016bc0:	043ea30e 	bge	zero,r16,10016650 <__alt_data_end+0xf8016650>
10016bc4:	04400404 	movi	r17,16
10016bc8:	d8801f17 	ldw	r2,124(sp)
10016bcc:	8c00860e 	bge	r17,r16,10016de8 <___svfprintf_internal_r+0x1128>
10016bd0:	014400b4 	movhi	r5,4098
10016bd4:	294c7304 	addi	r5,r5,12748
10016bd8:	d9402c15 	stw	r5,176(sp)
10016bdc:	058001c4 	movi	r22,7
10016be0:	dd002d17 	ldw	r20,180(sp)
10016be4:	00000306 	br	10016bf4 <___svfprintf_internal_r+0xf34>
10016be8:	42000204 	addi	r8,r8,8
10016bec:	843ffc04 	addi	r16,r16,-16
10016bf0:	8c00800e 	bge	r17,r16,10016df4 <___svfprintf_internal_r+0x1134>
10016bf4:	18c00404 	addi	r3,r3,16
10016bf8:	10800044 	addi	r2,r2,1
10016bfc:	45400015 	stw	r21,0(r8)
10016c00:	44400115 	stw	r17,4(r8)
10016c04:	d8c02015 	stw	r3,128(sp)
10016c08:	d8801f15 	stw	r2,124(sp)
10016c0c:	b0bff60e 	bge	r22,r2,10016be8 <__alt_data_end+0xf8016be8>
10016c10:	d9801e04 	addi	r6,sp,120
10016c14:	a00b883a 	mov	r5,r20
10016c18:	9809883a 	mov	r4,r19
10016c1c:	001acd40 	call	1001acd4 <__ssprint_r>
10016c20:	103d0e1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016c24:	d8c02017 	ldw	r3,128(sp)
10016c28:	d8801f17 	ldw	r2,124(sp)
10016c2c:	da000404 	addi	r8,sp,16
10016c30:	003fee06 	br	10016bec <__alt_data_end+0xf8016bec>
10016c34:	d9403117 	ldw	r5,196(sp)
10016c38:	d8802917 	ldw	r2,164(sp)
10016c3c:	28adc83a 	sub	r22,r5,r2
10016c40:	05be430e 	bge	zero,r22,10016550 <__alt_data_end+0xf8016550>
10016c44:	07000404 	movi	fp,16
10016c48:	d8801f17 	ldw	r2,124(sp)
10016c4c:	e583a20e 	bge	fp,r22,10017ad8 <___svfprintf_internal_r+0x1e18>
10016c50:	014400b4 	movhi	r5,4098
10016c54:	294c7304 	addi	r5,r5,12748
10016c58:	dc403015 	stw	r17,192(sp)
10016c5c:	d9402c15 	stw	r5,176(sp)
10016c60:	b023883a 	mov	r17,r22
10016c64:	050001c4 	movi	r20,7
10016c68:	902d883a 	mov	r22,r18
10016c6c:	8025883a 	mov	r18,r16
10016c70:	dc002d17 	ldw	r16,180(sp)
10016c74:	00000306 	br	10016c84 <___svfprintf_internal_r+0xfc4>
10016c78:	8c7ffc04 	addi	r17,r17,-16
10016c7c:	42000204 	addi	r8,r8,8
10016c80:	e440110e 	bge	fp,r17,10016cc8 <___svfprintf_internal_r+0x1008>
10016c84:	18c00404 	addi	r3,r3,16
10016c88:	10800044 	addi	r2,r2,1
10016c8c:	45400015 	stw	r21,0(r8)
10016c90:	47000115 	stw	fp,4(r8)
10016c94:	d8c02015 	stw	r3,128(sp)
10016c98:	d8801f15 	stw	r2,124(sp)
10016c9c:	a0bff60e 	bge	r20,r2,10016c78 <__alt_data_end+0xf8016c78>
10016ca0:	d9801e04 	addi	r6,sp,120
10016ca4:	800b883a 	mov	r5,r16
10016ca8:	9809883a 	mov	r4,r19
10016cac:	001acd40 	call	1001acd4 <__ssprint_r>
10016cb0:	103cea1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016cb4:	8c7ffc04 	addi	r17,r17,-16
10016cb8:	d8c02017 	ldw	r3,128(sp)
10016cbc:	d8801f17 	ldw	r2,124(sp)
10016cc0:	da000404 	addi	r8,sp,16
10016cc4:	e47fef16 	blt	fp,r17,10016c84 <__alt_data_end+0xf8016c84>
10016cc8:	9021883a 	mov	r16,r18
10016ccc:	b025883a 	mov	r18,r22
10016cd0:	882d883a 	mov	r22,r17
10016cd4:	dc403017 	ldw	r17,192(sp)
10016cd8:	d9002c17 	ldw	r4,176(sp)
10016cdc:	1d87883a 	add	r3,r3,r22
10016ce0:	10800044 	addi	r2,r2,1
10016ce4:	41000015 	stw	r4,0(r8)
10016ce8:	45800115 	stw	r22,4(r8)
10016cec:	d8c02015 	stw	r3,128(sp)
10016cf0:	d8801f15 	stw	r2,124(sp)
10016cf4:	010001c4 	movi	r4,7
10016cf8:	20819a16 	blt	r4,r2,10017364 <___svfprintf_internal_r+0x16a4>
10016cfc:	42000204 	addi	r8,r8,8
10016d00:	003e1306 	br	10016550 <__alt_data_end+0xf8016550>
10016d04:	d9403317 	ldw	r5,204(sp)
10016d08:	00800044 	movi	r2,1
10016d0c:	18c00044 	addi	r3,r3,1
10016d10:	1141710e 	bge	r2,r5,100172d8 <___svfprintf_internal_r+0x1618>
10016d14:	dc401f17 	ldw	r17,124(sp)
10016d18:	00800044 	movi	r2,1
10016d1c:	40800115 	stw	r2,4(r8)
10016d20:	8c400044 	addi	r17,r17,1
10016d24:	44000015 	stw	r16,0(r8)
10016d28:	d8c02015 	stw	r3,128(sp)
10016d2c:	dc401f15 	stw	r17,124(sp)
10016d30:	008001c4 	movi	r2,7
10016d34:	14417416 	blt	r2,r17,10017308 <___svfprintf_internal_r+0x1648>
10016d38:	42000204 	addi	r8,r8,8
10016d3c:	d8803817 	ldw	r2,224(sp)
10016d40:	d9003417 	ldw	r4,208(sp)
10016d44:	8c400044 	addi	r17,r17,1
10016d48:	10c7883a 	add	r3,r2,r3
10016d4c:	40800115 	stw	r2,4(r8)
10016d50:	41000015 	stw	r4,0(r8)
10016d54:	d8c02015 	stw	r3,128(sp)
10016d58:	dc401f15 	stw	r17,124(sp)
10016d5c:	008001c4 	movi	r2,7
10016d60:	14417216 	blt	r2,r17,1001732c <___svfprintf_internal_r+0x166c>
10016d64:	45800204 	addi	r22,r8,8
10016d68:	d9003617 	ldw	r4,216(sp)
10016d6c:	d9403717 	ldw	r5,220(sp)
10016d70:	000d883a 	mov	r6,zero
10016d74:	000f883a 	mov	r7,zero
10016d78:	d8c03d15 	stw	r3,244(sp)
10016d7c:	001dc140 	call	1001dc14 <__eqdf2>
10016d80:	d8c03d17 	ldw	r3,244(sp)
10016d84:	1000b326 	beq	r2,zero,10017054 <___svfprintf_internal_r+0x1394>
10016d88:	d9403317 	ldw	r5,204(sp)
10016d8c:	84000044 	addi	r16,r16,1
10016d90:	8c400044 	addi	r17,r17,1
10016d94:	28bfffc4 	addi	r2,r5,-1
10016d98:	1887883a 	add	r3,r3,r2
10016d9c:	b0800115 	stw	r2,4(r22)
10016da0:	b4000015 	stw	r16,0(r22)
10016da4:	d8c02015 	stw	r3,128(sp)
10016da8:	dc401f15 	stw	r17,124(sp)
10016dac:	008001c4 	movi	r2,7
10016db0:	1440d216 	blt	r2,r17,100170fc <___svfprintf_internal_r+0x143c>
10016db4:	b5800204 	addi	r22,r22,8
10016db8:	d9003b17 	ldw	r4,236(sp)
10016dbc:	df0022c4 	addi	fp,sp,139
10016dc0:	8c400044 	addi	r17,r17,1
10016dc4:	20c7883a 	add	r3,r4,r3
10016dc8:	b7000015 	stw	fp,0(r22)
10016dcc:	b1000115 	stw	r4,4(r22)
10016dd0:	d8c02015 	stw	r3,128(sp)
10016dd4:	dc401f15 	stw	r17,124(sp)
10016dd8:	008001c4 	movi	r2,7
10016ddc:	14400e16 	blt	r2,r17,10016e18 <___svfprintf_internal_r+0x1158>
10016de0:	b2000204 	addi	r8,r22,8
10016de4:	003e1a06 	br	10016650 <__alt_data_end+0xf8016650>
10016de8:	010400b4 	movhi	r4,4098
10016dec:	210c7304 	addi	r4,r4,12748
10016df0:	d9002c15 	stw	r4,176(sp)
10016df4:	d9002c17 	ldw	r4,176(sp)
10016df8:	1c07883a 	add	r3,r3,r16
10016dfc:	44000115 	stw	r16,4(r8)
10016e00:	41000015 	stw	r4,0(r8)
10016e04:	10800044 	addi	r2,r2,1
10016e08:	d8c02015 	stw	r3,128(sp)
10016e0c:	d8801f15 	stw	r2,124(sp)
10016e10:	010001c4 	movi	r4,7
10016e14:	20be0d0e 	bge	r4,r2,1001664c <__alt_data_end+0xf801664c>
10016e18:	d9402d17 	ldw	r5,180(sp)
10016e1c:	d9801e04 	addi	r6,sp,120
10016e20:	9809883a 	mov	r4,r19
10016e24:	001acd40 	call	1001acd4 <__ssprint_r>
10016e28:	103c8c1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016e2c:	d8c02017 	ldw	r3,128(sp)
10016e30:	da000404 	addi	r8,sp,16
10016e34:	003e0606 	br	10016650 <__alt_data_end+0xf8016650>
10016e38:	d9402d17 	ldw	r5,180(sp)
10016e3c:	d9801e04 	addi	r6,sp,120
10016e40:	9809883a 	mov	r4,r19
10016e44:	001acd40 	call	1001acd4 <__ssprint_r>
10016e48:	103e3d26 	beq	r2,zero,10016740 <__alt_data_end+0xf8016740>
10016e4c:	003c8306 	br	1001605c <__alt_data_end+0xf801605c>
10016e50:	d9402d17 	ldw	r5,180(sp)
10016e54:	d9801e04 	addi	r6,sp,120
10016e58:	9809883a 	mov	r4,r19
10016e5c:	001acd40 	call	1001acd4 <__ssprint_r>
10016e60:	103c7e1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016e64:	d8c02017 	ldw	r3,128(sp)
10016e68:	da000404 	addi	r8,sp,16
10016e6c:	003deb06 	br	1001661c <__alt_data_end+0xf801661c>
10016e70:	d9402d17 	ldw	r5,180(sp)
10016e74:	d9801e04 	addi	r6,sp,120
10016e78:	9809883a 	mov	r4,r19
10016e7c:	001acd40 	call	1001acd4 <__ssprint_r>
10016e80:	103c761e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016e84:	d8c02017 	ldw	r3,128(sp)
10016e88:	da000404 	addi	r8,sp,16
10016e8c:	003d9f06 	br	1001650c <__alt_data_end+0xf801650c>
10016e90:	d9402d17 	ldw	r5,180(sp)
10016e94:	d9801e04 	addi	r6,sp,120
10016e98:	9809883a 	mov	r4,r19
10016e9c:	001acd40 	call	1001acd4 <__ssprint_r>
10016ea0:	103c6e1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016ea4:	d8c02017 	ldw	r3,128(sp)
10016ea8:	da000404 	addi	r8,sp,16
10016eac:	003da506 	br	10016544 <__alt_data_end+0xf8016544>
10016eb0:	d9402a17 	ldw	r5,168(sp)
10016eb4:	d8002785 	stb	zero,158(sp)
10016eb8:	283f0816 	blt	r5,zero,10016adc <__alt_data_end+0xf8016adc>
10016ebc:	00ffdfc4 	movi	r3,-129
10016ec0:	a584b03a 	or	r2,r20,r22
10016ec4:	90e4703a 	and	r18,r18,r3
10016ec8:	103c5126 	beq	r2,zero,10016010 <__alt_data_end+0xf8016010>
10016ecc:	0039883a 	mov	fp,zero
10016ed0:	003e5a06 	br	1001683c <__alt_data_end+0xf801683c>
10016ed4:	9080040c 	andi	r2,r18,16
10016ed8:	10013d26 	beq	r2,zero,100173d0 <___svfprintf_internal_r+0x1710>
10016edc:	d8c02e17 	ldw	r3,184(sp)
10016ee0:	d9002a17 	ldw	r4,168(sp)
10016ee4:	d8002785 	stb	zero,158(sp)
10016ee8:	18800104 	addi	r2,r3,4
10016eec:	1d000017 	ldw	r20,0(r3)
10016ef0:	002d883a 	mov	r22,zero
10016ef4:	20013f16 	blt	r4,zero,100173f4 <___svfprintf_internal_r+0x1734>
10016ef8:	00ffdfc4 	movi	r3,-129
10016efc:	d8802e15 	stw	r2,184(sp)
10016f00:	90e4703a 	and	r18,r18,r3
10016f04:	a03d0926 	beq	r20,zero,1001632c <__alt_data_end+0xf801632c>
10016f08:	0039883a 	mov	fp,zero
10016f0c:	003d0c06 	br	10016340 <__alt_data_end+0xf8016340>
10016f10:	dc402617 	ldw	r17,152(sp)
10016f14:	0441830e 	bge	zero,r17,10017524 <___svfprintf_internal_r+0x1864>
10016f18:	dc403217 	ldw	r17,200(sp)
10016f1c:	d8803317 	ldw	r2,204(sp)
10016f20:	1440010e 	bge	r2,r17,10016f28 <___svfprintf_internal_r+0x1268>
10016f24:	1023883a 	mov	r17,r2
10016f28:	04400a0e 	bge	zero,r17,10016f54 <___svfprintf_internal_r+0x1294>
10016f2c:	d8801f17 	ldw	r2,124(sp)
10016f30:	1c47883a 	add	r3,r3,r17
10016f34:	44000015 	stw	r16,0(r8)
10016f38:	10800044 	addi	r2,r2,1
10016f3c:	44400115 	stw	r17,4(r8)
10016f40:	d8c02015 	stw	r3,128(sp)
10016f44:	d8801f15 	stw	r2,124(sp)
10016f48:	010001c4 	movi	r4,7
10016f4c:	20827516 	blt	r4,r2,10017924 <___svfprintf_internal_r+0x1c64>
10016f50:	42000204 	addi	r8,r8,8
10016f54:	88027b16 	blt	r17,zero,10017944 <___svfprintf_internal_r+0x1c84>
10016f58:	d9003217 	ldw	r4,200(sp)
10016f5c:	2463c83a 	sub	r17,r4,r17
10016f60:	0440990e 	bge	zero,r17,100171c8 <___svfprintf_internal_r+0x1508>
10016f64:	05800404 	movi	r22,16
10016f68:	d8801f17 	ldw	r2,124(sp)
10016f6c:	b441530e 	bge	r22,r17,100174bc <___svfprintf_internal_r+0x17fc>
10016f70:	010400b4 	movhi	r4,4098
10016f74:	210c7304 	addi	r4,r4,12748
10016f78:	d9002c15 	stw	r4,176(sp)
10016f7c:	070001c4 	movi	fp,7
10016f80:	dd002d17 	ldw	r20,180(sp)
10016f84:	00000306 	br	10016f94 <___svfprintf_internal_r+0x12d4>
10016f88:	42000204 	addi	r8,r8,8
10016f8c:	8c7ffc04 	addi	r17,r17,-16
10016f90:	b4414d0e 	bge	r22,r17,100174c8 <___svfprintf_internal_r+0x1808>
10016f94:	18c00404 	addi	r3,r3,16
10016f98:	10800044 	addi	r2,r2,1
10016f9c:	45400015 	stw	r21,0(r8)
10016fa0:	45800115 	stw	r22,4(r8)
10016fa4:	d8c02015 	stw	r3,128(sp)
10016fa8:	d8801f15 	stw	r2,124(sp)
10016fac:	e0bff60e 	bge	fp,r2,10016f88 <__alt_data_end+0xf8016f88>
10016fb0:	d9801e04 	addi	r6,sp,120
10016fb4:	a00b883a 	mov	r5,r20
10016fb8:	9809883a 	mov	r4,r19
10016fbc:	001acd40 	call	1001acd4 <__ssprint_r>
10016fc0:	103c261e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016fc4:	d8c02017 	ldw	r3,128(sp)
10016fc8:	d8801f17 	ldw	r2,124(sp)
10016fcc:	da000404 	addi	r8,sp,16
10016fd0:	003fee06 	br	10016f8c <__alt_data_end+0xf8016f8c>
10016fd4:	d9402d17 	ldw	r5,180(sp)
10016fd8:	d9801e04 	addi	r6,sp,120
10016fdc:	9809883a 	mov	r4,r19
10016fe0:	001acd40 	call	1001acd4 <__ssprint_r>
10016fe4:	103c1d1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10016fe8:	d8c02017 	ldw	r3,128(sp)
10016fec:	df002787 	ldb	fp,158(sp)
10016ff0:	da000404 	addi	r8,sp,16
10016ff4:	003d3806 	br	100164d8 <__alt_data_end+0xf80164d8>
10016ff8:	9080040c 	andi	r2,r18,16
10016ffc:	10005c26 	beq	r2,zero,10017170 <___svfprintf_internal_r+0x14b0>
10017000:	d8c02e17 	ldw	r3,184(sp)
10017004:	d9002a17 	ldw	r4,168(sp)
10017008:	d8002785 	stb	zero,158(sp)
1001700c:	18800104 	addi	r2,r3,4
10017010:	1d000017 	ldw	r20,0(r3)
10017014:	002d883a 	mov	r22,zero
10017018:	20005e16 	blt	r4,zero,10017194 <___svfprintf_internal_r+0x14d4>
1001701c:	00ffdfc4 	movi	r3,-129
10017020:	d8802e15 	stw	r2,184(sp)
10017024:	90e4703a 	and	r18,r18,r3
10017028:	0039883a 	mov	fp,zero
1001702c:	a03ddf26 	beq	r20,zero,100167ac <__alt_data_end+0xf80167ac>
10017030:	00800244 	movi	r2,9
10017034:	153c8e36 	bltu	r2,r20,10016270 <__alt_data_end+0xf8016270>
10017038:	a5000c04 	addi	r20,r20,48
1001703c:	dc001dc4 	addi	r16,sp,119
10017040:	dd001dc5 	stb	r20,119(sp)
10017044:	d8c02817 	ldw	r3,160(sp)
10017048:	1c07c83a 	sub	r3,r3,r16
1001704c:	d8c02b15 	stw	r3,172(sp)
10017050:	003cd306 	br	100163a0 <__alt_data_end+0xf80163a0>
10017054:	d8803317 	ldw	r2,204(sp)
10017058:	143fffc4 	addi	r16,r2,-1
1001705c:	043f560e 	bge	zero,r16,10016db8 <__alt_data_end+0xf8016db8>
10017060:	07000404 	movi	fp,16
10017064:	e403530e 	bge	fp,r16,10017db4 <___svfprintf_internal_r+0x20f4>
10017068:	014400b4 	movhi	r5,4098
1001706c:	294c7304 	addi	r5,r5,12748
10017070:	d9402c15 	stw	r5,176(sp)
10017074:	01c001c4 	movi	r7,7
10017078:	dd002d17 	ldw	r20,180(sp)
1001707c:	00000306 	br	1001708c <___svfprintf_internal_r+0x13cc>
10017080:	843ffc04 	addi	r16,r16,-16
10017084:	b5800204 	addi	r22,r22,8
10017088:	e400130e 	bge	fp,r16,100170d8 <___svfprintf_internal_r+0x1418>
1001708c:	18c00404 	addi	r3,r3,16
10017090:	8c400044 	addi	r17,r17,1
10017094:	b5400015 	stw	r21,0(r22)
10017098:	b7000115 	stw	fp,4(r22)
1001709c:	d8c02015 	stw	r3,128(sp)
100170a0:	dc401f15 	stw	r17,124(sp)
100170a4:	3c7ff60e 	bge	r7,r17,10017080 <__alt_data_end+0xf8017080>
100170a8:	d9801e04 	addi	r6,sp,120
100170ac:	a00b883a 	mov	r5,r20
100170b0:	9809883a 	mov	r4,r19
100170b4:	d9c03d15 	stw	r7,244(sp)
100170b8:	001acd40 	call	1001acd4 <__ssprint_r>
100170bc:	d9c03d17 	ldw	r7,244(sp)
100170c0:	103be61e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
100170c4:	843ffc04 	addi	r16,r16,-16
100170c8:	d8c02017 	ldw	r3,128(sp)
100170cc:	dc401f17 	ldw	r17,124(sp)
100170d0:	dd800404 	addi	r22,sp,16
100170d4:	e43fed16 	blt	fp,r16,1001708c <__alt_data_end+0xf801708c>
100170d8:	d8802c17 	ldw	r2,176(sp)
100170dc:	1c07883a 	add	r3,r3,r16
100170e0:	8c400044 	addi	r17,r17,1
100170e4:	b0800015 	stw	r2,0(r22)
100170e8:	b4000115 	stw	r16,4(r22)
100170ec:	d8c02015 	stw	r3,128(sp)
100170f0:	dc401f15 	stw	r17,124(sp)
100170f4:	008001c4 	movi	r2,7
100170f8:	147f2e0e 	bge	r2,r17,10016db4 <__alt_data_end+0xf8016db4>
100170fc:	d9402d17 	ldw	r5,180(sp)
10017100:	d9801e04 	addi	r6,sp,120
10017104:	9809883a 	mov	r4,r19
10017108:	001acd40 	call	1001acd4 <__ssprint_r>
1001710c:	103bd31e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017110:	d8c02017 	ldw	r3,128(sp)
10017114:	dc401f17 	ldw	r17,124(sp)
10017118:	dd800404 	addi	r22,sp,16
1001711c:	003f2606 	br	10016db8 <__alt_data_end+0xf8016db8>
10017120:	9080040c 	andi	r2,r18,16
10017124:	1000c326 	beq	r2,zero,10017434 <___svfprintf_internal_r+0x1774>
10017128:	d9402e17 	ldw	r5,184(sp)
1001712c:	2d000017 	ldw	r20,0(r5)
10017130:	29400104 	addi	r5,r5,4
10017134:	d9402e15 	stw	r5,184(sp)
10017138:	a02dd7fa 	srai	r22,r20,31
1001713c:	b005883a 	mov	r2,r22
10017140:	103c430e 	bge	r2,zero,10016250 <__alt_data_end+0xf8016250>
10017144:	d9402a17 	ldw	r5,168(sp)
10017148:	0529c83a 	sub	r20,zero,r20
1001714c:	07000b44 	movi	fp,45
10017150:	a004c03a 	cmpne	r2,r20,zero
10017154:	05adc83a 	sub	r22,zero,r22
10017158:	df002785 	stb	fp,158(sp)
1001715c:	b0adc83a 	sub	r22,r22,r2
10017160:	28022e16 	blt	r5,zero,10017a1c <___svfprintf_internal_r+0x1d5c>
10017164:	00bfdfc4 	movi	r2,-129
10017168:	90a4703a 	and	r18,r18,r2
1001716c:	003c3f06 	br	1001626c <__alt_data_end+0xf801626c>
10017170:	9080100c 	andi	r2,r18,64
10017174:	d8002785 	stb	zero,158(sp)
10017178:	10012526 	beq	r2,zero,10017610 <___svfprintf_internal_r+0x1950>
1001717c:	d9402e17 	ldw	r5,184(sp)
10017180:	d8c02a17 	ldw	r3,168(sp)
10017184:	002d883a 	mov	r22,zero
10017188:	28800104 	addi	r2,r5,4
1001718c:	2d00000b 	ldhu	r20,0(r5)
10017190:	183fa20e 	bge	r3,zero,1001701c <__alt_data_end+0xf801701c>
10017194:	d8802e15 	stw	r2,184(sp)
10017198:	0039883a 	mov	fp,zero
1001719c:	a584b03a 	or	r2,r20,r22
100171a0:	103c321e 	bne	r2,zero,1001626c <__alt_data_end+0xf801626c>
100171a4:	00800044 	movi	r2,1
100171a8:	003e5006 	br	10016aec <__alt_data_end+0xf8016aec>
100171ac:	d9402d17 	ldw	r5,180(sp)
100171b0:	d9801e04 	addi	r6,sp,120
100171b4:	9809883a 	mov	r4,r19
100171b8:	001acd40 	call	1001acd4 <__ssprint_r>
100171bc:	103ba71e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
100171c0:	d8c02017 	ldw	r3,128(sp)
100171c4:	da000404 	addi	r8,sp,16
100171c8:	d9003217 	ldw	r4,200(sp)
100171cc:	d8802617 	ldw	r2,152(sp)
100171d0:	d9403317 	ldw	r5,204(sp)
100171d4:	8123883a 	add	r17,r16,r4
100171d8:	11400216 	blt	r2,r5,100171e4 <___svfprintf_internal_r+0x1524>
100171dc:	9100004c 	andi	r4,r18,1
100171e0:	20000d26 	beq	r4,zero,10017218 <___svfprintf_internal_r+0x1558>
100171e4:	d9003817 	ldw	r4,224(sp)
100171e8:	d9403417 	ldw	r5,208(sp)
100171ec:	1907883a 	add	r3,r3,r4
100171f0:	d9001f17 	ldw	r4,124(sp)
100171f4:	41400015 	stw	r5,0(r8)
100171f8:	d9403817 	ldw	r5,224(sp)
100171fc:	21000044 	addi	r4,r4,1
10017200:	d8c02015 	stw	r3,128(sp)
10017204:	41400115 	stw	r5,4(r8)
10017208:	d9001f15 	stw	r4,124(sp)
1001720c:	014001c4 	movi	r5,7
10017210:	2901dc16 	blt	r5,r4,10017984 <___svfprintf_internal_r+0x1cc4>
10017214:	42000204 	addi	r8,r8,8
10017218:	d9003317 	ldw	r4,204(sp)
1001721c:	8121883a 	add	r16,r16,r4
10017220:	2085c83a 	sub	r2,r4,r2
10017224:	8461c83a 	sub	r16,r16,r17
10017228:	1400010e 	bge	r2,r16,10017230 <___svfprintf_internal_r+0x1570>
1001722c:	1021883a 	mov	r16,r2
10017230:	04000a0e 	bge	zero,r16,1001725c <___svfprintf_internal_r+0x159c>
10017234:	d9001f17 	ldw	r4,124(sp)
10017238:	1c07883a 	add	r3,r3,r16
1001723c:	44400015 	stw	r17,0(r8)
10017240:	21000044 	addi	r4,r4,1
10017244:	44000115 	stw	r16,4(r8)
10017248:	d8c02015 	stw	r3,128(sp)
1001724c:	d9001f15 	stw	r4,124(sp)
10017250:	014001c4 	movi	r5,7
10017254:	2901e616 	blt	r5,r4,100179f0 <___svfprintf_internal_r+0x1d30>
10017258:	42000204 	addi	r8,r8,8
1001725c:	8001f616 	blt	r16,zero,10017a38 <___svfprintf_internal_r+0x1d78>
10017260:	1421c83a 	sub	r16,r2,r16
10017264:	043cfa0e 	bge	zero,r16,10016650 <__alt_data_end+0xf8016650>
10017268:	04400404 	movi	r17,16
1001726c:	d8801f17 	ldw	r2,124(sp)
10017270:	8c3edd0e 	bge	r17,r16,10016de8 <__alt_data_end+0xf8016de8>
10017274:	014400b4 	movhi	r5,4098
10017278:	294c7304 	addi	r5,r5,12748
1001727c:	d9402c15 	stw	r5,176(sp)
10017280:	058001c4 	movi	r22,7
10017284:	dd002d17 	ldw	r20,180(sp)
10017288:	00000306 	br	10017298 <___svfprintf_internal_r+0x15d8>
1001728c:	42000204 	addi	r8,r8,8
10017290:	843ffc04 	addi	r16,r16,-16
10017294:	8c3ed70e 	bge	r17,r16,10016df4 <__alt_data_end+0xf8016df4>
10017298:	18c00404 	addi	r3,r3,16
1001729c:	10800044 	addi	r2,r2,1
100172a0:	45400015 	stw	r21,0(r8)
100172a4:	44400115 	stw	r17,4(r8)
100172a8:	d8c02015 	stw	r3,128(sp)
100172ac:	d8801f15 	stw	r2,124(sp)
100172b0:	b0bff60e 	bge	r22,r2,1001728c <__alt_data_end+0xf801728c>
100172b4:	d9801e04 	addi	r6,sp,120
100172b8:	a00b883a 	mov	r5,r20
100172bc:	9809883a 	mov	r4,r19
100172c0:	001acd40 	call	1001acd4 <__ssprint_r>
100172c4:	103b651e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
100172c8:	d8c02017 	ldw	r3,128(sp)
100172cc:	d8801f17 	ldw	r2,124(sp)
100172d0:	da000404 	addi	r8,sp,16
100172d4:	003fee06 	br	10017290 <__alt_data_end+0xf8017290>
100172d8:	9088703a 	and	r4,r18,r2
100172dc:	203e8d1e 	bne	r4,zero,10016d14 <__alt_data_end+0xf8016d14>
100172e0:	dc401f17 	ldw	r17,124(sp)
100172e4:	40800115 	stw	r2,4(r8)
100172e8:	44000015 	stw	r16,0(r8)
100172ec:	8c400044 	addi	r17,r17,1
100172f0:	d8c02015 	stw	r3,128(sp)
100172f4:	dc401f15 	stw	r17,124(sp)
100172f8:	008001c4 	movi	r2,7
100172fc:	147f7f16 	blt	r2,r17,100170fc <__alt_data_end+0xf80170fc>
10017300:	45800204 	addi	r22,r8,8
10017304:	003eac06 	br	10016db8 <__alt_data_end+0xf8016db8>
10017308:	d9402d17 	ldw	r5,180(sp)
1001730c:	d9801e04 	addi	r6,sp,120
10017310:	9809883a 	mov	r4,r19
10017314:	001acd40 	call	1001acd4 <__ssprint_r>
10017318:	103b501e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
1001731c:	d8c02017 	ldw	r3,128(sp)
10017320:	dc401f17 	ldw	r17,124(sp)
10017324:	da000404 	addi	r8,sp,16
10017328:	003e8406 	br	10016d3c <__alt_data_end+0xf8016d3c>
1001732c:	d9402d17 	ldw	r5,180(sp)
10017330:	d9801e04 	addi	r6,sp,120
10017334:	9809883a 	mov	r4,r19
10017338:	001acd40 	call	1001acd4 <__ssprint_r>
1001733c:	103b471e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017340:	d8c02017 	ldw	r3,128(sp)
10017344:	dc401f17 	ldw	r17,124(sp)
10017348:	dd800404 	addi	r22,sp,16
1001734c:	003e8606 	br	10016d68 <__alt_data_end+0xf8016d68>
10017350:	0029883a 	mov	r20,zero
10017354:	a5000c04 	addi	r20,r20,48
10017358:	dc001dc4 	addi	r16,sp,119
1001735c:	dd001dc5 	stb	r20,119(sp)
10017360:	003f3806 	br	10017044 <__alt_data_end+0xf8017044>
10017364:	d9402d17 	ldw	r5,180(sp)
10017368:	d9801e04 	addi	r6,sp,120
1001736c:	9809883a 	mov	r4,r19
10017370:	001acd40 	call	1001acd4 <__ssprint_r>
10017374:	103b391e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017378:	d8c02017 	ldw	r3,128(sp)
1001737c:	da000404 	addi	r8,sp,16
10017380:	003c7306 	br	10016550 <__alt_data_end+0xf8016550>
10017384:	d9003617 	ldw	r4,216(sp)
10017388:	d9403717 	ldw	r5,220(sp)
1001738c:	da003e15 	stw	r8,248(sp)
10017390:	00135b80 	call	100135b8 <__fpclassifyd>
10017394:	da003e17 	ldw	r8,248(sp)
10017398:	1000bd1e 	bne	r2,zero,10017690 <___svfprintf_internal_r+0x19d0>
1001739c:	008011c4 	movi	r2,71
100173a0:	14411e0e 	bge	r2,r17,1001781c <___svfprintf_internal_r+0x1b5c>
100173a4:	040400b4 	movhi	r16,4098
100173a8:	840b4a04 	addi	r16,r16,11560
100173ac:	00c000c4 	movi	r3,3
100173b0:	00bfdfc4 	movi	r2,-129
100173b4:	d8c02915 	stw	r3,164(sp)
100173b8:	90a4703a 	and	r18,r18,r2
100173bc:	df002783 	ldbu	fp,158(sp)
100173c0:	d8c02b15 	stw	r3,172(sp)
100173c4:	d8002a15 	stw	zero,168(sp)
100173c8:	d8003215 	stw	zero,200(sp)
100173cc:	003bfa06 	br	100163b8 <__alt_data_end+0xf80163b8>
100173d0:	9080100c 	andi	r2,r18,64
100173d4:	d8002785 	stb	zero,158(sp)
100173d8:	10009426 	beq	r2,zero,1001762c <___svfprintf_internal_r+0x196c>
100173dc:	d9402e17 	ldw	r5,184(sp)
100173e0:	d8c02a17 	ldw	r3,168(sp)
100173e4:	002d883a 	mov	r22,zero
100173e8:	28800104 	addi	r2,r5,4
100173ec:	2d00000b 	ldhu	r20,0(r5)
100173f0:	183ec10e 	bge	r3,zero,10016ef8 <__alt_data_end+0xf8016ef8>
100173f4:	a586b03a 	or	r3,r20,r22
100173f8:	d8802e15 	stw	r2,184(sp)
100173fc:	183ec21e 	bne	r3,zero,10016f08 <__alt_data_end+0xf8016f08>
10017400:	0039883a 	mov	fp,zero
10017404:	0005883a 	mov	r2,zero
10017408:	003db806 	br	10016aec <__alt_data_end+0xf8016aec>
1001740c:	d8c02e17 	ldw	r3,184(sp)
10017410:	d9002e17 	ldw	r4,184(sp)
10017414:	d9402e17 	ldw	r5,184(sp)
10017418:	18c00017 	ldw	r3,0(r3)
1001741c:	21000117 	ldw	r4,4(r4)
10017420:	29400204 	addi	r5,r5,8
10017424:	d8c03615 	stw	r3,216(sp)
10017428:	d9003715 	stw	r4,220(sp)
1001742c:	d9402e15 	stw	r5,184(sp)
10017430:	003b5a06 	br	1001619c <__alt_data_end+0xf801619c>
10017434:	9080100c 	andi	r2,r18,64
10017438:	10010726 	beq	r2,zero,10017858 <___svfprintf_internal_r+0x1b98>
1001743c:	d8802e17 	ldw	r2,184(sp)
10017440:	1500000f 	ldh	r20,0(r2)
10017444:	10800104 	addi	r2,r2,4
10017448:	d8802e15 	stw	r2,184(sp)
1001744c:	a02dd7fa 	srai	r22,r20,31
10017450:	b005883a 	mov	r2,r22
10017454:	003b7d06 	br	1001624c <__alt_data_end+0xf801624c>
10017458:	9080100c 	andi	r2,r18,64
1001745c:	10010526 	beq	r2,zero,10017874 <___svfprintf_internal_r+0x1bb4>
10017460:	d8c02e17 	ldw	r3,184(sp)
10017464:	002d883a 	mov	r22,zero
10017468:	1d00000b 	ldhu	r20,0(r3)
1001746c:	18c00104 	addi	r3,r3,4
10017470:	d8c02e15 	stw	r3,184(sp)
10017474:	003ce206 	br	10016800 <__alt_data_end+0xf8016800>
10017478:	bc400007 	ldb	r17,0(r23)
1001747c:	003a6506 	br	10015e14 <__alt_data_end+0xf8015e14>
10017480:	9080040c 	andi	r2,r18,16
10017484:	10010126 	beq	r2,zero,1001788c <___svfprintf_internal_r+0x1bcc>
10017488:	d8c02e17 	ldw	r3,184(sp)
1001748c:	d9002f17 	ldw	r4,188(sp)
10017490:	18800017 	ldw	r2,0(r3)
10017494:	18c00104 	addi	r3,r3,4
10017498:	d8c02e15 	stw	r3,184(sp)
1001749c:	11000015 	stw	r4,0(r2)
100174a0:	003a3206 	br	10015d6c <__alt_data_end+0xf8015d6c>
100174a4:	d9002a17 	ldw	r4,168(sp)
100174a8:	d8002785 	stb	zero,158(sp)
100174ac:	203d8d16 	blt	r4,zero,10016ae4 <__alt_data_end+0xf8016ae4>
100174b0:	00bfdfc4 	movi	r2,-129
100174b4:	90a4703a 	and	r18,r18,r2
100174b8:	003ad506 	br	10016010 <__alt_data_end+0xf8016010>
100174bc:	014400b4 	movhi	r5,4098
100174c0:	294c7304 	addi	r5,r5,12748
100174c4:	d9402c15 	stw	r5,176(sp)
100174c8:	d9402c17 	ldw	r5,176(sp)
100174cc:	1c47883a 	add	r3,r3,r17
100174d0:	10800044 	addi	r2,r2,1
100174d4:	41400015 	stw	r5,0(r8)
100174d8:	44400115 	stw	r17,4(r8)
100174dc:	d8c02015 	stw	r3,128(sp)
100174e0:	d8801f15 	stw	r2,124(sp)
100174e4:	010001c4 	movi	r4,7
100174e8:	20bf3016 	blt	r4,r2,100171ac <__alt_data_end+0xf80171ac>
100174ec:	42000204 	addi	r8,r8,8
100174f0:	003f3506 	br	100171c8 <__alt_data_end+0xf80171c8>
100174f4:	010400b4 	movhi	r4,4098
100174f8:	210c7304 	addi	r4,r4,12748
100174fc:	d9002c15 	stw	r4,176(sp)
10017500:	003c3c06 	br	100165f4 <__alt_data_end+0xf80165f4>
10017504:	d9402d17 	ldw	r5,180(sp)
10017508:	d9801e04 	addi	r6,sp,120
1001750c:	9809883a 	mov	r4,r19
10017510:	001acd40 	call	1001acd4 <__ssprint_r>
10017514:	103ad11e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017518:	d8c02017 	ldw	r3,128(sp)
1001751c:	da000404 	addi	r8,sp,16
10017520:	003d9306 	br	10016b70 <__alt_data_end+0xf8016b70>
10017524:	d8801f17 	ldw	r2,124(sp)
10017528:	014400b4 	movhi	r5,4098
1001752c:	01000044 	movi	r4,1
10017530:	18c00044 	addi	r3,r3,1
10017534:	10800044 	addi	r2,r2,1
10017538:	294b5704 	addi	r5,r5,11612
1001753c:	41000115 	stw	r4,4(r8)
10017540:	41400015 	stw	r5,0(r8)
10017544:	d8c02015 	stw	r3,128(sp)
10017548:	d8801f15 	stw	r2,124(sp)
1001754c:	010001c4 	movi	r4,7
10017550:	2080b516 	blt	r4,r2,10017828 <___svfprintf_internal_r+0x1b68>
10017554:	42000204 	addi	r8,r8,8
10017558:	8800041e 	bne	r17,zero,1001756c <___svfprintf_internal_r+0x18ac>
1001755c:	d8803317 	ldw	r2,204(sp)
10017560:	1000021e 	bne	r2,zero,1001756c <___svfprintf_internal_r+0x18ac>
10017564:	9080004c 	andi	r2,r18,1
10017568:	103c3926 	beq	r2,zero,10016650 <__alt_data_end+0xf8016650>
1001756c:	d9003817 	ldw	r4,224(sp)
10017570:	d8801f17 	ldw	r2,124(sp)
10017574:	d9403417 	ldw	r5,208(sp)
10017578:	20c7883a 	add	r3,r4,r3
1001757c:	10800044 	addi	r2,r2,1
10017580:	41000115 	stw	r4,4(r8)
10017584:	41400015 	stw	r5,0(r8)
10017588:	d8c02015 	stw	r3,128(sp)
1001758c:	d8801f15 	stw	r2,124(sp)
10017590:	010001c4 	movi	r4,7
10017594:	20818016 	blt	r4,r2,10017b98 <___svfprintf_internal_r+0x1ed8>
10017598:	42000204 	addi	r8,r8,8
1001759c:	0463c83a 	sub	r17,zero,r17
100175a0:	0440cb0e 	bge	zero,r17,100178d0 <___svfprintf_internal_r+0x1c10>
100175a4:	05800404 	movi	r22,16
100175a8:	b440e80e 	bge	r22,r17,1001794c <___svfprintf_internal_r+0x1c8c>
100175ac:	014400b4 	movhi	r5,4098
100175b0:	294c7304 	addi	r5,r5,12748
100175b4:	d9402c15 	stw	r5,176(sp)
100175b8:	070001c4 	movi	fp,7
100175bc:	dd002d17 	ldw	r20,180(sp)
100175c0:	00000306 	br	100175d0 <___svfprintf_internal_r+0x1910>
100175c4:	42000204 	addi	r8,r8,8
100175c8:	8c7ffc04 	addi	r17,r17,-16
100175cc:	b440e20e 	bge	r22,r17,10017958 <___svfprintf_internal_r+0x1c98>
100175d0:	18c00404 	addi	r3,r3,16
100175d4:	10800044 	addi	r2,r2,1
100175d8:	45400015 	stw	r21,0(r8)
100175dc:	45800115 	stw	r22,4(r8)
100175e0:	d8c02015 	stw	r3,128(sp)
100175e4:	d8801f15 	stw	r2,124(sp)
100175e8:	e0bff60e 	bge	fp,r2,100175c4 <__alt_data_end+0xf80175c4>
100175ec:	d9801e04 	addi	r6,sp,120
100175f0:	a00b883a 	mov	r5,r20
100175f4:	9809883a 	mov	r4,r19
100175f8:	001acd40 	call	1001acd4 <__ssprint_r>
100175fc:	103a971e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017600:	d8c02017 	ldw	r3,128(sp)
10017604:	d8801f17 	ldw	r2,124(sp)
10017608:	da000404 	addi	r8,sp,16
1001760c:	003fee06 	br	100175c8 <__alt_data_end+0xf80175c8>
10017610:	d9002e17 	ldw	r4,184(sp)
10017614:	d9402a17 	ldw	r5,168(sp)
10017618:	002d883a 	mov	r22,zero
1001761c:	20800104 	addi	r2,r4,4
10017620:	25000017 	ldw	r20,0(r4)
10017624:	283e7d0e 	bge	r5,zero,1001701c <__alt_data_end+0xf801701c>
10017628:	003eda06 	br	10017194 <__alt_data_end+0xf8017194>
1001762c:	d9002e17 	ldw	r4,184(sp)
10017630:	d9402a17 	ldw	r5,168(sp)
10017634:	002d883a 	mov	r22,zero
10017638:	20800104 	addi	r2,r4,4
1001763c:	25000017 	ldw	r20,0(r4)
10017640:	283e2d0e 	bge	r5,zero,10016ef8 <__alt_data_end+0xf8016ef8>
10017644:	003f6b06 	br	100173f4 <__alt_data_end+0xf80173f4>
10017648:	d8c02e15 	stw	r3,184(sp)
1001764c:	0039883a 	mov	fp,zero
10017650:	003ed206 	br	1001719c <__alt_data_end+0xf801719c>
10017654:	bc400043 	ldbu	r17,1(r23)
10017658:	84000814 	ori	r16,r16,32
1001765c:	bdc00044 	addi	r23,r23,1
10017660:	8c403fcc 	andi	r17,r17,255
10017664:	8c40201c 	xori	r17,r17,128
10017668:	8c7fe004 	addi	r17,r17,-128
1001766c:	0039e906 	br	10015e14 <__alt_data_end+0xf8015e14>
10017670:	d9402d17 	ldw	r5,180(sp)
10017674:	d9801e04 	addi	r6,sp,120
10017678:	9809883a 	mov	r4,r19
1001767c:	001acd40 	call	1001acd4 <__ssprint_r>
10017680:	103a761e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017684:	d8c02017 	ldw	r3,128(sp)
10017688:	da000404 	addi	r8,sp,16
1001768c:	003d4a06 	br	10016bb8 <__alt_data_end+0xf8016bb8>
10017690:	d9002a17 	ldw	r4,168(sp)
10017694:	05bff7c4 	movi	r22,-33
10017698:	00bfffc4 	movi	r2,-1
1001769c:	8dac703a 	and	r22,r17,r22
100176a0:	20806a26 	beq	r4,r2,1001784c <___svfprintf_internal_r+0x1b8c>
100176a4:	008011c4 	movi	r2,71
100176a8:	b0813726 	beq	r22,r2,10017b88 <___svfprintf_internal_r+0x1ec8>
100176ac:	d9003717 	ldw	r4,220(sp)
100176b0:	90c04014 	ori	r3,r18,256
100176b4:	d8c02c15 	stw	r3,176(sp)
100176b8:	20015d16 	blt	r4,zero,10017c30 <___svfprintf_internal_r+0x1f70>
100176bc:	dd003717 	ldw	r20,220(sp)
100176c0:	d8002905 	stb	zero,164(sp)
100176c4:	00801984 	movi	r2,102
100176c8:	88814026 	beq	r17,r2,10017bcc <___svfprintf_internal_r+0x1f0c>
100176cc:	00801184 	movi	r2,70
100176d0:	88817126 	beq	r17,r2,10017c98 <___svfprintf_internal_r+0x1fd8>
100176d4:	00801144 	movi	r2,69
100176d8:	b0816226 	beq	r22,r2,10017c64 <___svfprintf_internal_r+0x1fa4>
100176dc:	d8c02a17 	ldw	r3,168(sp)
100176e0:	d8802104 	addi	r2,sp,132
100176e4:	d8800315 	stw	r2,12(sp)
100176e8:	d9403617 	ldw	r5,216(sp)
100176ec:	d8802504 	addi	r2,sp,148
100176f0:	d8800215 	stw	r2,8(sp)
100176f4:	d8802604 	addi	r2,sp,152
100176f8:	d8c00015 	stw	r3,0(sp)
100176fc:	d8800115 	stw	r2,4(sp)
10017700:	01c00084 	movi	r7,2
10017704:	a00d883a 	mov	r6,r20
10017708:	9809883a 	mov	r4,r19
1001770c:	d8c03d15 	stw	r3,244(sp)
10017710:	da003e15 	stw	r8,248(sp)
10017714:	000e2100 	call	1000e210 <_dtoa_r>
10017718:	1021883a 	mov	r16,r2
1001771c:	008019c4 	movi	r2,103
10017720:	d8c03d17 	ldw	r3,244(sp)
10017724:	da003e17 	ldw	r8,248(sp)
10017728:	8880e726 	beq	r17,r2,10017ac8 <___svfprintf_internal_r+0x1e08>
1001772c:	008011c4 	movi	r2,71
10017730:	8880d426 	beq	r17,r2,10017a84 <___svfprintf_internal_r+0x1dc4>
10017734:	80f9883a 	add	fp,r16,r3
10017738:	d9003617 	ldw	r4,216(sp)
1001773c:	000d883a 	mov	r6,zero
10017740:	000f883a 	mov	r7,zero
10017744:	a00b883a 	mov	r5,r20
10017748:	da003e15 	stw	r8,248(sp)
1001774c:	001dc140 	call	1001dc14 <__eqdf2>
10017750:	da003e17 	ldw	r8,248(sp)
10017754:	1000e426 	beq	r2,zero,10017ae8 <___svfprintf_internal_r+0x1e28>
10017758:	d8802117 	ldw	r2,132(sp)
1001775c:	1700062e 	bgeu	r2,fp,10017778 <___svfprintf_internal_r+0x1ab8>
10017760:	01000c04 	movi	r4,48
10017764:	10c00044 	addi	r3,r2,1
10017768:	d8c02115 	stw	r3,132(sp)
1001776c:	11000005 	stb	r4,0(r2)
10017770:	d8802117 	ldw	r2,132(sp)
10017774:	173ffb36 	bltu	r2,fp,10017764 <__alt_data_end+0xf8017764>
10017778:	1405c83a 	sub	r2,r2,r16
1001777c:	d8803315 	stw	r2,204(sp)
10017780:	008011c4 	movi	r2,71
10017784:	b080c526 	beq	r22,r2,10017a9c <___svfprintf_internal_r+0x1ddc>
10017788:	00801944 	movi	r2,101
1001778c:	1441d80e 	bge	r2,r17,10017ef0 <___svfprintf_internal_r+0x2230>
10017790:	d8c02617 	ldw	r3,152(sp)
10017794:	00801984 	movi	r2,102
10017798:	d8c03215 	stw	r3,200(sp)
1001779c:	88813426 	beq	r17,r2,10017c70 <___svfprintf_internal_r+0x1fb0>
100177a0:	d8c03217 	ldw	r3,200(sp)
100177a4:	d9003317 	ldw	r4,204(sp)
100177a8:	19012516 	blt	r3,r4,10017c40 <___svfprintf_internal_r+0x1f80>
100177ac:	9480004c 	andi	r18,r18,1
100177b0:	9001841e 	bne	r18,zero,10017dc4 <___svfprintf_internal_r+0x2104>
100177b4:	1805883a 	mov	r2,r3
100177b8:	1801cb16 	blt	r3,zero,10017ee8 <___svfprintf_internal_r+0x2228>
100177bc:	d8c03217 	ldw	r3,200(sp)
100177c0:	044019c4 	movi	r17,103
100177c4:	d8c02b15 	stw	r3,172(sp)
100177c8:	df002907 	ldb	fp,164(sp)
100177cc:	e000a61e 	bne	fp,zero,10017a68 <___svfprintf_internal_r+0x1da8>
100177d0:	df002783 	ldbu	fp,158(sp)
100177d4:	d8802915 	stw	r2,164(sp)
100177d8:	dc802c17 	ldw	r18,176(sp)
100177dc:	d8002a15 	stw	zero,168(sp)
100177e0:	003af506 	br	100163b8 <__alt_data_end+0xf80163b8>
100177e4:	040400b4 	movhi	r16,4098
100177e8:	840b4704 	addi	r16,r16,11548
100177ec:	003a7e06 	br	100161e8 <__alt_data_end+0xf80161e8>
100177f0:	d9003917 	ldw	r4,228(sp)
100177f4:	04001004 	movi	r16,64
100177f8:	800b883a 	mov	r5,r16
100177fc:	0010eac0 	call	10010eac <_malloc_r>
10017800:	d9002d17 	ldw	r4,180(sp)
10017804:	20800015 	stw	r2,0(r4)
10017808:	20800415 	stw	r2,16(r4)
1001780c:	1001d026 	beq	r2,zero,10017f50 <___svfprintf_internal_r+0x2290>
10017810:	d8802d17 	ldw	r2,180(sp)
10017814:	14000515 	stw	r16,20(r2)
10017818:	00394406 	br	10015d2c <__alt_data_end+0xf8015d2c>
1001781c:	040400b4 	movhi	r16,4098
10017820:	840b4904 	addi	r16,r16,11556
10017824:	003ee106 	br	100173ac <__alt_data_end+0xf80173ac>
10017828:	d9402d17 	ldw	r5,180(sp)
1001782c:	d9801e04 	addi	r6,sp,120
10017830:	9809883a 	mov	r4,r19
10017834:	001acd40 	call	1001acd4 <__ssprint_r>
10017838:	103a081e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
1001783c:	dc402617 	ldw	r17,152(sp)
10017840:	d8c02017 	ldw	r3,128(sp)
10017844:	da000404 	addi	r8,sp,16
10017848:	003f4306 	br	10017558 <__alt_data_end+0xf8017558>
1001784c:	01400184 	movi	r5,6
10017850:	d9402a15 	stw	r5,168(sp)
10017854:	003f9506 	br	100176ac <__alt_data_end+0xf80176ac>
10017858:	d8c02e17 	ldw	r3,184(sp)
1001785c:	1d000017 	ldw	r20,0(r3)
10017860:	18c00104 	addi	r3,r3,4
10017864:	d8c02e15 	stw	r3,184(sp)
10017868:	a02dd7fa 	srai	r22,r20,31
1001786c:	b005883a 	mov	r2,r22
10017870:	003a7606 	br	1001624c <__alt_data_end+0xf801624c>
10017874:	d9002e17 	ldw	r4,184(sp)
10017878:	002d883a 	mov	r22,zero
1001787c:	25000017 	ldw	r20,0(r4)
10017880:	21000104 	addi	r4,r4,4
10017884:	d9002e15 	stw	r4,184(sp)
10017888:	003bdd06 	br	10016800 <__alt_data_end+0xf8016800>
1001788c:	9480100c 	andi	r18,r18,64
10017890:	90006e26 	beq	r18,zero,10017a4c <___svfprintf_internal_r+0x1d8c>
10017894:	d9402e17 	ldw	r5,184(sp)
10017898:	d8c02f17 	ldw	r3,188(sp)
1001789c:	28800017 	ldw	r2,0(r5)
100178a0:	29400104 	addi	r5,r5,4
100178a4:	d9402e15 	stw	r5,184(sp)
100178a8:	10c0000d 	sth	r3,0(r2)
100178ac:	00392f06 	br	10015d6c <__alt_data_end+0xf8015d6c>
100178b0:	d9402d17 	ldw	r5,180(sp)
100178b4:	d9801e04 	addi	r6,sp,120
100178b8:	9809883a 	mov	r4,r19
100178bc:	001acd40 	call	1001acd4 <__ssprint_r>
100178c0:	1039e61e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
100178c4:	d8c02017 	ldw	r3,128(sp)
100178c8:	d8801f17 	ldw	r2,124(sp)
100178cc:	da000404 	addi	r8,sp,16
100178d0:	d9403317 	ldw	r5,204(sp)
100178d4:	10800044 	addi	r2,r2,1
100178d8:	44000015 	stw	r16,0(r8)
100178dc:	28c7883a 	add	r3,r5,r3
100178e0:	003b5506 	br	10016638 <__alt_data_end+0xf8016638>
100178e4:	8009883a 	mov	r4,r16
100178e8:	df003e15 	stw	fp,248(sp)
100178ec:	0009fe40 	call	10009fe4 <strlen>
100178f0:	d8802b15 	stw	r2,172(sp)
100178f4:	da003e17 	ldw	r8,248(sp)
100178f8:	103c160e 	bge	r2,zero,10016954 <__alt_data_end+0xf8016954>
100178fc:	0005883a 	mov	r2,zero
10017900:	003c1406 	br	10016954 <__alt_data_end+0xf8016954>
10017904:	00bfffc4 	movi	r2,-1
10017908:	0039d906 	br	10016070 <__alt_data_end+0xf8016070>
1001790c:	010400b4 	movhi	r4,4098
10017910:	210c7704 	addi	r4,r4,12764
10017914:	d9003515 	stw	r4,212(sp)
10017918:	003ae406 	br	100164ac <__alt_data_end+0xf80164ac>
1001791c:	013fffc4 	movi	r4,-1
10017920:	0039fa06 	br	1001610c <__alt_data_end+0xf801610c>
10017924:	d9402d17 	ldw	r5,180(sp)
10017928:	d9801e04 	addi	r6,sp,120
1001792c:	9809883a 	mov	r4,r19
10017930:	001acd40 	call	1001acd4 <__ssprint_r>
10017934:	1039c91e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017938:	d8c02017 	ldw	r3,128(sp)
1001793c:	da000404 	addi	r8,sp,16
10017940:	003d8406 	br	10016f54 <__alt_data_end+0xf8016f54>
10017944:	0023883a 	mov	r17,zero
10017948:	003d8306 	br	10016f58 <__alt_data_end+0xf8016f58>
1001794c:	010400b4 	movhi	r4,4098
10017950:	210c7304 	addi	r4,r4,12748
10017954:	d9002c15 	stw	r4,176(sp)
10017958:	d9002c17 	ldw	r4,176(sp)
1001795c:	1c47883a 	add	r3,r3,r17
10017960:	10800044 	addi	r2,r2,1
10017964:	41000015 	stw	r4,0(r8)
10017968:	44400115 	stw	r17,4(r8)
1001796c:	d8c02015 	stw	r3,128(sp)
10017970:	d8801f15 	stw	r2,124(sp)
10017974:	010001c4 	movi	r4,7
10017978:	20bfcd16 	blt	r4,r2,100178b0 <__alt_data_end+0xf80178b0>
1001797c:	42000204 	addi	r8,r8,8
10017980:	003fd306 	br	100178d0 <__alt_data_end+0xf80178d0>
10017984:	d9402d17 	ldw	r5,180(sp)
10017988:	d9801e04 	addi	r6,sp,120
1001798c:	9809883a 	mov	r4,r19
10017990:	001acd40 	call	1001acd4 <__ssprint_r>
10017994:	1039b11e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017998:	d8802617 	ldw	r2,152(sp)
1001799c:	d8c02017 	ldw	r3,128(sp)
100179a0:	da000404 	addi	r8,sp,16
100179a4:	003e1c06 	br	10017218 <__alt_data_end+0xf8017218>
100179a8:	d8802a17 	ldw	r2,168(sp)
100179ac:	00c00184 	movi	r3,6
100179b0:	1880012e 	bgeu	r3,r2,100179b8 <___svfprintf_internal_r+0x1cf8>
100179b4:	1805883a 	mov	r2,r3
100179b8:	d8802b15 	stw	r2,172(sp)
100179bc:	1000f316 	blt	r2,zero,10017d8c <___svfprintf_internal_r+0x20cc>
100179c0:	040400b4 	movhi	r16,4098
100179c4:	d8802915 	stw	r2,164(sp)
100179c8:	dd002e15 	stw	r20,184(sp)
100179cc:	d8002a15 	stw	zero,168(sp)
100179d0:	d8003215 	stw	zero,200(sp)
100179d4:	840b5504 	addi	r16,r16,11604
100179d8:	0039883a 	mov	fp,zero
100179dc:	003a7d06 	br	100163d4 <__alt_data_end+0xf80163d4>
100179e0:	010400b4 	movhi	r4,4098
100179e4:	210c7704 	addi	r4,r4,12764
100179e8:	d9003515 	stw	r4,212(sp)
100179ec:	003b3d06 	br	100166e4 <__alt_data_end+0xf80166e4>
100179f0:	d9402d17 	ldw	r5,180(sp)
100179f4:	d9801e04 	addi	r6,sp,120
100179f8:	9809883a 	mov	r4,r19
100179fc:	001acd40 	call	1001acd4 <__ssprint_r>
10017a00:	1039961e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017a04:	d8802617 	ldw	r2,152(sp)
10017a08:	d9403317 	ldw	r5,204(sp)
10017a0c:	d8c02017 	ldw	r3,128(sp)
10017a10:	da000404 	addi	r8,sp,16
10017a14:	2885c83a 	sub	r2,r5,r2
10017a18:	003e1006 	br	1001725c <__alt_data_end+0xf801725c>
10017a1c:	00800044 	movi	r2,1
10017a20:	10803fcc 	andi	r2,r2,255
10017a24:	00c00044 	movi	r3,1
10017a28:	10fa1026 	beq	r2,r3,1001626c <__alt_data_end+0xf801626c>
10017a2c:	00c00084 	movi	r3,2
10017a30:	10fb8226 	beq	r2,r3,1001683c <__alt_data_end+0xf801683c>
10017a34:	003a4206 	br	10016340 <__alt_data_end+0xf8016340>
10017a38:	0021883a 	mov	r16,zero
10017a3c:	003e0806 	br	10017260 <__alt_data_end+0xf8017260>
10017a40:	07000b44 	movi	fp,45
10017a44:	df002785 	stb	fp,158(sp)
10017a48:	0039e306 	br	100161d8 <__alt_data_end+0xf80161d8>
10017a4c:	d9002e17 	ldw	r4,184(sp)
10017a50:	d9402f17 	ldw	r5,188(sp)
10017a54:	20800017 	ldw	r2,0(r4)
10017a58:	21000104 	addi	r4,r4,4
10017a5c:	d9002e15 	stw	r4,184(sp)
10017a60:	11400015 	stw	r5,0(r2)
10017a64:	0038c106 	br	10015d6c <__alt_data_end+0xf8015d6c>
10017a68:	00c00b44 	movi	r3,45
10017a6c:	d8c02785 	stb	r3,158(sp)
10017a70:	d8802915 	stw	r2,164(sp)
10017a74:	dc802c17 	ldw	r18,176(sp)
10017a78:	d8002a15 	stw	zero,168(sp)
10017a7c:	07000b44 	movi	fp,45
10017a80:	003a5106 	br	100163c8 <__alt_data_end+0xf80163c8>
10017a84:	9080004c 	andi	r2,r18,1
10017a88:	1000941e 	bne	r2,zero,10017cdc <___svfprintf_internal_r+0x201c>
10017a8c:	d8802117 	ldw	r2,132(sp)
10017a90:	1405c83a 	sub	r2,r2,r16
10017a94:	d8803315 	stw	r2,204(sp)
10017a98:	b441151e 	bne	r22,r17,10017ef0 <___svfprintf_internal_r+0x2230>
10017a9c:	dd802617 	ldw	r22,152(sp)
10017aa0:	00bfff44 	movi	r2,-3
10017aa4:	b0801a16 	blt	r22,r2,10017b10 <___svfprintf_internal_r+0x1e50>
10017aa8:	d9402a17 	ldw	r5,168(sp)
10017aac:	2d801816 	blt	r5,r22,10017b10 <___svfprintf_internal_r+0x1e50>
10017ab0:	dd803215 	stw	r22,200(sp)
10017ab4:	003f3a06 	br	100177a0 <__alt_data_end+0xf80177a0>
10017ab8:	1025883a 	mov	r18,r2
10017abc:	0039883a 	mov	fp,zero
10017ac0:	00800084 	movi	r2,2
10017ac4:	003fd606 	br	10017a20 <__alt_data_end+0xf8017a20>
10017ac8:	9080004c 	andi	r2,r18,1
10017acc:	103f191e 	bne	r2,zero,10017734 <__alt_data_end+0xf8017734>
10017ad0:	d8802117 	ldw	r2,132(sp)
10017ad4:	003f2806 	br	10017778 <__alt_data_end+0xf8017778>
10017ad8:	010400b4 	movhi	r4,4098
10017adc:	210c7304 	addi	r4,r4,12748
10017ae0:	d9002c15 	stw	r4,176(sp)
10017ae4:	003c7c06 	br	10016cd8 <__alt_data_end+0xf8016cd8>
10017ae8:	e005883a 	mov	r2,fp
10017aec:	003f2206 	br	10017778 <__alt_data_end+0xf8017778>
10017af0:	d9002a17 	ldw	r4,168(sp)
10017af4:	df002783 	ldbu	fp,158(sp)
10017af8:	dd002e15 	stw	r20,184(sp)
10017afc:	d9002915 	stw	r4,164(sp)
10017b00:	d9002b15 	stw	r4,172(sp)
10017b04:	d8002a15 	stw	zero,168(sp)
10017b08:	d8003215 	stw	zero,200(sp)
10017b0c:	003a2a06 	br	100163b8 <__alt_data_end+0xf80163b8>
10017b10:	8c7fff84 	addi	r17,r17,-2
10017b14:	b5bfffc4 	addi	r22,r22,-1
10017b18:	dd802615 	stw	r22,152(sp)
10017b1c:	dc4022c5 	stb	r17,139(sp)
10017b20:	b000c316 	blt	r22,zero,10017e30 <___svfprintf_internal_r+0x2170>
10017b24:	00800ac4 	movi	r2,43
10017b28:	d8802305 	stb	r2,140(sp)
10017b2c:	00800244 	movi	r2,9
10017b30:	15806e16 	blt	r2,r22,10017cec <___svfprintf_internal_r+0x202c>
10017b34:	00800c04 	movi	r2,48
10017b38:	b5800c04 	addi	r22,r22,48
10017b3c:	d8802345 	stb	r2,141(sp)
10017b40:	dd802385 	stb	r22,142(sp)
10017b44:	d88023c4 	addi	r2,sp,143
10017b48:	df0022c4 	addi	fp,sp,139
10017b4c:	d8c03317 	ldw	r3,204(sp)
10017b50:	1739c83a 	sub	fp,r2,fp
10017b54:	d9003317 	ldw	r4,204(sp)
10017b58:	e0c7883a 	add	r3,fp,r3
10017b5c:	df003b15 	stw	fp,236(sp)
10017b60:	d8c02b15 	stw	r3,172(sp)
10017b64:	00800044 	movi	r2,1
10017b68:	1100b70e 	bge	r2,r4,10017e48 <___svfprintf_internal_r+0x2188>
10017b6c:	d8c02b17 	ldw	r3,172(sp)
10017b70:	18c00044 	addi	r3,r3,1
10017b74:	d8c02b15 	stw	r3,172(sp)
10017b78:	1805883a 	mov	r2,r3
10017b7c:	1800b016 	blt	r3,zero,10017e40 <___svfprintf_internal_r+0x2180>
10017b80:	d8003215 	stw	zero,200(sp)
10017b84:	003f1006 	br	100177c8 <__alt_data_end+0xf80177c8>
10017b88:	d8802a17 	ldw	r2,168(sp)
10017b8c:	103ec71e 	bne	r2,zero,100176ac <__alt_data_end+0xf80176ac>
10017b90:	dc002a15 	stw	r16,168(sp)
10017b94:	003ec506 	br	100176ac <__alt_data_end+0xf80176ac>
10017b98:	d9402d17 	ldw	r5,180(sp)
10017b9c:	d9801e04 	addi	r6,sp,120
10017ba0:	9809883a 	mov	r4,r19
10017ba4:	001acd40 	call	1001acd4 <__ssprint_r>
10017ba8:	10392c1e 	bne	r2,zero,1001605c <__alt_data_end+0xf801605c>
10017bac:	dc402617 	ldw	r17,152(sp)
10017bb0:	d8c02017 	ldw	r3,128(sp)
10017bb4:	d8801f17 	ldw	r2,124(sp)
10017bb8:	da000404 	addi	r8,sp,16
10017bbc:	003e7706 	br	1001759c <__alt_data_end+0xf801759c>
10017bc0:	182f883a 	mov	r23,r3
10017bc4:	d8002a15 	stw	zero,168(sp)
10017bc8:	00389306 	br	10015e18 <__alt_data_end+0xf8015e18>
10017bcc:	d8c02a17 	ldw	r3,168(sp)
10017bd0:	d8802104 	addi	r2,sp,132
10017bd4:	d8800315 	stw	r2,12(sp)
10017bd8:	d9403617 	ldw	r5,216(sp)
10017bdc:	d8802504 	addi	r2,sp,148
10017be0:	d8800215 	stw	r2,8(sp)
10017be4:	d8802604 	addi	r2,sp,152
10017be8:	d8c00015 	stw	r3,0(sp)
10017bec:	9809883a 	mov	r4,r19
10017bf0:	d8800115 	stw	r2,4(sp)
10017bf4:	01c000c4 	movi	r7,3
10017bf8:	a00d883a 	mov	r6,r20
10017bfc:	da003e15 	stw	r8,248(sp)
10017c00:	000e2100 	call	1000e210 <_dtoa_r>
10017c04:	d9002a17 	ldw	r4,168(sp)
10017c08:	da003e17 	ldw	r8,248(sp)
10017c0c:	1021883a 	mov	r16,r2
10017c10:	1139883a 	add	fp,r2,r4
10017c14:	2007883a 	mov	r3,r4
10017c18:	81000007 	ldb	r4,0(r16)
10017c1c:	00800c04 	movi	r2,48
10017c20:	20806f26 	beq	r4,r2,10017de0 <___svfprintf_internal_r+0x2120>
10017c24:	d8c02617 	ldw	r3,152(sp)
10017c28:	e0f9883a 	add	fp,fp,r3
10017c2c:	003ec206 	br	10017738 <__alt_data_end+0xf8017738>
10017c30:	00c00b44 	movi	r3,45
10017c34:	2520003c 	xorhi	r20,r4,32768
10017c38:	d8c02905 	stb	r3,164(sp)
10017c3c:	003ea106 	br	100176c4 <__alt_data_end+0xf80176c4>
10017c40:	d8c03217 	ldw	r3,200(sp)
10017c44:	00c0890e 	bge	zero,r3,10017e6c <___svfprintf_internal_r+0x21ac>
10017c48:	00800044 	movi	r2,1
10017c4c:	d9003317 	ldw	r4,204(sp)
10017c50:	1105883a 	add	r2,r2,r4
10017c54:	d8802b15 	stw	r2,172(sp)
10017c58:	10005f16 	blt	r2,zero,10017dd8 <___svfprintf_internal_r+0x2118>
10017c5c:	044019c4 	movi	r17,103
10017c60:	003ed906 	br	100177c8 <__alt_data_end+0xf80177c8>
10017c64:	d9002a17 	ldw	r4,168(sp)
10017c68:	20c00044 	addi	r3,r4,1
10017c6c:	003e9c06 	br	100176e0 <__alt_data_end+0xf80176e0>
10017c70:	d9002a17 	ldw	r4,168(sp)
10017c74:	00c0680e 	bge	zero,r3,10017e18 <___svfprintf_internal_r+0x2158>
10017c78:	2000461e 	bne	r4,zero,10017d94 <___svfprintf_internal_r+0x20d4>
10017c7c:	9480004c 	andi	r18,r18,1
10017c80:	9000441e 	bne	r18,zero,10017d94 <___svfprintf_internal_r+0x20d4>
10017c84:	1805883a 	mov	r2,r3
10017c88:	1800a116 	blt	r3,zero,10017f10 <___svfprintf_internal_r+0x2250>
10017c8c:	d8c03217 	ldw	r3,200(sp)
10017c90:	d8c02b15 	stw	r3,172(sp)
10017c94:	003ecc06 	br	100177c8 <__alt_data_end+0xf80177c8>
10017c98:	d9402a17 	ldw	r5,168(sp)
10017c9c:	d8802104 	addi	r2,sp,132
10017ca0:	d8800315 	stw	r2,12(sp)
10017ca4:	d9400015 	stw	r5,0(sp)
10017ca8:	d8802504 	addi	r2,sp,148
10017cac:	d9403617 	ldw	r5,216(sp)
10017cb0:	d8800215 	stw	r2,8(sp)
10017cb4:	d8802604 	addi	r2,sp,152
10017cb8:	d8800115 	stw	r2,4(sp)
10017cbc:	01c000c4 	movi	r7,3
10017cc0:	a00d883a 	mov	r6,r20
10017cc4:	9809883a 	mov	r4,r19
10017cc8:	da003e15 	stw	r8,248(sp)
10017ccc:	000e2100 	call	1000e210 <_dtoa_r>
10017cd0:	d8c02a17 	ldw	r3,168(sp)
10017cd4:	da003e17 	ldw	r8,248(sp)
10017cd8:	1021883a 	mov	r16,r2
10017cdc:	00801184 	movi	r2,70
10017ce0:	80f9883a 	add	fp,r16,r3
10017ce4:	88bfcc26 	beq	r17,r2,10017c18 <__alt_data_end+0xf8017c18>
10017ce8:	003e9306 	br	10017738 <__alt_data_end+0xf8017738>
10017cec:	df0022c4 	addi	fp,sp,139
10017cf0:	dc002a15 	stw	r16,168(sp)
10017cf4:	9829883a 	mov	r20,r19
10017cf8:	e021883a 	mov	r16,fp
10017cfc:	4027883a 	mov	r19,r8
10017d00:	b009883a 	mov	r4,r22
10017d04:	01400284 	movi	r5,10
10017d08:	0009b540 	call	10009b54 <__modsi3>
10017d0c:	10800c04 	addi	r2,r2,48
10017d10:	843fffc4 	addi	r16,r16,-1
10017d14:	b009883a 	mov	r4,r22
10017d18:	01400284 	movi	r5,10
10017d1c:	80800005 	stb	r2,0(r16)
10017d20:	0009ad00 	call	10009ad0 <__divsi3>
10017d24:	102d883a 	mov	r22,r2
10017d28:	00800244 	movi	r2,9
10017d2c:	15bff416 	blt	r2,r22,10017d00 <__alt_data_end+0xf8017d00>
10017d30:	9811883a 	mov	r8,r19
10017d34:	b0800c04 	addi	r2,r22,48
10017d38:	a027883a 	mov	r19,r20
10017d3c:	8029883a 	mov	r20,r16
10017d40:	a17fffc4 	addi	r5,r20,-1
10017d44:	a0bfffc5 	stb	r2,-1(r20)
10017d48:	dc002a17 	ldw	r16,168(sp)
10017d4c:	2f00782e 	bgeu	r5,fp,10017f30 <___svfprintf_internal_r+0x2270>
10017d50:	d9c02384 	addi	r7,sp,142
10017d54:	3d0fc83a 	sub	r7,r7,r20
10017d58:	d9002344 	addi	r4,sp,141
10017d5c:	e1cf883a 	add	r7,fp,r7
10017d60:	00000106 	br	10017d68 <___svfprintf_internal_r+0x20a8>
10017d64:	28800003 	ldbu	r2,0(r5)
10017d68:	20800005 	stb	r2,0(r4)
10017d6c:	21000044 	addi	r4,r4,1
10017d70:	29400044 	addi	r5,r5,1
10017d74:	21fffb1e 	bne	r4,r7,10017d64 <__alt_data_end+0xf8017d64>
10017d78:	d8802304 	addi	r2,sp,140
10017d7c:	1505c83a 	sub	r2,r2,r20
10017d80:	d8c02344 	addi	r3,sp,141
10017d84:	1885883a 	add	r2,r3,r2
10017d88:	003f7006 	br	10017b4c <__alt_data_end+0xf8017b4c>
10017d8c:	0005883a 	mov	r2,zero
10017d90:	003f0b06 	br	100179c0 <__alt_data_end+0xf80179c0>
10017d94:	d9002a17 	ldw	r4,168(sp)
10017d98:	d8c03217 	ldw	r3,200(sp)
10017d9c:	20800044 	addi	r2,r4,1
10017da0:	1885883a 	add	r2,r3,r2
10017da4:	d8802b15 	stw	r2,172(sp)
10017da8:	103e870e 	bge	r2,zero,100177c8 <__alt_data_end+0xf80177c8>
10017dac:	0005883a 	mov	r2,zero
10017db0:	003e8506 	br	100177c8 <__alt_data_end+0xf80177c8>
10017db4:	010400b4 	movhi	r4,4098
10017db8:	210c7304 	addi	r4,r4,12748
10017dbc:	d9002c15 	stw	r4,176(sp)
10017dc0:	003cc506 	br	100170d8 <__alt_data_end+0xf80170d8>
10017dc4:	d8c03217 	ldw	r3,200(sp)
10017dc8:	18c00044 	addi	r3,r3,1
10017dcc:	d8c02b15 	stw	r3,172(sp)
10017dd0:	1805883a 	mov	r2,r3
10017dd4:	183fa10e 	bge	r3,zero,10017c5c <__alt_data_end+0xf8017c5c>
10017dd8:	0005883a 	mov	r2,zero
10017ddc:	003f9f06 	br	10017c5c <__alt_data_end+0xf8017c5c>
10017de0:	d9003617 	ldw	r4,216(sp)
10017de4:	000d883a 	mov	r6,zero
10017de8:	000f883a 	mov	r7,zero
10017dec:	a00b883a 	mov	r5,r20
10017df0:	d8c03d15 	stw	r3,244(sp)
10017df4:	da003e15 	stw	r8,248(sp)
10017df8:	001dc140 	call	1001dc14 <__eqdf2>
10017dfc:	d8c03d17 	ldw	r3,244(sp)
10017e00:	da003e17 	ldw	r8,248(sp)
10017e04:	103f8726 	beq	r2,zero,10017c24 <__alt_data_end+0xf8017c24>
10017e08:	00800044 	movi	r2,1
10017e0c:	10c7c83a 	sub	r3,r2,r3
10017e10:	d8c02615 	stw	r3,152(sp)
10017e14:	003f8406 	br	10017c28 <__alt_data_end+0xf8017c28>
10017e18:	20000e1e 	bne	r4,zero,10017e54 <___svfprintf_internal_r+0x2194>
10017e1c:	9480004c 	andi	r18,r18,1
10017e20:	90000c1e 	bne	r18,zero,10017e54 <___svfprintf_internal_r+0x2194>
10017e24:	00800044 	movi	r2,1
10017e28:	d8802b15 	stw	r2,172(sp)
10017e2c:	003e6606 	br	100177c8 <__alt_data_end+0xf80177c8>
10017e30:	00800b44 	movi	r2,45
10017e34:	05adc83a 	sub	r22,zero,r22
10017e38:	d8802305 	stb	r2,140(sp)
10017e3c:	003f3b06 	br	10017b2c <__alt_data_end+0xf8017b2c>
10017e40:	0005883a 	mov	r2,zero
10017e44:	003f4e06 	br	10017b80 <__alt_data_end+0xf8017b80>
10017e48:	90a4703a 	and	r18,r18,r2
10017e4c:	903f4a26 	beq	r18,zero,10017b78 <__alt_data_end+0xf8017b78>
10017e50:	003f4606 	br	10017b6c <__alt_data_end+0xf8017b6c>
10017e54:	d8c02a17 	ldw	r3,168(sp)
10017e58:	18c00084 	addi	r3,r3,2
10017e5c:	d8c02b15 	stw	r3,172(sp)
10017e60:	1805883a 	mov	r2,r3
10017e64:	183e580e 	bge	r3,zero,100177c8 <__alt_data_end+0xf80177c8>
10017e68:	003fd006 	br	10017dac <__alt_data_end+0xf8017dac>
10017e6c:	00800084 	movi	r2,2
10017e70:	10c5c83a 	sub	r2,r2,r3
10017e74:	003f7506 	br	10017c4c <__alt_data_end+0xf8017c4c>
10017e78:	d9402e17 	ldw	r5,184(sp)
10017e7c:	d9002e17 	ldw	r4,184(sp)
10017e80:	bc400043 	ldbu	r17,1(r23)
10017e84:	29400017 	ldw	r5,0(r5)
10017e88:	20800104 	addi	r2,r4,4
10017e8c:	d8802e15 	stw	r2,184(sp)
10017e90:	d9402a15 	stw	r5,168(sp)
10017e94:	182f883a 	mov	r23,r3
10017e98:	283df10e 	bge	r5,zero,10017660 <__alt_data_end+0xf8017660>
10017e9c:	8c403fcc 	andi	r17,r17,255
10017ea0:	017fffc4 	movi	r5,-1
10017ea4:	8c40201c 	xori	r17,r17,128
10017ea8:	d9402a15 	stw	r5,168(sp)
10017eac:	8c7fe004 	addi	r17,r17,-128
10017eb0:	0037d806 	br	10015e14 <__alt_data_end+0xf8015e14>
10017eb4:	9080004c 	andi	r2,r18,1
10017eb8:	0039883a 	mov	fp,zero
10017ebc:	10000726 	beq	r2,zero,10017edc <___svfprintf_internal_r+0x221c>
10017ec0:	d8c02817 	ldw	r3,160(sp)
10017ec4:	dc001dc4 	addi	r16,sp,119
10017ec8:	00800c04 	movi	r2,48
10017ecc:	1c07c83a 	sub	r3,r3,r16
10017ed0:	d8801dc5 	stb	r2,119(sp)
10017ed4:	d8c02b15 	stw	r3,172(sp)
10017ed8:	00393106 	br	100163a0 <__alt_data_end+0xf80163a0>
10017edc:	d8002b15 	stw	zero,172(sp)
10017ee0:	dc001e04 	addi	r16,sp,120
10017ee4:	00392e06 	br	100163a0 <__alt_data_end+0xf80163a0>
10017ee8:	0005883a 	mov	r2,zero
10017eec:	003e3306 	br	100177bc <__alt_data_end+0xf80177bc>
10017ef0:	dd802617 	ldw	r22,152(sp)
10017ef4:	003f0706 	br	10017b14 <__alt_data_end+0xf8017b14>
10017ef8:	d8c02b03 	ldbu	r3,172(sp)
10017efc:	d8c02785 	stb	r3,158(sp)
10017f00:	003a3506 	br	100167d8 <__alt_data_end+0xf80167d8>
10017f04:	d8c02b03 	ldbu	r3,172(sp)
10017f08:	d8c02785 	stb	r3,158(sp)
10017f0c:	003a1706 	br	1001676c <__alt_data_end+0xf801676c>
10017f10:	0005883a 	mov	r2,zero
10017f14:	003f5d06 	br	10017c8c <__alt_data_end+0xf8017c8c>
10017f18:	d8c02b03 	ldbu	r3,172(sp)
10017f1c:	d8c02785 	stb	r3,158(sp)
10017f20:	0038f306 	br	100162f0 <__alt_data_end+0xf80162f0>
10017f24:	d8c02b03 	ldbu	r3,172(sp)
10017f28:	d8c02785 	stb	r3,158(sp)
10017f2c:	0038be06 	br	10016228 <__alt_data_end+0xf8016228>
10017f30:	d8802344 	addi	r2,sp,141
10017f34:	003f0506 	br	10017b4c <__alt_data_end+0xf8017b4c>
10017f38:	d8c02b03 	ldbu	r3,172(sp)
10017f3c:	d8c02785 	stb	r3,158(sp)
10017f40:	00388b06 	br	10016170 <__alt_data_end+0xf8016170>
10017f44:	d8c02b03 	ldbu	r3,172(sp)
10017f48:	d8c02785 	stb	r3,158(sp)
10017f4c:	003ad706 	br	10016aac <__alt_data_end+0xf8016aac>
10017f50:	d9403917 	ldw	r5,228(sp)
10017f54:	00800304 	movi	r2,12
10017f58:	28800015 	stw	r2,0(r5)
10017f5c:	00bfffc4 	movi	r2,-1
10017f60:	00384306 	br	10016070 <__alt_data_end+0xf8016070>
10017f64:	d8c02b03 	ldbu	r3,172(sp)
10017f68:	d8c02785 	stb	r3,158(sp)
10017f6c:	003ab606 	br	10016a48 <__alt_data_end+0xf8016a48>
10017f70:	d8c02b03 	ldbu	r3,172(sp)
10017f74:	d8c02785 	stb	r3,158(sp)
10017f78:	003a8906 	br	100169a0 <__alt_data_end+0xf80169a0>

10017f7c <__submore>:
10017f7c:	defffa04 	addi	sp,sp,-24
10017f80:	dc000015 	stw	r16,0(sp)
10017f84:	2821883a 	mov	r16,r5
10017f88:	29400c17 	ldw	r5,48(r5)
10017f8c:	dfc00515 	stw	ra,20(sp)
10017f90:	dd000415 	stw	r20,16(sp)
10017f94:	dcc00315 	stw	r19,12(sp)
10017f98:	dc800215 	stw	r18,8(sp)
10017f9c:	dc400115 	stw	r17,4(sp)
10017fa0:	80801004 	addi	r2,r16,64
10017fa4:	28801726 	beq	r5,r2,10018004 <__submore+0x88>
10017fa8:	84400d17 	ldw	r17,52(r16)
10017fac:	8c67883a 	add	r19,r17,r17
10017fb0:	980d883a 	mov	r6,r19
10017fb4:	0012e640 	call	10012e64 <_realloc_r>
10017fb8:	1025883a 	mov	r18,r2
10017fbc:	10002226 	beq	r2,zero,10018048 <__submore+0xcc>
10017fc0:	1469883a 	add	r20,r2,r17
10017fc4:	880d883a 	mov	r6,r17
10017fc8:	100b883a 	mov	r5,r2
10017fcc:	a009883a 	mov	r4,r20
10017fd0:	0009cd00 	call	10009cd0 <memcpy>
10017fd4:	0005883a 	mov	r2,zero
10017fd8:	85000015 	stw	r20,0(r16)
10017fdc:	84800c15 	stw	r18,48(r16)
10017fe0:	84c00d15 	stw	r19,52(r16)
10017fe4:	dfc00517 	ldw	ra,20(sp)
10017fe8:	dd000417 	ldw	r20,16(sp)
10017fec:	dcc00317 	ldw	r19,12(sp)
10017ff0:	dc800217 	ldw	r18,8(sp)
10017ff4:	dc400117 	ldw	r17,4(sp)
10017ff8:	dc000017 	ldw	r16,0(sp)
10017ffc:	dec00604 	addi	sp,sp,24
10018000:	f800283a 	ret
10018004:	04410004 	movi	r17,1024
10018008:	880b883a 	mov	r5,r17
1001800c:	0010eac0 	call	10010eac <_malloc_r>
10018010:	1007883a 	mov	r3,r2
10018014:	10000c26 	beq	r2,zero,10018048 <__submore+0xcc>
10018018:	80801083 	ldbu	r2,66(r16)
1001801c:	80c00c15 	stw	r3,48(r16)
10018020:	84400d15 	stw	r17,52(r16)
10018024:	1880ffc5 	stb	r2,1023(r3)
10018028:	81401043 	ldbu	r5,65(r16)
1001802c:	1900ff44 	addi	r4,r3,1021
10018030:	0005883a 	mov	r2,zero
10018034:	1940ff85 	stb	r5,1022(r3)
10018038:	81401003 	ldbu	r5,64(r16)
1001803c:	1940ff45 	stb	r5,1021(r3)
10018040:	81000015 	stw	r4,0(r16)
10018044:	003fe706 	br	10017fe4 <__alt_data_end+0xf8017fe4>
10018048:	00bfffc4 	movi	r2,-1
1001804c:	003fe506 	br	10017fe4 <__alt_data_end+0xf8017fe4>

10018050 <_ungetc_r>:
10018050:	00bfffc4 	movi	r2,-1
10018054:	28806126 	beq	r5,r2,100181dc <_ungetc_r+0x18c>
10018058:	defffb04 	addi	sp,sp,-20
1001805c:	dcc00315 	stw	r19,12(sp)
10018060:	dc400115 	stw	r17,4(sp)
10018064:	dc000015 	stw	r16,0(sp)
10018068:	dfc00415 	stw	ra,16(sp)
1001806c:	dc800215 	stw	r18,8(sp)
10018070:	2023883a 	mov	r17,r4
10018074:	3021883a 	mov	r16,r6
10018078:	2827883a 	mov	r19,r5
1001807c:	20000226 	beq	r4,zero,10018088 <_ungetc_r+0x38>
10018080:	20800e17 	ldw	r2,56(r4)
10018084:	10002e26 	beq	r2,zero,10018140 <_ungetc_r+0xf0>
10018088:	80c0030b 	ldhu	r3,12(r16)
1001808c:	1888000c 	andi	r2,r3,8192
10018090:	1000051e 	bne	r2,zero,100180a8 <_ungetc_r+0x58>
10018094:	81001917 	ldw	r4,100(r16)
10018098:	00b7ffc4 	movi	r2,-8193
1001809c:	18c80014 	ori	r3,r3,8192
100180a0:	2084703a 	and	r2,r4,r2
100180a4:	80801915 	stw	r2,100(r16)
100180a8:	00bff7c4 	movi	r2,-33
100180ac:	1884703a 	and	r2,r3,r2
100180b0:	8080030d 	sth	r2,12(r16)
100180b4:	1900010c 	andi	r4,r3,4
100180b8:	2000061e 	bne	r4,zero,100180d4 <_ungetc_r+0x84>
100180bc:	1900040c 	andi	r4,r3,16
100180c0:	20001d26 	beq	r4,zero,10018138 <_ungetc_r+0xe8>
100180c4:	18c0020c 	andi	r3,r3,8
100180c8:	1800331e 	bne	r3,zero,10018198 <_ungetc_r+0x148>
100180cc:	10800114 	ori	r2,r2,4
100180d0:	8080030d 	sth	r2,12(r16)
100180d4:	80800c17 	ldw	r2,48(r16)
100180d8:	9c803fcc 	andi	r18,r19,255
100180dc:	10001a26 	beq	r2,zero,10018148 <_ungetc_r+0xf8>
100180e0:	80c00117 	ldw	r3,4(r16)
100180e4:	80800d17 	ldw	r2,52(r16)
100180e8:	18800f0e 	bge	r3,r2,10018128 <_ungetc_r+0xd8>
100180ec:	80c00017 	ldw	r3,0(r16)
100180f0:	9005883a 	mov	r2,r18
100180f4:	193fffc4 	addi	r4,r3,-1
100180f8:	81000015 	stw	r4,0(r16)
100180fc:	1cffffc5 	stb	r19,-1(r3)
10018100:	80c00117 	ldw	r3,4(r16)
10018104:	18c00044 	addi	r3,r3,1
10018108:	80c00115 	stw	r3,4(r16)
1001810c:	dfc00417 	ldw	ra,16(sp)
10018110:	dcc00317 	ldw	r19,12(sp)
10018114:	dc800217 	ldw	r18,8(sp)
10018118:	dc400117 	ldw	r17,4(sp)
1001811c:	dc000017 	ldw	r16,0(sp)
10018120:	dec00504 	addi	sp,sp,20
10018124:	f800283a 	ret
10018128:	800b883a 	mov	r5,r16
1001812c:	8809883a 	mov	r4,r17
10018130:	0017f7c0 	call	10017f7c <__submore>
10018134:	103fed26 	beq	r2,zero,100180ec <__alt_data_end+0xf80180ec>
10018138:	00bfffc4 	movi	r2,-1
1001813c:	003ff306 	br	1001810c <__alt_data_end+0xf801810c>
10018140:	000fea00 	call	1000fea0 <__sinit>
10018144:	003fd006 	br	10018088 <__alt_data_end+0xf8018088>
10018148:	80c00417 	ldw	r3,16(r16)
1001814c:	80800017 	ldw	r2,0(r16)
10018150:	18000326 	beq	r3,zero,10018160 <_ungetc_r+0x110>
10018154:	1880022e 	bgeu	r3,r2,10018160 <_ungetc_r+0x110>
10018158:	10ffffc3 	ldbu	r3,-1(r2)
1001815c:	90c01826 	beq	r18,r3,100181c0 <_ungetc_r+0x170>
10018160:	81400117 	ldw	r5,4(r16)
10018164:	80800e15 	stw	r2,56(r16)
10018168:	008000c4 	movi	r2,3
1001816c:	81001004 	addi	r4,r16,64
10018170:	80c01084 	addi	r3,r16,66
10018174:	80800d15 	stw	r2,52(r16)
10018178:	00800044 	movi	r2,1
1001817c:	80800115 	stw	r2,4(r16)
10018180:	81400f15 	stw	r5,60(r16)
10018184:	81000c15 	stw	r4,48(r16)
10018188:	84c01085 	stb	r19,66(r16)
1001818c:	80c00015 	stw	r3,0(r16)
10018190:	9005883a 	mov	r2,r18
10018194:	003fdd06 	br	1001810c <__alt_data_end+0xf801810c>
10018198:	800b883a 	mov	r5,r16
1001819c:	8809883a 	mov	r4,r17
100181a0:	000fab40 	call	1000fab4 <_fflush_r>
100181a4:	103fe41e 	bne	r2,zero,10018138 <__alt_data_end+0xf8018138>
100181a8:	8080030b 	ldhu	r2,12(r16)
100181ac:	00fffdc4 	movi	r3,-9
100181b0:	80000215 	stw	zero,8(r16)
100181b4:	1884703a 	and	r2,r3,r2
100181b8:	80000615 	stw	zero,24(r16)
100181bc:	003fc306 	br	100180cc <__alt_data_end+0xf80180cc>
100181c0:	80c00117 	ldw	r3,4(r16)
100181c4:	10bfffc4 	addi	r2,r2,-1
100181c8:	80800015 	stw	r2,0(r16)
100181cc:	18800044 	addi	r2,r3,1
100181d0:	80800115 	stw	r2,4(r16)
100181d4:	9005883a 	mov	r2,r18
100181d8:	003fcc06 	br	1001810c <__alt_data_end+0xf801810c>
100181dc:	00bfffc4 	movi	r2,-1
100181e0:	f800283a 	ret

100181e4 <ungetc>:
100181e4:	008400b4 	movhi	r2,4098
100181e8:	10951604 	addi	r2,r2,21592
100181ec:	280d883a 	mov	r6,r5
100181f0:	200b883a 	mov	r5,r4
100181f4:	11000017 	ldw	r4,0(r2)
100181f8:	00180501 	jmpi	10018050 <_ungetc_r>

100181fc <__sprint_r.part.0>:
100181fc:	28801917 	ldw	r2,100(r5)
10018200:	defff604 	addi	sp,sp,-40
10018204:	dd400515 	stw	r21,20(sp)
10018208:	dfc00915 	stw	ra,36(sp)
1001820c:	df000815 	stw	fp,32(sp)
10018210:	ddc00715 	stw	r23,28(sp)
10018214:	dd800615 	stw	r22,24(sp)
10018218:	dd000415 	stw	r20,16(sp)
1001821c:	dcc00315 	stw	r19,12(sp)
10018220:	dc800215 	stw	r18,8(sp)
10018224:	dc400115 	stw	r17,4(sp)
10018228:	dc000015 	stw	r16,0(sp)
1001822c:	1088000c 	andi	r2,r2,8192
10018230:	302b883a 	mov	r21,r6
10018234:	10002e26 	beq	r2,zero,100182f0 <__sprint_r.part.0+0xf4>
10018238:	30800217 	ldw	r2,8(r6)
1001823c:	35800017 	ldw	r22,0(r6)
10018240:	10002926 	beq	r2,zero,100182e8 <__sprint_r.part.0+0xec>
10018244:	2827883a 	mov	r19,r5
10018248:	2029883a 	mov	r20,r4
1001824c:	b5c00104 	addi	r23,r22,4
10018250:	04bfffc4 	movi	r18,-1
10018254:	bc400017 	ldw	r17,0(r23)
10018258:	b4000017 	ldw	r16,0(r22)
1001825c:	0039883a 	mov	fp,zero
10018260:	8822d0ba 	srli	r17,r17,2
10018264:	8800031e 	bne	r17,zero,10018274 <__sprint_r.part.0+0x78>
10018268:	00001806 	br	100182cc <__sprint_r.part.0+0xd0>
1001826c:	84000104 	addi	r16,r16,4
10018270:	8f001526 	beq	r17,fp,100182c8 <__sprint_r.part.0+0xcc>
10018274:	81400017 	ldw	r5,0(r16)
10018278:	980d883a 	mov	r6,r19
1001827c:	a009883a 	mov	r4,r20
10018280:	0019e440 	call	10019e44 <_fputwc_r>
10018284:	e7000044 	addi	fp,fp,1
10018288:	14bff81e 	bne	r2,r18,1001826c <__alt_data_end+0xf801826c>
1001828c:	9005883a 	mov	r2,r18
10018290:	a8000215 	stw	zero,8(r21)
10018294:	a8000115 	stw	zero,4(r21)
10018298:	dfc00917 	ldw	ra,36(sp)
1001829c:	df000817 	ldw	fp,32(sp)
100182a0:	ddc00717 	ldw	r23,28(sp)
100182a4:	dd800617 	ldw	r22,24(sp)
100182a8:	dd400517 	ldw	r21,20(sp)
100182ac:	dd000417 	ldw	r20,16(sp)
100182b0:	dcc00317 	ldw	r19,12(sp)
100182b4:	dc800217 	ldw	r18,8(sp)
100182b8:	dc400117 	ldw	r17,4(sp)
100182bc:	dc000017 	ldw	r16,0(sp)
100182c0:	dec00a04 	addi	sp,sp,40
100182c4:	f800283a 	ret
100182c8:	a8800217 	ldw	r2,8(r21)
100182cc:	8c63883a 	add	r17,r17,r17
100182d0:	8c63883a 	add	r17,r17,r17
100182d4:	1445c83a 	sub	r2,r2,r17
100182d8:	a8800215 	stw	r2,8(r21)
100182dc:	b5800204 	addi	r22,r22,8
100182e0:	bdc00204 	addi	r23,r23,8
100182e4:	103fdb1e 	bne	r2,zero,10018254 <__alt_data_end+0xf8018254>
100182e8:	0005883a 	mov	r2,zero
100182ec:	003fe806 	br	10018290 <__alt_data_end+0xf8018290>
100182f0:	00105940 	call	10010594 <__sfvwrite_r>
100182f4:	003fe606 	br	10018290 <__alt_data_end+0xf8018290>

100182f8 <__sprint_r>:
100182f8:	30c00217 	ldw	r3,8(r6)
100182fc:	18000126 	beq	r3,zero,10018304 <__sprint_r+0xc>
10018300:	00181fc1 	jmpi	100181fc <__sprint_r.part.0>
10018304:	30000115 	stw	zero,4(r6)
10018308:	0005883a 	mov	r2,zero
1001830c:	f800283a 	ret

10018310 <___vfiprintf_internal_r>:
10018310:	deffca04 	addi	sp,sp,-216
10018314:	dd403115 	stw	r21,196(sp)
10018318:	dfc03515 	stw	ra,212(sp)
1001831c:	df003415 	stw	fp,208(sp)
10018320:	ddc03315 	stw	r23,204(sp)
10018324:	dd803215 	stw	r22,200(sp)
10018328:	dd003015 	stw	r20,192(sp)
1001832c:	dcc02f15 	stw	r19,188(sp)
10018330:	dc802e15 	stw	r18,184(sp)
10018334:	dc402d15 	stw	r17,180(sp)
10018338:	dc002c15 	stw	r16,176(sp)
1001833c:	d9002115 	stw	r4,132(sp)
10018340:	d9402015 	stw	r5,128(sp)
10018344:	d9c02215 	stw	r7,136(sp)
10018348:	302b883a 	mov	r21,r6
1001834c:	20000226 	beq	r4,zero,10018358 <___vfiprintf_internal_r+0x48>
10018350:	20800e17 	ldw	r2,56(r4)
10018354:	1000cf26 	beq	r2,zero,10018694 <___vfiprintf_internal_r+0x384>
10018358:	d8c02017 	ldw	r3,128(sp)
1001835c:	1880030b 	ldhu	r2,12(r3)
10018360:	10c8000c 	andi	r3,r2,8192
10018364:	1800071e 	bne	r3,zero,10018384 <___vfiprintf_internal_r+0x74>
10018368:	d9402017 	ldw	r5,128(sp)
1001836c:	00f7ffc4 	movi	r3,-8193
10018370:	10880014 	ori	r2,r2,8192
10018374:	29001917 	ldw	r4,100(r5)
10018378:	2880030d 	sth	r2,12(r5)
1001837c:	20c6703a 	and	r3,r4,r3
10018380:	28c01915 	stw	r3,100(r5)
10018384:	10c0020c 	andi	r3,r2,8
10018388:	1800a526 	beq	r3,zero,10018620 <___vfiprintf_internal_r+0x310>
1001838c:	d9002017 	ldw	r4,128(sp)
10018390:	20c00417 	ldw	r3,16(r4)
10018394:	1800a226 	beq	r3,zero,10018620 <___vfiprintf_internal_r+0x310>
10018398:	1080068c 	andi	r2,r2,26
1001839c:	00c00284 	movi	r3,10
100183a0:	10c0a826 	beq	r2,r3,10018644 <___vfiprintf_internal_r+0x334>
100183a4:	d9001a04 	addi	r4,sp,104
100183a8:	d94019c4 	addi	r5,sp,103
100183ac:	048400b4 	movhi	r18,4098
100183b0:	2145c83a 	sub	r2,r4,r5
100183b4:	948c7b04 	addi	r18,r18,12780
100183b8:	d9001e15 	stw	r4,120(sp)
100183bc:	d9401f15 	stw	r5,124(sp)
100183c0:	dec01a15 	stw	sp,104(sp)
100183c4:	d8001c15 	stw	zero,112(sp)
100183c8:	d8001b15 	stw	zero,108(sp)
100183cc:	d811883a 	mov	r8,sp
100183d0:	d8002615 	stw	zero,152(sp)
100183d4:	d8002415 	stw	zero,144(sp)
100183d8:	d8802815 	stw	r2,160(sp)
100183dc:	a82d883a 	mov	r22,r21
100183e0:	b0800007 	ldb	r2,0(r22)
100183e4:	10040d26 	beq	r2,zero,1001941c <___vfiprintf_internal_r+0x110c>
100183e8:	00c00944 	movi	r3,37
100183ec:	b029883a 	mov	r20,r22
100183f0:	10c0021e 	bne	r2,r3,100183fc <___vfiprintf_internal_r+0xec>
100183f4:	00001606 	br	10018450 <___vfiprintf_internal_r+0x140>
100183f8:	10c00326 	beq	r2,r3,10018408 <___vfiprintf_internal_r+0xf8>
100183fc:	a5000044 	addi	r20,r20,1
10018400:	a0800007 	ldb	r2,0(r20)
10018404:	103ffc1e 	bne	r2,zero,100183f8 <__alt_data_end+0xf80183f8>
10018408:	a5a1c83a 	sub	r16,r20,r22
1001840c:	80001026 	beq	r16,zero,10018450 <___vfiprintf_internal_r+0x140>
10018410:	d8c01c17 	ldw	r3,112(sp)
10018414:	d8801b17 	ldw	r2,108(sp)
10018418:	45800015 	stw	r22,0(r8)
1001841c:	80c7883a 	add	r3,r16,r3
10018420:	10800044 	addi	r2,r2,1
10018424:	44000115 	stw	r16,4(r8)
10018428:	d8c01c15 	stw	r3,112(sp)
1001842c:	d8801b15 	stw	r2,108(sp)
10018430:	010001c4 	movi	r4,7
10018434:	2080750e 	bge	r4,r2,1001860c <___vfiprintf_internal_r+0x2fc>
10018438:	1803951e 	bne	r3,zero,10019290 <___vfiprintf_internal_r+0xf80>
1001843c:	d8c02417 	ldw	r3,144(sp)
10018440:	d8001b15 	stw	zero,108(sp)
10018444:	d811883a 	mov	r8,sp
10018448:	1c07883a 	add	r3,r3,r16
1001844c:	d8c02415 	stw	r3,144(sp)
10018450:	a0800007 	ldb	r2,0(r20)
10018454:	1002e026 	beq	r2,zero,10018fd8 <___vfiprintf_internal_r+0xcc8>
10018458:	a5800044 	addi	r22,r20,1
1001845c:	a0c00047 	ldb	r3,1(r20)
10018460:	d8001d85 	stb	zero,118(sp)
10018464:	0027883a 	mov	r19,zero
10018468:	d8002305 	stb	zero,140(sp)
1001846c:	043fffc4 	movi	r16,-1
10018470:	d8002515 	stw	zero,148(sp)
10018474:	0023883a 	mov	r17,zero
10018478:	05001604 	movi	r20,88
1001847c:	05400244 	movi	r21,9
10018480:	402f883a 	mov	r23,r8
10018484:	b5800044 	addi	r22,r22,1
10018488:	18bff804 	addi	r2,r3,-32
1001848c:	a0827736 	bltu	r20,r2,10018e6c <___vfiprintf_internal_r+0xb5c>
10018490:	100490ba 	slli	r2,r2,2
10018494:	010400b4 	movhi	r4,4098
10018498:	21212a04 	addi	r4,r4,-31576
1001849c:	1105883a 	add	r2,r2,r4
100184a0:	10800017 	ldw	r2,0(r2)
100184a4:	1000683a 	jmp	r2
100184a8:	10018b6c 	andhi	zero,r2,1581
100184ac:	10018e6c 	andhi	zero,r2,1593
100184b0:	10018e6c 	andhi	zero,r2,1593
100184b4:	10018b88 	cmpgei	zero,r2,1582
100184b8:	10018e6c 	andhi	zero,r2,1593
100184bc:	10018e6c 	andhi	zero,r2,1593
100184c0:	10018e6c 	andhi	zero,r2,1593
100184c4:	10018e6c 	andhi	zero,r2,1593
100184c8:	10018e6c 	andhi	zero,r2,1593
100184cc:	10018e6c 	andhi	zero,r2,1593
100184d0:	10018d90 	cmplti	zero,r2,1590
100184d4:	10018db4 	orhi	zero,r2,1590
100184d8:	10018e6c 	andhi	zero,r2,1593
100184dc:	100186ac 	andhi	zero,r2,1562
100184e0:	10018dc8 	cmpgei	zero,r2,1591
100184e4:	10018e6c 	andhi	zero,r2,1593
100184e8:	10018b94 	ori	zero,r2,1582
100184ec:	10018ba0 	cmpeqi	zero,r2,1582
100184f0:	10018ba0 	cmpeqi	zero,r2,1582
100184f4:	10018ba0 	cmpeqi	zero,r2,1582
100184f8:	10018ba0 	cmpeqi	zero,r2,1582
100184fc:	10018ba0 	cmpeqi	zero,r2,1582
10018500:	10018ba0 	cmpeqi	zero,r2,1582
10018504:	10018ba0 	cmpeqi	zero,r2,1582
10018508:	10018ba0 	cmpeqi	zero,r2,1582
1001850c:	10018ba0 	cmpeqi	zero,r2,1582
10018510:	10018e6c 	andhi	zero,r2,1593
10018514:	10018e6c 	andhi	zero,r2,1593
10018518:	10018e6c 	andhi	zero,r2,1593
1001851c:	10018e6c 	andhi	zero,r2,1593
10018520:	10018e6c 	andhi	zero,r2,1593
10018524:	10018e6c 	andhi	zero,r2,1593
10018528:	10018e6c 	andhi	zero,r2,1593
1001852c:	10018e6c 	andhi	zero,r2,1593
10018530:	10018e6c 	andhi	zero,r2,1593
10018534:	10018e6c 	andhi	zero,r2,1593
10018538:	10018be0 	cmpeqi	zero,r2,1583
1001853c:	10018e6c 	andhi	zero,r2,1593
10018540:	10018e6c 	andhi	zero,r2,1593
10018544:	10018e6c 	andhi	zero,r2,1593
10018548:	10018e6c 	andhi	zero,r2,1593
1001854c:	10018e6c 	andhi	zero,r2,1593
10018550:	10018e6c 	andhi	zero,r2,1593
10018554:	10018e6c 	andhi	zero,r2,1593
10018558:	10018e6c 	andhi	zero,r2,1593
1001855c:	10018e6c 	andhi	zero,r2,1593
10018560:	10018e6c 	andhi	zero,r2,1593
10018564:	10018c1c 	xori	zero,r2,1584
10018568:	10018e6c 	andhi	zero,r2,1593
1001856c:	10018e6c 	andhi	zero,r2,1593
10018570:	10018e6c 	andhi	zero,r2,1593
10018574:	10018e6c 	andhi	zero,r2,1593
10018578:	10018e6c 	andhi	zero,r2,1593
1001857c:	10018c78 	rdprs	zero,r2,1585
10018580:	10018e6c 	andhi	zero,r2,1593
10018584:	10018e6c 	andhi	zero,r2,1593
10018588:	10018cec 	andhi	zero,r2,1587
1001858c:	10018e6c 	andhi	zero,r2,1593
10018590:	10018e6c 	andhi	zero,r2,1593
10018594:	10018e6c 	andhi	zero,r2,1593
10018598:	10018e6c 	andhi	zero,r2,1593
1001859c:	10018e6c 	andhi	zero,r2,1593
100185a0:	10018e6c 	andhi	zero,r2,1593
100185a4:	10018e6c 	andhi	zero,r2,1593
100185a8:	10018e6c 	andhi	zero,r2,1593
100185ac:	10018e6c 	andhi	zero,r2,1593
100185b0:	10018e6c 	andhi	zero,r2,1593
100185b4:	10018a94 	ori	zero,r2,1578
100185b8:	10018ac4 	addi	zero,r2,1579
100185bc:	10018e6c 	andhi	zero,r2,1593
100185c0:	10018e6c 	andhi	zero,r2,1593
100185c4:	10018e6c 	andhi	zero,r2,1593
100185c8:	10018e14 	ori	zero,r2,1592
100185cc:	10018ac4 	addi	zero,r2,1579
100185d0:	10018e6c 	andhi	zero,r2,1593
100185d4:	10018e6c 	andhi	zero,r2,1593
100185d8:	1001896c 	andhi	zero,r2,1573
100185dc:	10018e6c 	andhi	zero,r2,1593
100185e0:	10018980 	call	11001898 <_gp+0xfd444c>
100185e4:	100189b8 	rdprs	zero,r2,1574
100185e8:	100186b8 	rdprs	zero,r2,1562
100185ec:	10018960 	cmpeqi	zero,r2,1573
100185f0:	10018e6c 	andhi	zero,r2,1593
100185f4:	10018d2c 	andhi	zero,r2,1588
100185f8:	10018e6c 	andhi	zero,r2,1593
100185fc:	10018d78 	rdprs	zero,r2,1589
10018600:	10018e6c 	andhi	zero,r2,1593
10018604:	10018e6c 	andhi	zero,r2,1593
10018608:	10018a3c 	xorhi	zero,r2,1576
1001860c:	42000204 	addi	r8,r8,8
10018610:	d8c02417 	ldw	r3,144(sp)
10018614:	1c07883a 	add	r3,r3,r16
10018618:	d8c02415 	stw	r3,144(sp)
1001861c:	003f8c06 	br	10018450 <__alt_data_end+0xf8018450>
10018620:	d9402017 	ldw	r5,128(sp)
10018624:	d9002117 	ldw	r4,132(sp)
10018628:	000de940 	call	1000de94 <__swsetup_r>
1001862c:	1003c11e 	bne	r2,zero,10019534 <___vfiprintf_internal_r+0x1224>
10018630:	d9402017 	ldw	r5,128(sp)
10018634:	00c00284 	movi	r3,10
10018638:	2880030b 	ldhu	r2,12(r5)
1001863c:	1080068c 	andi	r2,r2,26
10018640:	10ff581e 	bne	r2,r3,100183a4 <__alt_data_end+0xf80183a4>
10018644:	d8c02017 	ldw	r3,128(sp)
10018648:	1880038f 	ldh	r2,14(r3)
1001864c:	103f5516 	blt	r2,zero,100183a4 <__alt_data_end+0xf80183a4>
10018650:	d9c02217 	ldw	r7,136(sp)
10018654:	d9002117 	ldw	r4,132(sp)
10018658:	a80d883a 	mov	r6,r21
1001865c:	180b883a 	mov	r5,r3
10018660:	00198380 	call	10019838 <__sbprintf>
10018664:	dfc03517 	ldw	ra,212(sp)
10018668:	df003417 	ldw	fp,208(sp)
1001866c:	ddc03317 	ldw	r23,204(sp)
10018670:	dd803217 	ldw	r22,200(sp)
10018674:	dd403117 	ldw	r21,196(sp)
10018678:	dd003017 	ldw	r20,192(sp)
1001867c:	dcc02f17 	ldw	r19,188(sp)
10018680:	dc802e17 	ldw	r18,184(sp)
10018684:	dc402d17 	ldw	r17,180(sp)
10018688:	dc002c17 	ldw	r16,176(sp)
1001868c:	dec03604 	addi	sp,sp,216
10018690:	f800283a 	ret
10018694:	000fea00 	call	1000fea0 <__sinit>
10018698:	003f2f06 	br	10018358 <__alt_data_end+0xf8018358>
1001869c:	d8c02517 	ldw	r3,148(sp)
100186a0:	d8802215 	stw	r2,136(sp)
100186a4:	00c7c83a 	sub	r3,zero,r3
100186a8:	d8c02515 	stw	r3,148(sp)
100186ac:	8c400114 	ori	r17,r17,4
100186b0:	b0c00007 	ldb	r3,0(r22)
100186b4:	003f7306 	br	10018484 <__alt_data_end+0xf8018484>
100186b8:	00800c04 	movi	r2,48
100186bc:	d9402217 	ldw	r5,136(sp)
100186c0:	d8801d05 	stb	r2,116(sp)
100186c4:	00801e04 	movi	r2,120
100186c8:	d8801d45 	stb	r2,117(sp)
100186cc:	d8001d85 	stb	zero,118(sp)
100186d0:	b811883a 	mov	r8,r23
100186d4:	28c00104 	addi	r3,r5,4
100186d8:	2cc00017 	ldw	r19,0(r5)
100186dc:	0029883a 	mov	r20,zero
100186e0:	88800094 	ori	r2,r17,2
100186e4:	80032516 	blt	r16,zero,1001937c <___vfiprintf_internal_r+0x106c>
100186e8:	00bfdfc4 	movi	r2,-129
100186ec:	88a2703a 	and	r17,r17,r2
100186f0:	d8c02215 	stw	r3,136(sp)
100186f4:	8c400094 	ori	r17,r17,2
100186f8:	98032a1e 	bne	r19,zero,100193a4 <___vfiprintf_internal_r+0x1094>
100186fc:	008400b4 	movhi	r2,4098
10018700:	108b5004 	addi	r2,r2,11584
10018704:	d8802615 	stw	r2,152(sp)
10018708:	002b883a 	mov	r21,zero
1001870c:	8001741e 	bne	r16,zero,10018ce0 <___vfiprintf_internal_r+0x9d0>
10018710:	0021883a 	mov	r16,zero
10018714:	0029883a 	mov	r20,zero
10018718:	ddc01a04 	addi	r23,sp,104
1001871c:	8027883a 	mov	r19,r16
10018720:	8500010e 	bge	r16,r20,10018728 <___vfiprintf_internal_r+0x418>
10018724:	a027883a 	mov	r19,r20
10018728:	ad403fcc 	andi	r21,r21,255
1001872c:	ad40201c 	xori	r21,r21,128
10018730:	ad7fe004 	addi	r21,r21,-128
10018734:	a8000126 	beq	r21,zero,1001873c <___vfiprintf_internal_r+0x42c>
10018738:	9cc00044 	addi	r19,r19,1
1001873c:	89c0008c 	andi	r7,r17,2
10018740:	38000126 	beq	r7,zero,10018748 <___vfiprintf_internal_r+0x438>
10018744:	9cc00084 	addi	r19,r19,2
10018748:	88c0210c 	andi	r3,r17,132
1001874c:	1801dd1e 	bne	r3,zero,10018ec4 <___vfiprintf_internal_r+0xbb4>
10018750:	d9402517 	ldw	r5,148(sp)
10018754:	2cebc83a 	sub	r21,r5,r19
10018758:	0541da0e 	bge	zero,r21,10018ec4 <___vfiprintf_internal_r+0xbb4>
1001875c:	07000404 	movi	fp,16
10018760:	d8801c17 	ldw	r2,112(sp)
10018764:	e543be0e 	bge	fp,r21,10019660 <___vfiprintf_internal_r+0x1350>
10018768:	014400b4 	movhi	r5,4098
1001876c:	294c7f04 	addi	r5,r5,12796
10018770:	dc002715 	stw	r16,156(sp)
10018774:	d9801b17 	ldw	r6,108(sp)
10018778:	a821883a 	mov	r16,r21
1001877c:	d9402315 	stw	r5,140(sp)
10018780:	028001c4 	movi	r10,7
10018784:	d9c02915 	stw	r7,164(sp)
10018788:	182b883a 	mov	r21,r3
1001878c:	00000506 	br	100187a4 <___vfiprintf_internal_r+0x494>
10018790:	31000084 	addi	r4,r6,2
10018794:	42000204 	addi	r8,r8,8
10018798:	180d883a 	mov	r6,r3
1001879c:	843ffc04 	addi	r16,r16,-16
100187a0:	e4000f0e 	bge	fp,r16,100187e0 <___vfiprintf_internal_r+0x4d0>
100187a4:	010400b4 	movhi	r4,4098
100187a8:	10800404 	addi	r2,r2,16
100187ac:	30c00044 	addi	r3,r6,1
100187b0:	210c7f04 	addi	r4,r4,12796
100187b4:	41000015 	stw	r4,0(r8)
100187b8:	47000115 	stw	fp,4(r8)
100187bc:	d8801c15 	stw	r2,112(sp)
100187c0:	d8c01b15 	stw	r3,108(sp)
100187c4:	50fff20e 	bge	r10,r3,10018790 <__alt_data_end+0xf8018790>
100187c8:	1001b21e 	bne	r2,zero,10018e94 <___vfiprintf_internal_r+0xb84>
100187cc:	843ffc04 	addi	r16,r16,-16
100187d0:	000d883a 	mov	r6,zero
100187d4:	01000044 	movi	r4,1
100187d8:	d811883a 	mov	r8,sp
100187dc:	e43ff116 	blt	fp,r16,100187a4 <__alt_data_end+0xf80187a4>
100187e0:	a807883a 	mov	r3,r21
100187e4:	d9c02917 	ldw	r7,164(sp)
100187e8:	802b883a 	mov	r21,r16
100187ec:	dc002717 	ldw	r16,156(sp)
100187f0:	d9402317 	ldw	r5,140(sp)
100187f4:	a885883a 	add	r2,r21,r2
100187f8:	45400115 	stw	r21,4(r8)
100187fc:	41400015 	stw	r5,0(r8)
10018800:	d8801c15 	stw	r2,112(sp)
10018804:	d9001b15 	stw	r4,108(sp)
10018808:	014001c4 	movi	r5,7
1001880c:	29026216 	blt	r5,r4,10019198 <___vfiprintf_internal_r+0xe88>
10018810:	d9801d87 	ldb	r6,118(sp)
10018814:	42000204 	addi	r8,r8,8
10018818:	21400044 	addi	r5,r4,1
1001881c:	3001ae1e 	bne	r6,zero,10018ed8 <___vfiprintf_internal_r+0xbc8>
10018820:	3801bb26 	beq	r7,zero,10018f10 <___vfiprintf_internal_r+0xc00>
10018824:	d9001d04 	addi	r4,sp,116
10018828:	10800084 	addi	r2,r2,2
1001882c:	41000015 	stw	r4,0(r8)
10018830:	01000084 	movi	r4,2
10018834:	41000115 	stw	r4,4(r8)
10018838:	d8801c15 	stw	r2,112(sp)
1001883c:	d9401b15 	stw	r5,108(sp)
10018840:	010001c4 	movi	r4,7
10018844:	2142680e 	bge	r4,r5,100191e8 <___vfiprintf_internal_r+0xed8>
10018848:	1002b11e 	bne	r2,zero,10019310 <___vfiprintf_internal_r+0x1000>
1001884c:	01802004 	movi	r6,128
10018850:	01400044 	movi	r5,1
10018854:	0009883a 	mov	r4,zero
10018858:	d811883a 	mov	r8,sp
1001885c:	1981ae1e 	bne	r3,r6,10018f18 <___vfiprintf_internal_r+0xc08>
10018860:	d8c02517 	ldw	r3,148(sp)
10018864:	1cf9c83a 	sub	fp,r3,r19
10018868:	0701ab0e 	bge	zero,fp,10018f18 <___vfiprintf_internal_r+0xc08>
1001886c:	05400404 	movi	r21,16
10018870:	af03a90e 	bge	r21,fp,10019718 <___vfiprintf_internal_r+0x1408>
10018874:	014400b4 	movhi	r5,4098
10018878:	294c7b04 	addi	r5,r5,12780
1001887c:	d9402315 	stw	r5,140(sp)
10018880:	01c001c4 	movi	r7,7
10018884:	00000506 	br	1001889c <___vfiprintf_internal_r+0x58c>
10018888:	21800084 	addi	r6,r4,2
1001888c:	42000204 	addi	r8,r8,8
10018890:	1809883a 	mov	r4,r3
10018894:	e73ffc04 	addi	fp,fp,-16
10018898:	af000d0e 	bge	r21,fp,100188d0 <___vfiprintf_internal_r+0x5c0>
1001889c:	10800404 	addi	r2,r2,16
100188a0:	20c00044 	addi	r3,r4,1
100188a4:	44800015 	stw	r18,0(r8)
100188a8:	45400115 	stw	r21,4(r8)
100188ac:	d8801c15 	stw	r2,112(sp)
100188b0:	d8c01b15 	stw	r3,108(sp)
100188b4:	38fff40e 	bge	r7,r3,10018888 <__alt_data_end+0xf8018888>
100188b8:	10022b1e 	bne	r2,zero,10019168 <___vfiprintf_internal_r+0xe58>
100188bc:	e73ffc04 	addi	fp,fp,-16
100188c0:	01800044 	movi	r6,1
100188c4:	0009883a 	mov	r4,zero
100188c8:	d811883a 	mov	r8,sp
100188cc:	af3ff316 	blt	r21,fp,1001889c <__alt_data_end+0xf801889c>
100188d0:	d8c02317 	ldw	r3,140(sp)
100188d4:	1705883a 	add	r2,r2,fp
100188d8:	47000115 	stw	fp,4(r8)
100188dc:	40c00015 	stw	r3,0(r8)
100188e0:	d8801c15 	stw	r2,112(sp)
100188e4:	d9801b15 	stw	r6,108(sp)
100188e8:	00c001c4 	movi	r3,7
100188ec:	19829416 	blt	r3,r6,10019340 <___vfiprintf_internal_r+0x1030>
100188f0:	8521c83a 	sub	r16,r16,r20
100188f4:	42000204 	addi	r8,r8,8
100188f8:	31400044 	addi	r5,r6,1
100188fc:	3009883a 	mov	r4,r6
10018900:	04018716 	blt	zero,r16,10018f20 <___vfiprintf_internal_r+0xc10>
10018904:	a085883a 	add	r2,r20,r2
10018908:	45c00015 	stw	r23,0(r8)
1001890c:	45000115 	stw	r20,4(r8)
10018910:	d8801c15 	stw	r2,112(sp)
10018914:	d9401b15 	stw	r5,108(sp)
10018918:	00c001c4 	movi	r3,7
1001891c:	1941c20e 	bge	r3,r5,10019028 <___vfiprintf_internal_r+0xd18>
10018920:	1002531e 	bne	r2,zero,10019270 <___vfiprintf_internal_r+0xf60>
10018924:	d8001b15 	stw	zero,108(sp)
10018928:	8c40010c 	andi	r17,r17,4
1001892c:	88023226 	beq	r17,zero,100191f8 <___vfiprintf_internal_r+0xee8>
10018930:	d9002517 	ldw	r4,148(sp)
10018934:	24e3c83a 	sub	r17,r4,r19
10018938:	04432916 	blt	zero,r17,100195e0 <___vfiprintf_internal_r+0x12d0>
1001893c:	d8802517 	ldw	r2,148(sp)
10018940:	14c0010e 	bge	r2,r19,10018948 <___vfiprintf_internal_r+0x638>
10018944:	9805883a 	mov	r2,r19
10018948:	d8c02417 	ldw	r3,144(sp)
1001894c:	1887883a 	add	r3,r3,r2
10018950:	d8c02415 	stw	r3,144(sp)
10018954:	d8001b15 	stw	zero,108(sp)
10018958:	d811883a 	mov	r8,sp
1001895c:	003ea006 	br	100183e0 <__alt_data_end+0xf80183e0>
10018960:	8c400814 	ori	r17,r17,32
10018964:	b0c00007 	ldb	r3,0(r22)
10018968:	003ec606 	br	10018484 <__alt_data_end+0xf8018484>
1001896c:	b0c00007 	ldb	r3,0(r22)
10018970:	00801b04 	movi	r2,108
10018974:	18832026 	beq	r3,r2,100195f8 <___vfiprintf_internal_r+0x12e8>
10018978:	8c400414 	ori	r17,r17,16
1001897c:	003ec106 	br	10018484 <__alt_data_end+0xf8018484>
10018980:	9cc03fcc 	andi	r19,r19,255
10018984:	b811883a 	mov	r8,r23
10018988:	9803981e 	bne	r19,zero,100197ec <___vfiprintf_internal_r+0x14dc>
1001898c:	8880080c 	andi	r2,r17,32
10018990:	1002be26 	beq	r2,zero,1001948c <___vfiprintf_internal_r+0x117c>
10018994:	d9002217 	ldw	r4,136(sp)
10018998:	d9402417 	ldw	r5,144(sp)
1001899c:	20800017 	ldw	r2,0(r4)
100189a0:	2807d7fa 	srai	r3,r5,31
100189a4:	21000104 	addi	r4,r4,4
100189a8:	d9002215 	stw	r4,136(sp)
100189ac:	11400015 	stw	r5,0(r2)
100189b0:	10c00115 	stw	r3,4(r2)
100189b4:	003e8a06 	br	100183e0 <__alt_data_end+0xf80183e0>
100189b8:	9cc03fcc 	andi	r19,r19,255
100189bc:	b811883a 	mov	r8,r23
100189c0:	9803871e 	bne	r19,zero,100197e0 <___vfiprintf_internal_r+0x14d0>
100189c4:	8880080c 	andi	r2,r17,32
100189c8:	10009a26 	beq	r2,zero,10018c34 <___vfiprintf_internal_r+0x924>
100189cc:	d9002217 	ldw	r4,136(sp)
100189d0:	d8001d85 	stb	zero,118(sp)
100189d4:	20800204 	addi	r2,r4,8
100189d8:	24c00017 	ldw	r19,0(r4)
100189dc:	25000117 	ldw	r20,4(r4)
100189e0:	8002a416 	blt	r16,zero,10019474 <___vfiprintf_internal_r+0x1164>
100189e4:	013fdfc4 	movi	r4,-129
100189e8:	9d06b03a 	or	r3,r19,r20
100189ec:	d8802215 	stw	r2,136(sp)
100189f0:	8922703a 	and	r17,r17,r4
100189f4:	18009b26 	beq	r3,zero,10018c64 <___vfiprintf_internal_r+0x954>
100189f8:	002b883a 	mov	r21,zero
100189fc:	ddc01a04 	addi	r23,sp,104
10018a00:	9806d0fa 	srli	r3,r19,3
10018a04:	a008977a 	slli	r4,r20,29
10018a08:	a028d0fa 	srli	r20,r20,3
10018a0c:	9cc001cc 	andi	r19,r19,7
10018a10:	98800c04 	addi	r2,r19,48
10018a14:	bdffffc4 	addi	r23,r23,-1
10018a18:	20e6b03a 	or	r19,r4,r3
10018a1c:	b8800005 	stb	r2,0(r23)
10018a20:	9d06b03a 	or	r3,r19,r20
10018a24:	183ff61e 	bne	r3,zero,10018a00 <__alt_data_end+0xf8018a00>
10018a28:	88c0004c 	andi	r3,r17,1
10018a2c:	18021f1e 	bne	r3,zero,100192ac <___vfiprintf_internal_r+0xf9c>
10018a30:	d9401e17 	ldw	r5,120(sp)
10018a34:	2de9c83a 	sub	r20,r5,r23
10018a38:	003f3806 	br	1001871c <__alt_data_end+0xf801871c>
10018a3c:	9cc03fcc 	andi	r19,r19,255
10018a40:	b811883a 	mov	r8,r23
10018a44:	98034f1e 	bne	r19,zero,10019784 <___vfiprintf_internal_r+0x1474>
10018a48:	008400b4 	movhi	r2,4098
10018a4c:	108b5004 	addi	r2,r2,11584
10018a50:	d8802615 	stw	r2,152(sp)
10018a54:	8880080c 	andi	r2,r17,32
10018a58:	1000ac26 	beq	r2,zero,10018d0c <___vfiprintf_internal_r+0x9fc>
10018a5c:	d9002217 	ldw	r4,136(sp)
10018a60:	24c00017 	ldw	r19,0(r4)
10018a64:	25000117 	ldw	r20,4(r4)
10018a68:	21000204 	addi	r4,r4,8
10018a6c:	d9002215 	stw	r4,136(sp)
10018a70:	8880004c 	andi	r2,r17,1
10018a74:	1001e726 	beq	r2,zero,10019214 <___vfiprintf_internal_r+0xf04>
10018a78:	9d04b03a 	or	r2,r19,r20
10018a7c:	10025c1e 	bne	r2,zero,100193f0 <___vfiprintf_internal_r+0x10e0>
10018a80:	d8001d85 	stb	zero,118(sp)
10018a84:	80024416 	blt	r16,zero,10019398 <___vfiprintf_internal_r+0x1088>
10018a88:	00bfdfc4 	movi	r2,-129
10018a8c:	88a2703a 	and	r17,r17,r2
10018a90:	003f1d06 	br	10018708 <__alt_data_end+0xf8018708>
10018a94:	d8c02217 	ldw	r3,136(sp)
10018a98:	04c00044 	movi	r19,1
10018a9c:	b811883a 	mov	r8,r23
10018aa0:	18800017 	ldw	r2,0(r3)
10018aa4:	18c00104 	addi	r3,r3,4
10018aa8:	d8001d85 	stb	zero,118(sp)
10018aac:	d8801005 	stb	r2,64(sp)
10018ab0:	d8c02215 	stw	r3,136(sp)
10018ab4:	9829883a 	mov	r20,r19
10018ab8:	ddc01004 	addi	r23,sp,64
10018abc:	0021883a 	mov	r16,zero
10018ac0:	003f1e06 	br	1001873c <__alt_data_end+0xf801873c>
10018ac4:	9cc03fcc 	andi	r19,r19,255
10018ac8:	b811883a 	mov	r8,r23
10018acc:	9803331e 	bne	r19,zero,1001979c <___vfiprintf_internal_r+0x148c>
10018ad0:	8880080c 	andi	r2,r17,32
10018ad4:	10004826 	beq	r2,zero,10018bf8 <___vfiprintf_internal_r+0x8e8>
10018ad8:	d9002217 	ldw	r4,136(sp)
10018adc:	20800117 	ldw	r2,4(r4)
10018ae0:	24c00017 	ldw	r19,0(r4)
10018ae4:	21000204 	addi	r4,r4,8
10018ae8:	d9002215 	stw	r4,136(sp)
10018aec:	1029883a 	mov	r20,r2
10018af0:	10024c16 	blt	r2,zero,10019424 <___vfiprintf_internal_r+0x1114>
10018af4:	dd401d83 	ldbu	r21,118(sp)
10018af8:	80007116 	blt	r16,zero,10018cc0 <___vfiprintf_internal_r+0x9b0>
10018afc:	00ffdfc4 	movi	r3,-129
10018b00:	9d04b03a 	or	r2,r19,r20
10018b04:	88e2703a 	and	r17,r17,r3
10018b08:	1000d126 	beq	r2,zero,10018e50 <___vfiprintf_internal_r+0xb40>
10018b0c:	a0023526 	beq	r20,zero,100193e4 <___vfiprintf_internal_r+0x10d4>
10018b10:	ddc01a04 	addi	r23,sp,104
10018b14:	4039883a 	mov	fp,r8
10018b18:	9809883a 	mov	r4,r19
10018b1c:	a00b883a 	mov	r5,r20
10018b20:	01800284 	movi	r6,10
10018b24:	000f883a 	mov	r7,zero
10018b28:	001cba80 	call	1001cba8 <__umoddi3>
10018b2c:	10800c04 	addi	r2,r2,48
10018b30:	bdffffc4 	addi	r23,r23,-1
10018b34:	9809883a 	mov	r4,r19
10018b38:	a00b883a 	mov	r5,r20
10018b3c:	b8800005 	stb	r2,0(r23)
10018b40:	01800284 	movi	r6,10
10018b44:	000f883a 	mov	r7,zero
10018b48:	001c5ac0 	call	1001c5ac <__udivdi3>
10018b4c:	1027883a 	mov	r19,r2
10018b50:	10c4b03a 	or	r2,r2,r3
10018b54:	1829883a 	mov	r20,r3
10018b58:	103fef1e 	bne	r2,zero,10018b18 <__alt_data_end+0xf8018b18>
10018b5c:	d9001e17 	ldw	r4,120(sp)
10018b60:	e011883a 	mov	r8,fp
10018b64:	25e9c83a 	sub	r20,r4,r23
10018b68:	003eec06 	br	1001871c <__alt_data_end+0xf801871c>
10018b6c:	d8802307 	ldb	r2,140(sp)
10018b70:	1002361e 	bne	r2,zero,1001944c <___vfiprintf_internal_r+0x113c>
10018b74:	00c00804 	movi	r3,32
10018b78:	d8c02305 	stb	r3,140(sp)
10018b7c:	04c00044 	movi	r19,1
10018b80:	b0c00007 	ldb	r3,0(r22)
10018b84:	003e3f06 	br	10018484 <__alt_data_end+0xf8018484>
10018b88:	8c400054 	ori	r17,r17,1
10018b8c:	b0c00007 	ldb	r3,0(r22)
10018b90:	003e3c06 	br	10018484 <__alt_data_end+0xf8018484>
10018b94:	8c402014 	ori	r17,r17,128
10018b98:	b0c00007 	ldb	r3,0(r22)
10018b9c:	003e3906 	br	10018484 <__alt_data_end+0xf8018484>
10018ba0:	dc002715 	stw	r16,156(sp)
10018ba4:	d8002515 	stw	zero,148(sp)
10018ba8:	1f3ff404 	addi	fp,r3,-48
10018bac:	0009883a 	mov	r4,zero
10018bb0:	b021883a 	mov	r16,r22
10018bb4:	01400284 	movi	r5,10
10018bb8:	0008ef00 	call	10008ef0 <__mulsi3>
10018bbc:	80c00007 	ldb	r3,0(r16)
10018bc0:	e089883a 	add	r4,fp,r2
10018bc4:	b5800044 	addi	r22,r22,1
10018bc8:	1f3ff404 	addi	fp,r3,-48
10018bcc:	b021883a 	mov	r16,r22
10018bd0:	af3ff82e 	bgeu	r21,fp,10018bb4 <__alt_data_end+0xf8018bb4>
10018bd4:	d9002515 	stw	r4,148(sp)
10018bd8:	dc002717 	ldw	r16,156(sp)
10018bdc:	003e2a06 	br	10018488 <__alt_data_end+0xf8018488>
10018be0:	9cc03fcc 	andi	r19,r19,255
10018be4:	b811883a 	mov	r8,r23
10018be8:	9802e91e 	bne	r19,zero,10019790 <___vfiprintf_internal_r+0x1480>
10018bec:	8c400414 	ori	r17,r17,16
10018bf0:	8880080c 	andi	r2,r17,32
10018bf4:	103fb81e 	bne	r2,zero,10018ad8 <__alt_data_end+0xf8018ad8>
10018bf8:	8880040c 	andi	r2,r17,16
10018bfc:	10022e26 	beq	r2,zero,100194b8 <___vfiprintf_internal_r+0x11a8>
10018c00:	d9402217 	ldw	r5,136(sp)
10018c04:	2cc00017 	ldw	r19,0(r5)
10018c08:	29400104 	addi	r5,r5,4
10018c0c:	d9402215 	stw	r5,136(sp)
10018c10:	9829d7fa 	srai	r20,r19,31
10018c14:	a005883a 	mov	r2,r20
10018c18:	003fb506 	br	10018af0 <__alt_data_end+0xf8018af0>
10018c1c:	9cc03fcc 	andi	r19,r19,255
10018c20:	b811883a 	mov	r8,r23
10018c24:	9802fa1e 	bne	r19,zero,10019810 <___vfiprintf_internal_r+0x1500>
10018c28:	8c400414 	ori	r17,r17,16
10018c2c:	8880080c 	andi	r2,r17,32
10018c30:	103f661e 	bne	r2,zero,100189cc <__alt_data_end+0xf80189cc>
10018c34:	8880040c 	andi	r2,r17,16
10018c38:	10020626 	beq	r2,zero,10019454 <___vfiprintf_internal_r+0x1144>
10018c3c:	d9402217 	ldw	r5,136(sp)
10018c40:	d8001d85 	stb	zero,118(sp)
10018c44:	0029883a 	mov	r20,zero
10018c48:	28800104 	addi	r2,r5,4
10018c4c:	2cc00017 	ldw	r19,0(r5)
10018c50:	80020816 	blt	r16,zero,10019474 <___vfiprintf_internal_r+0x1164>
10018c54:	00ffdfc4 	movi	r3,-129
10018c58:	d8802215 	stw	r2,136(sp)
10018c5c:	88e2703a 	and	r17,r17,r3
10018c60:	983f651e 	bne	r19,zero,100189f8 <__alt_data_end+0xf80189f8>
10018c64:	002b883a 	mov	r21,zero
10018c68:	8002cf26 	beq	r16,zero,100197a8 <___vfiprintf_internal_r+0x1498>
10018c6c:	0027883a 	mov	r19,zero
10018c70:	0029883a 	mov	r20,zero
10018c74:	003f6106 	br	100189fc <__alt_data_end+0xf80189fc>
10018c78:	9cc03fcc 	andi	r19,r19,255
10018c7c:	b811883a 	mov	r8,r23
10018c80:	9802e01e 	bne	r19,zero,10019804 <___vfiprintf_internal_r+0x14f4>
10018c84:	8c400414 	ori	r17,r17,16
10018c88:	8880080c 	andi	r2,r17,32
10018c8c:	1000641e 	bne	r2,zero,10018e20 <___vfiprintf_internal_r+0xb10>
10018c90:	8880040c 	andi	r2,r17,16
10018c94:	1001c81e 	bne	r2,zero,100193b8 <___vfiprintf_internal_r+0x10a8>
10018c98:	8880100c 	andi	r2,r17,64
10018c9c:	d8001d85 	stb	zero,118(sp)
10018ca0:	1002281e 	bne	r2,zero,10019544 <___vfiprintf_internal_r+0x1234>
10018ca4:	d9002217 	ldw	r4,136(sp)
10018ca8:	0029883a 	mov	r20,zero
10018cac:	20800104 	addi	r2,r4,4
10018cb0:	24c00017 	ldw	r19,0(r4)
10018cb4:	8001c60e 	bge	r16,zero,100193d0 <___vfiprintf_internal_r+0x10c0>
10018cb8:	d8802215 	stw	r2,136(sp)
10018cbc:	002b883a 	mov	r21,zero
10018cc0:	9d04b03a 	or	r2,r19,r20
10018cc4:	103f911e 	bne	r2,zero,10018b0c <__alt_data_end+0xf8018b0c>
10018cc8:	00800044 	movi	r2,1
10018ccc:	10803fcc 	andi	r2,r2,255
10018cd0:	00c00044 	movi	r3,1
10018cd4:	10c05f26 	beq	r2,r3,10018e54 <___vfiprintf_internal_r+0xb44>
10018cd8:	00c00084 	movi	r3,2
10018cdc:	10ffe31e 	bne	r2,r3,10018c6c <__alt_data_end+0xf8018c6c>
10018ce0:	0027883a 	mov	r19,zero
10018ce4:	0029883a 	mov	r20,zero
10018ce8:	00015106 	br	10019230 <___vfiprintf_internal_r+0xf20>
10018cec:	9cc03fcc 	andi	r19,r19,255
10018cf0:	b811883a 	mov	r8,r23
10018cf4:	9802c01e 	bne	r19,zero,100197f8 <___vfiprintf_internal_r+0x14e8>
10018cf8:	014400b4 	movhi	r5,4098
10018cfc:	294b4b04 	addi	r5,r5,11564
10018d00:	d9402615 	stw	r5,152(sp)
10018d04:	8880080c 	andi	r2,r17,32
10018d08:	103f541e 	bne	r2,zero,10018a5c <__alt_data_end+0xf8018a5c>
10018d0c:	8880040c 	andi	r2,r17,16
10018d10:	1001f226 	beq	r2,zero,100194dc <___vfiprintf_internal_r+0x11cc>
10018d14:	d9402217 	ldw	r5,136(sp)
10018d18:	0029883a 	mov	r20,zero
10018d1c:	2cc00017 	ldw	r19,0(r5)
10018d20:	29400104 	addi	r5,r5,4
10018d24:	d9402215 	stw	r5,136(sp)
10018d28:	003f5106 	br	10018a70 <__alt_data_end+0xf8018a70>
10018d2c:	d8c02217 	ldw	r3,136(sp)
10018d30:	b811883a 	mov	r8,r23
10018d34:	d8001d85 	stb	zero,118(sp)
10018d38:	1dc00017 	ldw	r23,0(r3)
10018d3c:	1f000104 	addi	fp,r3,4
10018d40:	b8025926 	beq	r23,zero,100196a8 <___vfiprintf_internal_r+0x1398>
10018d44:	80023316 	blt	r16,zero,10019614 <___vfiprintf_internal_r+0x1304>
10018d48:	800d883a 	mov	r6,r16
10018d4c:	000b883a 	mov	r5,zero
10018d50:	b809883a 	mov	r4,r23
10018d54:	da002a15 	stw	r8,168(sp)
10018d58:	00118dc0 	call	100118dc <memchr>
10018d5c:	da002a17 	ldw	r8,168(sp)
10018d60:	10026826 	beq	r2,zero,10019704 <___vfiprintf_internal_r+0x13f4>
10018d64:	15e9c83a 	sub	r20,r2,r23
10018d68:	dd401d83 	ldbu	r21,118(sp)
10018d6c:	df002215 	stw	fp,136(sp)
10018d70:	0021883a 	mov	r16,zero
10018d74:	003e6906 	br	1001871c <__alt_data_end+0xf801871c>
10018d78:	9cc03fcc 	andi	r19,r19,255
10018d7c:	b811883a 	mov	r8,r23
10018d80:	983fc126 	beq	r19,zero,10018c88 <__alt_data_end+0xf8018c88>
10018d84:	d8c02303 	ldbu	r3,140(sp)
10018d88:	d8c01d85 	stb	r3,118(sp)
10018d8c:	003fbe06 	br	10018c88 <__alt_data_end+0xf8018c88>
10018d90:	d9002217 	ldw	r4,136(sp)
10018d94:	d9402217 	ldw	r5,136(sp)
10018d98:	21000017 	ldw	r4,0(r4)
10018d9c:	28800104 	addi	r2,r5,4
10018da0:	d9002515 	stw	r4,148(sp)
10018da4:	203e3d16 	blt	r4,zero,1001869c <__alt_data_end+0xf801869c>
10018da8:	d8802215 	stw	r2,136(sp)
10018dac:	b0c00007 	ldb	r3,0(r22)
10018db0:	003db406 	br	10018484 <__alt_data_end+0xf8018484>
10018db4:	00c00ac4 	movi	r3,43
10018db8:	d8c02305 	stb	r3,140(sp)
10018dbc:	04c00044 	movi	r19,1
10018dc0:	b0c00007 	ldb	r3,0(r22)
10018dc4:	003daf06 	br	10018484 <__alt_data_end+0xf8018484>
10018dc8:	b0c00007 	ldb	r3,0(r22)
10018dcc:	01000a84 	movi	r4,42
10018dd0:	b4000044 	addi	r16,r22,1
10018dd4:	19025e26 	beq	r3,r4,10019750 <___vfiprintf_internal_r+0x1440>
10018dd8:	1f3ff404 	addi	fp,r3,-48
10018ddc:	0009883a 	mov	r4,zero
10018de0:	af025236 	bltu	r21,fp,1001972c <___vfiprintf_internal_r+0x141c>
10018de4:	01400284 	movi	r5,10
10018de8:	0008ef00 	call	10008ef0 <__mulsi3>
10018dec:	80c00007 	ldb	r3,0(r16)
10018df0:	1709883a 	add	r4,r2,fp
10018df4:	85800044 	addi	r22,r16,1
10018df8:	1f3ff404 	addi	fp,r3,-48
10018dfc:	b021883a 	mov	r16,r22
10018e00:	af3ff82e 	bgeu	r21,fp,10018de4 <__alt_data_end+0xf8018de4>
10018e04:	2021883a 	mov	r16,r4
10018e08:	203d9f0e 	bge	r4,zero,10018488 <__alt_data_end+0xf8018488>
10018e0c:	043fffc4 	movi	r16,-1
10018e10:	003d9d06 	br	10018488 <__alt_data_end+0xf8018488>
10018e14:	8c401014 	ori	r17,r17,64
10018e18:	b0c00007 	ldb	r3,0(r22)
10018e1c:	003d9906 	br	10018484 <__alt_data_end+0xf8018484>
10018e20:	d9002217 	ldw	r4,136(sp)
10018e24:	d8001d85 	stb	zero,118(sp)
10018e28:	20c00204 	addi	r3,r4,8
10018e2c:	24c00017 	ldw	r19,0(r4)
10018e30:	25000117 	ldw	r20,4(r4)
10018e34:	8001e716 	blt	r16,zero,100195d4 <___vfiprintf_internal_r+0x12c4>
10018e38:	013fdfc4 	movi	r4,-129
10018e3c:	9d04b03a 	or	r2,r19,r20
10018e40:	d8c02215 	stw	r3,136(sp)
10018e44:	8922703a 	and	r17,r17,r4
10018e48:	002b883a 	mov	r21,zero
10018e4c:	103f2f1e 	bne	r2,zero,10018b0c <__alt_data_end+0xf8018b0c>
10018e50:	803e2f26 	beq	r16,zero,10018710 <__alt_data_end+0xf8018710>
10018e54:	0027883a 	mov	r19,zero
10018e58:	9cc00c04 	addi	r19,r19,48
10018e5c:	dcc019c5 	stb	r19,103(sp)
10018e60:	dd002817 	ldw	r20,160(sp)
10018e64:	ddc019c4 	addi	r23,sp,103
10018e68:	003e2c06 	br	1001871c <__alt_data_end+0xf801871c>
10018e6c:	9cc03fcc 	andi	r19,r19,255
10018e70:	b811883a 	mov	r8,r23
10018e74:	9802571e 	bne	r19,zero,100197d4 <___vfiprintf_internal_r+0x14c4>
10018e78:	18005726 	beq	r3,zero,10018fd8 <___vfiprintf_internal_r+0xcc8>
10018e7c:	04c00044 	movi	r19,1
10018e80:	d8c01005 	stb	r3,64(sp)
10018e84:	d8001d85 	stb	zero,118(sp)
10018e88:	9829883a 	mov	r20,r19
10018e8c:	ddc01004 	addi	r23,sp,64
10018e90:	003f0a06 	br	10018abc <__alt_data_end+0xf8018abc>
10018e94:	d9402017 	ldw	r5,128(sp)
10018e98:	d9002117 	ldw	r4,132(sp)
10018e9c:	d9801a04 	addi	r6,sp,104
10018ea0:	da802a15 	stw	r10,168(sp)
10018ea4:	00181fc0 	call	100181fc <__sprint_r.part.0>
10018ea8:	da802a17 	ldw	r10,168(sp)
10018eac:	1000501e 	bne	r2,zero,10018ff0 <___vfiprintf_internal_r+0xce0>
10018eb0:	d9801b17 	ldw	r6,108(sp)
10018eb4:	d8801c17 	ldw	r2,112(sp)
10018eb8:	d811883a 	mov	r8,sp
10018ebc:	31000044 	addi	r4,r6,1
10018ec0:	003e3606 	br	1001879c <__alt_data_end+0xf801879c>
10018ec4:	d9001b17 	ldw	r4,108(sp)
10018ec8:	d8801c17 	ldw	r2,112(sp)
10018ecc:	21400044 	addi	r5,r4,1
10018ed0:	d9801d87 	ldb	r6,118(sp)
10018ed4:	303e5226 	beq	r6,zero,10018820 <__alt_data_end+0xf8018820>
10018ed8:	01800044 	movi	r6,1
10018edc:	d9001d84 	addi	r4,sp,118
10018ee0:	1185883a 	add	r2,r2,r6
10018ee4:	41000015 	stw	r4,0(r8)
10018ee8:	41800115 	stw	r6,4(r8)
10018eec:	d8801c15 	stw	r2,112(sp)
10018ef0:	d9401b15 	stw	r5,108(sp)
10018ef4:	010001c4 	movi	r4,7
10018ef8:	2140b00e 	bge	r4,r5,100191bc <___vfiprintf_internal_r+0xeac>
10018efc:	1000f61e 	bne	r2,zero,100192d8 <___vfiprintf_internal_r+0xfc8>
10018f00:	3800b31e 	bne	r7,zero,100191d0 <___vfiprintf_internal_r+0xec0>
10018f04:	0009883a 	mov	r4,zero
10018f08:	300b883a 	mov	r5,r6
10018f0c:	d811883a 	mov	r8,sp
10018f10:	01802004 	movi	r6,128
10018f14:	19be5226 	beq	r3,r6,10018860 <__alt_data_end+0xf8018860>
10018f18:	8521c83a 	sub	r16,r16,r20
10018f1c:	043e790e 	bge	zero,r16,10018904 <__alt_data_end+0xf8018904>
10018f20:	05400404 	movi	r21,16
10018f24:	ac01b00e 	bge	r21,r16,100195e8 <___vfiprintf_internal_r+0x12d8>
10018f28:	014400b4 	movhi	r5,4098
10018f2c:	294c7b04 	addi	r5,r5,12780
10018f30:	d9402315 	stw	r5,140(sp)
10018f34:	070001c4 	movi	fp,7
10018f38:	00000506 	br	10018f50 <___vfiprintf_internal_r+0xc40>
10018f3c:	21400084 	addi	r5,r4,2
10018f40:	42000204 	addi	r8,r8,8
10018f44:	1809883a 	mov	r4,r3
10018f48:	843ffc04 	addi	r16,r16,-16
10018f4c:	ac000d0e 	bge	r21,r16,10018f84 <___vfiprintf_internal_r+0xc74>
10018f50:	10800404 	addi	r2,r2,16
10018f54:	20c00044 	addi	r3,r4,1
10018f58:	44800015 	stw	r18,0(r8)
10018f5c:	45400115 	stw	r21,4(r8)
10018f60:	d8801c15 	stw	r2,112(sp)
10018f64:	d8c01b15 	stw	r3,108(sp)
10018f68:	e0fff40e 	bge	fp,r3,10018f3c <__alt_data_end+0xf8018f3c>
10018f6c:	1000101e 	bne	r2,zero,10018fb0 <___vfiprintf_internal_r+0xca0>
10018f70:	843ffc04 	addi	r16,r16,-16
10018f74:	01400044 	movi	r5,1
10018f78:	0009883a 	mov	r4,zero
10018f7c:	d811883a 	mov	r8,sp
10018f80:	ac3ff316 	blt	r21,r16,10018f50 <__alt_data_end+0xf8018f50>
10018f84:	d8c02317 	ldw	r3,140(sp)
10018f88:	1405883a 	add	r2,r2,r16
10018f8c:	44000115 	stw	r16,4(r8)
10018f90:	40c00015 	stw	r3,0(r8)
10018f94:	d8801c15 	stw	r2,112(sp)
10018f98:	d9401b15 	stw	r5,108(sp)
10018f9c:	00c001c4 	movi	r3,7
10018fa0:	19401916 	blt	r3,r5,10019008 <___vfiprintf_internal_r+0xcf8>
10018fa4:	42000204 	addi	r8,r8,8
10018fa8:	29400044 	addi	r5,r5,1
10018fac:	003e5506 	br	10018904 <__alt_data_end+0xf8018904>
10018fb0:	d9402017 	ldw	r5,128(sp)
10018fb4:	d9002117 	ldw	r4,132(sp)
10018fb8:	d9801a04 	addi	r6,sp,104
10018fbc:	00181fc0 	call	100181fc <__sprint_r.part.0>
10018fc0:	10000b1e 	bne	r2,zero,10018ff0 <___vfiprintf_internal_r+0xce0>
10018fc4:	d9001b17 	ldw	r4,108(sp)
10018fc8:	d8801c17 	ldw	r2,112(sp)
10018fcc:	d811883a 	mov	r8,sp
10018fd0:	21400044 	addi	r5,r4,1
10018fd4:	003fdc06 	br	10018f48 <__alt_data_end+0xf8018f48>
10018fd8:	d8801c17 	ldw	r2,112(sp)
10018fdc:	10000426 	beq	r2,zero,10018ff0 <___vfiprintf_internal_r+0xce0>
10018fe0:	d9402017 	ldw	r5,128(sp)
10018fe4:	d9002117 	ldw	r4,132(sp)
10018fe8:	d9801a04 	addi	r6,sp,104
10018fec:	00181fc0 	call	100181fc <__sprint_r.part.0>
10018ff0:	d9402017 	ldw	r5,128(sp)
10018ff4:	2880030b 	ldhu	r2,12(r5)
10018ff8:	1080100c 	andi	r2,r2,64
10018ffc:	10014d1e 	bne	r2,zero,10019534 <___vfiprintf_internal_r+0x1224>
10019000:	d8802417 	ldw	r2,144(sp)
10019004:	003d9706 	br	10018664 <__alt_data_end+0xf8018664>
10019008:	1000d21e 	bne	r2,zero,10019354 <___vfiprintf_internal_r+0x1044>
1001900c:	00c00044 	movi	r3,1
10019010:	a005883a 	mov	r2,r20
10019014:	ddc00015 	stw	r23,0(sp)
10019018:	dd000115 	stw	r20,4(sp)
1001901c:	dd001c15 	stw	r20,112(sp)
10019020:	d8c01b15 	stw	r3,108(sp)
10019024:	d811883a 	mov	r8,sp
10019028:	42000204 	addi	r8,r8,8
1001902c:	8c40010c 	andi	r17,r17,4
10019030:	88004026 	beq	r17,zero,10019134 <___vfiprintf_internal_r+0xe24>
10019034:	d9002517 	ldw	r4,148(sp)
10019038:	24e3c83a 	sub	r17,r4,r19
1001903c:	04403d0e 	bge	zero,r17,10019134 <___vfiprintf_internal_r+0xe24>
10019040:	04000404 	movi	r16,16
10019044:	8441a90e 	bge	r16,r17,100196ec <___vfiprintf_internal_r+0x13dc>
10019048:	00c400b4 	movhi	r3,4098
1001904c:	18cc7f04 	addi	r3,r3,12796
10019050:	d9001b17 	ldw	r4,108(sp)
10019054:	d8c02315 	stw	r3,140(sp)
10019058:	050001c4 	movi	r20,7
1001905c:	dd402117 	ldw	r21,132(sp)
10019060:	ddc02017 	ldw	r23,128(sp)
10019064:	00000506 	br	1001907c <___vfiprintf_internal_r+0xd6c>
10019068:	21400084 	addi	r5,r4,2
1001906c:	42000204 	addi	r8,r8,8
10019070:	1809883a 	mov	r4,r3
10019074:	8c7ffc04 	addi	r17,r17,-16
10019078:	84400f0e 	bge	r16,r17,100190b8 <___vfiprintf_internal_r+0xda8>
1001907c:	014400b4 	movhi	r5,4098
10019080:	10800404 	addi	r2,r2,16
10019084:	20c00044 	addi	r3,r4,1
10019088:	294c7f04 	addi	r5,r5,12796
1001908c:	41400015 	stw	r5,0(r8)
10019090:	44000115 	stw	r16,4(r8)
10019094:	d8801c15 	stw	r2,112(sp)
10019098:	d8c01b15 	stw	r3,108(sp)
1001909c:	a0fff20e 	bge	r20,r3,10019068 <__alt_data_end+0xf8019068>
100190a0:	1000141e 	bne	r2,zero,100190f4 <___vfiprintf_internal_r+0xde4>
100190a4:	8c7ffc04 	addi	r17,r17,-16
100190a8:	01400044 	movi	r5,1
100190ac:	0009883a 	mov	r4,zero
100190b0:	d811883a 	mov	r8,sp
100190b4:	847ff116 	blt	r16,r17,1001907c <__alt_data_end+0xf801907c>
100190b8:	d8c02317 	ldw	r3,140(sp)
100190bc:	1445883a 	add	r2,r2,r17
100190c0:	44400115 	stw	r17,4(r8)
100190c4:	40c00015 	stw	r3,0(r8)
100190c8:	d8801c15 	stw	r2,112(sp)
100190cc:	d9401b15 	stw	r5,108(sp)
100190d0:	00c001c4 	movi	r3,7
100190d4:	1940170e 	bge	r3,r5,10019134 <___vfiprintf_internal_r+0xe24>
100190d8:	1000101e 	bne	r2,zero,1001911c <___vfiprintf_internal_r+0xe0c>
100190dc:	d8802517 	ldw	r2,148(sp)
100190e0:	14c11616 	blt	r2,r19,1001953c <___vfiprintf_internal_r+0x122c>
100190e4:	d9002417 	ldw	r4,144(sp)
100190e8:	2089883a 	add	r4,r4,r2
100190ec:	d9002415 	stw	r4,144(sp)
100190f0:	003e1806 	br	10018954 <__alt_data_end+0xf8018954>
100190f4:	d9801a04 	addi	r6,sp,104
100190f8:	b80b883a 	mov	r5,r23
100190fc:	a809883a 	mov	r4,r21
10019100:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019104:	103fba1e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
10019108:	d9001b17 	ldw	r4,108(sp)
1001910c:	d8801c17 	ldw	r2,112(sp)
10019110:	d811883a 	mov	r8,sp
10019114:	21400044 	addi	r5,r4,1
10019118:	003fd606 	br	10019074 <__alt_data_end+0xf8019074>
1001911c:	d9402017 	ldw	r5,128(sp)
10019120:	d9002117 	ldw	r4,132(sp)
10019124:	d9801a04 	addi	r6,sp,104
10019128:	00181fc0 	call	100181fc <__sprint_r.part.0>
1001912c:	103fb01e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
10019130:	d8801c17 	ldw	r2,112(sp)
10019134:	d8c02517 	ldw	r3,148(sp)
10019138:	1cc0010e 	bge	r3,r19,10019140 <___vfiprintf_internal_r+0xe30>
1001913c:	9807883a 	mov	r3,r19
10019140:	d9002417 	ldw	r4,144(sp)
10019144:	20c9883a 	add	r4,r4,r3
10019148:	d9002415 	stw	r4,144(sp)
1001914c:	103e0126 	beq	r2,zero,10018954 <__alt_data_end+0xf8018954>
10019150:	d9402017 	ldw	r5,128(sp)
10019154:	d9002117 	ldw	r4,132(sp)
10019158:	d9801a04 	addi	r6,sp,104
1001915c:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019160:	103dfc26 	beq	r2,zero,10018954 <__alt_data_end+0xf8018954>
10019164:	003fa206 	br	10018ff0 <__alt_data_end+0xf8018ff0>
10019168:	d9402017 	ldw	r5,128(sp)
1001916c:	d9002117 	ldw	r4,132(sp)
10019170:	d9801a04 	addi	r6,sp,104
10019174:	d9c02b15 	stw	r7,172(sp)
10019178:	00181fc0 	call	100181fc <__sprint_r.part.0>
1001917c:	d9c02b17 	ldw	r7,172(sp)
10019180:	103f9b1e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
10019184:	d9001b17 	ldw	r4,108(sp)
10019188:	d8801c17 	ldw	r2,112(sp)
1001918c:	d811883a 	mov	r8,sp
10019190:	21800044 	addi	r6,r4,1
10019194:	003dbf06 	br	10018894 <__alt_data_end+0xf8018894>
10019198:	1000d81e 	bne	r2,zero,100194fc <___vfiprintf_internal_r+0x11ec>
1001919c:	d9001d87 	ldb	r4,118(sp)
100191a0:	20000a26 	beq	r4,zero,100191cc <___vfiprintf_internal_r+0xebc>
100191a4:	00800044 	movi	r2,1
100191a8:	d9001d84 	addi	r4,sp,118
100191ac:	100b883a 	mov	r5,r2
100191b0:	d9000015 	stw	r4,0(sp)
100191b4:	d8800115 	stw	r2,4(sp)
100191b8:	d811883a 	mov	r8,sp
100191bc:	2809883a 	mov	r4,r5
100191c0:	42000204 	addi	r8,r8,8
100191c4:	29400044 	addi	r5,r5,1
100191c8:	003d9506 	br	10018820 <__alt_data_end+0xf8018820>
100191cc:	3800fd26 	beq	r7,zero,100195c4 <___vfiprintf_internal_r+0x12b4>
100191d0:	00800084 	movi	r2,2
100191d4:	d9001d04 	addi	r4,sp,116
100191d8:	d9000015 	stw	r4,0(sp)
100191dc:	d8800115 	stw	r2,4(sp)
100191e0:	01400044 	movi	r5,1
100191e4:	d811883a 	mov	r8,sp
100191e8:	2809883a 	mov	r4,r5
100191ec:	42000204 	addi	r8,r8,8
100191f0:	29400044 	addi	r5,r5,1
100191f4:	003f4606 	br	10018f10 <__alt_data_end+0xf8018f10>
100191f8:	d8802517 	ldw	r2,148(sp)
100191fc:	14c0010e 	bge	r2,r19,10019204 <___vfiprintf_internal_r+0xef4>
10019200:	9805883a 	mov	r2,r19
10019204:	d9402417 	ldw	r5,144(sp)
10019208:	288b883a 	add	r5,r5,r2
1001920c:	d9402415 	stw	r5,144(sp)
10019210:	003dd006 	br	10018954 <__alt_data_end+0xf8018954>
10019214:	d8001d85 	stb	zero,118(sp)
10019218:	80005d16 	blt	r16,zero,10019390 <___vfiprintf_internal_r+0x1080>
1001921c:	00ffdfc4 	movi	r3,-129
10019220:	9d04b03a 	or	r2,r19,r20
10019224:	88e2703a 	and	r17,r17,r3
10019228:	103d3726 	beq	r2,zero,10018708 <__alt_data_end+0xf8018708>
1001922c:	002b883a 	mov	r21,zero
10019230:	d9002617 	ldw	r4,152(sp)
10019234:	ddc01a04 	addi	r23,sp,104
10019238:	988003cc 	andi	r2,r19,15
1001923c:	a006973a 	slli	r3,r20,28
10019240:	2085883a 	add	r2,r4,r2
10019244:	9826d13a 	srli	r19,r19,4
10019248:	10800003 	ldbu	r2,0(r2)
1001924c:	a028d13a 	srli	r20,r20,4
10019250:	bdffffc4 	addi	r23,r23,-1
10019254:	1ce6b03a 	or	r19,r3,r19
10019258:	b8800005 	stb	r2,0(r23)
1001925c:	9d04b03a 	or	r2,r19,r20
10019260:	103ff51e 	bne	r2,zero,10019238 <__alt_data_end+0xf8019238>
10019264:	d8801e17 	ldw	r2,120(sp)
10019268:	15e9c83a 	sub	r20,r2,r23
1001926c:	003d2b06 	br	1001871c <__alt_data_end+0xf801871c>
10019270:	d9402017 	ldw	r5,128(sp)
10019274:	d9002117 	ldw	r4,132(sp)
10019278:	d9801a04 	addi	r6,sp,104
1001927c:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019280:	103f5b1e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
10019284:	d8801c17 	ldw	r2,112(sp)
10019288:	d811883a 	mov	r8,sp
1001928c:	003f6706 	br	1001902c <__alt_data_end+0xf801902c>
10019290:	d9402017 	ldw	r5,128(sp)
10019294:	d9002117 	ldw	r4,132(sp)
10019298:	d9801a04 	addi	r6,sp,104
1001929c:	00181fc0 	call	100181fc <__sprint_r.part.0>
100192a0:	103f531e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
100192a4:	d811883a 	mov	r8,sp
100192a8:	003cd906 	br	10018610 <__alt_data_end+0xf8018610>
100192ac:	10803fcc 	andi	r2,r2,255
100192b0:	1080201c 	xori	r2,r2,128
100192b4:	10bfe004 	addi	r2,r2,-128
100192b8:	00c00c04 	movi	r3,48
100192bc:	10ffe926 	beq	r2,r3,10019264 <__alt_data_end+0xf8019264>
100192c0:	b8ffffc5 	stb	r3,-1(r23)
100192c4:	d8c01e17 	ldw	r3,120(sp)
100192c8:	b8bfffc4 	addi	r2,r23,-1
100192cc:	102f883a 	mov	r23,r2
100192d0:	18a9c83a 	sub	r20,r3,r2
100192d4:	003d1106 	br	1001871c <__alt_data_end+0xf801871c>
100192d8:	d9402017 	ldw	r5,128(sp)
100192dc:	d9002117 	ldw	r4,132(sp)
100192e0:	d9801a04 	addi	r6,sp,104
100192e4:	d8c02a15 	stw	r3,168(sp)
100192e8:	d9c02b15 	stw	r7,172(sp)
100192ec:	00181fc0 	call	100181fc <__sprint_r.part.0>
100192f0:	d8c02a17 	ldw	r3,168(sp)
100192f4:	d9c02b17 	ldw	r7,172(sp)
100192f8:	103f3d1e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
100192fc:	d9001b17 	ldw	r4,108(sp)
10019300:	d8801c17 	ldw	r2,112(sp)
10019304:	d811883a 	mov	r8,sp
10019308:	21400044 	addi	r5,r4,1
1001930c:	003d4406 	br	10018820 <__alt_data_end+0xf8018820>
10019310:	d9402017 	ldw	r5,128(sp)
10019314:	d9002117 	ldw	r4,132(sp)
10019318:	d9801a04 	addi	r6,sp,104
1001931c:	d8c02a15 	stw	r3,168(sp)
10019320:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019324:	d8c02a17 	ldw	r3,168(sp)
10019328:	103f311e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
1001932c:	d9001b17 	ldw	r4,108(sp)
10019330:	d8801c17 	ldw	r2,112(sp)
10019334:	d811883a 	mov	r8,sp
10019338:	21400044 	addi	r5,r4,1
1001933c:	003ef406 	br	10018f10 <__alt_data_end+0xf8018f10>
10019340:	1000bd1e 	bne	r2,zero,10019638 <___vfiprintf_internal_r+0x1328>
10019344:	01400044 	movi	r5,1
10019348:	0009883a 	mov	r4,zero
1001934c:	d811883a 	mov	r8,sp
10019350:	003ef106 	br	10018f18 <__alt_data_end+0xf8018f18>
10019354:	d9402017 	ldw	r5,128(sp)
10019358:	d9002117 	ldw	r4,132(sp)
1001935c:	d9801a04 	addi	r6,sp,104
10019360:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019364:	103f221e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
10019368:	d9401b17 	ldw	r5,108(sp)
1001936c:	d8801c17 	ldw	r2,112(sp)
10019370:	d811883a 	mov	r8,sp
10019374:	29400044 	addi	r5,r5,1
10019378:	003d6206 	br	10018904 <__alt_data_end+0xf8018904>
1001937c:	014400b4 	movhi	r5,4098
10019380:	294b5004 	addi	r5,r5,11584
10019384:	d9402615 	stw	r5,152(sp)
10019388:	d8c02215 	stw	r3,136(sp)
1001938c:	1023883a 	mov	r17,r2
10019390:	9d04b03a 	or	r2,r19,r20
10019394:	103fa51e 	bne	r2,zero,1001922c <__alt_data_end+0xf801922c>
10019398:	002b883a 	mov	r21,zero
1001939c:	00800084 	movi	r2,2
100193a0:	003e4a06 	br	10018ccc <__alt_data_end+0xf8018ccc>
100193a4:	014400b4 	movhi	r5,4098
100193a8:	294b5004 	addi	r5,r5,11584
100193ac:	002b883a 	mov	r21,zero
100193b0:	d9402615 	stw	r5,152(sp)
100193b4:	003f9e06 	br	10019230 <__alt_data_end+0xf8019230>
100193b8:	d9402217 	ldw	r5,136(sp)
100193bc:	d8001d85 	stb	zero,118(sp)
100193c0:	0029883a 	mov	r20,zero
100193c4:	28800104 	addi	r2,r5,4
100193c8:	2cc00017 	ldw	r19,0(r5)
100193cc:	803e3a16 	blt	r16,zero,10018cb8 <__alt_data_end+0xf8018cb8>
100193d0:	00ffdfc4 	movi	r3,-129
100193d4:	d8802215 	stw	r2,136(sp)
100193d8:	88e2703a 	and	r17,r17,r3
100193dc:	002b883a 	mov	r21,zero
100193e0:	983e9b26 	beq	r19,zero,10018e50 <__alt_data_end+0xf8018e50>
100193e4:	00800244 	movi	r2,9
100193e8:	14fdc936 	bltu	r2,r19,10018b10 <__alt_data_end+0xf8018b10>
100193ec:	003e9a06 	br	10018e58 <__alt_data_end+0xf8018e58>
100193f0:	00800c04 	movi	r2,48
100193f4:	d8c01d45 	stb	r3,117(sp)
100193f8:	d8801d05 	stb	r2,116(sp)
100193fc:	d8001d85 	stb	zero,118(sp)
10019400:	88c00094 	ori	r3,r17,2
10019404:	80009c16 	blt	r16,zero,10019678 <___vfiprintf_internal_r+0x1368>
10019408:	00bfdfc4 	movi	r2,-129
1001940c:	88a2703a 	and	r17,r17,r2
10019410:	8c400094 	ori	r17,r17,2
10019414:	002b883a 	mov	r21,zero
10019418:	003f8506 	br	10019230 <__alt_data_end+0xf8019230>
1001941c:	b029883a 	mov	r20,r22
10019420:	003c0b06 	br	10018450 <__alt_data_end+0xf8018450>
10019424:	04e7c83a 	sub	r19,zero,r19
10019428:	05400b44 	movi	r21,45
1001942c:	9804c03a 	cmpne	r2,r19,zero
10019430:	0529c83a 	sub	r20,zero,r20
10019434:	dd401d85 	stb	r21,118(sp)
10019438:	a0a9c83a 	sub	r20,r20,r2
1001943c:	80009716 	blt	r16,zero,1001969c <___vfiprintf_internal_r+0x138c>
10019440:	00bfdfc4 	movi	r2,-129
10019444:	88a2703a 	and	r17,r17,r2
10019448:	003db006 	br	10018b0c <__alt_data_end+0xf8018b0c>
1001944c:	b0c00007 	ldb	r3,0(r22)
10019450:	003c0c06 	br	10018484 <__alt_data_end+0xf8018484>
10019454:	8880100c 	andi	r2,r17,64
10019458:	d8001d85 	stb	zero,118(sp)
1001945c:	1000461e 	bne	r2,zero,10019578 <___vfiprintf_internal_r+0x1268>
10019460:	d9002217 	ldw	r4,136(sp)
10019464:	0029883a 	mov	r20,zero
10019468:	20800104 	addi	r2,r4,4
1001946c:	24c00017 	ldw	r19,0(r4)
10019470:	803df80e 	bge	r16,zero,10018c54 <__alt_data_end+0xf8018c54>
10019474:	9d06b03a 	or	r3,r19,r20
10019478:	d8802215 	stw	r2,136(sp)
1001947c:	183d5e1e 	bne	r3,zero,100189f8 <__alt_data_end+0xf80189f8>
10019480:	002b883a 	mov	r21,zero
10019484:	0005883a 	mov	r2,zero
10019488:	003e1006 	br	10018ccc <__alt_data_end+0xf8018ccc>
1001948c:	8880040c 	andi	r2,r17,16
10019490:	1000321e 	bne	r2,zero,1001955c <___vfiprintf_internal_r+0x124c>
10019494:	8c40100c 	andi	r17,r17,64
10019498:	88008d26 	beq	r17,zero,100196d0 <___vfiprintf_internal_r+0x13c0>
1001949c:	d9402217 	ldw	r5,136(sp)
100194a0:	d8c02417 	ldw	r3,144(sp)
100194a4:	28800017 	ldw	r2,0(r5)
100194a8:	29400104 	addi	r5,r5,4
100194ac:	d9402215 	stw	r5,136(sp)
100194b0:	10c0000d 	sth	r3,0(r2)
100194b4:	003bca06 	br	100183e0 <__alt_data_end+0xf80183e0>
100194b8:	8880100c 	andi	r2,r17,64
100194bc:	10003a26 	beq	r2,zero,100195a8 <___vfiprintf_internal_r+0x1298>
100194c0:	d8802217 	ldw	r2,136(sp)
100194c4:	14c0000f 	ldh	r19,0(r2)
100194c8:	10800104 	addi	r2,r2,4
100194cc:	d8802215 	stw	r2,136(sp)
100194d0:	9829d7fa 	srai	r20,r19,31
100194d4:	a005883a 	mov	r2,r20
100194d8:	003d8506 	br	10018af0 <__alt_data_end+0xf8018af0>
100194dc:	8880100c 	andi	r2,r17,64
100194e0:	10002b26 	beq	r2,zero,10019590 <___vfiprintf_internal_r+0x1280>
100194e4:	d8802217 	ldw	r2,136(sp)
100194e8:	0029883a 	mov	r20,zero
100194ec:	14c0000b 	ldhu	r19,0(r2)
100194f0:	10800104 	addi	r2,r2,4
100194f4:	d8802215 	stw	r2,136(sp)
100194f8:	003d5d06 	br	10018a70 <__alt_data_end+0xf8018a70>
100194fc:	d9402017 	ldw	r5,128(sp)
10019500:	d9002117 	ldw	r4,132(sp)
10019504:	d9801a04 	addi	r6,sp,104
10019508:	d8c02a15 	stw	r3,168(sp)
1001950c:	d9c02b15 	stw	r7,172(sp)
10019510:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019514:	d8c02a17 	ldw	r3,168(sp)
10019518:	d9c02b17 	ldw	r7,172(sp)
1001951c:	103eb41e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
10019520:	d9001b17 	ldw	r4,108(sp)
10019524:	d8801c17 	ldw	r2,112(sp)
10019528:	d811883a 	mov	r8,sp
1001952c:	21400044 	addi	r5,r4,1
10019530:	003e6706 	br	10018ed0 <__alt_data_end+0xf8018ed0>
10019534:	00bfffc4 	movi	r2,-1
10019538:	003c4a06 	br	10018664 <__alt_data_end+0xf8018664>
1001953c:	9805883a 	mov	r2,r19
10019540:	003ee806 	br	100190e4 <__alt_data_end+0xf80190e4>
10019544:	d8c02217 	ldw	r3,136(sp)
10019548:	0029883a 	mov	r20,zero
1001954c:	18800104 	addi	r2,r3,4
10019550:	1cc0000b 	ldhu	r19,0(r3)
10019554:	803f9e0e 	bge	r16,zero,100193d0 <__alt_data_end+0xf80193d0>
10019558:	003dd706 	br	10018cb8 <__alt_data_end+0xf8018cb8>
1001955c:	d8c02217 	ldw	r3,136(sp)
10019560:	d9002417 	ldw	r4,144(sp)
10019564:	18800017 	ldw	r2,0(r3)
10019568:	18c00104 	addi	r3,r3,4
1001956c:	d8c02215 	stw	r3,136(sp)
10019570:	11000015 	stw	r4,0(r2)
10019574:	003b9a06 	br	100183e0 <__alt_data_end+0xf80183e0>
10019578:	d8c02217 	ldw	r3,136(sp)
1001957c:	0029883a 	mov	r20,zero
10019580:	18800104 	addi	r2,r3,4
10019584:	1cc0000b 	ldhu	r19,0(r3)
10019588:	803db20e 	bge	r16,zero,10018c54 <__alt_data_end+0xf8018c54>
1001958c:	003fb906 	br	10019474 <__alt_data_end+0xf8019474>
10019590:	d9002217 	ldw	r4,136(sp)
10019594:	0029883a 	mov	r20,zero
10019598:	24c00017 	ldw	r19,0(r4)
1001959c:	21000104 	addi	r4,r4,4
100195a0:	d9002215 	stw	r4,136(sp)
100195a4:	003d3206 	br	10018a70 <__alt_data_end+0xf8018a70>
100195a8:	d8c02217 	ldw	r3,136(sp)
100195ac:	1cc00017 	ldw	r19,0(r3)
100195b0:	18c00104 	addi	r3,r3,4
100195b4:	d8c02215 	stw	r3,136(sp)
100195b8:	9829d7fa 	srai	r20,r19,31
100195bc:	a005883a 	mov	r2,r20
100195c0:	003d4b06 	br	10018af0 <__alt_data_end+0xf8018af0>
100195c4:	0009883a 	mov	r4,zero
100195c8:	01400044 	movi	r5,1
100195cc:	d811883a 	mov	r8,sp
100195d0:	003e4f06 	br	10018f10 <__alt_data_end+0xf8018f10>
100195d4:	d8c02215 	stw	r3,136(sp)
100195d8:	002b883a 	mov	r21,zero
100195dc:	003db806 	br	10018cc0 <__alt_data_end+0xf8018cc0>
100195e0:	d811883a 	mov	r8,sp
100195e4:	003e9606 	br	10019040 <__alt_data_end+0xf8019040>
100195e8:	010400b4 	movhi	r4,4098
100195ec:	210c7b04 	addi	r4,r4,12780
100195f0:	d9002315 	stw	r4,140(sp)
100195f4:	003e6306 	br	10018f84 <__alt_data_end+0xf8018f84>
100195f8:	b0c00043 	ldbu	r3,1(r22)
100195fc:	8c400814 	ori	r17,r17,32
10019600:	b5800044 	addi	r22,r22,1
10019604:	18c03fcc 	andi	r3,r3,255
10019608:	18c0201c 	xori	r3,r3,128
1001960c:	18ffe004 	addi	r3,r3,-128
10019610:	003b9c06 	br	10018484 <__alt_data_end+0xf8018484>
10019614:	b809883a 	mov	r4,r23
10019618:	da002a15 	stw	r8,168(sp)
1001961c:	0009fe40 	call	10009fe4 <strlen>
10019620:	1029883a 	mov	r20,r2
10019624:	dd401d83 	ldbu	r21,118(sp)
10019628:	df002215 	stw	fp,136(sp)
1001962c:	0021883a 	mov	r16,zero
10019630:	da002a17 	ldw	r8,168(sp)
10019634:	003c3906 	br	1001871c <__alt_data_end+0xf801871c>
10019638:	d9402017 	ldw	r5,128(sp)
1001963c:	d9002117 	ldw	r4,132(sp)
10019640:	d9801a04 	addi	r6,sp,104
10019644:	00181fc0 	call	100181fc <__sprint_r.part.0>
10019648:	103e691e 	bne	r2,zero,10018ff0 <__alt_data_end+0xf8018ff0>
1001964c:	d9001b17 	ldw	r4,108(sp)
10019650:	d8801c17 	ldw	r2,112(sp)
10019654:	d811883a 	mov	r8,sp
10019658:	21400044 	addi	r5,r4,1
1001965c:	003e2e06 	br	10018f18 <__alt_data_end+0xf8018f18>
10019660:	010400b4 	movhi	r4,4098
10019664:	210c7f04 	addi	r4,r4,12796
10019668:	d9002315 	stw	r4,140(sp)
1001966c:	d9001b17 	ldw	r4,108(sp)
10019670:	21000044 	addi	r4,r4,1
10019674:	003c5e06 	br	100187f0 <__alt_data_end+0xf80187f0>
10019678:	002b883a 	mov	r21,zero
1001967c:	00800084 	movi	r2,2
10019680:	10803fcc 	andi	r2,r2,255
10019684:	01000044 	movi	r4,1
10019688:	11002b26 	beq	r2,r4,10019738 <___vfiprintf_internal_r+0x1428>
1001968c:	01000084 	movi	r4,2
10019690:	11002b1e 	bne	r2,r4,10019740 <___vfiprintf_internal_r+0x1430>
10019694:	1823883a 	mov	r17,r3
10019698:	003ee506 	br	10019230 <__alt_data_end+0xf8019230>
1001969c:	8807883a 	mov	r3,r17
100196a0:	00800044 	movi	r2,1
100196a4:	003ff606 	br	10019680 <__alt_data_end+0xf8019680>
100196a8:	00800184 	movi	r2,6
100196ac:	1400012e 	bgeu	r2,r16,100196b4 <___vfiprintf_internal_r+0x13a4>
100196b0:	1021883a 	mov	r16,r2
100196b4:	8029883a 	mov	r20,r16
100196b8:	8027883a 	mov	r19,r16
100196bc:	80002216 	blt	r16,zero,10019748 <___vfiprintf_internal_r+0x1438>
100196c0:	05c400b4 	movhi	r23,4098
100196c4:	df002215 	stw	fp,136(sp)
100196c8:	bdcb5504 	addi	r23,r23,11604
100196cc:	003cfb06 	br	10018abc <__alt_data_end+0xf8018abc>
100196d0:	d9002217 	ldw	r4,136(sp)
100196d4:	d9402417 	ldw	r5,144(sp)
100196d8:	20800017 	ldw	r2,0(r4)
100196dc:	21000104 	addi	r4,r4,4
100196e0:	d9002215 	stw	r4,136(sp)
100196e4:	11400015 	stw	r5,0(r2)
100196e8:	003b3d06 	br	100183e0 <__alt_data_end+0xf80183e0>
100196ec:	014400b4 	movhi	r5,4098
100196f0:	294c7f04 	addi	r5,r5,12796
100196f4:	d9402315 	stw	r5,140(sp)
100196f8:	d9401b17 	ldw	r5,108(sp)
100196fc:	29400044 	addi	r5,r5,1
10019700:	003e6d06 	br	100190b8 <__alt_data_end+0xf80190b8>
10019704:	8029883a 	mov	r20,r16
10019708:	dd401d83 	ldbu	r21,118(sp)
1001970c:	df002215 	stw	fp,136(sp)
10019710:	0021883a 	mov	r16,zero
10019714:	003c0106 	br	1001871c <__alt_data_end+0xf801871c>
10019718:	00c400b4 	movhi	r3,4098
1001971c:	18cc7b04 	addi	r3,r3,12780
10019720:	d8c02315 	stw	r3,140(sp)
10019724:	280d883a 	mov	r6,r5
10019728:	003c6906 	br	100188d0 <__alt_data_end+0xf80188d0>
1001972c:	802d883a 	mov	r22,r16
10019730:	0021883a 	mov	r16,zero
10019734:	003b5406 	br	10018488 <__alt_data_end+0xf8018488>
10019738:	1823883a 	mov	r17,r3
1001973c:	003cf306 	br	10018b0c <__alt_data_end+0xf8018b0c>
10019740:	1823883a 	mov	r17,r3
10019744:	003cad06 	br	100189fc <__alt_data_end+0xf80189fc>
10019748:	0027883a 	mov	r19,zero
1001974c:	003fdc06 	br	100196c0 <__alt_data_end+0xf80196c0>
10019750:	d9402217 	ldw	r5,136(sp)
10019754:	8005883a 	mov	r2,r16
10019758:	b0c00043 	ldbu	r3,1(r22)
1001975c:	2c000017 	ldw	r16,0(r5)
10019760:	29000104 	addi	r4,r5,4
10019764:	d9002215 	stw	r4,136(sp)
10019768:	102d883a 	mov	r22,r2
1001976c:	803fa50e 	bge	r16,zero,10019604 <__alt_data_end+0xf8019604>
10019770:	18c03fcc 	andi	r3,r3,255
10019774:	18c0201c 	xori	r3,r3,128
10019778:	043fffc4 	movi	r16,-1
1001977c:	18ffe004 	addi	r3,r3,-128
10019780:	003b4006 	br	10018484 <__alt_data_end+0xf8018484>
10019784:	d9402303 	ldbu	r5,140(sp)
10019788:	d9401d85 	stb	r5,118(sp)
1001978c:	003cae06 	br	10018a48 <__alt_data_end+0xf8018a48>
10019790:	d8c02303 	ldbu	r3,140(sp)
10019794:	d8c01d85 	stb	r3,118(sp)
10019798:	003d1406 	br	10018bec <__alt_data_end+0xf8018bec>
1001979c:	d8c02303 	ldbu	r3,140(sp)
100197a0:	d8c01d85 	stb	r3,118(sp)
100197a4:	003cca06 	br	10018ad0 <__alt_data_end+0xf8018ad0>
100197a8:	8880004c 	andi	r2,r17,1
100197ac:	002b883a 	mov	r21,zero
100197b0:	10000526 	beq	r2,zero,100197c8 <___vfiprintf_internal_r+0x14b8>
100197b4:	00800c04 	movi	r2,48
100197b8:	d88019c5 	stb	r2,103(sp)
100197bc:	dd002817 	ldw	r20,160(sp)
100197c0:	ddc019c4 	addi	r23,sp,103
100197c4:	003bd506 	br	1001871c <__alt_data_end+0xf801871c>
100197c8:	0029883a 	mov	r20,zero
100197cc:	ddc01a04 	addi	r23,sp,104
100197d0:	003bd206 	br	1001871c <__alt_data_end+0xf801871c>
100197d4:	d9002303 	ldbu	r4,140(sp)
100197d8:	d9001d85 	stb	r4,118(sp)
100197dc:	003da606 	br	10018e78 <__alt_data_end+0xf8018e78>
100197e0:	d8c02303 	ldbu	r3,140(sp)
100197e4:	d8c01d85 	stb	r3,118(sp)
100197e8:	003c7606 	br	100189c4 <__alt_data_end+0xf80189c4>
100197ec:	d8c02303 	ldbu	r3,140(sp)
100197f0:	d8c01d85 	stb	r3,118(sp)
100197f4:	003c6506 	br	1001898c <__alt_data_end+0xf801898c>
100197f8:	d9002303 	ldbu	r4,140(sp)
100197fc:	d9001d85 	stb	r4,118(sp)
10019800:	003d3d06 	br	10018cf8 <__alt_data_end+0xf8018cf8>
10019804:	d8c02303 	ldbu	r3,140(sp)
10019808:	d8c01d85 	stb	r3,118(sp)
1001980c:	003d1d06 	br	10018c84 <__alt_data_end+0xf8018c84>
10019810:	d8c02303 	ldbu	r3,140(sp)
10019814:	d8c01d85 	stb	r3,118(sp)
10019818:	003d0306 	br	10018c28 <__alt_data_end+0xf8018c28>

1001981c <__vfiprintf_internal>:
1001981c:	008400b4 	movhi	r2,4098
10019820:	10951604 	addi	r2,r2,21592
10019824:	300f883a 	mov	r7,r6
10019828:	280d883a 	mov	r6,r5
1001982c:	200b883a 	mov	r5,r4
10019830:	11000017 	ldw	r4,0(r2)
10019834:	00183101 	jmpi	10018310 <___vfiprintf_internal_r>

10019838 <__sbprintf>:
10019838:	2880030b 	ldhu	r2,12(r5)
1001983c:	2ac01917 	ldw	r11,100(r5)
10019840:	2a80038b 	ldhu	r10,14(r5)
10019844:	2a400717 	ldw	r9,28(r5)
10019848:	2a000917 	ldw	r8,36(r5)
1001984c:	defee204 	addi	sp,sp,-1144
10019850:	00c10004 	movi	r3,1024
10019854:	dc011a15 	stw	r16,1128(sp)
10019858:	10bfff4c 	andi	r2,r2,65533
1001985c:	2821883a 	mov	r16,r5
10019860:	d8cb883a 	add	r5,sp,r3
10019864:	dc811c15 	stw	r18,1136(sp)
10019868:	dc411b15 	stw	r17,1132(sp)
1001986c:	dfc11d15 	stw	ra,1140(sp)
10019870:	2025883a 	mov	r18,r4
10019874:	d881030d 	sth	r2,1036(sp)
10019878:	dac11915 	stw	r11,1124(sp)
1001987c:	da81038d 	sth	r10,1038(sp)
10019880:	da410715 	stw	r9,1052(sp)
10019884:	da010915 	stw	r8,1060(sp)
10019888:	dec10015 	stw	sp,1024(sp)
1001988c:	dec10415 	stw	sp,1040(sp)
10019890:	d8c10215 	stw	r3,1032(sp)
10019894:	d8c10515 	stw	r3,1044(sp)
10019898:	d8010615 	stw	zero,1048(sp)
1001989c:	00183100 	call	10018310 <___vfiprintf_internal_r>
100198a0:	1023883a 	mov	r17,r2
100198a4:	10000416 	blt	r2,zero,100198b8 <__sbprintf+0x80>
100198a8:	d9410004 	addi	r5,sp,1024
100198ac:	9009883a 	mov	r4,r18
100198b0:	000fab40 	call	1000fab4 <_fflush_r>
100198b4:	10000d1e 	bne	r2,zero,100198ec <__sbprintf+0xb4>
100198b8:	d881030b 	ldhu	r2,1036(sp)
100198bc:	1080100c 	andi	r2,r2,64
100198c0:	10000326 	beq	r2,zero,100198d0 <__sbprintf+0x98>
100198c4:	8080030b 	ldhu	r2,12(r16)
100198c8:	10801014 	ori	r2,r2,64
100198cc:	8080030d 	sth	r2,12(r16)
100198d0:	8805883a 	mov	r2,r17
100198d4:	dfc11d17 	ldw	ra,1140(sp)
100198d8:	dc811c17 	ldw	r18,1136(sp)
100198dc:	dc411b17 	ldw	r17,1132(sp)
100198e0:	dc011a17 	ldw	r16,1128(sp)
100198e4:	dec11e04 	addi	sp,sp,1144
100198e8:	f800283a 	ret
100198ec:	047fffc4 	movi	r17,-1
100198f0:	003ff106 	br	100198b8 <__alt_data_end+0xf80198b8>

100198f4 <__swbuf_r>:
100198f4:	defffb04 	addi	sp,sp,-20
100198f8:	dcc00315 	stw	r19,12(sp)
100198fc:	dc800215 	stw	r18,8(sp)
10019900:	dc000015 	stw	r16,0(sp)
10019904:	dfc00415 	stw	ra,16(sp)
10019908:	dc400115 	stw	r17,4(sp)
1001990c:	2025883a 	mov	r18,r4
10019910:	2827883a 	mov	r19,r5
10019914:	3021883a 	mov	r16,r6
10019918:	20000226 	beq	r4,zero,10019924 <__swbuf_r+0x30>
1001991c:	20800e17 	ldw	r2,56(r4)
10019920:	10004226 	beq	r2,zero,10019a2c <__swbuf_r+0x138>
10019924:	80800617 	ldw	r2,24(r16)
10019928:	8100030b 	ldhu	r4,12(r16)
1001992c:	80800215 	stw	r2,8(r16)
10019930:	2080020c 	andi	r2,r4,8
10019934:	10003626 	beq	r2,zero,10019a10 <__swbuf_r+0x11c>
10019938:	80c00417 	ldw	r3,16(r16)
1001993c:	18003426 	beq	r3,zero,10019a10 <__swbuf_r+0x11c>
10019940:	2088000c 	andi	r2,r4,8192
10019944:	9c403fcc 	andi	r17,r19,255
10019948:	10001a26 	beq	r2,zero,100199b4 <__swbuf_r+0xc0>
1001994c:	80800017 	ldw	r2,0(r16)
10019950:	81000517 	ldw	r4,20(r16)
10019954:	10c7c83a 	sub	r3,r2,r3
10019958:	1900200e 	bge	r3,r4,100199dc <__swbuf_r+0xe8>
1001995c:	18c00044 	addi	r3,r3,1
10019960:	81000217 	ldw	r4,8(r16)
10019964:	11400044 	addi	r5,r2,1
10019968:	81400015 	stw	r5,0(r16)
1001996c:	213fffc4 	addi	r4,r4,-1
10019970:	81000215 	stw	r4,8(r16)
10019974:	14c00005 	stb	r19,0(r2)
10019978:	80800517 	ldw	r2,20(r16)
1001997c:	10c01e26 	beq	r2,r3,100199f8 <__swbuf_r+0x104>
10019980:	8080030b 	ldhu	r2,12(r16)
10019984:	1080004c 	andi	r2,r2,1
10019988:	10000226 	beq	r2,zero,10019994 <__swbuf_r+0xa0>
1001998c:	00800284 	movi	r2,10
10019990:	88801926 	beq	r17,r2,100199f8 <__swbuf_r+0x104>
10019994:	8805883a 	mov	r2,r17
10019998:	dfc00417 	ldw	ra,16(sp)
1001999c:	dcc00317 	ldw	r19,12(sp)
100199a0:	dc800217 	ldw	r18,8(sp)
100199a4:	dc400117 	ldw	r17,4(sp)
100199a8:	dc000017 	ldw	r16,0(sp)
100199ac:	dec00504 	addi	sp,sp,20
100199b0:	f800283a 	ret
100199b4:	81401917 	ldw	r5,100(r16)
100199b8:	00b7ffc4 	movi	r2,-8193
100199bc:	21080014 	ori	r4,r4,8192
100199c0:	2884703a 	and	r2,r5,r2
100199c4:	80801915 	stw	r2,100(r16)
100199c8:	80800017 	ldw	r2,0(r16)
100199cc:	8100030d 	sth	r4,12(r16)
100199d0:	81000517 	ldw	r4,20(r16)
100199d4:	10c7c83a 	sub	r3,r2,r3
100199d8:	193fe016 	blt	r3,r4,1001995c <__alt_data_end+0xf801995c>
100199dc:	800b883a 	mov	r5,r16
100199e0:	9009883a 	mov	r4,r18
100199e4:	000fab40 	call	1000fab4 <_fflush_r>
100199e8:	1000071e 	bne	r2,zero,10019a08 <__swbuf_r+0x114>
100199ec:	80800017 	ldw	r2,0(r16)
100199f0:	00c00044 	movi	r3,1
100199f4:	003fda06 	br	10019960 <__alt_data_end+0xf8019960>
100199f8:	800b883a 	mov	r5,r16
100199fc:	9009883a 	mov	r4,r18
10019a00:	000fab40 	call	1000fab4 <_fflush_r>
10019a04:	103fe326 	beq	r2,zero,10019994 <__alt_data_end+0xf8019994>
10019a08:	00bfffc4 	movi	r2,-1
10019a0c:	003fe206 	br	10019998 <__alt_data_end+0xf8019998>
10019a10:	800b883a 	mov	r5,r16
10019a14:	9009883a 	mov	r4,r18
10019a18:	000de940 	call	1000de94 <__swsetup_r>
10019a1c:	103ffa1e 	bne	r2,zero,10019a08 <__alt_data_end+0xf8019a08>
10019a20:	8100030b 	ldhu	r4,12(r16)
10019a24:	80c00417 	ldw	r3,16(r16)
10019a28:	003fc506 	br	10019940 <__alt_data_end+0xf8019940>
10019a2c:	000fea00 	call	1000fea0 <__sinit>
10019a30:	003fbc06 	br	10019924 <__alt_data_end+0xf8019924>

10019a34 <__swbuf>:
10019a34:	008400b4 	movhi	r2,4098
10019a38:	10951604 	addi	r2,r2,21592
10019a3c:	280d883a 	mov	r6,r5
10019a40:	200b883a 	mov	r5,r4
10019a44:	11000017 	ldw	r4,0(r2)
10019a48:	00198f41 	jmpi	100198f4 <__swbuf_r>

10019a4c <_write_r>:
10019a4c:	defffd04 	addi	sp,sp,-12
10019a50:	2805883a 	mov	r2,r5
10019a54:	dc000015 	stw	r16,0(sp)
10019a58:	040400b4 	movhi	r16,4098
10019a5c:	dc400115 	stw	r17,4(sp)
10019a60:	300b883a 	mov	r5,r6
10019a64:	841d8004 	addi	r16,r16,30208
10019a68:	2023883a 	mov	r17,r4
10019a6c:	380d883a 	mov	r6,r7
10019a70:	1009883a 	mov	r4,r2
10019a74:	dfc00215 	stw	ra,8(sp)
10019a78:	80000015 	stw	zero,0(r16)
10019a7c:	001fb740 	call	1001fb74 <write>
10019a80:	00ffffc4 	movi	r3,-1
10019a84:	10c00526 	beq	r2,r3,10019a9c <_write_r+0x50>
10019a88:	dfc00217 	ldw	ra,8(sp)
10019a8c:	dc400117 	ldw	r17,4(sp)
10019a90:	dc000017 	ldw	r16,0(sp)
10019a94:	dec00304 	addi	sp,sp,12
10019a98:	f800283a 	ret
10019a9c:	80c00017 	ldw	r3,0(r16)
10019aa0:	183ff926 	beq	r3,zero,10019a88 <__alt_data_end+0xf8019a88>
10019aa4:	88c00015 	stw	r3,0(r17)
10019aa8:	003ff706 	br	10019a88 <__alt_data_end+0xf8019a88>

10019aac <_close_r>:
10019aac:	defffd04 	addi	sp,sp,-12
10019ab0:	dc000015 	stw	r16,0(sp)
10019ab4:	040400b4 	movhi	r16,4098
10019ab8:	dc400115 	stw	r17,4(sp)
10019abc:	841d8004 	addi	r16,r16,30208
10019ac0:	2023883a 	mov	r17,r4
10019ac4:	2809883a 	mov	r4,r5
10019ac8:	dfc00215 	stw	ra,8(sp)
10019acc:	80000015 	stw	zero,0(r16)
10019ad0:	001f2380 	call	1001f238 <close>
10019ad4:	00ffffc4 	movi	r3,-1
10019ad8:	10c00526 	beq	r2,r3,10019af0 <_close_r+0x44>
10019adc:	dfc00217 	ldw	ra,8(sp)
10019ae0:	dc400117 	ldw	r17,4(sp)
10019ae4:	dc000017 	ldw	r16,0(sp)
10019ae8:	dec00304 	addi	sp,sp,12
10019aec:	f800283a 	ret
10019af0:	80c00017 	ldw	r3,0(r16)
10019af4:	183ff926 	beq	r3,zero,10019adc <__alt_data_end+0xf8019adc>
10019af8:	88c00015 	stw	r3,0(r17)
10019afc:	003ff706 	br	10019adc <__alt_data_end+0xf8019adc>

10019b00 <_calloc_r>:
10019b00:	defffe04 	addi	sp,sp,-8
10019b04:	2805883a 	mov	r2,r5
10019b08:	dc000015 	stw	r16,0(sp)
10019b0c:	300b883a 	mov	r5,r6
10019b10:	2021883a 	mov	r16,r4
10019b14:	1009883a 	mov	r4,r2
10019b18:	dfc00115 	stw	ra,4(sp)
10019b1c:	0008ef00 	call	10008ef0 <__mulsi3>
10019b20:	100b883a 	mov	r5,r2
10019b24:	8009883a 	mov	r4,r16
10019b28:	0010eac0 	call	10010eac <_malloc_r>
10019b2c:	10002926 	beq	r2,zero,10019bd4 <_calloc_r+0xd4>
10019b30:	11bfff17 	ldw	r6,-4(r2)
10019b34:	1021883a 	mov	r16,r2
10019b38:	00bfff04 	movi	r2,-4
10019b3c:	308c703a 	and	r6,r6,r2
10019b40:	00c00904 	movi	r3,36
10019b44:	308d883a 	add	r6,r6,r2
10019b48:	19801636 	bltu	r3,r6,10019ba4 <_calloc_r+0xa4>
10019b4c:	008004c4 	movi	r2,19
10019b50:	11800b2e 	bgeu	r2,r6,10019b80 <_calloc_r+0x80>
10019b54:	80000015 	stw	zero,0(r16)
10019b58:	80000115 	stw	zero,4(r16)
10019b5c:	008006c4 	movi	r2,27
10019b60:	11801a2e 	bgeu	r2,r6,10019bcc <_calloc_r+0xcc>
10019b64:	80000215 	stw	zero,8(r16)
10019b68:	80000315 	stw	zero,12(r16)
10019b6c:	30c0151e 	bne	r6,r3,10019bc4 <_calloc_r+0xc4>
10019b70:	80000415 	stw	zero,16(r16)
10019b74:	80800604 	addi	r2,r16,24
10019b78:	80000515 	stw	zero,20(r16)
10019b7c:	00000106 	br	10019b84 <_calloc_r+0x84>
10019b80:	8005883a 	mov	r2,r16
10019b84:	10000015 	stw	zero,0(r2)
10019b88:	10000115 	stw	zero,4(r2)
10019b8c:	10000215 	stw	zero,8(r2)
10019b90:	8005883a 	mov	r2,r16
10019b94:	dfc00117 	ldw	ra,4(sp)
10019b98:	dc000017 	ldw	r16,0(sp)
10019b9c:	dec00204 	addi	sp,sp,8
10019ba0:	f800283a 	ret
10019ba4:	000b883a 	mov	r5,zero
10019ba8:	8009883a 	mov	r4,r16
10019bac:	0011b1c0 	call	10011b1c <memset>
10019bb0:	8005883a 	mov	r2,r16
10019bb4:	dfc00117 	ldw	ra,4(sp)
10019bb8:	dc000017 	ldw	r16,0(sp)
10019bbc:	dec00204 	addi	sp,sp,8
10019bc0:	f800283a 	ret
10019bc4:	80800404 	addi	r2,r16,16
10019bc8:	003fee06 	br	10019b84 <__alt_data_end+0xf8019b84>
10019bcc:	80800204 	addi	r2,r16,8
10019bd0:	003fec06 	br	10019b84 <__alt_data_end+0xf8019b84>
10019bd4:	0005883a 	mov	r2,zero
10019bd8:	003fee06 	br	10019b94 <__alt_data_end+0xf8019b94>

10019bdc <_fclose_r>:
10019bdc:	28003926 	beq	r5,zero,10019cc4 <_fclose_r+0xe8>
10019be0:	defffc04 	addi	sp,sp,-16
10019be4:	dc400115 	stw	r17,4(sp)
10019be8:	dc000015 	stw	r16,0(sp)
10019bec:	dfc00315 	stw	ra,12(sp)
10019bf0:	dc800215 	stw	r18,8(sp)
10019bf4:	2023883a 	mov	r17,r4
10019bf8:	2821883a 	mov	r16,r5
10019bfc:	20000226 	beq	r4,zero,10019c08 <_fclose_r+0x2c>
10019c00:	20800e17 	ldw	r2,56(r4)
10019c04:	10002726 	beq	r2,zero,10019ca4 <_fclose_r+0xc8>
10019c08:	8080030f 	ldh	r2,12(r16)
10019c0c:	1000071e 	bne	r2,zero,10019c2c <_fclose_r+0x50>
10019c10:	0005883a 	mov	r2,zero
10019c14:	dfc00317 	ldw	ra,12(sp)
10019c18:	dc800217 	ldw	r18,8(sp)
10019c1c:	dc400117 	ldw	r17,4(sp)
10019c20:	dc000017 	ldw	r16,0(sp)
10019c24:	dec00404 	addi	sp,sp,16
10019c28:	f800283a 	ret
10019c2c:	800b883a 	mov	r5,r16
10019c30:	8809883a 	mov	r4,r17
10019c34:	000f8980 	call	1000f898 <__sflush_r>
10019c38:	1025883a 	mov	r18,r2
10019c3c:	80800b17 	ldw	r2,44(r16)
10019c40:	10000426 	beq	r2,zero,10019c54 <_fclose_r+0x78>
10019c44:	81400717 	ldw	r5,28(r16)
10019c48:	8809883a 	mov	r4,r17
10019c4c:	103ee83a 	callr	r2
10019c50:	10001616 	blt	r2,zero,10019cac <_fclose_r+0xd0>
10019c54:	8080030b 	ldhu	r2,12(r16)
10019c58:	1080200c 	andi	r2,r2,128
10019c5c:	1000151e 	bne	r2,zero,10019cb4 <_fclose_r+0xd8>
10019c60:	81400c17 	ldw	r5,48(r16)
10019c64:	28000526 	beq	r5,zero,10019c7c <_fclose_r+0xa0>
10019c68:	80801004 	addi	r2,r16,64
10019c6c:	28800226 	beq	r5,r2,10019c78 <_fclose_r+0x9c>
10019c70:	8809883a 	mov	r4,r17
10019c74:	00102840 	call	10010284 <_free_r>
10019c78:	80000c15 	stw	zero,48(r16)
10019c7c:	81401117 	ldw	r5,68(r16)
10019c80:	28000326 	beq	r5,zero,10019c90 <_fclose_r+0xb4>
10019c84:	8809883a 	mov	r4,r17
10019c88:	00102840 	call	10010284 <_free_r>
10019c8c:	80001115 	stw	zero,68(r16)
10019c90:	000feb00 	call	1000feb0 <__sfp_lock_acquire>
10019c94:	8000030d 	sth	zero,12(r16)
10019c98:	000feb40 	call	1000feb4 <__sfp_lock_release>
10019c9c:	9005883a 	mov	r2,r18
10019ca0:	003fdc06 	br	10019c14 <__alt_data_end+0xf8019c14>
10019ca4:	000fea00 	call	1000fea0 <__sinit>
10019ca8:	003fd706 	br	10019c08 <__alt_data_end+0xf8019c08>
10019cac:	04bfffc4 	movi	r18,-1
10019cb0:	003fe806 	br	10019c54 <__alt_data_end+0xf8019c54>
10019cb4:	81400417 	ldw	r5,16(r16)
10019cb8:	8809883a 	mov	r4,r17
10019cbc:	00102840 	call	10010284 <_free_r>
10019cc0:	003fe706 	br	10019c60 <__alt_data_end+0xf8019c60>
10019cc4:	0005883a 	mov	r2,zero
10019cc8:	f800283a 	ret

10019ccc <fclose>:
10019ccc:	008400b4 	movhi	r2,4098
10019cd0:	10951604 	addi	r2,r2,21592
10019cd4:	200b883a 	mov	r5,r4
10019cd8:	11000017 	ldw	r4,0(r2)
10019cdc:	0019bdc1 	jmpi	10019bdc <_fclose_r>

10019ce0 <__fputwc>:
10019ce0:	defff804 	addi	sp,sp,-32
10019ce4:	dcc00415 	stw	r19,16(sp)
10019ce8:	dc800315 	stw	r18,12(sp)
10019cec:	dc000115 	stw	r16,4(sp)
10019cf0:	dfc00715 	stw	ra,28(sp)
10019cf4:	dd400615 	stw	r21,24(sp)
10019cf8:	dd000515 	stw	r20,20(sp)
10019cfc:	dc400215 	stw	r17,8(sp)
10019d00:	2027883a 	mov	r19,r4
10019d04:	2825883a 	mov	r18,r5
10019d08:	3021883a 	mov	r16,r6
10019d0c:	0010c9c0 	call	10010c9c <__locale_mb_cur_max>
10019d10:	00c00044 	movi	r3,1
10019d14:	10c03e26 	beq	r2,r3,10019e10 <__fputwc+0x130>
10019d18:	81c01704 	addi	r7,r16,92
10019d1c:	900d883a 	mov	r6,r18
10019d20:	d80b883a 	mov	r5,sp
10019d24:	9809883a 	mov	r4,r19
10019d28:	001c2440 	call	1001c244 <_wcrtomb_r>
10019d2c:	1029883a 	mov	r20,r2
10019d30:	00bfffc4 	movi	r2,-1
10019d34:	a0802026 	beq	r20,r2,10019db8 <__fputwc+0xd8>
10019d38:	d9400003 	ldbu	r5,0(sp)
10019d3c:	a0001c26 	beq	r20,zero,10019db0 <__fputwc+0xd0>
10019d40:	0023883a 	mov	r17,zero
10019d44:	05400284 	movi	r21,10
10019d48:	00000906 	br	10019d70 <__fputwc+0x90>
10019d4c:	80800017 	ldw	r2,0(r16)
10019d50:	11400005 	stb	r5,0(r2)
10019d54:	80c00017 	ldw	r3,0(r16)
10019d58:	18c00044 	addi	r3,r3,1
10019d5c:	80c00015 	stw	r3,0(r16)
10019d60:	8c400044 	addi	r17,r17,1
10019d64:	dc45883a 	add	r2,sp,r17
10019d68:	8d00112e 	bgeu	r17,r20,10019db0 <__fputwc+0xd0>
10019d6c:	11400003 	ldbu	r5,0(r2)
10019d70:	80c00217 	ldw	r3,8(r16)
10019d74:	18ffffc4 	addi	r3,r3,-1
10019d78:	80c00215 	stw	r3,8(r16)
10019d7c:	183ff30e 	bge	r3,zero,10019d4c <__alt_data_end+0xf8019d4c>
10019d80:	80800617 	ldw	r2,24(r16)
10019d84:	18801916 	blt	r3,r2,10019dec <__fputwc+0x10c>
10019d88:	80800017 	ldw	r2,0(r16)
10019d8c:	11400005 	stb	r5,0(r2)
10019d90:	80800017 	ldw	r2,0(r16)
10019d94:	10c00003 	ldbu	r3,0(r2)
10019d98:	10800044 	addi	r2,r2,1
10019d9c:	1d402326 	beq	r3,r21,10019e2c <__fputwc+0x14c>
10019da0:	80800015 	stw	r2,0(r16)
10019da4:	8c400044 	addi	r17,r17,1
10019da8:	dc45883a 	add	r2,sp,r17
10019dac:	8d3fef36 	bltu	r17,r20,10019d6c <__alt_data_end+0xf8019d6c>
10019db0:	9005883a 	mov	r2,r18
10019db4:	00000406 	br	10019dc8 <__fputwc+0xe8>
10019db8:	80c0030b 	ldhu	r3,12(r16)
10019dbc:	a005883a 	mov	r2,r20
10019dc0:	18c01014 	ori	r3,r3,64
10019dc4:	80c0030d 	sth	r3,12(r16)
10019dc8:	dfc00717 	ldw	ra,28(sp)
10019dcc:	dd400617 	ldw	r21,24(sp)
10019dd0:	dd000517 	ldw	r20,20(sp)
10019dd4:	dcc00417 	ldw	r19,16(sp)
10019dd8:	dc800317 	ldw	r18,12(sp)
10019ddc:	dc400217 	ldw	r17,8(sp)
10019de0:	dc000117 	ldw	r16,4(sp)
10019de4:	dec00804 	addi	sp,sp,32
10019de8:	f800283a 	ret
10019dec:	800d883a 	mov	r6,r16
10019df0:	29403fcc 	andi	r5,r5,255
10019df4:	9809883a 	mov	r4,r19
10019df8:	00198f40 	call	100198f4 <__swbuf_r>
10019dfc:	10bfffe0 	cmpeqi	r2,r2,-1
10019e00:	10803fcc 	andi	r2,r2,255
10019e04:	103fd626 	beq	r2,zero,10019d60 <__alt_data_end+0xf8019d60>
10019e08:	00bfffc4 	movi	r2,-1
10019e0c:	003fee06 	br	10019dc8 <__alt_data_end+0xf8019dc8>
10019e10:	90ffffc4 	addi	r3,r18,-1
10019e14:	01003f84 	movi	r4,254
10019e18:	20ffbf36 	bltu	r4,r3,10019d18 <__alt_data_end+0xf8019d18>
10019e1c:	900b883a 	mov	r5,r18
10019e20:	dc800005 	stb	r18,0(sp)
10019e24:	1029883a 	mov	r20,r2
10019e28:	003fc506 	br	10019d40 <__alt_data_end+0xf8019d40>
10019e2c:	800d883a 	mov	r6,r16
10019e30:	a80b883a 	mov	r5,r21
10019e34:	9809883a 	mov	r4,r19
10019e38:	00198f40 	call	100198f4 <__swbuf_r>
10019e3c:	10bfffe0 	cmpeqi	r2,r2,-1
10019e40:	003fef06 	br	10019e00 <__alt_data_end+0xf8019e00>

10019e44 <_fputwc_r>:
10019e44:	3080030b 	ldhu	r2,12(r6)
10019e48:	10c8000c 	andi	r3,r2,8192
10019e4c:	1800051e 	bne	r3,zero,10019e64 <_fputwc_r+0x20>
10019e50:	30c01917 	ldw	r3,100(r6)
10019e54:	10880014 	ori	r2,r2,8192
10019e58:	3080030d 	sth	r2,12(r6)
10019e5c:	18880014 	ori	r2,r3,8192
10019e60:	30801915 	stw	r2,100(r6)
10019e64:	0019ce01 	jmpi	10019ce0 <__fputwc>

10019e68 <fputwc>:
10019e68:	008400b4 	movhi	r2,4098
10019e6c:	defffc04 	addi	sp,sp,-16
10019e70:	10951604 	addi	r2,r2,21592
10019e74:	dc000115 	stw	r16,4(sp)
10019e78:	14000017 	ldw	r16,0(r2)
10019e7c:	dc400215 	stw	r17,8(sp)
10019e80:	dfc00315 	stw	ra,12(sp)
10019e84:	2023883a 	mov	r17,r4
10019e88:	80000226 	beq	r16,zero,10019e94 <fputwc+0x2c>
10019e8c:	80800e17 	ldw	r2,56(r16)
10019e90:	10001026 	beq	r2,zero,10019ed4 <fputwc+0x6c>
10019e94:	2880030b 	ldhu	r2,12(r5)
10019e98:	10c8000c 	andi	r3,r2,8192
10019e9c:	1800051e 	bne	r3,zero,10019eb4 <fputwc+0x4c>
10019ea0:	28c01917 	ldw	r3,100(r5)
10019ea4:	10880014 	ori	r2,r2,8192
10019ea8:	2880030d 	sth	r2,12(r5)
10019eac:	18880014 	ori	r2,r3,8192
10019eb0:	28801915 	stw	r2,100(r5)
10019eb4:	280d883a 	mov	r6,r5
10019eb8:	8009883a 	mov	r4,r16
10019ebc:	880b883a 	mov	r5,r17
10019ec0:	dfc00317 	ldw	ra,12(sp)
10019ec4:	dc400217 	ldw	r17,8(sp)
10019ec8:	dc000117 	ldw	r16,4(sp)
10019ecc:	dec00404 	addi	sp,sp,16
10019ed0:	0019ce01 	jmpi	10019ce0 <__fputwc>
10019ed4:	8009883a 	mov	r4,r16
10019ed8:	d9400015 	stw	r5,0(sp)
10019edc:	000fea00 	call	1000fea0 <__sinit>
10019ee0:	d9400017 	ldw	r5,0(sp)
10019ee4:	003feb06 	br	10019e94 <__alt_data_end+0xf8019e94>

10019ee8 <_fstat_r>:
10019ee8:	defffd04 	addi	sp,sp,-12
10019eec:	2805883a 	mov	r2,r5
10019ef0:	dc000015 	stw	r16,0(sp)
10019ef4:	040400b4 	movhi	r16,4098
10019ef8:	dc400115 	stw	r17,4(sp)
10019efc:	841d8004 	addi	r16,r16,30208
10019f00:	2023883a 	mov	r17,r4
10019f04:	300b883a 	mov	r5,r6
10019f08:	1009883a 	mov	r4,r2
10019f0c:	dfc00215 	stw	ra,8(sp)
10019f10:	80000015 	stw	zero,0(r16)
10019f14:	001f3780 	call	1001f378 <fstat>
10019f18:	00ffffc4 	movi	r3,-1
10019f1c:	10c00526 	beq	r2,r3,10019f34 <_fstat_r+0x4c>
10019f20:	dfc00217 	ldw	ra,8(sp)
10019f24:	dc400117 	ldw	r17,4(sp)
10019f28:	dc000017 	ldw	r16,0(sp)
10019f2c:	dec00304 	addi	sp,sp,12
10019f30:	f800283a 	ret
10019f34:	80c00017 	ldw	r3,0(r16)
10019f38:	183ff926 	beq	r3,zero,10019f20 <__alt_data_end+0xf8019f20>
10019f3c:	88c00015 	stw	r3,0(r17)
10019f40:	003ff706 	br	10019f20 <__alt_data_end+0xf8019f20>

10019f44 <rshift>:
10019f44:	2807d17a 	srai	r3,r5,5
10019f48:	20800417 	ldw	r2,16(r4)
10019f4c:	22000504 	addi	r8,r4,20
10019f50:	1880250e 	bge	r3,r2,10019fe8 <rshift+0xa4>
10019f54:	1085883a 	add	r2,r2,r2
10019f58:	18c7883a 	add	r3,r3,r3
10019f5c:	1085883a 	add	r2,r2,r2
10019f60:	18c7883a 	add	r3,r3,r3
10019f64:	294007cc 	andi	r5,r5,31
10019f68:	4085883a 	add	r2,r8,r2
10019f6c:	40c7883a 	add	r3,r8,r3
10019f70:	28002026 	beq	r5,zero,10019ff4 <rshift+0xb0>
10019f74:	19800017 	ldw	r6,0(r3)
10019f78:	02c00804 	movi	r11,32
10019f7c:	19c00104 	addi	r7,r3,4
10019f80:	5957c83a 	sub	r11,r11,r5
10019f84:	314cd83a 	srl	r6,r6,r5
10019f88:	38802c2e 	bgeu	r7,r2,1001a03c <rshift+0xf8>
10019f8c:	4015883a 	mov	r10,r8
10019f90:	3a400017 	ldw	r9,0(r7)
10019f94:	52800104 	addi	r10,r10,4
10019f98:	39c00104 	addi	r7,r7,4
10019f9c:	4ad2983a 	sll	r9,r9,r11
10019fa0:	498cb03a 	or	r6,r9,r6
10019fa4:	51bfff15 	stw	r6,-4(r10)
10019fa8:	39bfff17 	ldw	r6,-4(r7)
10019fac:	314cd83a 	srl	r6,r6,r5
10019fb0:	38bff736 	bltu	r7,r2,10019f90 <__alt_data_end+0xf8019f90>
10019fb4:	10c7c83a 	sub	r3,r2,r3
10019fb8:	18fffec4 	addi	r3,r3,-5
10019fbc:	1806d0ba 	srli	r3,r3,2
10019fc0:	18c00044 	addi	r3,r3,1
10019fc4:	18c7883a 	add	r3,r3,r3
10019fc8:	18c7883a 	add	r3,r3,r3
10019fcc:	40c7883a 	add	r3,r8,r3
10019fd0:	19800015 	stw	r6,0(r3)
10019fd4:	30000126 	beq	r6,zero,10019fdc <rshift+0x98>
10019fd8:	18c00104 	addi	r3,r3,4
10019fdc:	1a05c83a 	sub	r2,r3,r8
10019fe0:	1005d0ba 	srai	r2,r2,2
10019fe4:	00001206 	br	1001a030 <rshift+0xec>
10019fe8:	20000415 	stw	zero,16(r4)
10019fec:	20000515 	stw	zero,20(r4)
10019ff0:	f800283a 	ret
10019ff4:	18bffc2e 	bgeu	r3,r2,10019fe8 <__alt_data_end+0xf8019fe8>
10019ff8:	180d883a 	mov	r6,r3
10019ffc:	400b883a 	mov	r5,r8
1001a000:	31c00017 	ldw	r7,0(r6)
1001a004:	29400104 	addi	r5,r5,4
1001a008:	31800104 	addi	r6,r6,4
1001a00c:	29ffff15 	stw	r7,-4(r5)
1001a010:	30bffb36 	bltu	r6,r2,1001a000 <__alt_data_end+0xf801a000>
1001a014:	00c6303a 	nor	r3,zero,r3
1001a018:	1885883a 	add	r2,r3,r2
1001a01c:	1004d0ba 	srli	r2,r2,2
1001a020:	10800044 	addi	r2,r2,1
1001a024:	1085883a 	add	r2,r2,r2
1001a028:	1085883a 	add	r2,r2,r2
1001a02c:	1005d0ba 	srai	r2,r2,2
1001a030:	20800415 	stw	r2,16(r4)
1001a034:	103fed26 	beq	r2,zero,10019fec <__alt_data_end+0xf8019fec>
1001a038:	f800283a 	ret
1001a03c:	4007883a 	mov	r3,r8
1001a040:	003fe306 	br	10019fd0 <__alt_data_end+0xf8019fd0>

1001a044 <__gethex>:
1001a044:	deffea04 	addi	sp,sp,-88
1001a048:	d9c00415 	stw	r7,16(sp)
1001a04c:	dfc01515 	stw	ra,84(sp)
1001a050:	dd001015 	stw	r20,64(sp)
1001a054:	dcc00f15 	stw	r19,60(sp)
1001a058:	2829883a 	mov	r20,r5
1001a05c:	dc800e15 	stw	r18,56(sp)
1001a060:	d9000215 	stw	r4,8(sp)
1001a064:	d9800115 	stw	r6,4(sp)
1001a068:	df001415 	stw	fp,80(sp)
1001a06c:	ddc01315 	stw	r23,76(sp)
1001a070:	dd801215 	stw	r22,72(sp)
1001a074:	dd401115 	stw	r21,68(sp)
1001a078:	dc400d15 	stw	r17,52(sp)
1001a07c:	dc000c15 	stw	r16,48(sp)
1001a080:	0010cc00 	call	10010cc0 <_localeconv_r>
1001a084:	14800017 	ldw	r18,0(r2)
1001a088:	9009883a 	mov	r4,r18
1001a08c:	0009fe40 	call	10009fe4 <strlen>
1001a090:	a1c00017 	ldw	r7,0(r20)
1001a094:	1027883a 	mov	r19,r2
1001a098:	9085883a 	add	r2,r18,r2
1001a09c:	10bfffc3 	ldbu	r2,-1(r2)
1001a0a0:	38c00083 	ldbu	r3,2(r7)
1001a0a4:	d8800305 	stb	r2,12(sp)
1001a0a8:	00800c04 	movi	r2,48
1001a0ac:	18815a1e 	bne	r3,r2,1001a618 <__gethex+0x5d4>
1001a0b0:	013fff84 	movi	r4,-2
1001a0b4:	388000c4 	addi	r2,r7,3
1001a0b8:	21c9c83a 	sub	r4,r4,r7
1001a0bc:	180b883a 	mov	r5,r3
1001a0c0:	20b9883a 	add	fp,r4,r2
1001a0c4:	102f883a 	mov	r23,r2
1001a0c8:	10800044 	addi	r2,r2,1
1001a0cc:	10ffffc3 	ldbu	r3,-1(r2)
1001a0d0:	197ffb26 	beq	r3,r5,1001a0c0 <__alt_data_end+0xf801a0c0>
1001a0d4:	058400b4 	movhi	r22,4098
1001a0d8:	b58c8304 	addi	r22,r22,12812
1001a0dc:	b0c7883a 	add	r3,r22,r3
1001a0e0:	18800003 	ldbu	r2,0(r3)
1001a0e4:	10008726 	beq	r2,zero,1001a304 <__gethex+0x2c0>
1001a0e8:	b8800003 	ldbu	r2,0(r23)
1001a0ec:	d8000015 	stw	zero,0(sp)
1001a0f0:	0021883a 	mov	r16,zero
1001a0f4:	b085883a 	add	r2,r22,r2
1001a0f8:	10800003 	ldbu	r2,0(r2)
1001a0fc:	b823883a 	mov	r17,r23
1001a100:	10000526 	beq	r2,zero,1001a118 <__gethex+0xd4>
1001a104:	8c400044 	addi	r17,r17,1
1001a108:	88800003 	ldbu	r2,0(r17)
1001a10c:	b085883a 	add	r2,r22,r2
1001a110:	10800003 	ldbu	r2,0(r2)
1001a114:	103ffb1e 	bne	r2,zero,1001a104 <__alt_data_end+0xf801a104>
1001a118:	980d883a 	mov	r6,r19
1001a11c:	900b883a 	mov	r5,r18
1001a120:	8809883a 	mov	r4,r17
1001a124:	001ac040 	call	1001ac04 <strncmp>
1001a128:	1000031e 	bne	r2,zero,1001a138 <__gethex+0xf4>
1001a12c:	80015c26 	beq	r16,zero,1001a6a0 <__gethex+0x65c>
1001a130:	88800003 	ldbu	r2,0(r17)
1001a134:	00000206 	br	1001a140 <__gethex+0xfc>
1001a138:	88800003 	ldbu	r2,0(r17)
1001a13c:	80012926 	beq	r16,zero,1001a5e4 <__gethex+0x5a0>
1001a140:	8c21c83a 	sub	r16,r17,r16
1001a144:	8421883a 	add	r16,r16,r16
1001a148:	8421883a 	add	r16,r16,r16
1001a14c:	0421c83a 	sub	r16,zero,r16
1001a150:	10803fcc 	andi	r2,r2,255
1001a154:	01001404 	movi	r4,80
1001a158:	11008826 	beq	r2,r4,1001a37c <__gethex+0x338>
1001a15c:	01001c04 	movi	r4,112
1001a160:	11008626 	beq	r2,r4,1001a37c <__gethex+0x338>
1001a164:	882b883a 	mov	r21,r17
1001a168:	d8c00017 	ldw	r3,0(sp)
1001a16c:	a4400015 	stw	r17,0(r20)
1001a170:	1800711e 	bne	r3,zero,1001a338 <__gethex+0x2f4>
1001a174:	adc5c83a 	sub	r2,r21,r23
1001a178:	10bfffc4 	addi	r2,r2,-1
1001a17c:	00c001c4 	movi	r3,7
1001a180:	000b883a 	mov	r5,zero
1001a184:	1880030e 	bge	r3,r2,1001a194 <__gethex+0x150>
1001a188:	1005d07a 	srai	r2,r2,1
1001a18c:	29400044 	addi	r5,r5,1
1001a190:	18bffd16 	blt	r3,r2,1001a188 <__alt_data_end+0xf801a188>
1001a194:	d9000217 	ldw	r4,8(sp)
1001a198:	0011c440 	call	10011c44 <_Balloc>
1001a19c:	10c00504 	addi	r3,r2,20
1001a1a0:	d8c00015 	stw	r3,0(sp)
1001a1a4:	1029883a 	mov	r20,r2
1001a1a8:	bd417c2e 	bgeu	r23,r21,1001a79c <__gethex+0x758>
1001a1ac:	dc400303 	ldbu	r17,12(sp)
1001a1b0:	03000044 	movi	r12,1
1001a1b4:	1813883a 	mov	r9,r3
1001a1b8:	0039883a 	mov	fp,zero
1001a1bc:	0007883a 	mov	r3,zero
1001a1c0:	64d9c83a 	sub	r12,r12,r19
1001a1c4:	02800804 	movi	r10,32
1001a1c8:	a8bfffc3 	ldbu	r2,-1(r21)
1001a1cc:	ab7fffc4 	addi	r13,r21,-1
1001a1d0:	88803026 	beq	r17,r2,1001a294 <__gethex+0x250>
1001a1d4:	e2804526 	beq	fp,r10,1001a2ec <__gethex+0x2a8>
1001a1d8:	e00b883a 	mov	r5,fp
1001a1dc:	e7000104 	addi	fp,fp,4
1001a1e0:	a93fffc3 	ldbu	r4,-1(r21)
1001a1e4:	682b883a 	mov	r21,r13
1001a1e8:	b109883a 	add	r4,r22,r4
1001a1ec:	20800003 	ldbu	r2,0(r4)
1001a1f0:	108003cc 	andi	r2,r2,15
1001a1f4:	1144983a 	sll	r2,r2,r5
1001a1f8:	1886b03a 	or	r3,r3,r2
1001a1fc:	bd7ff236 	bltu	r23,r21,1001a1c8 <__alt_data_end+0xf801a1c8>
1001a200:	d9000017 	ldw	r4,0(sp)
1001a204:	48800104 	addi	r2,r9,4
1001a208:	48c00015 	stw	r3,0(r9)
1001a20c:	1105c83a 	sub	r2,r2,r4
1001a210:	1005d0ba 	srai	r2,r2,2
1001a214:	1809883a 	mov	r4,r3
1001a218:	a0800415 	stw	r2,16(r20)
1001a21c:	1022917a 	slli	r17,r2,5
1001a220:	0011f600 	call	10011f60 <__hi0bits>
1001a224:	d8c00117 	ldw	r3,4(sp)
1001a228:	8885c83a 	sub	r2,r17,r2
1001a22c:	1c800017 	ldw	r18,0(r3)
1001a230:	9080d016 	blt	r18,r2,1001a574 <__gethex+0x530>
1001a234:	1480ed16 	blt	r2,r18,1001a5ec <__gethex+0x5a8>
1001a238:	0027883a 	mov	r19,zero
1001a23c:	d8c00117 	ldw	r3,4(sp)
1001a240:	18800217 	ldw	r2,8(r3)
1001a244:	14009416 	blt	r2,r16,1001a498 <__gethex+0x454>
1001a248:	d8c00117 	ldw	r3,4(sp)
1001a24c:	18800117 	ldw	r2,4(r3)
1001a250:	8080b30e 	bge	r16,r2,1001a520 <__gethex+0x4dc>
1001a254:	1421c83a 	sub	r16,r2,r16
1001a258:	8480f616 	blt	r16,r18,1001a634 <__gethex+0x5f0>
1001a25c:	18c00317 	ldw	r3,12(r3)
1001a260:	01000084 	movi	r4,2
1001a264:	19015226 	beq	r3,r4,1001a7b0 <__gethex+0x76c>
1001a268:	010000c4 	movi	r4,3
1001a26c:	19013726 	beq	r3,r4,1001a74c <__gethex+0x708>
1001a270:	01000044 	movi	r4,1
1001a274:	19015126 	beq	r3,r4,1001a7bc <__gethex+0x778>
1001a278:	d9000217 	ldw	r4,8(sp)
1001a27c:	a00b883a 	mov	r5,r20
1001a280:	0011cec0 	call	10011cec <_Bfree>
1001a284:	d8801617 	ldw	r2,88(sp)
1001a288:	10000015 	stw	zero,0(r2)
1001a28c:	00801404 	movi	r2,80
1001a290:	00002b06 	br	1001a340 <__gethex+0x2fc>
1001a294:	6b1d883a 	add	r14,r13,r12
1001a298:	75ffce36 	bltu	r14,r23,1001a1d4 <__alt_data_end+0xf801a1d4>
1001a29c:	7009883a 	mov	r4,r14
1001a2a0:	980d883a 	mov	r6,r19
1001a2a4:	900b883a 	mov	r5,r18
1001a2a8:	d8c00715 	stw	r3,28(sp)
1001a2ac:	da400615 	stw	r9,24(sp)
1001a2b0:	da800b15 	stw	r10,44(sp)
1001a2b4:	db000a15 	stw	r12,40(sp)
1001a2b8:	db400815 	stw	r13,32(sp)
1001a2bc:	db800915 	stw	r14,36(sp)
1001a2c0:	001ac040 	call	1001ac04 <strncmp>
1001a2c4:	d8c00717 	ldw	r3,28(sp)
1001a2c8:	da400617 	ldw	r9,24(sp)
1001a2cc:	da800b17 	ldw	r10,44(sp)
1001a2d0:	db000a17 	ldw	r12,40(sp)
1001a2d4:	db400817 	ldw	r13,32(sp)
1001a2d8:	db800917 	ldw	r14,36(sp)
1001a2dc:	103fbd1e 	bne	r2,zero,1001a1d4 <__alt_data_end+0xf801a1d4>
1001a2e0:	702b883a 	mov	r21,r14
1001a2e4:	bd7fb836 	bltu	r23,r21,1001a1c8 <__alt_data_end+0xf801a1c8>
1001a2e8:	003fc506 	br	1001a200 <__alt_data_end+0xf801a200>
1001a2ec:	07000104 	movi	fp,4
1001a2f0:	48c00015 	stw	r3,0(r9)
1001a2f4:	000b883a 	mov	r5,zero
1001a2f8:	4f13883a 	add	r9,r9,fp
1001a2fc:	0007883a 	mov	r3,zero
1001a300:	003fb706 	br	1001a1e0 <__alt_data_end+0xf801a1e0>
1001a304:	980d883a 	mov	r6,r19
1001a308:	900b883a 	mov	r5,r18
1001a30c:	b809883a 	mov	r4,r23
1001a310:	001ac040 	call	1001ac04 <strncmp>
1001a314:	10006c26 	beq	r2,zero,1001a4c8 <__gethex+0x484>
1001a318:	b8800003 	ldbu	r2,0(r23)
1001a31c:	b823883a 	mov	r17,r23
1001a320:	10803fcc 	andi	r2,r2,255
1001a324:	01001404 	movi	r4,80
1001a328:	11001126 	beq	r2,r4,1001a370 <__gethex+0x32c>
1001a32c:	01001c04 	movi	r4,112
1001a330:	11000f26 	beq	r2,r4,1001a370 <__gethex+0x32c>
1001a334:	a4400015 	stw	r17,0(r20)
1001a338:	e0008c1e 	bne	fp,zero,1001a56c <__gethex+0x528>
1001a33c:	00800184 	movi	r2,6
1001a340:	dfc01517 	ldw	ra,84(sp)
1001a344:	df001417 	ldw	fp,80(sp)
1001a348:	ddc01317 	ldw	r23,76(sp)
1001a34c:	dd801217 	ldw	r22,72(sp)
1001a350:	dd401117 	ldw	r21,68(sp)
1001a354:	dd001017 	ldw	r20,64(sp)
1001a358:	dcc00f17 	ldw	r19,60(sp)
1001a35c:	dc800e17 	ldw	r18,56(sp)
1001a360:	dc400d17 	ldw	r17,52(sp)
1001a364:	dc000c17 	ldw	r16,48(sp)
1001a368:	dec01604 	addi	sp,sp,88
1001a36c:	f800283a 	ret
1001a370:	00c00044 	movi	r3,1
1001a374:	0021883a 	mov	r16,zero
1001a378:	d8c00015 	stw	r3,0(sp)
1001a37c:	88800043 	ldbu	r2,1(r17)
1001a380:	01400ac4 	movi	r5,43
1001a384:	11003fcc 	andi	r4,r2,255
1001a388:	21407626 	beq	r4,r5,1001a564 <__gethex+0x520>
1001a38c:	01400b44 	movi	r5,45
1001a390:	21404826 	beq	r4,r5,1001a4b4 <__gethex+0x470>
1001a394:	8ac00044 	addi	r11,r17,1
1001a398:	d8000515 	stw	zero,20(sp)
1001a39c:	10803fcc 	andi	r2,r2,255
1001a3a0:	b085883a 	add	r2,r22,r2
1001a3a4:	11000003 	ldbu	r4,0(r2)
1001a3a8:	05400604 	movi	r21,24
1001a3ac:	20bfffc4 	addi	r2,r4,-1
1001a3b0:	10803fcc 	andi	r2,r2,255
1001a3b4:	a8bf6b36 	bltu	r21,r2,1001a164 <__alt_data_end+0xf801a164>
1001a3b8:	58800043 	ldbu	r2,1(r11)
1001a3bc:	014400b4 	movhi	r5,4098
1001a3c0:	294c8304 	addi	r5,r5,12812
1001a3c4:	2885883a 	add	r2,r5,r2
1001a3c8:	12800003 	ldbu	r10,0(r2)
1001a3cc:	21003fcc 	andi	r4,r4,255
1001a3d0:	213ffc04 	addi	r4,r4,-16
1001a3d4:	50bfffc4 	addi	r2,r10,-1
1001a3d8:	10803fcc 	andi	r2,r2,255
1001a3dc:	5ac00044 	addi	r11,r11,1
1001a3e0:	51803fcc 	andi	r6,r10,255
1001a3e4:	a8801036 	bltu	r21,r2,1001a428 <__gethex+0x3e4>
1001a3e8:	5ac00044 	addi	r11,r11,1
1001a3ec:	01400284 	movi	r5,10
1001a3f0:	d9800715 	stw	r6,28(sp)
1001a3f4:	dac00615 	stw	r11,24(sp)
1001a3f8:	0008ef00 	call	10008ef0 <__mulsi3>
1001a3fc:	dac00617 	ldw	r11,24(sp)
1001a400:	d9800717 	ldw	r6,28(sp)
1001a404:	5a800003 	ldbu	r10,0(r11)
1001a408:	1185883a 	add	r2,r2,r6
1001a40c:	113ffc04 	addi	r4,r2,-16
1001a410:	b295883a 	add	r10,r22,r10
1001a414:	51400003 	ldbu	r5,0(r10)
1001a418:	2abfffc4 	addi	r10,r5,-1
1001a41c:	52803fcc 	andi	r10,r10,255
1001a420:	29803fcc 	andi	r6,r5,255
1001a424:	aabff02e 	bgeu	r21,r10,1001a3e8 <__alt_data_end+0xf801a3e8>
1001a428:	d8c00517 	ldw	r3,20(sp)
1001a42c:	18000126 	beq	r3,zero,1001a434 <__gethex+0x3f0>
1001a430:	0109c83a 	sub	r4,zero,r4
1001a434:	882b883a 	mov	r21,r17
1001a438:	8121883a 	add	r16,r16,r4
1001a43c:	5823883a 	mov	r17,r11
1001a440:	003f4906 	br	1001a168 <__alt_data_end+0xf801a168>
1001a444:	a0800217 	ldw	r2,8(r20)
1001a448:	a880f20e 	bge	r21,r2,1001a814 <__gethex+0x7d0>
1001a44c:	a807883a 	mov	r3,r21
1001a450:	18800144 	addi	r2,r3,5
1001a454:	1085883a 	add	r2,r2,r2
1001a458:	18c00044 	addi	r3,r3,1
1001a45c:	1085883a 	add	r2,r2,r2
1001a460:	a085883a 	add	r2,r20,r2
1001a464:	a0c00415 	stw	r3,16(r20)
1001a468:	01000044 	movi	r4,1
1001a46c:	11000015 	stw	r4,0(r2)
1001a470:	00800084 	movi	r2,2
1001a474:	8880da26 	beq	r17,r2,1001a7e0 <__gethex+0x79c>
1001a478:	a8c0ae0e 	bge	r21,r3,1001a734 <__gethex+0x6f0>
1001a47c:	01400044 	movi	r5,1
1001a480:	a009883a 	mov	r4,r20
1001a484:	0019f440 	call	10019f44 <rshift>
1001a488:	d8c00117 	ldw	r3,4(sp)
1001a48c:	84000044 	addi	r16,r16,1
1001a490:	18800217 	ldw	r2,8(r3)
1001a494:	1400a90e 	bge	r2,r16,1001a73c <__gethex+0x6f8>
1001a498:	d9000217 	ldw	r4,8(sp)
1001a49c:	a00b883a 	mov	r5,r20
1001a4a0:	0011cec0 	call	10011cec <_Bfree>
1001a4a4:	d9001617 	ldw	r4,88(sp)
1001a4a8:	008028c4 	movi	r2,163
1001a4ac:	20000015 	stw	zero,0(r4)
1001a4b0:	003fa306 	br	1001a340 <__alt_data_end+0xf801a340>
1001a4b4:	00c00044 	movi	r3,1
1001a4b8:	d8c00515 	stw	r3,20(sp)
1001a4bc:	88800083 	ldbu	r2,2(r17)
1001a4c0:	8ac00084 	addi	r11,r17,2
1001a4c4:	003fb506 	br	1001a39c <__alt_data_end+0xf801a39c>
1001a4c8:	bce3883a 	add	r17,r23,r19
1001a4cc:	89000003 	ldbu	r4,0(r17)
1001a4d0:	21403fcc 	andi	r5,r4,255
1001a4d4:	b145883a 	add	r2,r22,r5
1001a4d8:	10800003 	ldbu	r2,0(r2)
1001a4dc:	11803fcc 	andi	r6,r2,255
1001a4e0:	30005026 	beq	r6,zero,1001a624 <__gethex+0x5e0>
1001a4e4:	01000c04 	movi	r4,48
1001a4e8:	882f883a 	mov	r23,r17
1001a4ec:	2900061e 	bne	r5,r4,1001a508 <__gethex+0x4c4>
1001a4f0:	2809883a 	mov	r4,r5
1001a4f4:	bdc00044 	addi	r23,r23,1
1001a4f8:	b8800003 	ldbu	r2,0(r23)
1001a4fc:	113ffd26 	beq	r2,r4,1001a4f4 <__alt_data_end+0xf801a4f4>
1001a500:	b085883a 	add	r2,r22,r2
1001a504:	10800003 	ldbu	r2,0(r2)
1001a508:	10803fcc 	andi	r2,r2,255
1001a50c:	1007003a 	cmpeq	r3,r2,zero
1001a510:	d8c00015 	stw	r3,0(sp)
1001a514:	8821883a 	mov	r16,r17
1001a518:	07000044 	movi	fp,1
1001a51c:	003ef706 	br	1001a0fc <__alt_data_end+0xf801a0fc>
1001a520:	04400044 	movi	r17,1
1001a524:	98000926 	beq	r19,zero,1001a54c <__gethex+0x508>
1001a528:	d8c00117 	ldw	r3,4(sp)
1001a52c:	18800317 	ldw	r2,12(r3)
1001a530:	00c00084 	movi	r3,2
1001a534:	10c06826 	beq	r2,r3,1001a6d8 <__gethex+0x694>
1001a538:	00c000c4 	movi	r3,3
1001a53c:	10c06a26 	beq	r2,r3,1001a6e8 <__gethex+0x6a4>
1001a540:	00c00044 	movi	r3,1
1001a544:	10c08d26 	beq	r2,r3,1001a77c <__gethex+0x738>
1001a548:	8c400414 	ori	r17,r17,16
1001a54c:	d9001617 	ldw	r4,88(sp)
1001a550:	d8c00417 	ldw	r3,16(sp)
1001a554:	8805883a 	mov	r2,r17
1001a558:	25000015 	stw	r20,0(r4)
1001a55c:	1c000015 	stw	r16,0(r3)
1001a560:	003f7706 	br	1001a340 <__alt_data_end+0xf801a340>
1001a564:	d8000515 	stw	zero,20(sp)
1001a568:	003fd406 	br	1001a4bc <__alt_data_end+0xf801a4bc>
1001a56c:	0005883a 	mov	r2,zero
1001a570:	003f7306 	br	1001a340 <__alt_data_end+0xf801a340>
1001a574:	14a3c83a 	sub	r17,r2,r18
1001a578:	880b883a 	mov	r5,r17
1001a57c:	a009883a 	mov	r4,r20
1001a580:	0012c700 	call	10012c70 <__any_on>
1001a584:	10002926 	beq	r2,zero,1001a62c <__gethex+0x5e8>
1001a588:	897fffc4 	addi	r5,r17,-1
1001a58c:	2807d17a 	srai	r3,r5,5
1001a590:	d8800017 	ldw	r2,0(sp)
1001a594:	290007cc 	andi	r4,r5,31
1001a598:	18c7883a 	add	r3,r3,r3
1001a59c:	18c7883a 	add	r3,r3,r3
1001a5a0:	04c00044 	movi	r19,1
1001a5a4:	10c7883a 	add	r3,r2,r3
1001a5a8:	9908983a 	sll	r4,r19,r4
1001a5ac:	18c00017 	ldw	r3,0(r3)
1001a5b0:	20c6703a 	and	r3,r4,r3
1001a5b4:	18000626 	beq	r3,zero,1001a5d0 <__gethex+0x58c>
1001a5b8:	99407b0e 	bge	r19,r5,1001a7a8 <__gethex+0x764>
1001a5bc:	897fff84 	addi	r5,r17,-2
1001a5c0:	a009883a 	mov	r4,r20
1001a5c4:	0012c700 	call	10012c70 <__any_on>
1001a5c8:	10007726 	beq	r2,zero,1001a7a8 <__gethex+0x764>
1001a5cc:	04c000c4 	movi	r19,3
1001a5d0:	880b883a 	mov	r5,r17
1001a5d4:	a009883a 	mov	r4,r20
1001a5d8:	0019f440 	call	10019f44 <rshift>
1001a5dc:	8461883a 	add	r16,r16,r17
1001a5e0:	003f1606 	br	1001a23c <__alt_data_end+0xf801a23c>
1001a5e4:	0021883a 	mov	r16,zero
1001a5e8:	003ed906 	br	1001a150 <__alt_data_end+0xf801a150>
1001a5ec:	d9000217 	ldw	r4,8(sp)
1001a5f0:	90a3c83a 	sub	r17,r18,r2
1001a5f4:	a00b883a 	mov	r5,r20
1001a5f8:	880d883a 	mov	r6,r17
1001a5fc:	00124800 	call	10012480 <__lshift>
1001a600:	10c00504 	addi	r3,r2,20
1001a604:	1029883a 	mov	r20,r2
1001a608:	8461c83a 	sub	r16,r16,r17
1001a60c:	d8c00015 	stw	r3,0(sp)
1001a610:	0027883a 	mov	r19,zero
1001a614:	003f0906 	br	1001a23c <__alt_data_end+0xf801a23c>
1001a618:	3dc00084 	addi	r23,r7,2
1001a61c:	0039883a 	mov	fp,zero
1001a620:	003eac06 	br	1001a0d4 <__alt_data_end+0xf801a0d4>
1001a624:	2005883a 	mov	r2,r4
1001a628:	003f3d06 	br	1001a320 <__alt_data_end+0xf801a320>
1001a62c:	0027883a 	mov	r19,zero
1001a630:	003fe706 	br	1001a5d0 <__alt_data_end+0xf801a5d0>
1001a634:	847fffc4 	addi	r17,r16,-1
1001a638:	9800421e 	bne	r19,zero,1001a744 <__gethex+0x700>
1001a63c:	88000426 	beq	r17,zero,1001a650 <__gethex+0x60c>
1001a640:	880b883a 	mov	r5,r17
1001a644:	a009883a 	mov	r4,r20
1001a648:	0012c700 	call	10012c70 <__any_on>
1001a64c:	1027883a 	mov	r19,r2
1001a650:	8805d17a 	srai	r2,r17,5
1001a654:	d8c00017 	ldw	r3,0(sp)
1001a658:	8c4007cc 	andi	r17,r17,31
1001a65c:	1085883a 	add	r2,r2,r2
1001a660:	1085883a 	add	r2,r2,r2
1001a664:	1885883a 	add	r2,r3,r2
1001a668:	00c00044 	movi	r3,1
1001a66c:	1c62983a 	sll	r17,r3,r17
1001a670:	10800017 	ldw	r2,0(r2)
1001a674:	8884703a 	and	r2,r17,r2
1001a678:	10000126 	beq	r2,zero,1001a680 <__gethex+0x63c>
1001a67c:	9cc00094 	ori	r19,r19,2
1001a680:	800b883a 	mov	r5,r16
1001a684:	a009883a 	mov	r4,r20
1001a688:	0019f440 	call	10019f44 <rshift>
1001a68c:	d8c00117 	ldw	r3,4(sp)
1001a690:	9425c83a 	sub	r18,r18,r16
1001a694:	04400084 	movi	r17,2
1001a698:	1c000117 	ldw	r16,4(r3)
1001a69c:	003fa106 	br	1001a524 <__alt_data_end+0xf801a524>
1001a6a0:	8ce1883a 	add	r16,r17,r19
1001a6a4:	80800003 	ldbu	r2,0(r16)
1001a6a8:	8023883a 	mov	r17,r16
1001a6ac:	10c03fcc 	andi	r3,r2,255
1001a6b0:	b0c7883a 	add	r3,r22,r3
1001a6b4:	18c00003 	ldbu	r3,0(r3)
1001a6b8:	183ea026 	beq	r3,zero,1001a13c <__alt_data_end+0xf801a13c>
1001a6bc:	8c400044 	addi	r17,r17,1
1001a6c0:	88800003 	ldbu	r2,0(r17)
1001a6c4:	11003fcc 	andi	r4,r2,255
1001a6c8:	b109883a 	add	r4,r22,r4
1001a6cc:	21000003 	ldbu	r4,0(r4)
1001a6d0:	203ffa1e 	bne	r4,zero,1001a6bc <__alt_data_end+0xf801a6bc>
1001a6d4:	003e9906 	br	1001a13c <__alt_data_end+0xf801a13c>
1001a6d8:	d9001717 	ldw	r4,92(sp)
1001a6dc:	00800044 	movi	r2,1
1001a6e0:	1109c83a 	sub	r4,r2,r4
1001a6e4:	d9001715 	stw	r4,92(sp)
1001a6e8:	d8801717 	ldw	r2,92(sp)
1001a6ec:	103f9626 	beq	r2,zero,1001a548 <__alt_data_end+0xf801a548>
1001a6f0:	a5400417 	ldw	r21,16(r20)
1001a6f4:	d9800017 	ldw	r6,0(sp)
1001a6f8:	013fffc4 	movi	r4,-1
1001a6fc:	ad67883a 	add	r19,r21,r21
1001a700:	9ce7883a 	add	r19,r19,r19
1001a704:	3005883a 	mov	r2,r6
1001a708:	34cb883a 	add	r5,r6,r19
1001a70c:	00000306 	br	1001a71c <__gethex+0x6d8>
1001a710:	10000015 	stw	zero,0(r2)
1001a714:	10800104 	addi	r2,r2,4
1001a718:	117f4a2e 	bgeu	r2,r5,1001a444 <__alt_data_end+0xf801a444>
1001a71c:	10c00017 	ldw	r3,0(r2)
1001a720:	193ffb26 	beq	r3,r4,1001a710 <__alt_data_end+0xf801a710>
1001a724:	18c00044 	addi	r3,r3,1
1001a728:	10c00015 	stw	r3,0(r2)
1001a72c:	00800084 	movi	r2,2
1001a730:	88802b26 	beq	r17,r2,1001a7e0 <__gethex+0x79c>
1001a734:	948007cc 	andi	r18,r18,31
1001a738:	90002f1e 	bne	r18,zero,1001a7f8 <__gethex+0x7b4>
1001a73c:	04400844 	movi	r17,33
1001a740:	003f8206 	br	1001a54c <__alt_data_end+0xf801a54c>
1001a744:	04c00044 	movi	r19,1
1001a748:	003fc106 	br	1001a650 <__alt_data_end+0xf801a650>
1001a74c:	d8c01717 	ldw	r3,92(sp)
1001a750:	183ec926 	beq	r3,zero,1001a278 <__alt_data_end+0xf801a278>
1001a754:	d8c00417 	ldw	r3,16(sp)
1001a758:	d9001617 	ldw	r4,88(sp)
1001a75c:	18800015 	stw	r2,0(r3)
1001a760:	d8c00017 	ldw	r3,0(sp)
1001a764:	00800044 	movi	r2,1
1001a768:	a0800415 	stw	r2,16(r20)
1001a76c:	18800015 	stw	r2,0(r3)
1001a770:	25000015 	stw	r20,0(r4)
1001a774:	00801884 	movi	r2,98
1001a778:	003ef106 	br	1001a340 <__alt_data_end+0xf801a340>
1001a77c:	9880008c 	andi	r2,r19,2
1001a780:	103f7126 	beq	r2,zero,1001a548 <__alt_data_end+0xf801a548>
1001a784:	d8c00017 	ldw	r3,0(sp)
1001a788:	18800017 	ldw	r2,0(r3)
1001a78c:	9884b03a 	or	r2,r19,r2
1001a790:	1080004c 	andi	r2,r2,1
1001a794:	103fd61e 	bne	r2,zero,1001a6f0 <__alt_data_end+0xf801a6f0>
1001a798:	003f6b06 	br	1001a548 <__alt_data_end+0xf801a548>
1001a79c:	da400017 	ldw	r9,0(sp)
1001a7a0:	0007883a 	mov	r3,zero
1001a7a4:	003e9606 	br	1001a200 <__alt_data_end+0xf801a200>
1001a7a8:	04c00084 	movi	r19,2
1001a7ac:	003f8806 	br	1001a5d0 <__alt_data_end+0xf801a5d0>
1001a7b0:	d9001717 	ldw	r4,92(sp)
1001a7b4:	203fe726 	beq	r4,zero,1001a754 <__alt_data_end+0xf801a754>
1001a7b8:	003eaf06 	br	1001a278 <__alt_data_end+0xf801a278>
1001a7bc:	943eae1e 	bne	r18,r16,1001a278 <__alt_data_end+0xf801a278>
1001a7c0:	1cbfe40e 	bge	r3,r18,1001a754 <__alt_data_end+0xf801a754>
1001a7c4:	917fffc4 	addi	r5,r18,-1
1001a7c8:	a009883a 	mov	r4,r20
1001a7cc:	0012c700 	call	10012c70 <__any_on>
1001a7d0:	103ea926 	beq	r2,zero,1001a278 <__alt_data_end+0xf801a278>
1001a7d4:	d8c00117 	ldw	r3,4(sp)
1001a7d8:	18800117 	ldw	r2,4(r3)
1001a7dc:	003fdd06 	br	1001a754 <__alt_data_end+0xf801a754>
1001a7e0:	d8c00117 	ldw	r3,4(sp)
1001a7e4:	18800017 	ldw	r2,0(r3)
1001a7e8:	10bfffc4 	addi	r2,r2,-1
1001a7ec:	90801c26 	beq	r18,r2,1001a860 <__gethex+0x81c>
1001a7f0:	04400884 	movi	r17,34
1001a7f4:	003f5506 	br	1001a54c <__alt_data_end+0xf801a54c>
1001a7f8:	34c5883a 	add	r2,r6,r19
1001a7fc:	113fff17 	ldw	r4,-4(r2)
1001a800:	0011f600 	call	10011f60 <__hi0bits>
1001a804:	00c00804 	movi	r3,32
1001a808:	1ca5c83a 	sub	r18,r3,r18
1001a80c:	14bfcb0e 	bge	r2,r18,1001a73c <__alt_data_end+0xf801a73c>
1001a810:	003f1a06 	br	1001a47c <__alt_data_end+0xf801a47c>
1001a814:	a1400117 	ldw	r5,4(r20)
1001a818:	d9000217 	ldw	r4,8(sp)
1001a81c:	29400044 	addi	r5,r5,1
1001a820:	0011c440 	call	10011c44 <_Balloc>
1001a824:	a1800417 	ldw	r6,16(r20)
1001a828:	a1400304 	addi	r5,r20,12
1001a82c:	11000304 	addi	r4,r2,12
1001a830:	31800084 	addi	r6,r6,2
1001a834:	318d883a 	add	r6,r6,r6
1001a838:	318d883a 	add	r6,r6,r6
1001a83c:	102d883a 	mov	r22,r2
1001a840:	0009cd00 	call	10009cd0 <memcpy>
1001a844:	d9000217 	ldw	r4,8(sp)
1001a848:	a00b883a 	mov	r5,r20
1001a84c:	b029883a 	mov	r20,r22
1001a850:	0011cec0 	call	10011cec <_Bfree>
1001a854:	b0c00417 	ldw	r3,16(r22)
1001a858:	b1800504 	addi	r6,r22,20
1001a85c:	003efc06 	br	1001a450 <__alt_data_end+0xf801a450>
1001a860:	9005d17a 	srai	r2,r18,5
1001a864:	944007cc 	andi	r17,r18,31
1001a868:	1085883a 	add	r2,r2,r2
1001a86c:	1085883a 	add	r2,r2,r2
1001a870:	3087883a 	add	r3,r6,r2
1001a874:	00800044 	movi	r2,1
1001a878:	1462983a 	sll	r17,r2,r17
1001a87c:	18800017 	ldw	r2,0(r3)
1001a880:	8884703a 	and	r2,r17,r2
1001a884:	1022c03a 	cmpne	r17,r2,zero
1001a888:	00800884 	movi	r2,34
1001a88c:	1463c83a 	sub	r17,r2,r17
1001a890:	003f2e06 	br	1001a54c <__alt_data_end+0xf801a54c>

1001a894 <__hexnan>:
1001a894:	defff904 	addi	sp,sp,-28
1001a898:	dc800215 	stw	r18,8(sp)
1001a89c:	2c800017 	ldw	r18,0(r5)
1001a8a0:	dfc00615 	stw	ra,24(sp)
1001a8a4:	dd400515 	stw	r21,20(sp)
1001a8a8:	901fd17a 	srai	r15,r18,5
1001a8ac:	dd000415 	stw	r20,16(sp)
1001a8b0:	dcc00315 	stw	r19,12(sp)
1001a8b4:	7bdf883a 	add	r15,r15,r15
1001a8b8:	7bdf883a 	add	r15,r15,r15
1001a8bc:	dc400115 	stw	r17,4(sp)
1001a8c0:	dc000015 	stw	r16,0(sp)
1001a8c4:	948007cc 	andi	r18,r18,31
1001a8c8:	33df883a 	add	r15,r6,r15
1001a8cc:	90000126 	beq	r18,zero,1001a8d4 <__hexnan+0x40>
1001a8d0:	7bc00104 	addi	r15,r15,4
1001a8d4:	22000017 	ldw	r8,0(r4)
1001a8d8:	7affff04 	addi	r11,r15,-4
1001a8dc:	038400b4 	movhi	r14,4098
1001a8e0:	783fff15 	stw	zero,-4(r15)
1001a8e4:	581b883a 	mov	r13,r11
1001a8e8:	580b883a 	mov	r5,r11
1001a8ec:	000f883a 	mov	r7,zero
1001a8f0:	003f883a 	mov	ra,zero
1001a8f4:	0019883a 	mov	r12,zero
1001a8f8:	738c8304 	addi	r14,r14,12812
1001a8fc:	04400204 	movi	r17,8
1001a900:	04000804 	movi	r16,32
1001a904:	04c001c4 	movi	r19,7
1001a908:	42000044 	addi	r8,r8,1
1001a90c:	40c00003 	ldbu	r3,0(r8)
1001a910:	18001d26 	beq	r3,zero,1001a988 <__hexnan+0xf4>
1001a914:	70c5883a 	add	r2,r14,r3
1001a918:	10800003 	ldbu	r2,0(r2)
1001a91c:	12403fcc 	andi	r9,r2,255
1001a920:	4800301e 	bne	r9,zero,1001a9e4 <__hexnan+0x150>
1001a924:	80c04236 	bltu	r16,r3,1001aa30 <__hexnan+0x19c>
1001a928:	fb3ff70e 	bge	ra,r12,1001a908 <__alt_data_end+0xf801a908>
1001a92c:	2b40112e 	bgeu	r5,r13,1001a974 <__hexnan+0xe0>
1001a930:	99c01016 	blt	r19,r7,1001a974 <__hexnan+0xe0>
1001a934:	89e9c83a 	sub	r20,r17,r7
1001a938:	a529883a 	add	r20,r20,r20
1001a93c:	2a800017 	ldw	r10,0(r5)
1001a940:	a529883a 	add	r20,r20,r20
1001a944:	852bc83a 	sub	r21,r16,r20
1001a948:	28c00104 	addi	r3,r5,4
1001a94c:	2805883a 	mov	r2,r5
1001a950:	19c00017 	ldw	r7,0(r3)
1001a954:	10800104 	addi	r2,r2,4
1001a958:	18c00104 	addi	r3,r3,4
1001a95c:	3d52983a 	sll	r9,r7,r21
1001a960:	4a92b03a 	or	r9,r9,r10
1001a964:	3d14d83a 	srl	r10,r7,r20
1001a968:	127fff15 	stw	r9,-4(r2)
1001a96c:	1abfff15 	stw	r10,-4(r3)
1001a970:	137ff736 	bltu	r2,r13,1001a950 <__alt_data_end+0xf801a950>
1001a974:	31402836 	bltu	r6,r5,1001aa18 <__hexnan+0x184>
1001a978:	42000044 	addi	r8,r8,1
1001a97c:	40c00003 	ldbu	r3,0(r8)
1001a980:	01c00204 	movi	r7,8
1001a984:	183fe31e 	bne	r3,zero,1001a914 <__alt_data_end+0xf801a914>
1001a988:	60002b26 	beq	r12,zero,1001aa38 <__hexnan+0x1a4>
1001a98c:	2b40022e 	bgeu	r5,r13,1001a998 <__hexnan+0x104>
1001a990:	008001c4 	movi	r2,7
1001a994:	11c0430e 	bge	r2,r7,1001aaa4 <__hexnan+0x210>
1001a998:	3140312e 	bgeu	r6,r5,1001aa60 <__hexnan+0x1cc>
1001a99c:	3007883a 	mov	r3,r6
1001a9a0:	29000017 	ldw	r4,0(r5)
1001a9a4:	18800104 	addi	r2,r3,4
1001a9a8:	29400104 	addi	r5,r5,4
1001a9ac:	19000015 	stw	r4,0(r3)
1001a9b0:	1007883a 	mov	r3,r2
1001a9b4:	597ffa2e 	bgeu	r11,r5,1001a9a0 <__alt_data_end+0xf801a9a0>
1001a9b8:	10000015 	stw	zero,0(r2)
1001a9bc:	10800104 	addi	r2,r2,4
1001a9c0:	58bffd2e 	bgeu	r11,r2,1001a9b8 <__alt_data_end+0xf801a9b8>
1001a9c4:	78bfff17 	ldw	r2,-4(r15)
1001a9c8:	1000041e 	bne	r2,zero,1001a9dc <__hexnan+0x148>
1001a9cc:	32c02d26 	beq	r6,r11,1001aa84 <__hexnan+0x1f0>
1001a9d0:	5affff04 	addi	r11,r11,-4
1001a9d4:	58800017 	ldw	r2,0(r11)
1001a9d8:	103ffc26 	beq	r2,zero,1001a9cc <__alt_data_end+0xf801a9cc>
1001a9dc:	00800144 	movi	r2,5
1001a9e0:	00001606 	br	1001aa3c <__hexnan+0x1a8>
1001a9e4:	39c00044 	addi	r7,r7,1
1001a9e8:	63000044 	addi	r12,r12,1
1001a9ec:	89c0040e 	bge	r17,r7,1001aa00 <__hexnan+0x16c>
1001a9f0:	317fc52e 	bgeu	r6,r5,1001a908 <__alt_data_end+0xf801a908>
1001a9f4:	283fff15 	stw	zero,-4(r5)
1001a9f8:	01c00044 	movi	r7,1
1001a9fc:	297fff04 	addi	r5,r5,-4
1001aa00:	28c00017 	ldw	r3,0(r5)
1001aa04:	108003cc 	andi	r2,r2,15
1001aa08:	1806913a 	slli	r3,r3,4
1001aa0c:	1884b03a 	or	r2,r3,r2
1001aa10:	28800015 	stw	r2,0(r5)
1001aa14:	003fbc06 	br	1001a908 <__alt_data_end+0xf801a908>
1001aa18:	2b7fff04 	addi	r13,r5,-4
1001aa1c:	283fff15 	stw	zero,-4(r5)
1001aa20:	603f883a 	mov	ra,r12
1001aa24:	680b883a 	mov	r5,r13
1001aa28:	000f883a 	mov	r7,zero
1001aa2c:	003fb606 	br	1001a908 <__alt_data_end+0xf801a908>
1001aa30:	00800a44 	movi	r2,41
1001aa34:	18801726 	beq	r3,r2,1001aa94 <__hexnan+0x200>
1001aa38:	00800104 	movi	r2,4
1001aa3c:	dfc00617 	ldw	ra,24(sp)
1001aa40:	dd400517 	ldw	r21,20(sp)
1001aa44:	dd000417 	ldw	r20,16(sp)
1001aa48:	dcc00317 	ldw	r19,12(sp)
1001aa4c:	dc800217 	ldw	r18,8(sp)
1001aa50:	dc400117 	ldw	r17,4(sp)
1001aa54:	dc000017 	ldw	r16,0(sp)
1001aa58:	dec00704 	addi	sp,sp,28
1001aa5c:	f800283a 	ret
1001aa60:	903fd826 	beq	r18,zero,1001a9c4 <__alt_data_end+0xf801a9c4>
1001aa64:	00c00804 	movi	r3,32
1001aa68:	1ca5c83a 	sub	r18,r3,r18
1001aa6c:	00ffffc4 	movi	r3,-1
1001aa70:	78bfff17 	ldw	r2,-4(r15)
1001aa74:	1c86d83a 	srl	r3,r3,r18
1001aa78:	1884703a 	and	r2,r3,r2
1001aa7c:	78bfff15 	stw	r2,-4(r15)
1001aa80:	003fd106 	br	1001a9c8 <__alt_data_end+0xf801a9c8>
1001aa84:	00800044 	movi	r2,1
1001aa88:	58800015 	stw	r2,0(r11)
1001aa8c:	00800144 	movi	r2,5
1001aa90:	003fea06 	br	1001aa3c <__alt_data_end+0xf801aa3c>
1001aa94:	42000044 	addi	r8,r8,1
1001aa98:	22000015 	stw	r8,0(r4)
1001aa9c:	603fbb1e 	bne	r12,zero,1001a98c <__alt_data_end+0xf801a98c>
1001aaa0:	003fe506 	br	1001aa38 <__alt_data_end+0xf801aa38>
1001aaa4:	02400204 	movi	r9,8
1001aaa8:	49d3c83a 	sub	r9,r9,r7
1001aaac:	4a53883a 	add	r9,r9,r9
1001aab0:	2a000017 	ldw	r8,0(r5)
1001aab4:	4a53883a 	add	r9,r9,r9
1001aab8:	02800804 	movi	r10,32
1001aabc:	5255c83a 	sub	r10,r10,r9
1001aac0:	28c00104 	addi	r3,r5,4
1001aac4:	2805883a 	mov	r2,r5
1001aac8:	19c00017 	ldw	r7,0(r3)
1001aacc:	10800104 	addi	r2,r2,4
1001aad0:	18c00104 	addi	r3,r3,4
1001aad4:	3a88983a 	sll	r4,r7,r10
1001aad8:	2208b03a 	or	r4,r4,r8
1001aadc:	3a50d83a 	srl	r8,r7,r9
1001aae0:	113fff15 	stw	r4,-4(r2)
1001aae4:	1a3fff15 	stw	r8,-4(r3)
1001aae8:	137ff736 	bltu	r2,r13,1001aac8 <__alt_data_end+0xf801aac8>
1001aaec:	003faa06 	br	1001a998 <__alt_data_end+0xf801a998>

1001aaf0 <_isatty_r>:
1001aaf0:	defffd04 	addi	sp,sp,-12
1001aaf4:	dc000015 	stw	r16,0(sp)
1001aaf8:	040400b4 	movhi	r16,4098
1001aafc:	dc400115 	stw	r17,4(sp)
1001ab00:	841d8004 	addi	r16,r16,30208
1001ab04:	2023883a 	mov	r17,r4
1001ab08:	2809883a 	mov	r4,r5
1001ab0c:	dfc00215 	stw	ra,8(sp)
1001ab10:	80000015 	stw	zero,0(r16)
1001ab14:	001f46c0 	call	1001f46c <isatty>
1001ab18:	00ffffc4 	movi	r3,-1
1001ab1c:	10c00526 	beq	r2,r3,1001ab34 <_isatty_r+0x44>
1001ab20:	dfc00217 	ldw	ra,8(sp)
1001ab24:	dc400117 	ldw	r17,4(sp)
1001ab28:	dc000017 	ldw	r16,0(sp)
1001ab2c:	dec00304 	addi	sp,sp,12
1001ab30:	f800283a 	ret
1001ab34:	80c00017 	ldw	r3,0(r16)
1001ab38:	183ff926 	beq	r3,zero,1001ab20 <__alt_data_end+0xf801ab20>
1001ab3c:	88c00015 	stw	r3,0(r17)
1001ab40:	003ff706 	br	1001ab20 <__alt_data_end+0xf801ab20>

1001ab44 <_lseek_r>:
1001ab44:	defffd04 	addi	sp,sp,-12
1001ab48:	2805883a 	mov	r2,r5
1001ab4c:	dc000015 	stw	r16,0(sp)
1001ab50:	040400b4 	movhi	r16,4098
1001ab54:	dc400115 	stw	r17,4(sp)
1001ab58:	300b883a 	mov	r5,r6
1001ab5c:	841d8004 	addi	r16,r16,30208
1001ab60:	2023883a 	mov	r17,r4
1001ab64:	380d883a 	mov	r6,r7
1001ab68:	1009883a 	mov	r4,r2
1001ab6c:	dfc00215 	stw	ra,8(sp)
1001ab70:	80000015 	stw	zero,0(r16)
1001ab74:	001f6400 	call	1001f640 <lseek>
1001ab78:	00ffffc4 	movi	r3,-1
1001ab7c:	10c00526 	beq	r2,r3,1001ab94 <_lseek_r+0x50>
1001ab80:	dfc00217 	ldw	ra,8(sp)
1001ab84:	dc400117 	ldw	r17,4(sp)
1001ab88:	dc000017 	ldw	r16,0(sp)
1001ab8c:	dec00304 	addi	sp,sp,12
1001ab90:	f800283a 	ret
1001ab94:	80c00017 	ldw	r3,0(r16)
1001ab98:	183ff926 	beq	r3,zero,1001ab80 <__alt_data_end+0xf801ab80>
1001ab9c:	88c00015 	stw	r3,0(r17)
1001aba0:	003ff706 	br	1001ab80 <__alt_data_end+0xf801ab80>

1001aba4 <_read_r>:
1001aba4:	defffd04 	addi	sp,sp,-12
1001aba8:	2805883a 	mov	r2,r5
1001abac:	dc000015 	stw	r16,0(sp)
1001abb0:	040400b4 	movhi	r16,4098
1001abb4:	dc400115 	stw	r17,4(sp)
1001abb8:	300b883a 	mov	r5,r6
1001abbc:	841d8004 	addi	r16,r16,30208
1001abc0:	2023883a 	mov	r17,r4
1001abc4:	380d883a 	mov	r6,r7
1001abc8:	1009883a 	mov	r4,r2
1001abcc:	dfc00215 	stw	ra,8(sp)
1001abd0:	80000015 	stw	zero,0(r16)
1001abd4:	001f81c0 	call	1001f81c <read>
1001abd8:	00ffffc4 	movi	r3,-1
1001abdc:	10c00526 	beq	r2,r3,1001abf4 <_read_r+0x50>
1001abe0:	dfc00217 	ldw	ra,8(sp)
1001abe4:	dc400117 	ldw	r17,4(sp)
1001abe8:	dc000017 	ldw	r16,0(sp)
1001abec:	dec00304 	addi	sp,sp,12
1001abf0:	f800283a 	ret
1001abf4:	80c00017 	ldw	r3,0(r16)
1001abf8:	183ff926 	beq	r3,zero,1001abe0 <__alt_data_end+0xf801abe0>
1001abfc:	88c00015 	stw	r3,0(r17)
1001ac00:	003ff706 	br	1001abe0 <__alt_data_end+0xf801abe0>

1001ac04 <strncmp>:
1001ac04:	30003126 	beq	r6,zero,1001accc <strncmp+0xc8>
1001ac08:	2144b03a 	or	r2,r4,r5
1001ac0c:	108000cc 	andi	r2,r2,3
1001ac10:	10001e1e 	bne	r2,zero,1001ac8c <strncmp+0x88>
1001ac14:	024000c4 	movi	r9,3
1001ac18:	49801c2e 	bgeu	r9,r6,1001ac8c <strncmp+0x88>
1001ac1c:	20800017 	ldw	r2,0(r4)
1001ac20:	28c00017 	ldw	r3,0(r5)
1001ac24:	10c0191e 	bne	r2,r3,1001ac8c <strncmp+0x88>
1001ac28:	31bfff04 	addi	r6,r6,-4
1001ac2c:	30002726 	beq	r6,zero,1001accc <strncmp+0xc8>
1001ac30:	02ffbff4 	movhi	r11,65279
1001ac34:	5affbfc4 	addi	r11,r11,-257
1001ac38:	0086303a 	nor	r3,zero,r2
1001ac3c:	02a02074 	movhi	r10,32897
1001ac40:	12c5883a 	add	r2,r2,r11
1001ac44:	52a02004 	addi	r10,r10,-32640
1001ac48:	10c4703a 	and	r2,r2,r3
1001ac4c:	1284703a 	and	r2,r2,r10
1001ac50:	10000b26 	beq	r2,zero,1001ac80 <strncmp+0x7c>
1001ac54:	00001d06 	br	1001accc <strncmp+0xc8>
1001ac58:	20c00017 	ldw	r3,0(r4)
1001ac5c:	29c00017 	ldw	r7,0(r5)
1001ac60:	1ad1883a 	add	r8,r3,r11
1001ac64:	00c4303a 	nor	r2,zero,r3
1001ac68:	4084703a 	and	r2,r8,r2
1001ac6c:	1284703a 	and	r2,r2,r10
1001ac70:	19c0061e 	bne	r3,r7,1001ac8c <strncmp+0x88>
1001ac74:	31bfff04 	addi	r6,r6,-4
1001ac78:	30001426 	beq	r6,zero,1001accc <strncmp+0xc8>
1001ac7c:	1000131e 	bne	r2,zero,1001accc <strncmp+0xc8>
1001ac80:	21000104 	addi	r4,r4,4
1001ac84:	29400104 	addi	r5,r5,4
1001ac88:	49bff336 	bltu	r9,r6,1001ac58 <__alt_data_end+0xf801ac58>
1001ac8c:	28800007 	ldb	r2,0(r5)
1001ac90:	20c00007 	ldb	r3,0(r4)
1001ac94:	31bfffc4 	addi	r6,r6,-1
1001ac98:	10c0081e 	bne	r2,r3,1001acbc <strncmp+0xb8>
1001ac9c:	30000b26 	beq	r6,zero,1001accc <strncmp+0xc8>
1001aca0:	10000a26 	beq	r2,zero,1001accc <strncmp+0xc8>
1001aca4:	21000044 	addi	r4,r4,1
1001aca8:	29400044 	addi	r5,r5,1
1001acac:	20800007 	ldb	r2,0(r4)
1001acb0:	28c00007 	ldb	r3,0(r5)
1001acb4:	31bfffc4 	addi	r6,r6,-1
1001acb8:	10fff826 	beq	r2,r3,1001ac9c <__alt_data_end+0xf801ac9c>
1001acbc:	20800003 	ldbu	r2,0(r4)
1001acc0:	28c00003 	ldbu	r3,0(r5)
1001acc4:	10c5c83a 	sub	r2,r2,r3
1001acc8:	f800283a 	ret
1001accc:	0005883a 	mov	r2,zero
1001acd0:	f800283a 	ret

1001acd4 <__ssprint_r>:
1001acd4:	30800217 	ldw	r2,8(r6)
1001acd8:	defff604 	addi	sp,sp,-40
1001acdc:	dc800215 	stw	r18,8(sp)
1001ace0:	dfc00915 	stw	ra,36(sp)
1001ace4:	df000815 	stw	fp,32(sp)
1001ace8:	ddc00715 	stw	r23,28(sp)
1001acec:	dd800615 	stw	r22,24(sp)
1001acf0:	dd400515 	stw	r21,20(sp)
1001acf4:	dd000415 	stw	r20,16(sp)
1001acf8:	dcc00315 	stw	r19,12(sp)
1001acfc:	dc400115 	stw	r17,4(sp)
1001ad00:	dc000015 	stw	r16,0(sp)
1001ad04:	3025883a 	mov	r18,r6
1001ad08:	10005826 	beq	r2,zero,1001ae6c <__ssprint_r+0x198>
1001ad0c:	2027883a 	mov	r19,r4
1001ad10:	35c00017 	ldw	r23,0(r6)
1001ad14:	29000017 	ldw	r4,0(r5)
1001ad18:	28800217 	ldw	r2,8(r5)
1001ad1c:	2823883a 	mov	r17,r5
1001ad20:	0039883a 	mov	fp,zero
1001ad24:	0021883a 	mov	r16,zero
1001ad28:	80003926 	beq	r16,zero,1001ae10 <__ssprint_r+0x13c>
1001ad2c:	102b883a 	mov	r21,r2
1001ad30:	102d883a 	mov	r22,r2
1001ad34:	80803a36 	bltu	r16,r2,1001ae20 <__ssprint_r+0x14c>
1001ad38:	88c0030b 	ldhu	r3,12(r17)
1001ad3c:	1881200c 	andi	r2,r3,1152
1001ad40:	10002626 	beq	r2,zero,1001addc <__ssprint_r+0x108>
1001ad44:	88800517 	ldw	r2,20(r17)
1001ad48:	89400417 	ldw	r5,16(r17)
1001ad4c:	81800044 	addi	r6,r16,1
1001ad50:	108f883a 	add	r7,r2,r2
1001ad54:	3885883a 	add	r2,r7,r2
1001ad58:	100ed7fa 	srli	r7,r2,31
1001ad5c:	216dc83a 	sub	r22,r4,r5
1001ad60:	3589883a 	add	r4,r6,r22
1001ad64:	3885883a 	add	r2,r7,r2
1001ad68:	102bd07a 	srai	r21,r2,1
1001ad6c:	a80d883a 	mov	r6,r21
1001ad70:	a900022e 	bgeu	r21,r4,1001ad7c <__ssprint_r+0xa8>
1001ad74:	202b883a 	mov	r21,r4
1001ad78:	200d883a 	mov	r6,r4
1001ad7c:	18c1000c 	andi	r3,r3,1024
1001ad80:	18002a26 	beq	r3,zero,1001ae2c <__ssprint_r+0x158>
1001ad84:	300b883a 	mov	r5,r6
1001ad88:	9809883a 	mov	r4,r19
1001ad8c:	0010eac0 	call	10010eac <_malloc_r>
1001ad90:	1029883a 	mov	r20,r2
1001ad94:	10002c26 	beq	r2,zero,1001ae48 <__ssprint_r+0x174>
1001ad98:	89400417 	ldw	r5,16(r17)
1001ad9c:	b00d883a 	mov	r6,r22
1001ada0:	1009883a 	mov	r4,r2
1001ada4:	0009cd00 	call	10009cd0 <memcpy>
1001ada8:	8880030b 	ldhu	r2,12(r17)
1001adac:	00fedfc4 	movi	r3,-1153
1001adb0:	10c4703a 	and	r2,r2,r3
1001adb4:	10802014 	ori	r2,r2,128
1001adb8:	8880030d 	sth	r2,12(r17)
1001adbc:	a589883a 	add	r4,r20,r22
1001adc0:	adadc83a 	sub	r22,r21,r22
1001adc4:	8d400515 	stw	r21,20(r17)
1001adc8:	8d800215 	stw	r22,8(r17)
1001adcc:	8d000415 	stw	r20,16(r17)
1001add0:	89000015 	stw	r4,0(r17)
1001add4:	802b883a 	mov	r21,r16
1001add8:	802d883a 	mov	r22,r16
1001addc:	b00d883a 	mov	r6,r22
1001ade0:	e00b883a 	mov	r5,fp
1001ade4:	00119c00 	call	100119c0 <memmove>
1001ade8:	88800217 	ldw	r2,8(r17)
1001adec:	89000017 	ldw	r4,0(r17)
1001adf0:	90c00217 	ldw	r3,8(r18)
1001adf4:	1545c83a 	sub	r2,r2,r21
1001adf8:	2589883a 	add	r4,r4,r22
1001adfc:	88800215 	stw	r2,8(r17)
1001ae00:	89000015 	stw	r4,0(r17)
1001ae04:	1c21c83a 	sub	r16,r3,r16
1001ae08:	94000215 	stw	r16,8(r18)
1001ae0c:	80001726 	beq	r16,zero,1001ae6c <__ssprint_r+0x198>
1001ae10:	bf000017 	ldw	fp,0(r23)
1001ae14:	bc000117 	ldw	r16,4(r23)
1001ae18:	bdc00204 	addi	r23,r23,8
1001ae1c:	003fc206 	br	1001ad28 <__alt_data_end+0xf801ad28>
1001ae20:	802b883a 	mov	r21,r16
1001ae24:	802d883a 	mov	r22,r16
1001ae28:	003fec06 	br	1001addc <__alt_data_end+0xf801addc>
1001ae2c:	9809883a 	mov	r4,r19
1001ae30:	0012e640 	call	10012e64 <_realloc_r>
1001ae34:	1029883a 	mov	r20,r2
1001ae38:	103fe01e 	bne	r2,zero,1001adbc <__alt_data_end+0xf801adbc>
1001ae3c:	89400417 	ldw	r5,16(r17)
1001ae40:	9809883a 	mov	r4,r19
1001ae44:	00102840 	call	10010284 <_free_r>
1001ae48:	88c0030b 	ldhu	r3,12(r17)
1001ae4c:	00800304 	movi	r2,12
1001ae50:	98800015 	stw	r2,0(r19)
1001ae54:	18c01014 	ori	r3,r3,64
1001ae58:	88c0030d 	sth	r3,12(r17)
1001ae5c:	00bfffc4 	movi	r2,-1
1001ae60:	90000215 	stw	zero,8(r18)
1001ae64:	90000115 	stw	zero,4(r18)
1001ae68:	00000206 	br	1001ae74 <__ssprint_r+0x1a0>
1001ae6c:	90000115 	stw	zero,4(r18)
1001ae70:	0005883a 	mov	r2,zero
1001ae74:	dfc00917 	ldw	ra,36(sp)
1001ae78:	df000817 	ldw	fp,32(sp)
1001ae7c:	ddc00717 	ldw	r23,28(sp)
1001ae80:	dd800617 	ldw	r22,24(sp)
1001ae84:	dd400517 	ldw	r21,20(sp)
1001ae88:	dd000417 	ldw	r20,16(sp)
1001ae8c:	dcc00317 	ldw	r19,12(sp)
1001ae90:	dc800217 	ldw	r18,8(sp)
1001ae94:	dc400117 	ldw	r17,4(sp)
1001ae98:	dc000017 	ldw	r16,0(sp)
1001ae9c:	dec00a04 	addi	sp,sp,40
1001aea0:	f800283a 	ret

1001aea4 <___svfiprintf_internal_r>:
1001aea4:	2880030b 	ldhu	r2,12(r5)
1001aea8:	deffc804 	addi	sp,sp,-224
1001aeac:	dcc03115 	stw	r19,196(sp)
1001aeb0:	dfc03715 	stw	ra,220(sp)
1001aeb4:	df003615 	stw	fp,216(sp)
1001aeb8:	ddc03515 	stw	r23,212(sp)
1001aebc:	dd803415 	stw	r22,208(sp)
1001aec0:	dd403315 	stw	r21,204(sp)
1001aec4:	dd003215 	stw	r20,200(sp)
1001aec8:	dc803015 	stw	r18,192(sp)
1001aecc:	dc402f15 	stw	r17,188(sp)
1001aed0:	dc002e15 	stw	r16,184(sp)
1001aed4:	d9402315 	stw	r5,140(sp)
1001aed8:	d9002715 	stw	r4,156(sp)
1001aedc:	1080200c 	andi	r2,r2,128
1001aee0:	d9c02415 	stw	r7,144(sp)
1001aee4:	3027883a 	mov	r19,r6
1001aee8:	10000226 	beq	r2,zero,1001aef4 <___svfiprintf_internal_r+0x50>
1001aeec:	28800417 	ldw	r2,16(r5)
1001aef0:	10046d26 	beq	r2,zero,1001c0a8 <___svfiprintf_internal_r+0x1204>
1001aef4:	d8801a04 	addi	r2,sp,104
1001aef8:	d8c019c4 	addi	r3,sp,103
1001aefc:	058400b4 	movhi	r22,4098
1001af00:	10c9c83a 	sub	r4,r2,r3
1001af04:	b58cc304 	addi	r22,r22,13068
1001af08:	d8801e15 	stw	r2,120(sp)
1001af0c:	d8c01f15 	stw	r3,124(sp)
1001af10:	dec01a15 	stw	sp,104(sp)
1001af14:	d8001c15 	stw	zero,112(sp)
1001af18:	d8001b15 	stw	zero,108(sp)
1001af1c:	d811883a 	mov	r8,sp
1001af20:	d8002915 	stw	zero,164(sp)
1001af24:	d8002615 	stw	zero,152(sp)
1001af28:	d9002c15 	stw	r4,176(sp)
1001af2c:	98800007 	ldb	r2,0(r19)
1001af30:	10031426 	beq	r2,zero,1001bb84 <___svfiprintf_internal_r+0xce0>
1001af34:	00c00944 	movi	r3,37
1001af38:	9825883a 	mov	r18,r19
1001af3c:	10c0021e 	bne	r2,r3,1001af48 <___svfiprintf_internal_r+0xa4>
1001af40:	00001406 	br	1001af94 <___svfiprintf_internal_r+0xf0>
1001af44:	10c00326 	beq	r2,r3,1001af54 <___svfiprintf_internal_r+0xb0>
1001af48:	94800044 	addi	r18,r18,1
1001af4c:	90800007 	ldb	r2,0(r18)
1001af50:	103ffc1e 	bne	r2,zero,1001af44 <__alt_data_end+0xf801af44>
1001af54:	94e1c83a 	sub	r16,r18,r19
1001af58:	80000e26 	beq	r16,zero,1001af94 <___svfiprintf_internal_r+0xf0>
1001af5c:	d8c01c17 	ldw	r3,112(sp)
1001af60:	d8801b17 	ldw	r2,108(sp)
1001af64:	44c00015 	stw	r19,0(r8)
1001af68:	1c07883a 	add	r3,r3,r16
1001af6c:	10800044 	addi	r2,r2,1
1001af70:	d8c01c15 	stw	r3,112(sp)
1001af74:	44000115 	stw	r16,4(r8)
1001af78:	d8801b15 	stw	r2,108(sp)
1001af7c:	00c001c4 	movi	r3,7
1001af80:	18835c16 	blt	r3,r2,1001bcf4 <___svfiprintf_internal_r+0xe50>
1001af84:	42000204 	addi	r8,r8,8
1001af88:	d9402617 	ldw	r5,152(sp)
1001af8c:	2c0b883a 	add	r5,r5,r16
1001af90:	d9402615 	stw	r5,152(sp)
1001af94:	90800007 	ldb	r2,0(r18)
1001af98:	1002fc26 	beq	r2,zero,1001bb8c <___svfiprintf_internal_r+0xce8>
1001af9c:	0023883a 	mov	r17,zero
1001afa0:	00bfffc4 	movi	r2,-1
1001afa4:	0021883a 	mov	r16,zero
1001afa8:	94c00044 	addi	r19,r18,1
1001afac:	90c00047 	ldb	r3,1(r18)
1001afb0:	dc402105 	stb	r17,132(sp)
1001afb4:	d8001d85 	stb	zero,118(sp)
1001afb8:	002b883a 	mov	r21,zero
1001afbc:	d8802015 	stw	r2,128(sp)
1001afc0:	d8002515 	stw	zero,148(sp)
1001afc4:	04801604 	movi	r18,88
1001afc8:	05000244 	movi	r20,9
1001afcc:	402f883a 	mov	r23,r8
1001afd0:	8023883a 	mov	r17,r16
1001afd4:	9cc00044 	addi	r19,r19,1
1001afd8:	18bff804 	addi	r2,r3,-32
1001afdc:	9081fb36 	bltu	r18,r2,1001b7cc <___svfiprintf_internal_r+0x928>
1001afe0:	100490ba 	slli	r2,r2,2
1001afe4:	010400b4 	movhi	r4,4098
1001afe8:	212bfe04 	addi	r4,r4,-20488
1001afec:	1105883a 	add	r2,r2,r4
1001aff0:	10800017 	ldw	r2,0(r2)
1001aff4:	1000683a 	jmp	r2
1001aff8:	1001b1f8 	rdprs	zero,r2,1735
1001affc:	1001b7cc 	andi	zero,r2,1759
1001b000:	1001b7cc 	andi	zero,r2,1759
1001b004:	1001b1ec 	andhi	zero,r2,1735
1001b008:	1001b7cc 	andi	zero,r2,1759
1001b00c:	1001b7cc 	andi	zero,r2,1759
1001b010:	1001b7cc 	andi	zero,r2,1759
1001b014:	1001b7cc 	andi	zero,r2,1759
1001b018:	1001b7cc 	andi	zero,r2,1759
1001b01c:	1001b7cc 	andi	zero,r2,1759
1001b020:	1001b15c 	xori	zero,r2,1733
1001b024:	1001b358 	cmpnei	zero,r2,1741
1001b028:	1001b7cc 	andi	zero,r2,1759
1001b02c:	1001b184 	addi	zero,r2,1734
1001b030:	1001b808 	cmpgei	zero,r2,1760
1001b034:	1001b7cc 	andi	zero,r2,1759
1001b038:	1001b7fc 	xorhi	zero,r2,1759
1001b03c:	1001b790 	cmplti	zero,r2,1758
1001b040:	1001b790 	cmplti	zero,r2,1758
1001b044:	1001b790 	cmplti	zero,r2,1758
1001b048:	1001b790 	cmplti	zero,r2,1758
1001b04c:	1001b790 	cmplti	zero,r2,1758
1001b050:	1001b790 	cmplti	zero,r2,1758
1001b054:	1001b790 	cmplti	zero,r2,1758
1001b058:	1001b790 	cmplti	zero,r2,1758
1001b05c:	1001b790 	cmplti	zero,r2,1758
1001b060:	1001b7cc 	andi	zero,r2,1759
1001b064:	1001b7cc 	andi	zero,r2,1759
1001b068:	1001b7cc 	andi	zero,r2,1759
1001b06c:	1001b7cc 	andi	zero,r2,1759
1001b070:	1001b7cc 	andi	zero,r2,1759
1001b074:	1001b7cc 	andi	zero,r2,1759
1001b078:	1001b7cc 	andi	zero,r2,1759
1001b07c:	1001b7cc 	andi	zero,r2,1759
1001b080:	1001b7cc 	andi	zero,r2,1759
1001b084:	1001b7cc 	andi	zero,r2,1759
1001b088:	1001b714 	ori	zero,r2,1756
1001b08c:	1001b7cc 	andi	zero,r2,1759
1001b090:	1001b7cc 	andi	zero,r2,1759
1001b094:	1001b7cc 	andi	zero,r2,1759
1001b098:	1001b7cc 	andi	zero,r2,1759
1001b09c:	1001b7cc 	andi	zero,r2,1759
1001b0a0:	1001b7cc 	andi	zero,r2,1759
1001b0a4:	1001b7cc 	andi	zero,r2,1759
1001b0a8:	1001b7cc 	andi	zero,r2,1759
1001b0ac:	1001b7cc 	andi	zero,r2,1759
1001b0b0:	1001b7cc 	andi	zero,r2,1759
1001b0b4:	1001b8c4 	addi	zero,r2,1763
1001b0b8:	1001b7cc 	andi	zero,r2,1759
1001b0bc:	1001b7cc 	andi	zero,r2,1759
1001b0c0:	1001b7cc 	andi	zero,r2,1759
1001b0c4:	1001b7cc 	andi	zero,r2,1759
1001b0c8:	1001b7cc 	andi	zero,r2,1759
1001b0cc:	1001b850 	cmplti	zero,r2,1761
1001b0d0:	1001b7cc 	andi	zero,r2,1759
1001b0d4:	1001b7cc 	andi	zero,r2,1759
1001b0d8:	1001b550 	cmplti	zero,r2,1749
1001b0dc:	1001b7cc 	andi	zero,r2,1759
1001b0e0:	1001b7cc 	andi	zero,r2,1759
1001b0e4:	1001b7cc 	andi	zero,r2,1759
1001b0e8:	1001b7cc 	andi	zero,r2,1759
1001b0ec:	1001b7cc 	andi	zero,r2,1759
1001b0f0:	1001b7cc 	andi	zero,r2,1759
1001b0f4:	1001b7cc 	andi	zero,r2,1759
1001b0f8:	1001b7cc 	andi	zero,r2,1759
1001b0fc:	1001b7cc 	andi	zero,r2,1759
1001b100:	1001b7cc 	andi	zero,r2,1759
1001b104:	1001b41c 	xori	zero,r2,1744
1001b108:	1001b600 	call	11001b60 <_gp+0xfd4714>
1001b10c:	1001b7cc 	andi	zero,r2,1759
1001b110:	1001b7cc 	andi	zero,r2,1759
1001b114:	1001b7cc 	andi	zero,r2,1759
1001b118:	1001b5f4 	orhi	zero,r2,1751
1001b11c:	1001b600 	call	11001b60 <_gp+0xfd4714>
1001b120:	1001b7cc 	andi	zero,r2,1759
1001b124:	1001b7cc 	andi	zero,r2,1759
1001b128:	1001b5e0 	cmpeqi	zero,r2,1751
1001b12c:	1001b7cc 	andi	zero,r2,1759
1001b130:	1001b5a0 	cmpeqi	zero,r2,1750
1001b134:	1001b36c 	andhi	zero,r2,1741
1001b138:	1001b190 	cmplti	zero,r2,1734
1001b13c:	1001b708 	cmpgei	zero,r2,1756
1001b140:	1001b7cc 	andi	zero,r2,1759
1001b144:	1001b6b4 	orhi	zero,r2,1754
1001b148:	1001b7cc 	andi	zero,r2,1759
1001b14c:	1001b2d0 	cmplti	zero,r2,1739
1001b150:	1001b7cc 	andi	zero,r2,1759
1001b154:	1001b7cc 	andi	zero,r2,1759
1001b158:	1001b21c 	xori	zero,r2,1736
1001b15c:	d9002417 	ldw	r4,144(sp)
1001b160:	d9402417 	ldw	r5,144(sp)
1001b164:	21000017 	ldw	r4,0(r4)
1001b168:	28800104 	addi	r2,r5,4
1001b16c:	d9002515 	stw	r4,148(sp)
1001b170:	20032b0e 	bge	r4,zero,1001be20 <___svfiprintf_internal_r+0xf7c>
1001b174:	d8c02517 	ldw	r3,148(sp)
1001b178:	d8802415 	stw	r2,144(sp)
1001b17c:	00c7c83a 	sub	r3,zero,r3
1001b180:	d8c02515 	stw	r3,148(sp)
1001b184:	8c400114 	ori	r17,r17,4
1001b188:	98c00007 	ldb	r3,0(r19)
1001b18c:	003f9106 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b190:	00800c04 	movi	r2,48
1001b194:	d9402417 	ldw	r5,144(sp)
1001b198:	d9002017 	ldw	r4,128(sp)
1001b19c:	d8801d05 	stb	r2,116(sp)
1001b1a0:	00801e04 	movi	r2,120
1001b1a4:	d8801d45 	stb	r2,117(sp)
1001b1a8:	d8001d85 	stb	zero,118(sp)
1001b1ac:	b811883a 	mov	r8,r23
1001b1b0:	28c00104 	addi	r3,r5,4
1001b1b4:	2c800017 	ldw	r18,0(r5)
1001b1b8:	0029883a 	mov	r20,zero
1001b1bc:	88800094 	ori	r2,r17,2
1001b1c0:	20036316 	blt	r4,zero,1001bf50 <___svfiprintf_internal_r+0x10ac>
1001b1c4:	00bfdfc4 	movi	r2,-129
1001b1c8:	88a0703a 	and	r16,r17,r2
1001b1cc:	d8c02415 	stw	r3,144(sp)
1001b1d0:	84000094 	ori	r16,r16,2
1001b1d4:	90031c26 	beq	r18,zero,1001be48 <___svfiprintf_internal_r+0xfa4>
1001b1d8:	014400b4 	movhi	r5,4098
1001b1dc:	294b5004 	addi	r5,r5,11584
1001b1e0:	002b883a 	mov	r21,zero
1001b1e4:	d9402915 	stw	r5,164(sp)
1001b1e8:	00002906 	br	1001b290 <___svfiprintf_internal_r+0x3ec>
1001b1ec:	8c400054 	ori	r17,r17,1
1001b1f0:	98c00007 	ldb	r3,0(r19)
1001b1f4:	003f7706 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b1f8:	a8803fcc 	andi	r2,r21,255
1001b1fc:	1080201c 	xori	r2,r2,128
1001b200:	10bfe004 	addi	r2,r2,-128
1001b204:	10032a1e 	bne	r2,zero,1001beb0 <___svfiprintf_internal_r+0x100c>
1001b208:	00c00044 	movi	r3,1
1001b20c:	d8c02105 	stb	r3,132(sp)
1001b210:	05400804 	movi	r21,32
1001b214:	98c00007 	ldb	r3,0(r19)
1001b218:	003f6e06 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b21c:	8821883a 	mov	r16,r17
1001b220:	dc402103 	ldbu	r17,132(sp)
1001b224:	b811883a 	mov	r8,r23
1001b228:	8c403fcc 	andi	r17,r17,255
1001b22c:	8803f01e 	bne	r17,zero,1001c1f0 <___svfiprintf_internal_r+0x134c>
1001b230:	008400b4 	movhi	r2,4098
1001b234:	108b5004 	addi	r2,r2,11584
1001b238:	d8802915 	stw	r2,164(sp)
1001b23c:	8080080c 	andi	r2,r16,32
1001b240:	1000cd26 	beq	r2,zero,1001b578 <___svfiprintf_internal_r+0x6d4>
1001b244:	d9002417 	ldw	r4,144(sp)
1001b248:	24800017 	ldw	r18,0(r4)
1001b24c:	25000117 	ldw	r20,4(r4)
1001b250:	21000204 	addi	r4,r4,8
1001b254:	d9002415 	stw	r4,144(sp)
1001b258:	8080004c 	andi	r2,r16,1
1001b25c:	1002c726 	beq	r2,zero,1001bd7c <___svfiprintf_internal_r+0xed8>
1001b260:	9504b03a 	or	r2,r18,r20
1001b264:	1003061e 	bne	r2,zero,1001be80 <___svfiprintf_internal_r+0xfdc>
1001b268:	d9002017 	ldw	r4,128(sp)
1001b26c:	d8001d85 	stb	zero,118(sp)
1001b270:	20033e16 	blt	r4,zero,1001bf6c <___svfiprintf_internal_r+0x10c8>
1001b274:	00bfdfc4 	movi	r2,-129
1001b278:	80a0703a 	and	r16,r16,r2
1001b27c:	d9402017 	ldw	r5,128(sp)
1001b280:	002b883a 	mov	r21,zero
1001b284:	28002826 	beq	r5,zero,1001b328 <___svfiprintf_internal_r+0x484>
1001b288:	0025883a 	mov	r18,zero
1001b28c:	0029883a 	mov	r20,zero
1001b290:	d9002917 	ldw	r4,164(sp)
1001b294:	dc401a04 	addi	r17,sp,104
1001b298:	908003cc 	andi	r2,r18,15
1001b29c:	a006973a 	slli	r3,r20,28
1001b2a0:	2085883a 	add	r2,r4,r2
1001b2a4:	9024d13a 	srli	r18,r18,4
1001b2a8:	10800003 	ldbu	r2,0(r2)
1001b2ac:	a028d13a 	srli	r20,r20,4
1001b2b0:	8c7fffc4 	addi	r17,r17,-1
1001b2b4:	1ca4b03a 	or	r18,r3,r18
1001b2b8:	88800005 	stb	r2,0(r17)
1001b2bc:	9504b03a 	or	r2,r18,r20
1001b2c0:	103ff51e 	bne	r2,zero,1001b298 <__alt_data_end+0xf801b298>
1001b2c4:	d8801e17 	ldw	r2,120(sp)
1001b2c8:	1469c83a 	sub	r20,r2,r17
1001b2cc:	00001906 	br	1001b334 <___svfiprintf_internal_r+0x490>
1001b2d0:	8821883a 	mov	r16,r17
1001b2d4:	dc402103 	ldbu	r17,132(sp)
1001b2d8:	b811883a 	mov	r8,r23
1001b2dc:	8c403fcc 	andi	r17,r17,255
1001b2e0:	8803d01e 	bne	r17,zero,1001c224 <___svfiprintf_internal_r+0x1380>
1001b2e4:	8080080c 	andi	r2,r16,32
1001b2e8:	10016126 	beq	r2,zero,1001b870 <___svfiprintf_internal_r+0x9cc>
1001b2ec:	d9002417 	ldw	r4,144(sp)
1001b2f0:	d9402017 	ldw	r5,128(sp)
1001b2f4:	d8001d85 	stb	zero,118(sp)
1001b2f8:	20c00204 	addi	r3,r4,8
1001b2fc:	24800017 	ldw	r18,0(r4)
1001b300:	25000117 	ldw	r20,4(r4)
1001b304:	28030f16 	blt	r5,zero,1001bf44 <___svfiprintf_internal_r+0x10a0>
1001b308:	013fdfc4 	movi	r4,-129
1001b30c:	9504b03a 	or	r2,r18,r20
1001b310:	d8c02415 	stw	r3,144(sp)
1001b314:	8120703a 	and	r16,r16,r4
1001b318:	002b883a 	mov	r21,zero
1001b31c:	1000cd1e 	bne	r2,zero,1001b654 <___svfiprintf_internal_r+0x7b0>
1001b320:	d8c02017 	ldw	r3,128(sp)
1001b324:	1803141e 	bne	r3,zero,1001bf78 <___svfiprintf_internal_r+0x10d4>
1001b328:	d8002015 	stw	zero,128(sp)
1001b32c:	0029883a 	mov	r20,zero
1001b330:	dc401a04 	addi	r17,sp,104
1001b334:	dc802017 	ldw	r18,128(sp)
1001b338:	9500010e 	bge	r18,r20,1001b340 <___svfiprintf_internal_r+0x49c>
1001b33c:	a025883a 	mov	r18,r20
1001b340:	ad403fcc 	andi	r21,r21,255
1001b344:	ad40201c 	xori	r21,r21,128
1001b348:	ad7fe004 	addi	r21,r21,-128
1001b34c:	a8003f26 	beq	r21,zero,1001b44c <___svfiprintf_internal_r+0x5a8>
1001b350:	94800044 	addi	r18,r18,1
1001b354:	00003d06 	br	1001b44c <___svfiprintf_internal_r+0x5a8>
1001b358:	00c00044 	movi	r3,1
1001b35c:	d8c02105 	stb	r3,132(sp)
1001b360:	05400ac4 	movi	r21,43
1001b364:	98c00007 	ldb	r3,0(r19)
1001b368:	003f1a06 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b36c:	8821883a 	mov	r16,r17
1001b370:	dc402103 	ldbu	r17,132(sp)
1001b374:	b811883a 	mov	r8,r23
1001b378:	8c403fcc 	andi	r17,r17,255
1001b37c:	8803a71e 	bne	r17,zero,1001c21c <___svfiprintf_internal_r+0x1378>
1001b380:	8080080c 	andi	r2,r16,32
1001b384:	10015726 	beq	r2,zero,1001b8e4 <___svfiprintf_internal_r+0xa40>
1001b388:	d8c02417 	ldw	r3,144(sp)
1001b38c:	d9002017 	ldw	r4,128(sp)
1001b390:	d8001d85 	stb	zero,118(sp)
1001b394:	18800204 	addi	r2,r3,8
1001b398:	1c800017 	ldw	r18,0(r3)
1001b39c:	1d000117 	ldw	r20,4(r3)
1001b3a0:	2002db16 	blt	r4,zero,1001bf10 <___svfiprintf_internal_r+0x106c>
1001b3a4:	013fdfc4 	movi	r4,-129
1001b3a8:	9506b03a 	or	r3,r18,r20
1001b3ac:	d8802415 	stw	r2,144(sp)
1001b3b0:	8120703a 	and	r16,r16,r4
1001b3b4:	18015826 	beq	r3,zero,1001b918 <___svfiprintf_internal_r+0xa74>
1001b3b8:	002b883a 	mov	r21,zero
1001b3bc:	dc401a04 	addi	r17,sp,104
1001b3c0:	9006d0fa 	srli	r3,r18,3
1001b3c4:	a008977a 	slli	r4,r20,29
1001b3c8:	a028d0fa 	srli	r20,r20,3
1001b3cc:	948001cc 	andi	r18,r18,7
1001b3d0:	90800c04 	addi	r2,r18,48
1001b3d4:	8c7fffc4 	addi	r17,r17,-1
1001b3d8:	20e4b03a 	or	r18,r4,r3
1001b3dc:	88800005 	stb	r2,0(r17)
1001b3e0:	9506b03a 	or	r3,r18,r20
1001b3e4:	183ff61e 	bne	r3,zero,1001b3c0 <__alt_data_end+0xf801b3c0>
1001b3e8:	80c0004c 	andi	r3,r16,1
1001b3ec:	18028926 	beq	r3,zero,1001be14 <___svfiprintf_internal_r+0xf70>
1001b3f0:	10803fcc 	andi	r2,r2,255
1001b3f4:	1080201c 	xori	r2,r2,128
1001b3f8:	10bfe004 	addi	r2,r2,-128
1001b3fc:	00c00c04 	movi	r3,48
1001b400:	10ffb026 	beq	r2,r3,1001b2c4 <__alt_data_end+0xf801b2c4>
1001b404:	88ffffc5 	stb	r3,-1(r17)
1001b408:	d8c01e17 	ldw	r3,120(sp)
1001b40c:	88bfffc4 	addi	r2,r17,-1
1001b410:	1023883a 	mov	r17,r2
1001b414:	18a9c83a 	sub	r20,r3,r2
1001b418:	003fc606 	br	1001b334 <__alt_data_end+0xf801b334>
1001b41c:	d8c02417 	ldw	r3,144(sp)
1001b420:	04800044 	movi	r18,1
1001b424:	8821883a 	mov	r16,r17
1001b428:	18800017 	ldw	r2,0(r3)
1001b42c:	18c00104 	addi	r3,r3,4
1001b430:	b811883a 	mov	r8,r23
1001b434:	d8001d85 	stb	zero,118(sp)
1001b438:	d8801005 	stb	r2,64(sp)
1001b43c:	d8c02415 	stw	r3,144(sp)
1001b440:	9029883a 	mov	r20,r18
1001b444:	dc401004 	addi	r17,sp,64
1001b448:	d8002015 	stw	zero,128(sp)
1001b44c:	80c0008c 	andi	r3,r16,2
1001b450:	d8c02115 	stw	r3,132(sp)
1001b454:	18000126 	beq	r3,zero,1001b45c <___svfiprintf_internal_r+0x5b8>
1001b458:	94800084 	addi	r18,r18,2
1001b45c:	80c0210c 	andi	r3,r16,132
1001b460:	d8c02215 	stw	r3,136(sp)
1001b464:	1801321e 	bne	r3,zero,1001b930 <___svfiprintf_internal_r+0xa8c>
1001b468:	d9002517 	ldw	r4,148(sp)
1001b46c:	24b9c83a 	sub	fp,r4,r18
1001b470:	07012f0e 	bge	zero,fp,1001b930 <___svfiprintf_internal_r+0xa8c>
1001b474:	02400404 	movi	r9,16
1001b478:	d8c01c17 	ldw	r3,112(sp)
1001b47c:	d8801b17 	ldw	r2,108(sp)
1001b480:	4f03250e 	bge	r9,fp,1001c118 <___svfiprintf_internal_r+0x1274>
1001b484:	010400b4 	movhi	r4,4098
1001b488:	210cc704 	addi	r4,r4,13084
1001b48c:	dc002a15 	stw	r16,168(sp)
1001b490:	dc402b15 	stw	r17,172(sp)
1001b494:	d9002815 	stw	r4,160(sp)
1001b498:	e023883a 	mov	r17,fp
1001b49c:	482f883a 	mov	r23,r9
1001b4a0:	9839883a 	mov	fp,r19
1001b4a4:	054001c4 	movi	r21,7
1001b4a8:	9027883a 	mov	r19,r18
1001b4ac:	dc002717 	ldw	r16,156(sp)
1001b4b0:	dc802317 	ldw	r18,140(sp)
1001b4b4:	00000306 	br	1001b4c4 <___svfiprintf_internal_r+0x620>
1001b4b8:	8c7ffc04 	addi	r17,r17,-16
1001b4bc:	42000204 	addi	r8,r8,8
1001b4c0:	bc40130e 	bge	r23,r17,1001b510 <___svfiprintf_internal_r+0x66c>
1001b4c4:	014400b4 	movhi	r5,4098
1001b4c8:	18c00404 	addi	r3,r3,16
1001b4cc:	10800044 	addi	r2,r2,1
1001b4d0:	294cc704 	addi	r5,r5,13084
1001b4d4:	41400015 	stw	r5,0(r8)
1001b4d8:	45c00115 	stw	r23,4(r8)
1001b4dc:	d8c01c15 	stw	r3,112(sp)
1001b4e0:	d8801b15 	stw	r2,108(sp)
1001b4e4:	a8bff40e 	bge	r21,r2,1001b4b8 <__alt_data_end+0xf801b4b8>
1001b4e8:	d9801a04 	addi	r6,sp,104
1001b4ec:	900b883a 	mov	r5,r18
1001b4f0:	8009883a 	mov	r4,r16
1001b4f4:	001acd40 	call	1001acd4 <__ssprint_r>
1001b4f8:	1001aa1e 	bne	r2,zero,1001bba4 <___svfiprintf_internal_r+0xd00>
1001b4fc:	8c7ffc04 	addi	r17,r17,-16
1001b500:	d8c01c17 	ldw	r3,112(sp)
1001b504:	d8801b17 	ldw	r2,108(sp)
1001b508:	d811883a 	mov	r8,sp
1001b50c:	bc7fed16 	blt	r23,r17,1001b4c4 <__alt_data_end+0xf801b4c4>
1001b510:	9825883a 	mov	r18,r19
1001b514:	dc002a17 	ldw	r16,168(sp)
1001b518:	e027883a 	mov	r19,fp
1001b51c:	8839883a 	mov	fp,r17
1001b520:	dc402b17 	ldw	r17,172(sp)
1001b524:	d9002817 	ldw	r4,160(sp)
1001b528:	e0c7883a 	add	r3,fp,r3
1001b52c:	10800044 	addi	r2,r2,1
1001b530:	41000015 	stw	r4,0(r8)
1001b534:	47000115 	stw	fp,4(r8)
1001b538:	d8c01c15 	stw	r3,112(sp)
1001b53c:	d8801b15 	stw	r2,108(sp)
1001b540:	010001c4 	movi	r4,7
1001b544:	20821616 	blt	r4,r2,1001bda0 <___svfiprintf_internal_r+0xefc>
1001b548:	42000204 	addi	r8,r8,8
1001b54c:	0000fa06 	br	1001b938 <___svfiprintf_internal_r+0xa94>
1001b550:	8821883a 	mov	r16,r17
1001b554:	dc402103 	ldbu	r17,132(sp)
1001b558:	b811883a 	mov	r8,r23
1001b55c:	8c403fcc 	andi	r17,r17,255
1001b560:	8803361e 	bne	r17,zero,1001c23c <___svfiprintf_internal_r+0x1398>
1001b564:	014400b4 	movhi	r5,4098
1001b568:	294b4b04 	addi	r5,r5,11564
1001b56c:	d9402915 	stw	r5,164(sp)
1001b570:	8080080c 	andi	r2,r16,32
1001b574:	103f331e 	bne	r2,zero,1001b244 <__alt_data_end+0xf801b244>
1001b578:	8080040c 	andi	r2,r16,16
1001b57c:	1002551e 	bne	r2,zero,1001bed4 <___svfiprintf_internal_r+0x1030>
1001b580:	8080100c 	andi	r2,r16,64
1001b584:	1002a626 	beq	r2,zero,1001c020 <___svfiprintf_internal_r+0x117c>
1001b588:	d8802417 	ldw	r2,144(sp)
1001b58c:	0029883a 	mov	r20,zero
1001b590:	1480000b 	ldhu	r18,0(r2)
1001b594:	10800104 	addi	r2,r2,4
1001b598:	d8802415 	stw	r2,144(sp)
1001b59c:	003f2e06 	br	1001b258 <__alt_data_end+0xf801b258>
1001b5a0:	8821883a 	mov	r16,r17
1001b5a4:	dc402103 	ldbu	r17,132(sp)
1001b5a8:	b811883a 	mov	r8,r23
1001b5ac:	8c403fcc 	andi	r17,r17,255
1001b5b0:	88030b1e 	bne	r17,zero,1001c1e0 <___svfiprintf_internal_r+0x133c>
1001b5b4:	8080080c 	andi	r2,r16,32
1001b5b8:	1002271e 	bne	r2,zero,1001be58 <___svfiprintf_internal_r+0xfb4>
1001b5bc:	8080040c 	andi	r2,r16,16
1001b5c0:	10028e26 	beq	r2,zero,1001bffc <___svfiprintf_internal_r+0x1158>
1001b5c4:	d8c02417 	ldw	r3,144(sp)
1001b5c8:	d9002617 	ldw	r4,152(sp)
1001b5cc:	18800017 	ldw	r2,0(r3)
1001b5d0:	18c00104 	addi	r3,r3,4
1001b5d4:	d8c02415 	stw	r3,144(sp)
1001b5d8:	11000015 	stw	r4,0(r2)
1001b5dc:	003e5306 	br	1001af2c <__alt_data_end+0xf801af2c>
1001b5e0:	98c00007 	ldb	r3,0(r19)
1001b5e4:	01401b04 	movi	r5,108
1001b5e8:	19424f26 	beq	r3,r5,1001bf28 <___svfiprintf_internal_r+0x1084>
1001b5ec:	8c400414 	ori	r17,r17,16
1001b5f0:	003e7806 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b5f4:	8c401014 	ori	r17,r17,64
1001b5f8:	98c00007 	ldb	r3,0(r19)
1001b5fc:	003e7506 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b600:	8821883a 	mov	r16,r17
1001b604:	dc402103 	ldbu	r17,132(sp)
1001b608:	b811883a 	mov	r8,r23
1001b60c:	8c403fcc 	andi	r17,r17,255
1001b610:	8802fe1e 	bne	r17,zero,1001c20c <___svfiprintf_internal_r+0x1368>
1001b614:	8080080c 	andi	r2,r16,32
1001b618:	10004626 	beq	r2,zero,1001b734 <___svfiprintf_internal_r+0x890>
1001b61c:	d9002417 	ldw	r4,144(sp)
1001b620:	20800117 	ldw	r2,4(r4)
1001b624:	24800017 	ldw	r18,0(r4)
1001b628:	21000204 	addi	r4,r4,8
1001b62c:	d9002415 	stw	r4,144(sp)
1001b630:	1029883a 	mov	r20,r2
1001b634:	10004a16 	blt	r2,zero,1001b760 <___svfiprintf_internal_r+0x8bc>
1001b638:	d9002017 	ldw	r4,128(sp)
1001b63c:	dd401d83 	ldbu	r21,118(sp)
1001b640:	2001eb16 	blt	r4,zero,1001bdf0 <___svfiprintf_internal_r+0xf4c>
1001b644:	00ffdfc4 	movi	r3,-129
1001b648:	9504b03a 	or	r2,r18,r20
1001b64c:	80e0703a 	and	r16,r16,r3
1001b650:	103f3326 	beq	r2,zero,1001b320 <__alt_data_end+0xf801b320>
1001b654:	a0009426 	beq	r20,zero,1001b8a8 <___svfiprintf_internal_r+0xa04>
1001b658:	dc401a04 	addi	r17,sp,104
1001b65c:	402f883a 	mov	r23,r8
1001b660:	9009883a 	mov	r4,r18
1001b664:	a00b883a 	mov	r5,r20
1001b668:	01800284 	movi	r6,10
1001b66c:	000f883a 	mov	r7,zero
1001b670:	001cba80 	call	1001cba8 <__umoddi3>
1001b674:	10800c04 	addi	r2,r2,48
1001b678:	8c7fffc4 	addi	r17,r17,-1
1001b67c:	9009883a 	mov	r4,r18
1001b680:	a00b883a 	mov	r5,r20
1001b684:	88800005 	stb	r2,0(r17)
1001b688:	01800284 	movi	r6,10
1001b68c:	000f883a 	mov	r7,zero
1001b690:	001c5ac0 	call	1001c5ac <__udivdi3>
1001b694:	1025883a 	mov	r18,r2
1001b698:	10c4b03a 	or	r2,r2,r3
1001b69c:	1829883a 	mov	r20,r3
1001b6a0:	103fef1e 	bne	r2,zero,1001b660 <__alt_data_end+0xf801b660>
1001b6a4:	d9001e17 	ldw	r4,120(sp)
1001b6a8:	b811883a 	mov	r8,r23
1001b6ac:	2469c83a 	sub	r20,r4,r17
1001b6b0:	003f2006 	br	1001b334 <__alt_data_end+0xf801b334>
1001b6b4:	d8802417 	ldw	r2,144(sp)
1001b6b8:	8821883a 	mov	r16,r17
1001b6bc:	d8001d85 	stb	zero,118(sp)
1001b6c0:	14400017 	ldw	r17,0(r2)
1001b6c4:	b811883a 	mov	r8,r23
1001b6c8:	15c00104 	addi	r23,r2,4
1001b6cc:	88026c26 	beq	r17,zero,1001c080 <___svfiprintf_internal_r+0x11dc>
1001b6d0:	d8c02017 	ldw	r3,128(sp)
1001b6d4:	18025f16 	blt	r3,zero,1001c054 <___svfiprintf_internal_r+0x11b0>
1001b6d8:	180d883a 	mov	r6,r3
1001b6dc:	000b883a 	mov	r5,zero
1001b6e0:	8809883a 	mov	r4,r17
1001b6e4:	da002d15 	stw	r8,180(sp)
1001b6e8:	00118dc0 	call	100118dc <memchr>
1001b6ec:	da002d17 	ldw	r8,180(sp)
1001b6f0:	1002a526 	beq	r2,zero,1001c188 <___svfiprintf_internal_r+0x12e4>
1001b6f4:	1469c83a 	sub	r20,r2,r17
1001b6f8:	dd401d83 	ldbu	r21,118(sp)
1001b6fc:	ddc02415 	stw	r23,144(sp)
1001b700:	d8002015 	stw	zero,128(sp)
1001b704:	003f0b06 	br	1001b334 <__alt_data_end+0xf801b334>
1001b708:	8c400814 	ori	r17,r17,32
1001b70c:	98c00007 	ldb	r3,0(r19)
1001b710:	003e3006 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b714:	8821883a 	mov	r16,r17
1001b718:	dc402103 	ldbu	r17,132(sp)
1001b71c:	b811883a 	mov	r8,r23
1001b720:	8c403fcc 	andi	r17,r17,255
1001b724:	8802b01e 	bne	r17,zero,1001c1e8 <___svfiprintf_internal_r+0x1344>
1001b728:	84000414 	ori	r16,r16,16
1001b72c:	8080080c 	andi	r2,r16,32
1001b730:	103fba1e 	bne	r2,zero,1001b61c <__alt_data_end+0xf801b61c>
1001b734:	8080040c 	andi	r2,r16,16
1001b738:	1001df1e 	bne	r2,zero,1001beb8 <___svfiprintf_internal_r+0x1014>
1001b73c:	8080100c 	andi	r2,r16,64
1001b740:	10023d26 	beq	r2,zero,1001c038 <___svfiprintf_internal_r+0x1194>
1001b744:	d8802417 	ldw	r2,144(sp)
1001b748:	1480000f 	ldh	r18,0(r2)
1001b74c:	10800104 	addi	r2,r2,4
1001b750:	d8802415 	stw	r2,144(sp)
1001b754:	9029d7fa 	srai	r20,r18,31
1001b758:	a005883a 	mov	r2,r20
1001b75c:	103fb60e 	bge	r2,zero,1001b638 <__alt_data_end+0xf801b638>
1001b760:	d9402017 	ldw	r5,128(sp)
1001b764:	04a5c83a 	sub	r18,zero,r18
1001b768:	05400b44 	movi	r21,45
1001b76c:	9004c03a 	cmpne	r2,r18,zero
1001b770:	0529c83a 	sub	r20,zero,r20
1001b774:	dd401d85 	stb	r21,118(sp)
1001b778:	a0a9c83a 	sub	r20,r20,r2
1001b77c:	28026c16 	blt	r5,zero,1001c130 <___svfiprintf_internal_r+0x128c>
1001b780:	00bfdfc4 	movi	r2,-129
1001b784:	80a0703a 	and	r16,r16,r2
1001b788:	a03fb31e 	bne	r20,zero,1001b658 <__alt_data_end+0xf801b658>
1001b78c:	00004606 	br	1001b8a8 <___svfiprintf_internal_r+0xa04>
1001b790:	9839883a 	mov	fp,r19
1001b794:	d8002515 	stw	zero,148(sp)
1001b798:	1c3ff404 	addi	r16,r3,-48
1001b79c:	0009883a 	mov	r4,zero
1001b7a0:	01400284 	movi	r5,10
1001b7a4:	0008ef00 	call	10008ef0 <__mulsi3>
1001b7a8:	e0c00007 	ldb	r3,0(fp)
1001b7ac:	8089883a 	add	r4,r16,r2
1001b7b0:	9cc00044 	addi	r19,r19,1
1001b7b4:	1c3ff404 	addi	r16,r3,-48
1001b7b8:	9839883a 	mov	fp,r19
1001b7bc:	a43ff82e 	bgeu	r20,r16,1001b7a0 <__alt_data_end+0xf801b7a0>
1001b7c0:	d9002515 	stw	r4,148(sp)
1001b7c4:	18bff804 	addi	r2,r3,-32
1001b7c8:	90be052e 	bgeu	r18,r2,1001afe0 <__alt_data_end+0xf801afe0>
1001b7cc:	8821883a 	mov	r16,r17
1001b7d0:	dc402103 	ldbu	r17,132(sp)
1001b7d4:	b811883a 	mov	r8,r23
1001b7d8:	8c403fcc 	andi	r17,r17,255
1001b7dc:	88028d1e 	bne	r17,zero,1001c214 <___svfiprintf_internal_r+0x1370>
1001b7e0:	1800ea26 	beq	r3,zero,1001bb8c <___svfiprintf_internal_r+0xce8>
1001b7e4:	04800044 	movi	r18,1
1001b7e8:	d8c01005 	stb	r3,64(sp)
1001b7ec:	d8001d85 	stb	zero,118(sp)
1001b7f0:	9029883a 	mov	r20,r18
1001b7f4:	dc401004 	addi	r17,sp,64
1001b7f8:	003f1306 	br	1001b448 <__alt_data_end+0xf801b448>
1001b7fc:	8c402014 	ori	r17,r17,128
1001b800:	98c00007 	ldb	r3,0(r19)
1001b804:	003df306 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001b808:	98c00007 	ldb	r3,0(r19)
1001b80c:	01000a84 	movi	r4,42
1001b810:	9f000044 	addi	fp,r19,1
1001b814:	19026326 	beq	r3,r4,1001c1a4 <___svfiprintf_internal_r+0x1300>
1001b818:	1c3ff404 	addi	r16,r3,-48
1001b81c:	0009883a 	mov	r4,zero
1001b820:	a4025636 	bltu	r20,r16,1001c17c <___svfiprintf_internal_r+0x12d8>
1001b824:	01400284 	movi	r5,10
1001b828:	0008ef00 	call	10008ef0 <__mulsi3>
1001b82c:	e0c00007 	ldb	r3,0(fp)
1001b830:	1409883a 	add	r4,r2,r16
1001b834:	e4c00044 	addi	r19,fp,1
1001b838:	1c3ff404 	addi	r16,r3,-48
1001b83c:	9839883a 	mov	fp,r19
1001b840:	a43ff82e 	bgeu	r20,r16,1001b824 <__alt_data_end+0xf801b824>
1001b844:	20020c16 	blt	r4,zero,1001c078 <___svfiprintf_internal_r+0x11d4>
1001b848:	d9002015 	stw	r4,128(sp)
1001b84c:	003de206 	br	1001afd8 <__alt_data_end+0xf801afd8>
1001b850:	8821883a 	mov	r16,r17
1001b854:	dc402103 	ldbu	r17,132(sp)
1001b858:	b811883a 	mov	r8,r23
1001b85c:	8c403fcc 	andi	r17,r17,255
1001b860:	8802721e 	bne	r17,zero,1001c22c <___svfiprintf_internal_r+0x1388>
1001b864:	84000414 	ori	r16,r16,16
1001b868:	8080080c 	andi	r2,r16,32
1001b86c:	103e9f1e 	bne	r2,zero,1001b2ec <__alt_data_end+0xf801b2ec>
1001b870:	8080040c 	andi	r2,r16,16
1001b874:	10015326 	beq	r2,zero,1001bdc4 <___svfiprintf_internal_r+0xf20>
1001b878:	d8c02417 	ldw	r3,144(sp)
1001b87c:	d9002017 	ldw	r4,128(sp)
1001b880:	d8001d85 	stb	zero,118(sp)
1001b884:	18800104 	addi	r2,r3,4
1001b888:	1c800017 	ldw	r18,0(r3)
1001b88c:	0029883a 	mov	r20,zero
1001b890:	20015516 	blt	r4,zero,1001bde8 <___svfiprintf_internal_r+0xf44>
1001b894:	00ffdfc4 	movi	r3,-129
1001b898:	d8802415 	stw	r2,144(sp)
1001b89c:	80e0703a 	and	r16,r16,r3
1001b8a0:	002b883a 	mov	r21,zero
1001b8a4:	903e9e26 	beq	r18,zero,1001b320 <__alt_data_end+0xf801b320>
1001b8a8:	00800244 	movi	r2,9
1001b8ac:	14bf6a36 	bltu	r2,r18,1001b658 <__alt_data_end+0xf801b658>
1001b8b0:	94800c04 	addi	r18,r18,48
1001b8b4:	dc8019c5 	stb	r18,103(sp)
1001b8b8:	dd002c17 	ldw	r20,176(sp)
1001b8bc:	dc4019c4 	addi	r17,sp,103
1001b8c0:	003e9c06 	br	1001b334 <__alt_data_end+0xf801b334>
1001b8c4:	8821883a 	mov	r16,r17
1001b8c8:	dc402103 	ldbu	r17,132(sp)
1001b8cc:	b811883a 	mov	r8,r23
1001b8d0:	8c403fcc 	andi	r17,r17,255
1001b8d4:	8802571e 	bne	r17,zero,1001c234 <___svfiprintf_internal_r+0x1390>
1001b8d8:	84000414 	ori	r16,r16,16
1001b8dc:	8080080c 	andi	r2,r16,32
1001b8e0:	103ea91e 	bne	r2,zero,1001b388 <__alt_data_end+0xf801b388>
1001b8e4:	8080040c 	andi	r2,r16,16
1001b8e8:	10018026 	beq	r2,zero,1001beec <___svfiprintf_internal_r+0x1048>
1001b8ec:	d9402417 	ldw	r5,144(sp)
1001b8f0:	d8c02017 	ldw	r3,128(sp)
1001b8f4:	d8001d85 	stb	zero,118(sp)
1001b8f8:	28800104 	addi	r2,r5,4
1001b8fc:	2c800017 	ldw	r18,0(r5)
1001b900:	0029883a 	mov	r20,zero
1001b904:	18018216 	blt	r3,zero,1001bf10 <___svfiprintf_internal_r+0x106c>
1001b908:	00ffdfc4 	movi	r3,-129
1001b90c:	d8802415 	stw	r2,144(sp)
1001b910:	80e0703a 	and	r16,r16,r3
1001b914:	903ea81e 	bne	r18,zero,1001b3b8 <__alt_data_end+0xf801b3b8>
1001b918:	d8802017 	ldw	r2,128(sp)
1001b91c:	002b883a 	mov	r21,zero
1001b920:	1001f226 	beq	r2,zero,1001c0ec <___svfiprintf_internal_r+0x1248>
1001b924:	0025883a 	mov	r18,zero
1001b928:	0029883a 	mov	r20,zero
1001b92c:	003ea306 	br	1001b3bc <__alt_data_end+0xf801b3bc>
1001b930:	d8c01c17 	ldw	r3,112(sp)
1001b934:	d8801b17 	ldw	r2,108(sp)
1001b938:	d9001d87 	ldb	r4,118(sp)
1001b93c:	20000b26 	beq	r4,zero,1001b96c <___svfiprintf_internal_r+0xac8>
1001b940:	d9001d84 	addi	r4,sp,118
1001b944:	18c00044 	addi	r3,r3,1
1001b948:	10800044 	addi	r2,r2,1
1001b94c:	41000015 	stw	r4,0(r8)
1001b950:	01000044 	movi	r4,1
1001b954:	41000115 	stw	r4,4(r8)
1001b958:	d8c01c15 	stw	r3,112(sp)
1001b95c:	d8801b15 	stw	r2,108(sp)
1001b960:	010001c4 	movi	r4,7
1001b964:	2080f316 	blt	r4,r2,1001bd34 <___svfiprintf_internal_r+0xe90>
1001b968:	42000204 	addi	r8,r8,8
1001b96c:	d9402117 	ldw	r5,132(sp)
1001b970:	28000b26 	beq	r5,zero,1001b9a0 <___svfiprintf_internal_r+0xafc>
1001b974:	d9001d04 	addi	r4,sp,116
1001b978:	18c00084 	addi	r3,r3,2
1001b97c:	10800044 	addi	r2,r2,1
1001b980:	41000015 	stw	r4,0(r8)
1001b984:	01000084 	movi	r4,2
1001b988:	41000115 	stw	r4,4(r8)
1001b98c:	d8c01c15 	stw	r3,112(sp)
1001b990:	d8801b15 	stw	r2,108(sp)
1001b994:	010001c4 	movi	r4,7
1001b998:	2080ef16 	blt	r4,r2,1001bd58 <___svfiprintf_internal_r+0xeb4>
1001b99c:	42000204 	addi	r8,r8,8
1001b9a0:	d9402217 	ldw	r5,136(sp)
1001b9a4:	01002004 	movi	r4,128
1001b9a8:	29008f26 	beq	r5,r4,1001bbe8 <___svfiprintf_internal_r+0xd44>
1001b9ac:	d9002017 	ldw	r4,128(sp)
1001b9b0:	252fc83a 	sub	r23,r4,r20
1001b9b4:	05c0310e 	bge	zero,r23,1001ba7c <___svfiprintf_internal_r+0xbd8>
1001b9b8:	07000404 	movi	fp,16
1001b9bc:	e5c17d0e 	bge	fp,r23,1001bfb4 <___svfiprintf_internal_r+0x1110>
1001b9c0:	010400b4 	movhi	r4,4098
1001b9c4:	210cc304 	addi	r4,r4,13068
1001b9c8:	dc002015 	stw	r16,128(sp)
1001b9cc:	dc402215 	stw	r17,136(sp)
1001b9d0:	d9002115 	stw	r4,132(sp)
1001b9d4:	b823883a 	mov	r17,r23
1001b9d8:	054001c4 	movi	r21,7
1001b9dc:	982f883a 	mov	r23,r19
1001b9e0:	dc002717 	ldw	r16,156(sp)
1001b9e4:	9027883a 	mov	r19,r18
1001b9e8:	dc802317 	ldw	r18,140(sp)
1001b9ec:	00000306 	br	1001b9fc <___svfiprintf_internal_r+0xb58>
1001b9f0:	8c7ffc04 	addi	r17,r17,-16
1001b9f4:	42000204 	addi	r8,r8,8
1001b9f8:	e440110e 	bge	fp,r17,1001ba40 <___svfiprintf_internal_r+0xb9c>
1001b9fc:	18c00404 	addi	r3,r3,16
1001ba00:	10800044 	addi	r2,r2,1
1001ba04:	45800015 	stw	r22,0(r8)
1001ba08:	47000115 	stw	fp,4(r8)
1001ba0c:	d8c01c15 	stw	r3,112(sp)
1001ba10:	d8801b15 	stw	r2,108(sp)
1001ba14:	a8bff60e 	bge	r21,r2,1001b9f0 <__alt_data_end+0xf801b9f0>
1001ba18:	d9801a04 	addi	r6,sp,104
1001ba1c:	900b883a 	mov	r5,r18
1001ba20:	8009883a 	mov	r4,r16
1001ba24:	001acd40 	call	1001acd4 <__ssprint_r>
1001ba28:	10005e1e 	bne	r2,zero,1001bba4 <___svfiprintf_internal_r+0xd00>
1001ba2c:	8c7ffc04 	addi	r17,r17,-16
1001ba30:	d8c01c17 	ldw	r3,112(sp)
1001ba34:	d8801b17 	ldw	r2,108(sp)
1001ba38:	d811883a 	mov	r8,sp
1001ba3c:	e47fef16 	blt	fp,r17,1001b9fc <__alt_data_end+0xf801b9fc>
1001ba40:	9825883a 	mov	r18,r19
1001ba44:	dc002017 	ldw	r16,128(sp)
1001ba48:	b827883a 	mov	r19,r23
1001ba4c:	882f883a 	mov	r23,r17
1001ba50:	dc402217 	ldw	r17,136(sp)
1001ba54:	d9402117 	ldw	r5,132(sp)
1001ba58:	1dc7883a 	add	r3,r3,r23
1001ba5c:	10800044 	addi	r2,r2,1
1001ba60:	41400015 	stw	r5,0(r8)
1001ba64:	45c00115 	stw	r23,4(r8)
1001ba68:	d8c01c15 	stw	r3,112(sp)
1001ba6c:	d8801b15 	stw	r2,108(sp)
1001ba70:	010001c4 	movi	r4,7
1001ba74:	2080a616 	blt	r4,r2,1001bd10 <___svfiprintf_internal_r+0xe6c>
1001ba78:	42000204 	addi	r8,r8,8
1001ba7c:	a0c7883a 	add	r3,r20,r3
1001ba80:	10800044 	addi	r2,r2,1
1001ba84:	44400015 	stw	r17,0(r8)
1001ba88:	45000115 	stw	r20,4(r8)
1001ba8c:	d8c01c15 	stw	r3,112(sp)
1001ba90:	d8801b15 	stw	r2,108(sp)
1001ba94:	010001c4 	movi	r4,7
1001ba98:	20808816 	blt	r4,r2,1001bcbc <___svfiprintf_internal_r+0xe18>
1001ba9c:	42000204 	addi	r8,r8,8
1001baa0:	8400010c 	andi	r16,r16,4
1001baa4:	80002c26 	beq	r16,zero,1001bb58 <___svfiprintf_internal_r+0xcb4>
1001baa8:	d8802517 	ldw	r2,148(sp)
1001baac:	14a1c83a 	sub	r16,r2,r18
1001bab0:	0400290e 	bge	zero,r16,1001bb58 <___svfiprintf_internal_r+0xcb4>
1001bab4:	04400404 	movi	r17,16
1001bab8:	d8801b17 	ldw	r2,108(sp)
1001babc:	8c01a70e 	bge	r17,r16,1001c15c <___svfiprintf_internal_r+0x12b8>
1001bac0:	014400b4 	movhi	r5,4098
1001bac4:	294cc704 	addi	r5,r5,13084
1001bac8:	d9402815 	stw	r5,160(sp)
1001bacc:	050001c4 	movi	r20,7
1001bad0:	dd402717 	ldw	r21,156(sp)
1001bad4:	ddc02317 	ldw	r23,140(sp)
1001bad8:	00000306 	br	1001bae8 <___svfiprintf_internal_r+0xc44>
1001badc:	843ffc04 	addi	r16,r16,-16
1001bae0:	42000204 	addi	r8,r8,8
1001bae4:	8c00130e 	bge	r17,r16,1001bb34 <___svfiprintf_internal_r+0xc90>
1001bae8:	010400b4 	movhi	r4,4098
1001baec:	18c00404 	addi	r3,r3,16
1001baf0:	10800044 	addi	r2,r2,1
1001baf4:	210cc704 	addi	r4,r4,13084
1001baf8:	41000015 	stw	r4,0(r8)
1001bafc:	44400115 	stw	r17,4(r8)
1001bb00:	d8c01c15 	stw	r3,112(sp)
1001bb04:	d8801b15 	stw	r2,108(sp)
1001bb08:	a0bff40e 	bge	r20,r2,1001badc <__alt_data_end+0xf801badc>
1001bb0c:	d9801a04 	addi	r6,sp,104
1001bb10:	b80b883a 	mov	r5,r23
1001bb14:	a809883a 	mov	r4,r21
1001bb18:	001acd40 	call	1001acd4 <__ssprint_r>
1001bb1c:	1000211e 	bne	r2,zero,1001bba4 <___svfiprintf_internal_r+0xd00>
1001bb20:	843ffc04 	addi	r16,r16,-16
1001bb24:	d8c01c17 	ldw	r3,112(sp)
1001bb28:	d8801b17 	ldw	r2,108(sp)
1001bb2c:	d811883a 	mov	r8,sp
1001bb30:	8c3fed16 	blt	r17,r16,1001bae8 <__alt_data_end+0xf801bae8>
1001bb34:	d9402817 	ldw	r5,160(sp)
1001bb38:	1c07883a 	add	r3,r3,r16
1001bb3c:	10800044 	addi	r2,r2,1
1001bb40:	41400015 	stw	r5,0(r8)
1001bb44:	44000115 	stw	r16,4(r8)
1001bb48:	d8c01c15 	stw	r3,112(sp)
1001bb4c:	d8801b15 	stw	r2,108(sp)
1001bb50:	010001c4 	movi	r4,7
1001bb54:	2080b516 	blt	r4,r2,1001be2c <___svfiprintf_internal_r+0xf88>
1001bb58:	d8802517 	ldw	r2,148(sp)
1001bb5c:	1480010e 	bge	r2,r18,1001bb64 <___svfiprintf_internal_r+0xcc0>
1001bb60:	9005883a 	mov	r2,r18
1001bb64:	d9002617 	ldw	r4,152(sp)
1001bb68:	2089883a 	add	r4,r4,r2
1001bb6c:	d9002615 	stw	r4,152(sp)
1001bb70:	18005a1e 	bne	r3,zero,1001bcdc <___svfiprintf_internal_r+0xe38>
1001bb74:	98800007 	ldb	r2,0(r19)
1001bb78:	d8001b15 	stw	zero,108(sp)
1001bb7c:	d811883a 	mov	r8,sp
1001bb80:	103cec1e 	bne	r2,zero,1001af34 <__alt_data_end+0xf801af34>
1001bb84:	9825883a 	mov	r18,r19
1001bb88:	003d0206 	br	1001af94 <__alt_data_end+0xf801af94>
1001bb8c:	d8801c17 	ldw	r2,112(sp)
1001bb90:	10000426 	beq	r2,zero,1001bba4 <___svfiprintf_internal_r+0xd00>
1001bb94:	d9402317 	ldw	r5,140(sp)
1001bb98:	d9002717 	ldw	r4,156(sp)
1001bb9c:	d9801a04 	addi	r6,sp,104
1001bba0:	001acd40 	call	1001acd4 <__ssprint_r>
1001bba4:	d9402317 	ldw	r5,140(sp)
1001bba8:	d8802617 	ldw	r2,152(sp)
1001bbac:	28c0030b 	ldhu	r3,12(r5)
1001bbb0:	18c0100c 	andi	r3,r3,64
1001bbb4:	18015c1e 	bne	r3,zero,1001c128 <___svfiprintf_internal_r+0x1284>
1001bbb8:	dfc03717 	ldw	ra,220(sp)
1001bbbc:	df003617 	ldw	fp,216(sp)
1001bbc0:	ddc03517 	ldw	r23,212(sp)
1001bbc4:	dd803417 	ldw	r22,208(sp)
1001bbc8:	dd403317 	ldw	r21,204(sp)
1001bbcc:	dd003217 	ldw	r20,200(sp)
1001bbd0:	dcc03117 	ldw	r19,196(sp)
1001bbd4:	dc803017 	ldw	r18,192(sp)
1001bbd8:	dc402f17 	ldw	r17,188(sp)
1001bbdc:	dc002e17 	ldw	r16,184(sp)
1001bbe0:	dec03804 	addi	sp,sp,224
1001bbe4:	f800283a 	ret
1001bbe8:	d9002517 	ldw	r4,148(sp)
1001bbec:	24afc83a 	sub	r23,r4,r18
1001bbf0:	05ff6e0e 	bge	zero,r23,1001b9ac <__alt_data_end+0xf801b9ac>
1001bbf4:	07000404 	movi	fp,16
1001bbf8:	e5c15c0e 	bge	fp,r23,1001c16c <___svfiprintf_internal_r+0x12c8>
1001bbfc:	010400b4 	movhi	r4,4098
1001bc00:	210cc304 	addi	r4,r4,13068
1001bc04:	dc002215 	stw	r16,136(sp)
1001bc08:	dc402815 	stw	r17,160(sp)
1001bc0c:	d9002115 	stw	r4,132(sp)
1001bc10:	b823883a 	mov	r17,r23
1001bc14:	054001c4 	movi	r21,7
1001bc18:	982f883a 	mov	r23,r19
1001bc1c:	dc002717 	ldw	r16,156(sp)
1001bc20:	9027883a 	mov	r19,r18
1001bc24:	dc802317 	ldw	r18,140(sp)
1001bc28:	00000306 	br	1001bc38 <___svfiprintf_internal_r+0xd94>
1001bc2c:	8c7ffc04 	addi	r17,r17,-16
1001bc30:	42000204 	addi	r8,r8,8
1001bc34:	e440110e 	bge	fp,r17,1001bc7c <___svfiprintf_internal_r+0xdd8>
1001bc38:	18c00404 	addi	r3,r3,16
1001bc3c:	10800044 	addi	r2,r2,1
1001bc40:	45800015 	stw	r22,0(r8)
1001bc44:	47000115 	stw	fp,4(r8)
1001bc48:	d8c01c15 	stw	r3,112(sp)
1001bc4c:	d8801b15 	stw	r2,108(sp)
1001bc50:	a8bff60e 	bge	r21,r2,1001bc2c <__alt_data_end+0xf801bc2c>
1001bc54:	d9801a04 	addi	r6,sp,104
1001bc58:	900b883a 	mov	r5,r18
1001bc5c:	8009883a 	mov	r4,r16
1001bc60:	001acd40 	call	1001acd4 <__ssprint_r>
1001bc64:	103fcf1e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bc68:	8c7ffc04 	addi	r17,r17,-16
1001bc6c:	d8c01c17 	ldw	r3,112(sp)
1001bc70:	d8801b17 	ldw	r2,108(sp)
1001bc74:	d811883a 	mov	r8,sp
1001bc78:	e47fef16 	blt	fp,r17,1001bc38 <__alt_data_end+0xf801bc38>
1001bc7c:	9825883a 	mov	r18,r19
1001bc80:	dc002217 	ldw	r16,136(sp)
1001bc84:	b827883a 	mov	r19,r23
1001bc88:	882f883a 	mov	r23,r17
1001bc8c:	dc402817 	ldw	r17,160(sp)
1001bc90:	d9402117 	ldw	r5,132(sp)
1001bc94:	1dc7883a 	add	r3,r3,r23
1001bc98:	10800044 	addi	r2,r2,1
1001bc9c:	41400015 	stw	r5,0(r8)
1001bca0:	45c00115 	stw	r23,4(r8)
1001bca4:	d8c01c15 	stw	r3,112(sp)
1001bca8:	d8801b15 	stw	r2,108(sp)
1001bcac:	010001c4 	movi	r4,7
1001bcb0:	2080b716 	blt	r4,r2,1001bf90 <___svfiprintf_internal_r+0x10ec>
1001bcb4:	42000204 	addi	r8,r8,8
1001bcb8:	003f3c06 	br	1001b9ac <__alt_data_end+0xf801b9ac>
1001bcbc:	d9402317 	ldw	r5,140(sp)
1001bcc0:	d9002717 	ldw	r4,156(sp)
1001bcc4:	d9801a04 	addi	r6,sp,104
1001bcc8:	001acd40 	call	1001acd4 <__ssprint_r>
1001bccc:	103fb51e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bcd0:	d8c01c17 	ldw	r3,112(sp)
1001bcd4:	d811883a 	mov	r8,sp
1001bcd8:	003f7106 	br	1001baa0 <__alt_data_end+0xf801baa0>
1001bcdc:	d9402317 	ldw	r5,140(sp)
1001bce0:	d9002717 	ldw	r4,156(sp)
1001bce4:	d9801a04 	addi	r6,sp,104
1001bce8:	001acd40 	call	1001acd4 <__ssprint_r>
1001bcec:	103fa126 	beq	r2,zero,1001bb74 <__alt_data_end+0xf801bb74>
1001bcf0:	003fac06 	br	1001bba4 <__alt_data_end+0xf801bba4>
1001bcf4:	d9402317 	ldw	r5,140(sp)
1001bcf8:	d9002717 	ldw	r4,156(sp)
1001bcfc:	d9801a04 	addi	r6,sp,104
1001bd00:	001acd40 	call	1001acd4 <__ssprint_r>
1001bd04:	103fa71e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bd08:	d811883a 	mov	r8,sp
1001bd0c:	003c9e06 	br	1001af88 <__alt_data_end+0xf801af88>
1001bd10:	d9402317 	ldw	r5,140(sp)
1001bd14:	d9002717 	ldw	r4,156(sp)
1001bd18:	d9801a04 	addi	r6,sp,104
1001bd1c:	001acd40 	call	1001acd4 <__ssprint_r>
1001bd20:	103fa01e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bd24:	d8c01c17 	ldw	r3,112(sp)
1001bd28:	d8801b17 	ldw	r2,108(sp)
1001bd2c:	d811883a 	mov	r8,sp
1001bd30:	003f5206 	br	1001ba7c <__alt_data_end+0xf801ba7c>
1001bd34:	d9402317 	ldw	r5,140(sp)
1001bd38:	d9002717 	ldw	r4,156(sp)
1001bd3c:	d9801a04 	addi	r6,sp,104
1001bd40:	001acd40 	call	1001acd4 <__ssprint_r>
1001bd44:	103f971e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bd48:	d8c01c17 	ldw	r3,112(sp)
1001bd4c:	d8801b17 	ldw	r2,108(sp)
1001bd50:	d811883a 	mov	r8,sp
1001bd54:	003f0506 	br	1001b96c <__alt_data_end+0xf801b96c>
1001bd58:	d9402317 	ldw	r5,140(sp)
1001bd5c:	d9002717 	ldw	r4,156(sp)
1001bd60:	d9801a04 	addi	r6,sp,104
1001bd64:	001acd40 	call	1001acd4 <__ssprint_r>
1001bd68:	103f8e1e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bd6c:	d8c01c17 	ldw	r3,112(sp)
1001bd70:	d8801b17 	ldw	r2,108(sp)
1001bd74:	d811883a 	mov	r8,sp
1001bd78:	003f0906 	br	1001b9a0 <__alt_data_end+0xf801b9a0>
1001bd7c:	d9402017 	ldw	r5,128(sp)
1001bd80:	d8001d85 	stb	zero,118(sp)
1001bd84:	28007716 	blt	r5,zero,1001bf64 <___svfiprintf_internal_r+0x10c0>
1001bd88:	00ffdfc4 	movi	r3,-129
1001bd8c:	9504b03a 	or	r2,r18,r20
1001bd90:	80e0703a 	and	r16,r16,r3
1001bd94:	103d3926 	beq	r2,zero,1001b27c <__alt_data_end+0xf801b27c>
1001bd98:	002b883a 	mov	r21,zero
1001bd9c:	003d3c06 	br	1001b290 <__alt_data_end+0xf801b290>
1001bda0:	d9402317 	ldw	r5,140(sp)
1001bda4:	d9002717 	ldw	r4,156(sp)
1001bda8:	d9801a04 	addi	r6,sp,104
1001bdac:	001acd40 	call	1001acd4 <__ssprint_r>
1001bdb0:	103f7c1e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bdb4:	d8c01c17 	ldw	r3,112(sp)
1001bdb8:	d8801b17 	ldw	r2,108(sp)
1001bdbc:	d811883a 	mov	r8,sp
1001bdc0:	003edd06 	br	1001b938 <__alt_data_end+0xf801b938>
1001bdc4:	8080100c 	andi	r2,r16,64
1001bdc8:	d8001d85 	stb	zero,118(sp)
1001bdcc:	10008426 	beq	r2,zero,1001bfe0 <___svfiprintf_internal_r+0x113c>
1001bdd0:	d9402417 	ldw	r5,144(sp)
1001bdd4:	d8c02017 	ldw	r3,128(sp)
1001bdd8:	0029883a 	mov	r20,zero
1001bddc:	28800104 	addi	r2,r5,4
1001bde0:	2c80000b 	ldhu	r18,0(r5)
1001bde4:	183eab0e 	bge	r3,zero,1001b894 <__alt_data_end+0xf801b894>
1001bde8:	d8802415 	stw	r2,144(sp)
1001bdec:	002b883a 	mov	r21,zero
1001bdf0:	9504b03a 	or	r2,r18,r20
1001bdf4:	103e171e 	bne	r2,zero,1001b654 <__alt_data_end+0xf801b654>
1001bdf8:	00800044 	movi	r2,1
1001bdfc:	10803fcc 	andi	r2,r2,255
1001be00:	00c00044 	movi	r3,1
1001be04:	10c05c26 	beq	r2,r3,1001bf78 <___svfiprintf_internal_r+0x10d4>
1001be08:	00c00084 	movi	r3,2
1001be0c:	10fd1e26 	beq	r2,r3,1001b288 <__alt_data_end+0xf801b288>
1001be10:	003ec406 	br	1001b924 <__alt_data_end+0xf801b924>
1001be14:	d9401e17 	ldw	r5,120(sp)
1001be18:	2c69c83a 	sub	r20,r5,r17
1001be1c:	003d4506 	br	1001b334 <__alt_data_end+0xf801b334>
1001be20:	d8802415 	stw	r2,144(sp)
1001be24:	98c00007 	ldb	r3,0(r19)
1001be28:	003c6a06 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001be2c:	d9402317 	ldw	r5,140(sp)
1001be30:	d9002717 	ldw	r4,156(sp)
1001be34:	d9801a04 	addi	r6,sp,104
1001be38:	001acd40 	call	1001acd4 <__ssprint_r>
1001be3c:	103f591e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001be40:	d8c01c17 	ldw	r3,112(sp)
1001be44:	003f4406 	br	1001bb58 <__alt_data_end+0xf801bb58>
1001be48:	014400b4 	movhi	r5,4098
1001be4c:	294b5004 	addi	r5,r5,11584
1001be50:	d9402915 	stw	r5,164(sp)
1001be54:	003d0906 	br	1001b27c <__alt_data_end+0xf801b27c>
1001be58:	d8c02417 	ldw	r3,144(sp)
1001be5c:	d9002617 	ldw	r4,152(sp)
1001be60:	d9402417 	ldw	r5,144(sp)
1001be64:	18800017 	ldw	r2,0(r3)
1001be68:	2007d7fa 	srai	r3,r4,31
1001be6c:	29400104 	addi	r5,r5,4
1001be70:	d9402415 	stw	r5,144(sp)
1001be74:	11000015 	stw	r4,0(r2)
1001be78:	10c00115 	stw	r3,4(r2)
1001be7c:	003c2b06 	br	1001af2c <__alt_data_end+0xf801af2c>
1001be80:	d8c01d45 	stb	r3,117(sp)
1001be84:	d8c02017 	ldw	r3,128(sp)
1001be88:	00800c04 	movi	r2,48
1001be8c:	d8801d05 	stb	r2,116(sp)
1001be90:	d8001d85 	stb	zero,118(sp)
1001be94:	80800094 	ori	r2,r16,2
1001be98:	1800ac16 	blt	r3,zero,1001c14c <___svfiprintf_internal_r+0x12a8>
1001be9c:	00bfdfc4 	movi	r2,-129
1001bea0:	80a0703a 	and	r16,r16,r2
1001bea4:	84000094 	ori	r16,r16,2
1001bea8:	002b883a 	mov	r21,zero
1001beac:	003cf806 	br	1001b290 <__alt_data_end+0xf801b290>
1001beb0:	98c00007 	ldb	r3,0(r19)
1001beb4:	003c4706 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001beb8:	d9402417 	ldw	r5,144(sp)
1001bebc:	2c800017 	ldw	r18,0(r5)
1001bec0:	29400104 	addi	r5,r5,4
1001bec4:	d9402415 	stw	r5,144(sp)
1001bec8:	9029d7fa 	srai	r20,r18,31
1001becc:	a005883a 	mov	r2,r20
1001bed0:	003dd806 	br	1001b634 <__alt_data_end+0xf801b634>
1001bed4:	d9402417 	ldw	r5,144(sp)
1001bed8:	0029883a 	mov	r20,zero
1001bedc:	2c800017 	ldw	r18,0(r5)
1001bee0:	29400104 	addi	r5,r5,4
1001bee4:	d9402415 	stw	r5,144(sp)
1001bee8:	003cdb06 	br	1001b258 <__alt_data_end+0xf801b258>
1001beec:	8080100c 	andi	r2,r16,64
1001bef0:	d8001d85 	stb	zero,118(sp)
1001bef4:	10003326 	beq	r2,zero,1001bfc4 <___svfiprintf_internal_r+0x1120>
1001bef8:	d9002417 	ldw	r4,144(sp)
1001befc:	d9402017 	ldw	r5,128(sp)
1001bf00:	0029883a 	mov	r20,zero
1001bf04:	20800104 	addi	r2,r4,4
1001bf08:	2480000b 	ldhu	r18,0(r4)
1001bf0c:	283e7e0e 	bge	r5,zero,1001b908 <__alt_data_end+0xf801b908>
1001bf10:	9506b03a 	or	r3,r18,r20
1001bf14:	d8802415 	stw	r2,144(sp)
1001bf18:	183d271e 	bne	r3,zero,1001b3b8 <__alt_data_end+0xf801b3b8>
1001bf1c:	002b883a 	mov	r21,zero
1001bf20:	0005883a 	mov	r2,zero
1001bf24:	003fb506 	br	1001bdfc <__alt_data_end+0xf801bdfc>
1001bf28:	98c00043 	ldbu	r3,1(r19)
1001bf2c:	8c400814 	ori	r17,r17,32
1001bf30:	9cc00044 	addi	r19,r19,1
1001bf34:	18c03fcc 	andi	r3,r3,255
1001bf38:	18c0201c 	xori	r3,r3,128
1001bf3c:	18ffe004 	addi	r3,r3,-128
1001bf40:	003c2406 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001bf44:	d8c02415 	stw	r3,144(sp)
1001bf48:	002b883a 	mov	r21,zero
1001bf4c:	003fa806 	br	1001bdf0 <__alt_data_end+0xf801bdf0>
1001bf50:	010400b4 	movhi	r4,4098
1001bf54:	210b5004 	addi	r4,r4,11584
1001bf58:	d9002915 	stw	r4,164(sp)
1001bf5c:	d8c02415 	stw	r3,144(sp)
1001bf60:	1021883a 	mov	r16,r2
1001bf64:	9504b03a 	or	r2,r18,r20
1001bf68:	103f8b1e 	bne	r2,zero,1001bd98 <__alt_data_end+0xf801bd98>
1001bf6c:	002b883a 	mov	r21,zero
1001bf70:	00800084 	movi	r2,2
1001bf74:	003fa106 	br	1001bdfc <__alt_data_end+0xf801bdfc>
1001bf78:	0025883a 	mov	r18,zero
1001bf7c:	94800c04 	addi	r18,r18,48
1001bf80:	dc8019c5 	stb	r18,103(sp)
1001bf84:	dd002c17 	ldw	r20,176(sp)
1001bf88:	dc4019c4 	addi	r17,sp,103
1001bf8c:	003ce906 	br	1001b334 <__alt_data_end+0xf801b334>
1001bf90:	d9402317 	ldw	r5,140(sp)
1001bf94:	d9002717 	ldw	r4,156(sp)
1001bf98:	d9801a04 	addi	r6,sp,104
1001bf9c:	001acd40 	call	1001acd4 <__ssprint_r>
1001bfa0:	103f001e 	bne	r2,zero,1001bba4 <__alt_data_end+0xf801bba4>
1001bfa4:	d8c01c17 	ldw	r3,112(sp)
1001bfa8:	d8801b17 	ldw	r2,108(sp)
1001bfac:	d811883a 	mov	r8,sp
1001bfb0:	003e7e06 	br	1001b9ac <__alt_data_end+0xf801b9ac>
1001bfb4:	014400b4 	movhi	r5,4098
1001bfb8:	294cc304 	addi	r5,r5,13068
1001bfbc:	d9402115 	stw	r5,132(sp)
1001bfc0:	003ea406 	br	1001ba54 <__alt_data_end+0xf801ba54>
1001bfc4:	d8c02417 	ldw	r3,144(sp)
1001bfc8:	d9002017 	ldw	r4,128(sp)
1001bfcc:	0029883a 	mov	r20,zero
1001bfd0:	18800104 	addi	r2,r3,4
1001bfd4:	1c800017 	ldw	r18,0(r3)
1001bfd8:	203e4b0e 	bge	r4,zero,1001b908 <__alt_data_end+0xf801b908>
1001bfdc:	003fcc06 	br	1001bf10 <__alt_data_end+0xf801bf10>
1001bfe0:	d9002417 	ldw	r4,144(sp)
1001bfe4:	d9402017 	ldw	r5,128(sp)
1001bfe8:	0029883a 	mov	r20,zero
1001bfec:	20800104 	addi	r2,r4,4
1001bff0:	24800017 	ldw	r18,0(r4)
1001bff4:	283e270e 	bge	r5,zero,1001b894 <__alt_data_end+0xf801b894>
1001bff8:	003f7b06 	br	1001bde8 <__alt_data_end+0xf801bde8>
1001bffc:	8400100c 	andi	r16,r16,64
1001c000:	80003326 	beq	r16,zero,1001c0d0 <___svfiprintf_internal_r+0x122c>
1001c004:	d9402417 	ldw	r5,144(sp)
1001c008:	d8c02617 	ldw	r3,152(sp)
1001c00c:	28800017 	ldw	r2,0(r5)
1001c010:	29400104 	addi	r5,r5,4
1001c014:	d9402415 	stw	r5,144(sp)
1001c018:	10c0000d 	sth	r3,0(r2)
1001c01c:	003bc306 	br	1001af2c <__alt_data_end+0xf801af2c>
1001c020:	d9002417 	ldw	r4,144(sp)
1001c024:	0029883a 	mov	r20,zero
1001c028:	24800017 	ldw	r18,0(r4)
1001c02c:	21000104 	addi	r4,r4,4
1001c030:	d9002415 	stw	r4,144(sp)
1001c034:	003c8806 	br	1001b258 <__alt_data_end+0xf801b258>
1001c038:	d8c02417 	ldw	r3,144(sp)
1001c03c:	1c800017 	ldw	r18,0(r3)
1001c040:	18c00104 	addi	r3,r3,4
1001c044:	d8c02415 	stw	r3,144(sp)
1001c048:	9029d7fa 	srai	r20,r18,31
1001c04c:	a005883a 	mov	r2,r20
1001c050:	003d7806 	br	1001b634 <__alt_data_end+0xf801b634>
1001c054:	8809883a 	mov	r4,r17
1001c058:	da002d15 	stw	r8,180(sp)
1001c05c:	0009fe40 	call	10009fe4 <strlen>
1001c060:	1029883a 	mov	r20,r2
1001c064:	dd401d83 	ldbu	r21,118(sp)
1001c068:	ddc02415 	stw	r23,144(sp)
1001c06c:	d8002015 	stw	zero,128(sp)
1001c070:	da002d17 	ldw	r8,180(sp)
1001c074:	003caf06 	br	1001b334 <__alt_data_end+0xf801b334>
1001c078:	013fffc4 	movi	r4,-1
1001c07c:	003df206 	br	1001b848 <__alt_data_end+0xf801b848>
1001c080:	dd002017 	ldw	r20,128(sp)
1001c084:	00800184 	movi	r2,6
1001c088:	1500012e 	bgeu	r2,r20,1001c090 <___svfiprintf_internal_r+0x11ec>
1001c08c:	1029883a 	mov	r20,r2
1001c090:	a025883a 	mov	r18,r20
1001c094:	a0004116 	blt	r20,zero,1001c19c <___svfiprintf_internal_r+0x12f8>
1001c098:	044400b4 	movhi	r17,4098
1001c09c:	ddc02415 	stw	r23,144(sp)
1001c0a0:	8c4b5504 	addi	r17,r17,11604
1001c0a4:	003ce806 	br	1001b448 <__alt_data_end+0xf801b448>
1001c0a8:	04001004 	movi	r16,64
1001c0ac:	800b883a 	mov	r5,r16
1001c0b0:	0010eac0 	call	10010eac <_malloc_r>
1001c0b4:	d8c02317 	ldw	r3,140(sp)
1001c0b8:	18800015 	stw	r2,0(r3)
1001c0bc:	18800415 	stw	r2,16(r3)
1001c0c0:	10004d26 	beq	r2,zero,1001c1f8 <___svfiprintf_internal_r+0x1354>
1001c0c4:	d9402317 	ldw	r5,140(sp)
1001c0c8:	2c000515 	stw	r16,20(r5)
1001c0cc:	003b8906 	br	1001aef4 <__alt_data_end+0xf801aef4>
1001c0d0:	d9002417 	ldw	r4,144(sp)
1001c0d4:	d9402617 	ldw	r5,152(sp)
1001c0d8:	20800017 	ldw	r2,0(r4)
1001c0dc:	21000104 	addi	r4,r4,4
1001c0e0:	d9002415 	stw	r4,144(sp)
1001c0e4:	11400015 	stw	r5,0(r2)
1001c0e8:	003b9006 	br	1001af2c <__alt_data_end+0xf801af2c>
1001c0ec:	8080004c 	andi	r2,r16,1
1001c0f0:	002b883a 	mov	r21,zero
1001c0f4:	10000526 	beq	r2,zero,1001c10c <___svfiprintf_internal_r+0x1268>
1001c0f8:	00800c04 	movi	r2,48
1001c0fc:	d88019c5 	stb	r2,103(sp)
1001c100:	dd002c17 	ldw	r20,176(sp)
1001c104:	dc4019c4 	addi	r17,sp,103
1001c108:	003c8a06 	br	1001b334 <__alt_data_end+0xf801b334>
1001c10c:	0029883a 	mov	r20,zero
1001c110:	dc401a04 	addi	r17,sp,104
1001c114:	003c8706 	br	1001b334 <__alt_data_end+0xf801b334>
1001c118:	014400b4 	movhi	r5,4098
1001c11c:	294cc704 	addi	r5,r5,13084
1001c120:	d9402815 	stw	r5,160(sp)
1001c124:	003cff06 	br	1001b524 <__alt_data_end+0xf801b524>
1001c128:	00bfffc4 	movi	r2,-1
1001c12c:	003ea206 	br	1001bbb8 <__alt_data_end+0xf801bbb8>
1001c130:	00800044 	movi	r2,1
1001c134:	10803fcc 	andi	r2,r2,255
1001c138:	00c00044 	movi	r3,1
1001c13c:	10fd4526 	beq	r2,r3,1001b654 <__alt_data_end+0xf801b654>
1001c140:	00c00084 	movi	r3,2
1001c144:	10fc5226 	beq	r2,r3,1001b290 <__alt_data_end+0xf801b290>
1001c148:	003c9c06 	br	1001b3bc <__alt_data_end+0xf801b3bc>
1001c14c:	1021883a 	mov	r16,r2
1001c150:	002b883a 	mov	r21,zero
1001c154:	00800084 	movi	r2,2
1001c158:	003ff606 	br	1001c134 <__alt_data_end+0xf801c134>
1001c15c:	010400b4 	movhi	r4,4098
1001c160:	210cc704 	addi	r4,r4,13084
1001c164:	d9002815 	stw	r4,160(sp)
1001c168:	003e7206 	br	1001bb34 <__alt_data_end+0xf801bb34>
1001c16c:	014400b4 	movhi	r5,4098
1001c170:	294cc304 	addi	r5,r5,13068
1001c174:	d9402115 	stw	r5,132(sp)
1001c178:	003ec506 	br	1001bc90 <__alt_data_end+0xf801bc90>
1001c17c:	e027883a 	mov	r19,fp
1001c180:	d8002015 	stw	zero,128(sp)
1001c184:	003b9406 	br	1001afd8 <__alt_data_end+0xf801afd8>
1001c188:	dd002017 	ldw	r20,128(sp)
1001c18c:	dd401d83 	ldbu	r21,118(sp)
1001c190:	ddc02415 	stw	r23,144(sp)
1001c194:	d8002015 	stw	zero,128(sp)
1001c198:	003c6606 	br	1001b334 <__alt_data_end+0xf801b334>
1001c19c:	0025883a 	mov	r18,zero
1001c1a0:	003fbd06 	br	1001c098 <__alt_data_end+0xf801c098>
1001c1a4:	d9402417 	ldw	r5,144(sp)
1001c1a8:	d8c02417 	ldw	r3,144(sp)
1001c1ac:	29400017 	ldw	r5,0(r5)
1001c1b0:	19000104 	addi	r4,r3,4
1001c1b4:	d9002415 	stw	r4,144(sp)
1001c1b8:	d9402015 	stw	r5,128(sp)
1001c1bc:	98c00043 	ldbu	r3,1(r19)
1001c1c0:	e027883a 	mov	r19,fp
1001c1c4:	283f5b0e 	bge	r5,zero,1001bf34 <__alt_data_end+0xf801bf34>
1001c1c8:	18c03fcc 	andi	r3,r3,255
1001c1cc:	013fffc4 	movi	r4,-1
1001c1d0:	18c0201c 	xori	r3,r3,128
1001c1d4:	d9002015 	stw	r4,128(sp)
1001c1d8:	18ffe004 	addi	r3,r3,-128
1001c1dc:	003b7d06 	br	1001afd4 <__alt_data_end+0xf801afd4>
1001c1e0:	dd401d85 	stb	r21,118(sp)
1001c1e4:	003cf306 	br	1001b5b4 <__alt_data_end+0xf801b5b4>
1001c1e8:	dd401d85 	stb	r21,118(sp)
1001c1ec:	003d4e06 	br	1001b728 <__alt_data_end+0xf801b728>
1001c1f0:	dd401d85 	stb	r21,118(sp)
1001c1f4:	003c0e06 	br	1001b230 <__alt_data_end+0xf801b230>
1001c1f8:	d9002717 	ldw	r4,156(sp)
1001c1fc:	00800304 	movi	r2,12
1001c200:	20800015 	stw	r2,0(r4)
1001c204:	00bfffc4 	movi	r2,-1
1001c208:	003e6b06 	br	1001bbb8 <__alt_data_end+0xf801bbb8>
1001c20c:	dd401d85 	stb	r21,118(sp)
1001c210:	003d0006 	br	1001b614 <__alt_data_end+0xf801b614>
1001c214:	dd401d85 	stb	r21,118(sp)
1001c218:	003d7106 	br	1001b7e0 <__alt_data_end+0xf801b7e0>
1001c21c:	dd401d85 	stb	r21,118(sp)
1001c220:	003c5706 	br	1001b380 <__alt_data_end+0xf801b380>
1001c224:	dd401d85 	stb	r21,118(sp)
1001c228:	003c2e06 	br	1001b2e4 <__alt_data_end+0xf801b2e4>
1001c22c:	dd401d85 	stb	r21,118(sp)
1001c230:	003d8c06 	br	1001b864 <__alt_data_end+0xf801b864>
1001c234:	dd401d85 	stb	r21,118(sp)
1001c238:	003da706 	br	1001b8d8 <__alt_data_end+0xf801b8d8>
1001c23c:	dd401d85 	stb	r21,118(sp)
1001c240:	003cc806 	br	1001b564 <__alt_data_end+0xf801b564>

1001c244 <_wcrtomb_r>:
1001c244:	defff604 	addi	sp,sp,-40
1001c248:	008400b4 	movhi	r2,4098
1001c24c:	dc800815 	stw	r18,32(sp)
1001c250:	dc400715 	stw	r17,28(sp)
1001c254:	dc000615 	stw	r16,24(sp)
1001c258:	10951c04 	addi	r2,r2,21616
1001c25c:	dfc00915 	stw	ra,36(sp)
1001c260:	2021883a 	mov	r16,r4
1001c264:	3823883a 	mov	r17,r7
1001c268:	14800017 	ldw	r18,0(r2)
1001c26c:	28001426 	beq	r5,zero,1001c2c0 <_wcrtomb_r+0x7c>
1001c270:	d9400415 	stw	r5,16(sp)
1001c274:	d9800515 	stw	r6,20(sp)
1001c278:	0010c900 	call	10010c90 <__locale_charset>
1001c27c:	d9800517 	ldw	r6,20(sp)
1001c280:	d9400417 	ldw	r5,16(sp)
1001c284:	100f883a 	mov	r7,r2
1001c288:	dc400015 	stw	r17,0(sp)
1001c28c:	8009883a 	mov	r4,r16
1001c290:	903ee83a 	callr	r18
1001c294:	00ffffc4 	movi	r3,-1
1001c298:	10c0031e 	bne	r2,r3,1001c2a8 <_wcrtomb_r+0x64>
1001c29c:	88000015 	stw	zero,0(r17)
1001c2a0:	00c02284 	movi	r3,138
1001c2a4:	80c00015 	stw	r3,0(r16)
1001c2a8:	dfc00917 	ldw	ra,36(sp)
1001c2ac:	dc800817 	ldw	r18,32(sp)
1001c2b0:	dc400717 	ldw	r17,28(sp)
1001c2b4:	dc000617 	ldw	r16,24(sp)
1001c2b8:	dec00a04 	addi	sp,sp,40
1001c2bc:	f800283a 	ret
1001c2c0:	0010c900 	call	10010c90 <__locale_charset>
1001c2c4:	100f883a 	mov	r7,r2
1001c2c8:	dc400015 	stw	r17,0(sp)
1001c2cc:	000d883a 	mov	r6,zero
1001c2d0:	d9400104 	addi	r5,sp,4
1001c2d4:	8009883a 	mov	r4,r16
1001c2d8:	903ee83a 	callr	r18
1001c2dc:	003fed06 	br	1001c294 <__alt_data_end+0xf801c294>

1001c2e0 <wcrtomb>:
1001c2e0:	defff604 	addi	sp,sp,-40
1001c2e4:	008400b4 	movhi	r2,4098
1001c2e8:	dc800615 	stw	r18,24(sp)
1001c2ec:	dc400515 	stw	r17,20(sp)
1001c2f0:	10951604 	addi	r2,r2,21592
1001c2f4:	dfc00915 	stw	ra,36(sp)
1001c2f8:	dd000815 	stw	r20,32(sp)
1001c2fc:	dcc00715 	stw	r19,28(sp)
1001c300:	dc000415 	stw	r16,16(sp)
1001c304:	3025883a 	mov	r18,r6
1001c308:	14400017 	ldw	r17,0(r2)
1001c30c:	20001926 	beq	r4,zero,1001c374 <wcrtomb+0x94>
1001c310:	008400b4 	movhi	r2,4098
1001c314:	10951c04 	addi	r2,r2,21616
1001c318:	15000017 	ldw	r20,0(r2)
1001c31c:	2021883a 	mov	r16,r4
1001c320:	2827883a 	mov	r19,r5
1001c324:	0010c900 	call	10010c90 <__locale_charset>
1001c328:	100f883a 	mov	r7,r2
1001c32c:	dc800015 	stw	r18,0(sp)
1001c330:	980d883a 	mov	r6,r19
1001c334:	800b883a 	mov	r5,r16
1001c338:	8809883a 	mov	r4,r17
1001c33c:	a03ee83a 	callr	r20
1001c340:	00ffffc4 	movi	r3,-1
1001c344:	10c0031e 	bne	r2,r3,1001c354 <wcrtomb+0x74>
1001c348:	90000015 	stw	zero,0(r18)
1001c34c:	00c02284 	movi	r3,138
1001c350:	88c00015 	stw	r3,0(r17)
1001c354:	dfc00917 	ldw	ra,36(sp)
1001c358:	dd000817 	ldw	r20,32(sp)
1001c35c:	dcc00717 	ldw	r19,28(sp)
1001c360:	dc800617 	ldw	r18,24(sp)
1001c364:	dc400517 	ldw	r17,20(sp)
1001c368:	dc000417 	ldw	r16,16(sp)
1001c36c:	dec00a04 	addi	sp,sp,40
1001c370:	f800283a 	ret
1001c374:	008400b4 	movhi	r2,4098
1001c378:	10951c04 	addi	r2,r2,21616
1001c37c:	14000017 	ldw	r16,0(r2)
1001c380:	0010c900 	call	10010c90 <__locale_charset>
1001c384:	100f883a 	mov	r7,r2
1001c388:	dc800015 	stw	r18,0(sp)
1001c38c:	000d883a 	mov	r6,zero
1001c390:	d9400104 	addi	r5,sp,4
1001c394:	8809883a 	mov	r4,r17
1001c398:	803ee83a 	callr	r16
1001c39c:	003fe806 	br	1001c340 <__alt_data_end+0xf801c340>

1001c3a0 <__ascii_wctomb>:
1001c3a0:	28000526 	beq	r5,zero,1001c3b8 <__ascii_wctomb+0x18>
1001c3a4:	00803fc4 	movi	r2,255
1001c3a8:	11800536 	bltu	r2,r6,1001c3c0 <__ascii_wctomb+0x20>
1001c3ac:	29800005 	stb	r6,0(r5)
1001c3b0:	00800044 	movi	r2,1
1001c3b4:	f800283a 	ret
1001c3b8:	0005883a 	mov	r2,zero
1001c3bc:	f800283a 	ret
1001c3c0:	00802284 	movi	r2,138
1001c3c4:	20800015 	stw	r2,0(r4)
1001c3c8:	00bfffc4 	movi	r2,-1
1001c3cc:	f800283a 	ret

1001c3d0 <_wctomb_r>:
1001c3d0:	008400b4 	movhi	r2,4098
1001c3d4:	defff904 	addi	sp,sp,-28
1001c3d8:	10951c04 	addi	r2,r2,21616
1001c3dc:	dfc00615 	stw	ra,24(sp)
1001c3e0:	dc400515 	stw	r17,20(sp)
1001c3e4:	dc000415 	stw	r16,16(sp)
1001c3e8:	3823883a 	mov	r17,r7
1001c3ec:	14000017 	ldw	r16,0(r2)
1001c3f0:	d9000115 	stw	r4,4(sp)
1001c3f4:	d9400215 	stw	r5,8(sp)
1001c3f8:	d9800315 	stw	r6,12(sp)
1001c3fc:	0010c900 	call	10010c90 <__locale_charset>
1001c400:	d9800317 	ldw	r6,12(sp)
1001c404:	d9400217 	ldw	r5,8(sp)
1001c408:	d9000117 	ldw	r4,4(sp)
1001c40c:	100f883a 	mov	r7,r2
1001c410:	dc400015 	stw	r17,0(sp)
1001c414:	803ee83a 	callr	r16
1001c418:	dfc00617 	ldw	ra,24(sp)
1001c41c:	dc400517 	ldw	r17,20(sp)
1001c420:	dc000417 	ldw	r16,16(sp)
1001c424:	dec00704 	addi	sp,sp,28
1001c428:	f800283a 	ret

1001c42c <__muldi3>:
1001c42c:	defff604 	addi	sp,sp,-40
1001c430:	dd800615 	stw	r22,24(sp)
1001c434:	dd400515 	stw	r21,20(sp)
1001c438:	dc400115 	stw	r17,4(sp)
1001c43c:	357fffcc 	andi	r21,r6,65535
1001c440:	2022d43a 	srli	r17,r4,16
1001c444:	25bfffcc 	andi	r22,r4,65535
1001c448:	dcc00315 	stw	r19,12(sp)
1001c44c:	dc800215 	stw	r18,8(sp)
1001c450:	2027883a 	mov	r19,r4
1001c454:	2825883a 	mov	r18,r5
1001c458:	b009883a 	mov	r4,r22
1001c45c:	a80b883a 	mov	r5,r21
1001c460:	dfc00915 	stw	ra,36(sp)
1001c464:	df000815 	stw	fp,32(sp)
1001c468:	ddc00715 	stw	r23,28(sp)
1001c46c:	3839883a 	mov	fp,r7
1001c470:	302ed43a 	srli	r23,r6,16
1001c474:	dd000415 	stw	r20,16(sp)
1001c478:	dc000015 	stw	r16,0(sp)
1001c47c:	3029883a 	mov	r20,r6
1001c480:	0008ef00 	call	10008ef0 <__mulsi3>
1001c484:	a80b883a 	mov	r5,r21
1001c488:	8809883a 	mov	r4,r17
1001c48c:	1021883a 	mov	r16,r2
1001c490:	0008ef00 	call	10008ef0 <__mulsi3>
1001c494:	8809883a 	mov	r4,r17
1001c498:	b80b883a 	mov	r5,r23
1001c49c:	102b883a 	mov	r21,r2
1001c4a0:	0008ef00 	call	10008ef0 <__mulsi3>
1001c4a4:	b80b883a 	mov	r5,r23
1001c4a8:	b009883a 	mov	r4,r22
1001c4ac:	1023883a 	mov	r17,r2
1001c4b0:	0008ef00 	call	10008ef0 <__mulsi3>
1001c4b4:	8006d43a 	srli	r3,r16,16
1001c4b8:	1545883a 	add	r2,r2,r21
1001c4bc:	1885883a 	add	r2,r3,r2
1001c4c0:	1540022e 	bgeu	r2,r21,1001c4cc <__muldi3+0xa0>
1001c4c4:	00c00074 	movhi	r3,1
1001c4c8:	88e3883a 	add	r17,r17,r3
1001c4cc:	1006d43a 	srli	r3,r2,16
1001c4d0:	1004943a 	slli	r2,r2,16
1001c4d4:	e00b883a 	mov	r5,fp
1001c4d8:	9809883a 	mov	r4,r19
1001c4dc:	843fffcc 	andi	r16,r16,65535
1001c4e0:	1c63883a 	add	r17,r3,r17
1001c4e4:	1421883a 	add	r16,r2,r16
1001c4e8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c4ec:	900b883a 	mov	r5,r18
1001c4f0:	a009883a 	mov	r4,r20
1001c4f4:	1027883a 	mov	r19,r2
1001c4f8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c4fc:	9885883a 	add	r2,r19,r2
1001c500:	1447883a 	add	r3,r2,r17
1001c504:	8005883a 	mov	r2,r16
1001c508:	dfc00917 	ldw	ra,36(sp)
1001c50c:	df000817 	ldw	fp,32(sp)
1001c510:	ddc00717 	ldw	r23,28(sp)
1001c514:	dd800617 	ldw	r22,24(sp)
1001c518:	dd400517 	ldw	r21,20(sp)
1001c51c:	dd000417 	ldw	r20,16(sp)
1001c520:	dcc00317 	ldw	r19,12(sp)
1001c524:	dc800217 	ldw	r18,8(sp)
1001c528:	dc400117 	ldw	r17,4(sp)
1001c52c:	dc000017 	ldw	r16,0(sp)
1001c530:	dec00a04 	addi	sp,sp,40
1001c534:	f800283a 	ret

1001c538 <__fixunsdfsi>:
1001c538:	defffd04 	addi	sp,sp,-12
1001c53c:	000d883a 	mov	r6,zero
1001c540:	01d07834 	movhi	r7,16864
1001c544:	dc400115 	stw	r17,4(sp)
1001c548:	dc000015 	stw	r16,0(sp)
1001c54c:	dfc00215 	stw	ra,8(sp)
1001c550:	2023883a 	mov	r17,r4
1001c554:	2821883a 	mov	r16,r5
1001c558:	001dc9c0 	call	1001dc9c <__gedf2>
1001c55c:	1000080e 	bge	r2,zero,1001c580 <__fixunsdfsi+0x48>
1001c560:	8809883a 	mov	r4,r17
1001c564:	800b883a 	mov	r5,r16
1001c568:	001efd40 	call	1001efd4 <__fixdfsi>
1001c56c:	dfc00217 	ldw	ra,8(sp)
1001c570:	dc400117 	ldw	r17,4(sp)
1001c574:	dc000017 	ldw	r16,0(sp)
1001c578:	dec00304 	addi	sp,sp,12
1001c57c:	f800283a 	ret
1001c580:	000d883a 	mov	r6,zero
1001c584:	01d07834 	movhi	r7,16864
1001c588:	8809883a 	mov	r4,r17
1001c58c:	800b883a 	mov	r5,r16
1001c590:	001e6d80 	call	1001e6d8 <__subdf3>
1001c594:	180b883a 	mov	r5,r3
1001c598:	1009883a 	mov	r4,r2
1001c59c:	001efd40 	call	1001efd4 <__fixdfsi>
1001c5a0:	00e00034 	movhi	r3,32768
1001c5a4:	10c5883a 	add	r2,r2,r3
1001c5a8:	003ff006 	br	1001c56c <__alt_data_end+0xf801c56c>

1001c5ac <__udivdi3>:
1001c5ac:	defff404 	addi	sp,sp,-48
1001c5b0:	dcc00515 	stw	r19,20(sp)
1001c5b4:	dc000215 	stw	r16,8(sp)
1001c5b8:	dfc00b15 	stw	ra,44(sp)
1001c5bc:	df000a15 	stw	fp,40(sp)
1001c5c0:	ddc00915 	stw	r23,36(sp)
1001c5c4:	dd800815 	stw	r22,32(sp)
1001c5c8:	dd400715 	stw	r21,28(sp)
1001c5cc:	dd000615 	stw	r20,24(sp)
1001c5d0:	dc800415 	stw	r18,16(sp)
1001c5d4:	dc400315 	stw	r17,12(sp)
1001c5d8:	2027883a 	mov	r19,r4
1001c5dc:	2821883a 	mov	r16,r5
1001c5e0:	3800461e 	bne	r7,zero,1001c6fc <__udivdi3+0x150>
1001c5e4:	3023883a 	mov	r17,r6
1001c5e8:	2025883a 	mov	r18,r4
1001c5ec:	2980572e 	bgeu	r5,r6,1001c74c <__udivdi3+0x1a0>
1001c5f0:	00bfffd4 	movui	r2,65535
1001c5f4:	282d883a 	mov	r22,r5
1001c5f8:	1180b236 	bltu	r2,r6,1001c8c4 <__udivdi3+0x318>
1001c5fc:	00803fc4 	movi	r2,255
1001c600:	1185803a 	cmpltu	r2,r2,r6
1001c604:	100490fa 	slli	r2,r2,3
1001c608:	3086d83a 	srl	r3,r6,r2
1001c60c:	010400b4 	movhi	r4,4098
1001c610:	210b0444 	addi	r4,r4,11281
1001c614:	20c7883a 	add	r3,r4,r3
1001c618:	18c00003 	ldbu	r3,0(r3)
1001c61c:	1885883a 	add	r2,r3,r2
1001c620:	00c00804 	movi	r3,32
1001c624:	1887c83a 	sub	r3,r3,r2
1001c628:	18000526 	beq	r3,zero,1001c640 <__udivdi3+0x94>
1001c62c:	80e0983a 	sll	r16,r16,r3
1001c630:	9884d83a 	srl	r2,r19,r2
1001c634:	30e2983a 	sll	r17,r6,r3
1001c638:	98e4983a 	sll	r18,r19,r3
1001c63c:	142cb03a 	or	r22,r2,r16
1001c640:	882ad43a 	srli	r21,r17,16
1001c644:	b009883a 	mov	r4,r22
1001c648:	8d3fffcc 	andi	r20,r17,65535
1001c64c:	a80b883a 	mov	r5,r21
1001c650:	0009c2c0 	call	10009c2c <__umodsi3>
1001c654:	b009883a 	mov	r4,r22
1001c658:	a80b883a 	mov	r5,r21
1001c65c:	1027883a 	mov	r19,r2
1001c660:	0009bc80 	call	10009bc8 <__udivsi3>
1001c664:	100b883a 	mov	r5,r2
1001c668:	a009883a 	mov	r4,r20
1001c66c:	102d883a 	mov	r22,r2
1001c670:	0008ef00 	call	10008ef0 <__mulsi3>
1001c674:	9826943a 	slli	r19,r19,16
1001c678:	9006d43a 	srli	r3,r18,16
1001c67c:	1cc6b03a 	or	r3,r3,r19
1001c680:	1880052e 	bgeu	r3,r2,1001c698 <__udivdi3+0xec>
1001c684:	1c47883a 	add	r3,r3,r17
1001c688:	b13fffc4 	addi	r4,r22,-1
1001c68c:	1c400136 	bltu	r3,r17,1001c694 <__udivdi3+0xe8>
1001c690:	18814236 	bltu	r3,r2,1001cb9c <__udivdi3+0x5f0>
1001c694:	202d883a 	mov	r22,r4
1001c698:	18a1c83a 	sub	r16,r3,r2
1001c69c:	8009883a 	mov	r4,r16
1001c6a0:	a80b883a 	mov	r5,r21
1001c6a4:	0009c2c0 	call	10009c2c <__umodsi3>
1001c6a8:	1027883a 	mov	r19,r2
1001c6ac:	8009883a 	mov	r4,r16
1001c6b0:	a80b883a 	mov	r5,r21
1001c6b4:	9826943a 	slli	r19,r19,16
1001c6b8:	0009bc80 	call	10009bc8 <__udivsi3>
1001c6bc:	100b883a 	mov	r5,r2
1001c6c0:	a009883a 	mov	r4,r20
1001c6c4:	94bfffcc 	andi	r18,r18,65535
1001c6c8:	1021883a 	mov	r16,r2
1001c6cc:	94e4b03a 	or	r18,r18,r19
1001c6d0:	0008ef00 	call	10008ef0 <__mulsi3>
1001c6d4:	9080052e 	bgeu	r18,r2,1001c6ec <__udivdi3+0x140>
1001c6d8:	8ca5883a 	add	r18,r17,r18
1001c6dc:	80ffffc4 	addi	r3,r16,-1
1001c6e0:	94410c36 	bltu	r18,r17,1001cb14 <__udivdi3+0x568>
1001c6e4:	90810b2e 	bgeu	r18,r2,1001cb14 <__udivdi3+0x568>
1001c6e8:	843fff84 	addi	r16,r16,-2
1001c6ec:	b004943a 	slli	r2,r22,16
1001c6f0:	0007883a 	mov	r3,zero
1001c6f4:	1404b03a 	or	r2,r2,r16
1001c6f8:	00005e06 	br	1001c874 <__udivdi3+0x2c8>
1001c6fc:	29c05b36 	bltu	r5,r7,1001c86c <__udivdi3+0x2c0>
1001c700:	00bfffd4 	movui	r2,65535
1001c704:	11c0672e 	bgeu	r2,r7,1001c8a4 <__udivdi3+0x2f8>
1001c708:	00804034 	movhi	r2,256
1001c70c:	10bfffc4 	addi	r2,r2,-1
1001c710:	11c10a36 	bltu	r2,r7,1001cb3c <__udivdi3+0x590>
1001c714:	00800404 	movi	r2,16
1001c718:	3886d83a 	srl	r3,r7,r2
1001c71c:	010400b4 	movhi	r4,4098
1001c720:	210b0444 	addi	r4,r4,11281
1001c724:	20c7883a 	add	r3,r4,r3
1001c728:	18c00003 	ldbu	r3,0(r3)
1001c72c:	05c00804 	movi	r23,32
1001c730:	1885883a 	add	r2,r3,r2
1001c734:	b8afc83a 	sub	r23,r23,r2
1001c738:	b800671e 	bne	r23,zero,1001c8d8 <__udivdi3+0x32c>
1001c73c:	3c010536 	bltu	r7,r16,1001cb54 <__udivdi3+0x5a8>
1001c740:	9985403a 	cmpgeu	r2,r19,r6
1001c744:	0007883a 	mov	r3,zero
1001c748:	00004a06 	br	1001c874 <__udivdi3+0x2c8>
1001c74c:	3000041e 	bne	r6,zero,1001c760 <__udivdi3+0x1b4>
1001c750:	000b883a 	mov	r5,zero
1001c754:	01000044 	movi	r4,1
1001c758:	0009bc80 	call	10009bc8 <__udivsi3>
1001c75c:	1023883a 	mov	r17,r2
1001c760:	00bfffd4 	movui	r2,65535
1001c764:	1440532e 	bgeu	r2,r17,1001c8b4 <__udivdi3+0x308>
1001c768:	00804034 	movhi	r2,256
1001c76c:	10bfffc4 	addi	r2,r2,-1
1001c770:	1440f436 	bltu	r2,r17,1001cb44 <__udivdi3+0x598>
1001c774:	00800404 	movi	r2,16
1001c778:	8886d83a 	srl	r3,r17,r2
1001c77c:	010400b4 	movhi	r4,4098
1001c780:	210b0444 	addi	r4,r4,11281
1001c784:	20c7883a 	add	r3,r4,r3
1001c788:	18c00003 	ldbu	r3,0(r3)
1001c78c:	1885883a 	add	r2,r3,r2
1001c790:	00c00804 	movi	r3,32
1001c794:	1887c83a 	sub	r3,r3,r2
1001c798:	1800a51e 	bne	r3,zero,1001ca30 <__udivdi3+0x484>
1001c79c:	882ad43a 	srli	r21,r17,16
1001c7a0:	8461c83a 	sub	r16,r16,r17
1001c7a4:	8d3fffcc 	andi	r20,r17,65535
1001c7a8:	00c00044 	movi	r3,1
1001c7ac:	a80b883a 	mov	r5,r21
1001c7b0:	8009883a 	mov	r4,r16
1001c7b4:	d8c00115 	stw	r3,4(sp)
1001c7b8:	0009c2c0 	call	10009c2c <__umodsi3>
1001c7bc:	a80b883a 	mov	r5,r21
1001c7c0:	8009883a 	mov	r4,r16
1001c7c4:	1027883a 	mov	r19,r2
1001c7c8:	0009bc80 	call	10009bc8 <__udivsi3>
1001c7cc:	a00b883a 	mov	r5,r20
1001c7d0:	1009883a 	mov	r4,r2
1001c7d4:	102d883a 	mov	r22,r2
1001c7d8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c7dc:	9826943a 	slli	r19,r19,16
1001c7e0:	900ed43a 	srli	r7,r18,16
1001c7e4:	d8c00117 	ldw	r3,4(sp)
1001c7e8:	3cceb03a 	or	r7,r7,r19
1001c7ec:	3880052e 	bgeu	r7,r2,1001c804 <__udivdi3+0x258>
1001c7f0:	3c4f883a 	add	r7,r7,r17
1001c7f4:	b13fffc4 	addi	r4,r22,-1
1001c7f8:	3c400136 	bltu	r7,r17,1001c800 <__udivdi3+0x254>
1001c7fc:	3880e436 	bltu	r7,r2,1001cb90 <__udivdi3+0x5e4>
1001c800:	202d883a 	mov	r22,r4
1001c804:	38a1c83a 	sub	r16,r7,r2
1001c808:	8009883a 	mov	r4,r16
1001c80c:	a80b883a 	mov	r5,r21
1001c810:	d8c00115 	stw	r3,4(sp)
1001c814:	0009c2c0 	call	10009c2c <__umodsi3>
1001c818:	1027883a 	mov	r19,r2
1001c81c:	8009883a 	mov	r4,r16
1001c820:	a80b883a 	mov	r5,r21
1001c824:	9826943a 	slli	r19,r19,16
1001c828:	0009bc80 	call	10009bc8 <__udivsi3>
1001c82c:	a00b883a 	mov	r5,r20
1001c830:	1009883a 	mov	r4,r2
1001c834:	94bfffcc 	andi	r18,r18,65535
1001c838:	1021883a 	mov	r16,r2
1001c83c:	94e4b03a 	or	r18,r18,r19
1001c840:	0008ef00 	call	10008ef0 <__mulsi3>
1001c844:	d8c00117 	ldw	r3,4(sp)
1001c848:	9080052e 	bgeu	r18,r2,1001c860 <__udivdi3+0x2b4>
1001c84c:	8ca5883a 	add	r18,r17,r18
1001c850:	813fffc4 	addi	r4,r16,-1
1001c854:	9440ad36 	bltu	r18,r17,1001cb0c <__udivdi3+0x560>
1001c858:	9080ac2e 	bgeu	r18,r2,1001cb0c <__udivdi3+0x560>
1001c85c:	843fff84 	addi	r16,r16,-2
1001c860:	b004943a 	slli	r2,r22,16
1001c864:	1404b03a 	or	r2,r2,r16
1001c868:	00000206 	br	1001c874 <__udivdi3+0x2c8>
1001c86c:	0007883a 	mov	r3,zero
1001c870:	0005883a 	mov	r2,zero
1001c874:	dfc00b17 	ldw	ra,44(sp)
1001c878:	df000a17 	ldw	fp,40(sp)
1001c87c:	ddc00917 	ldw	r23,36(sp)
1001c880:	dd800817 	ldw	r22,32(sp)
1001c884:	dd400717 	ldw	r21,28(sp)
1001c888:	dd000617 	ldw	r20,24(sp)
1001c88c:	dcc00517 	ldw	r19,20(sp)
1001c890:	dc800417 	ldw	r18,16(sp)
1001c894:	dc400317 	ldw	r17,12(sp)
1001c898:	dc000217 	ldw	r16,8(sp)
1001c89c:	dec00c04 	addi	sp,sp,48
1001c8a0:	f800283a 	ret
1001c8a4:	00803fc4 	movi	r2,255
1001c8a8:	11c5803a 	cmpltu	r2,r2,r7
1001c8ac:	100490fa 	slli	r2,r2,3
1001c8b0:	003f9906 	br	1001c718 <__alt_data_end+0xf801c718>
1001c8b4:	00803fc4 	movi	r2,255
1001c8b8:	1445803a 	cmpltu	r2,r2,r17
1001c8bc:	100490fa 	slli	r2,r2,3
1001c8c0:	003fad06 	br	1001c778 <__alt_data_end+0xf801c778>
1001c8c4:	00804034 	movhi	r2,256
1001c8c8:	10bfffc4 	addi	r2,r2,-1
1001c8cc:	11809f36 	bltu	r2,r6,1001cb4c <__udivdi3+0x5a0>
1001c8d0:	00800404 	movi	r2,16
1001c8d4:	003f4c06 	br	1001c608 <__alt_data_end+0xf801c608>
1001c8d8:	3dce983a 	sll	r7,r7,r23
1001c8dc:	30b8d83a 	srl	fp,r6,r2
1001c8e0:	80a2d83a 	srl	r17,r16,r2
1001c8e4:	35cc983a 	sll	r6,r6,r23
1001c8e8:	3f38b03a 	or	fp,r7,fp
1001c8ec:	e024d43a 	srli	r18,fp,16
1001c8f0:	9884d83a 	srl	r2,r19,r2
1001c8f4:	85e0983a 	sll	r16,r16,r23
1001c8f8:	8809883a 	mov	r4,r17
1001c8fc:	900b883a 	mov	r5,r18
1001c900:	d9800015 	stw	r6,0(sp)
1001c904:	1420b03a 	or	r16,r2,r16
1001c908:	0009c2c0 	call	10009c2c <__umodsi3>
1001c90c:	900b883a 	mov	r5,r18
1001c910:	8809883a 	mov	r4,r17
1001c914:	1029883a 	mov	r20,r2
1001c918:	e5bfffcc 	andi	r22,fp,65535
1001c91c:	0009bc80 	call	10009bc8 <__udivsi3>
1001c920:	100b883a 	mov	r5,r2
1001c924:	b009883a 	mov	r4,r22
1001c928:	102b883a 	mov	r21,r2
1001c92c:	0008ef00 	call	10008ef0 <__mulsi3>
1001c930:	a028943a 	slli	r20,r20,16
1001c934:	8006d43a 	srli	r3,r16,16
1001c938:	1d06b03a 	or	r3,r3,r20
1001c93c:	1880042e 	bgeu	r3,r2,1001c950 <__udivdi3+0x3a4>
1001c940:	1f07883a 	add	r3,r3,fp
1001c944:	a93fffc4 	addi	r4,r21,-1
1001c948:	1f00892e 	bgeu	r3,fp,1001cb70 <__udivdi3+0x5c4>
1001c94c:	202b883a 	mov	r21,r4
1001c950:	18a3c83a 	sub	r17,r3,r2
1001c954:	8809883a 	mov	r4,r17
1001c958:	900b883a 	mov	r5,r18
1001c95c:	0009c2c0 	call	10009c2c <__umodsi3>
1001c960:	1029883a 	mov	r20,r2
1001c964:	8809883a 	mov	r4,r17
1001c968:	900b883a 	mov	r5,r18
1001c96c:	a028943a 	slli	r20,r20,16
1001c970:	0009bc80 	call	10009bc8 <__udivsi3>
1001c974:	100b883a 	mov	r5,r2
1001c978:	b009883a 	mov	r4,r22
1001c97c:	843fffcc 	andi	r16,r16,65535
1001c980:	1023883a 	mov	r17,r2
1001c984:	8520b03a 	or	r16,r16,r20
1001c988:	0008ef00 	call	10008ef0 <__mulsi3>
1001c98c:	8080042e 	bgeu	r16,r2,1001c9a0 <__udivdi3+0x3f4>
1001c990:	8721883a 	add	r16,r16,fp
1001c994:	88ffffc4 	addi	r3,r17,-1
1001c998:	8700712e 	bgeu	r16,fp,1001cb60 <__udivdi3+0x5b4>
1001c99c:	1823883a 	mov	r17,r3
1001c9a0:	a80e943a 	slli	r7,r21,16
1001c9a4:	d8c00017 	ldw	r3,0(sp)
1001c9a8:	80a1c83a 	sub	r16,r16,r2
1001c9ac:	3c64b03a 	or	r18,r7,r17
1001c9b0:	1d3fffcc 	andi	r20,r3,65535
1001c9b4:	9022d43a 	srli	r17,r18,16
1001c9b8:	95bfffcc 	andi	r22,r18,65535
1001c9bc:	a00b883a 	mov	r5,r20
1001c9c0:	b009883a 	mov	r4,r22
1001c9c4:	182ad43a 	srli	r21,r3,16
1001c9c8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c9cc:	a00b883a 	mov	r5,r20
1001c9d0:	8809883a 	mov	r4,r17
1001c9d4:	1039883a 	mov	fp,r2
1001c9d8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c9dc:	8809883a 	mov	r4,r17
1001c9e0:	a80b883a 	mov	r5,r21
1001c9e4:	1029883a 	mov	r20,r2
1001c9e8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c9ec:	a80b883a 	mov	r5,r21
1001c9f0:	b009883a 	mov	r4,r22
1001c9f4:	1023883a 	mov	r17,r2
1001c9f8:	0008ef00 	call	10008ef0 <__mulsi3>
1001c9fc:	e006d43a 	srli	r3,fp,16
1001ca00:	1505883a 	add	r2,r2,r20
1001ca04:	1887883a 	add	r3,r3,r2
1001ca08:	1d00022e 	bgeu	r3,r20,1001ca14 <__udivdi3+0x468>
1001ca0c:	00800074 	movhi	r2,1
1001ca10:	88a3883a 	add	r17,r17,r2
1001ca14:	1804d43a 	srli	r2,r3,16
1001ca18:	1463883a 	add	r17,r2,r17
1001ca1c:	84404436 	bltu	r16,r17,1001cb30 <__udivdi3+0x584>
1001ca20:	84403e26 	beq	r16,r17,1001cb1c <__udivdi3+0x570>
1001ca24:	9005883a 	mov	r2,r18
1001ca28:	0007883a 	mov	r3,zero
1001ca2c:	003f9106 	br	1001c874 <__alt_data_end+0xf801c874>
1001ca30:	88e2983a 	sll	r17,r17,r3
1001ca34:	80aed83a 	srl	r23,r16,r2
1001ca38:	80e0983a 	sll	r16,r16,r3
1001ca3c:	882ad43a 	srli	r21,r17,16
1001ca40:	9884d83a 	srl	r2,r19,r2
1001ca44:	b809883a 	mov	r4,r23
1001ca48:	a80b883a 	mov	r5,r21
1001ca4c:	98e4983a 	sll	r18,r19,r3
1001ca50:	142cb03a 	or	r22,r2,r16
1001ca54:	0009c2c0 	call	10009c2c <__umodsi3>
1001ca58:	b809883a 	mov	r4,r23
1001ca5c:	a80b883a 	mov	r5,r21
1001ca60:	1027883a 	mov	r19,r2
1001ca64:	8d3fffcc 	andi	r20,r17,65535
1001ca68:	0009bc80 	call	10009bc8 <__udivsi3>
1001ca6c:	a009883a 	mov	r4,r20
1001ca70:	100b883a 	mov	r5,r2
1001ca74:	102f883a 	mov	r23,r2
1001ca78:	0008ef00 	call	10008ef0 <__mulsi3>
1001ca7c:	9826943a 	slli	r19,r19,16
1001ca80:	b008d43a 	srli	r4,r22,16
1001ca84:	24c8b03a 	or	r4,r4,r19
1001ca88:	2080062e 	bgeu	r4,r2,1001caa4 <__udivdi3+0x4f8>
1001ca8c:	2449883a 	add	r4,r4,r17
1001ca90:	b8ffffc4 	addi	r3,r23,-1
1001ca94:	24403c36 	bltu	r4,r17,1001cb88 <__udivdi3+0x5dc>
1001ca98:	20803b2e 	bgeu	r4,r2,1001cb88 <__udivdi3+0x5dc>
1001ca9c:	bdffff84 	addi	r23,r23,-2
1001caa0:	2449883a 	add	r4,r4,r17
1001caa4:	20a1c83a 	sub	r16,r4,r2
1001caa8:	a80b883a 	mov	r5,r21
1001caac:	8009883a 	mov	r4,r16
1001cab0:	0009c2c0 	call	10009c2c <__umodsi3>
1001cab4:	a80b883a 	mov	r5,r21
1001cab8:	8009883a 	mov	r4,r16
1001cabc:	1027883a 	mov	r19,r2
1001cac0:	0009bc80 	call	10009bc8 <__udivsi3>
1001cac4:	a009883a 	mov	r4,r20
1001cac8:	100b883a 	mov	r5,r2
1001cacc:	9826943a 	slli	r19,r19,16
1001cad0:	1039883a 	mov	fp,r2
1001cad4:	0008ef00 	call	10008ef0 <__mulsi3>
1001cad8:	b13fffcc 	andi	r4,r22,65535
1001cadc:	24c8b03a 	or	r4,r4,r19
1001cae0:	2080062e 	bgeu	r4,r2,1001cafc <__udivdi3+0x550>
1001cae4:	2449883a 	add	r4,r4,r17
1001cae8:	e0ffffc4 	addi	r3,fp,-1
1001caec:	24402436 	bltu	r4,r17,1001cb80 <__udivdi3+0x5d4>
1001caf0:	2080232e 	bgeu	r4,r2,1001cb80 <__udivdi3+0x5d4>
1001caf4:	e73fff84 	addi	fp,fp,-2
1001caf8:	2449883a 	add	r4,r4,r17
1001cafc:	b82e943a 	slli	r23,r23,16
1001cb00:	20a1c83a 	sub	r16,r4,r2
1001cb04:	bf06b03a 	or	r3,r23,fp
1001cb08:	003f2806 	br	1001c7ac <__alt_data_end+0xf801c7ac>
1001cb0c:	2021883a 	mov	r16,r4
1001cb10:	003f5306 	br	1001c860 <__alt_data_end+0xf801c860>
1001cb14:	1821883a 	mov	r16,r3
1001cb18:	003ef406 	br	1001c6ec <__alt_data_end+0xf801c6ec>
1001cb1c:	1806943a 	slli	r3,r3,16
1001cb20:	9de6983a 	sll	r19,r19,r23
1001cb24:	e73fffcc 	andi	fp,fp,65535
1001cb28:	1f07883a 	add	r3,r3,fp
1001cb2c:	98ffbd2e 	bgeu	r19,r3,1001ca24 <__alt_data_end+0xf801ca24>
1001cb30:	90bfffc4 	addi	r2,r18,-1
1001cb34:	0007883a 	mov	r3,zero
1001cb38:	003f4e06 	br	1001c874 <__alt_data_end+0xf801c874>
1001cb3c:	00800604 	movi	r2,24
1001cb40:	003ef506 	br	1001c718 <__alt_data_end+0xf801c718>
1001cb44:	00800604 	movi	r2,24
1001cb48:	003f0b06 	br	1001c778 <__alt_data_end+0xf801c778>
1001cb4c:	00800604 	movi	r2,24
1001cb50:	003ead06 	br	1001c608 <__alt_data_end+0xf801c608>
1001cb54:	0007883a 	mov	r3,zero
1001cb58:	00800044 	movi	r2,1
1001cb5c:	003f4506 	br	1001c874 <__alt_data_end+0xf801c874>
1001cb60:	80bf8e2e 	bgeu	r16,r2,1001c99c <__alt_data_end+0xf801c99c>
1001cb64:	8c7fff84 	addi	r17,r17,-2
1001cb68:	8721883a 	add	r16,r16,fp
1001cb6c:	003f8c06 	br	1001c9a0 <__alt_data_end+0xf801c9a0>
1001cb70:	18bf762e 	bgeu	r3,r2,1001c94c <__alt_data_end+0xf801c94c>
1001cb74:	ad7fff84 	addi	r21,r21,-2
1001cb78:	1f07883a 	add	r3,r3,fp
1001cb7c:	003f7406 	br	1001c950 <__alt_data_end+0xf801c950>
1001cb80:	1839883a 	mov	fp,r3
1001cb84:	003fdd06 	br	1001cafc <__alt_data_end+0xf801cafc>
1001cb88:	182f883a 	mov	r23,r3
1001cb8c:	003fc506 	br	1001caa4 <__alt_data_end+0xf801caa4>
1001cb90:	b5bfff84 	addi	r22,r22,-2
1001cb94:	3c4f883a 	add	r7,r7,r17
1001cb98:	003f1a06 	br	1001c804 <__alt_data_end+0xf801c804>
1001cb9c:	b5bfff84 	addi	r22,r22,-2
1001cba0:	1c47883a 	add	r3,r3,r17
1001cba4:	003ebc06 	br	1001c698 <__alt_data_end+0xf801c698>

1001cba8 <__umoddi3>:
1001cba8:	defff304 	addi	sp,sp,-52
1001cbac:	df000b15 	stw	fp,44(sp)
1001cbb0:	dc400415 	stw	r17,16(sp)
1001cbb4:	dc000315 	stw	r16,12(sp)
1001cbb8:	dfc00c15 	stw	ra,48(sp)
1001cbbc:	ddc00a15 	stw	r23,40(sp)
1001cbc0:	dd800915 	stw	r22,36(sp)
1001cbc4:	dd400815 	stw	r21,32(sp)
1001cbc8:	dd000715 	stw	r20,28(sp)
1001cbcc:	dcc00615 	stw	r19,24(sp)
1001cbd0:	dc800515 	stw	r18,20(sp)
1001cbd4:	2021883a 	mov	r16,r4
1001cbd8:	2823883a 	mov	r17,r5
1001cbdc:	2839883a 	mov	fp,r5
1001cbe0:	3800401e 	bne	r7,zero,1001cce4 <__umoddi3+0x13c>
1001cbe4:	3027883a 	mov	r19,r6
1001cbe8:	2029883a 	mov	r20,r4
1001cbec:	2980552e 	bgeu	r5,r6,1001cd44 <__umoddi3+0x19c>
1001cbf0:	00bfffd4 	movui	r2,65535
1001cbf4:	1180a236 	bltu	r2,r6,1001ce80 <__umoddi3+0x2d8>
1001cbf8:	01003fc4 	movi	r4,255
1001cbfc:	2189803a 	cmpltu	r4,r4,r6
1001cc00:	200890fa 	slli	r4,r4,3
1001cc04:	3104d83a 	srl	r2,r6,r4
1001cc08:	00c400b4 	movhi	r3,4098
1001cc0c:	18cb0444 	addi	r3,r3,11281
1001cc10:	1885883a 	add	r2,r3,r2
1001cc14:	10c00003 	ldbu	r3,0(r2)
1001cc18:	00800804 	movi	r2,32
1001cc1c:	1909883a 	add	r4,r3,r4
1001cc20:	1125c83a 	sub	r18,r2,r4
1001cc24:	90000526 	beq	r18,zero,1001cc3c <__umoddi3+0x94>
1001cc28:	8ca2983a 	sll	r17,r17,r18
1001cc2c:	8108d83a 	srl	r4,r16,r4
1001cc30:	34a6983a 	sll	r19,r6,r18
1001cc34:	84a8983a 	sll	r20,r16,r18
1001cc38:	2478b03a 	or	fp,r4,r17
1001cc3c:	982cd43a 	srli	r22,r19,16
1001cc40:	e009883a 	mov	r4,fp
1001cc44:	9dffffcc 	andi	r23,r19,65535
1001cc48:	b00b883a 	mov	r5,r22
1001cc4c:	0009c2c0 	call	10009c2c <__umodsi3>
1001cc50:	b00b883a 	mov	r5,r22
1001cc54:	e009883a 	mov	r4,fp
1001cc58:	102b883a 	mov	r21,r2
1001cc5c:	0009bc80 	call	10009bc8 <__udivsi3>
1001cc60:	100b883a 	mov	r5,r2
1001cc64:	b809883a 	mov	r4,r23
1001cc68:	0008ef00 	call	10008ef0 <__mulsi3>
1001cc6c:	a82a943a 	slli	r21,r21,16
1001cc70:	a006d43a 	srli	r3,r20,16
1001cc74:	1d46b03a 	or	r3,r3,r21
1001cc78:	1880032e 	bgeu	r3,r2,1001cc88 <__umoddi3+0xe0>
1001cc7c:	1cc7883a 	add	r3,r3,r19
1001cc80:	1cc00136 	bltu	r3,r19,1001cc88 <__umoddi3+0xe0>
1001cc84:	18813136 	bltu	r3,r2,1001d14c <__umoddi3+0x5a4>
1001cc88:	18a1c83a 	sub	r16,r3,r2
1001cc8c:	b00b883a 	mov	r5,r22
1001cc90:	8009883a 	mov	r4,r16
1001cc94:	0009c2c0 	call	10009c2c <__umodsi3>
1001cc98:	b00b883a 	mov	r5,r22
1001cc9c:	8009883a 	mov	r4,r16
1001cca0:	1023883a 	mov	r17,r2
1001cca4:	0009bc80 	call	10009bc8 <__udivsi3>
1001cca8:	100b883a 	mov	r5,r2
1001ccac:	b809883a 	mov	r4,r23
1001ccb0:	8822943a 	slli	r17,r17,16
1001ccb4:	0008ef00 	call	10008ef0 <__mulsi3>
1001ccb8:	a0ffffcc 	andi	r3,r20,65535
1001ccbc:	1c46b03a 	or	r3,r3,r17
1001ccc0:	1880042e 	bgeu	r3,r2,1001ccd4 <__umoddi3+0x12c>
1001ccc4:	1cc7883a 	add	r3,r3,r19
1001ccc8:	1cc00236 	bltu	r3,r19,1001ccd4 <__umoddi3+0x12c>
1001cccc:	1880012e 	bgeu	r3,r2,1001ccd4 <__umoddi3+0x12c>
1001ccd0:	1cc7883a 	add	r3,r3,r19
1001ccd4:	1885c83a 	sub	r2,r3,r2
1001ccd8:	1484d83a 	srl	r2,r2,r18
1001ccdc:	0007883a 	mov	r3,zero
1001cce0:	00005306 	br	1001ce30 <__umoddi3+0x288>
1001cce4:	29c05036 	bltu	r5,r7,1001ce28 <__umoddi3+0x280>
1001cce8:	00bfffd4 	movui	r2,65535
1001ccec:	11c05c2e 	bgeu	r2,r7,1001ce60 <__umoddi3+0x2b8>
1001ccf0:	00804034 	movhi	r2,256
1001ccf4:	10bfffc4 	addi	r2,r2,-1
1001ccf8:	11c10636 	bltu	r2,r7,1001d114 <__umoddi3+0x56c>
1001ccfc:	01000404 	movi	r4,16
1001cd00:	3904d83a 	srl	r2,r7,r4
1001cd04:	00c400b4 	movhi	r3,4098
1001cd08:	18cb0444 	addi	r3,r3,11281
1001cd0c:	1885883a 	add	r2,r3,r2
1001cd10:	14c00003 	ldbu	r19,0(r2)
1001cd14:	00c00804 	movi	r3,32
1001cd18:	9927883a 	add	r19,r19,r4
1001cd1c:	1ce9c83a 	sub	r20,r3,r19
1001cd20:	a0005c1e 	bne	r20,zero,1001ce94 <__umoddi3+0x2ec>
1001cd24:	3c400136 	bltu	r7,r17,1001cd2c <__umoddi3+0x184>
1001cd28:	81810a36 	bltu	r16,r6,1001d154 <__umoddi3+0x5ac>
1001cd2c:	8185c83a 	sub	r2,r16,r6
1001cd30:	89e3c83a 	sub	r17,r17,r7
1001cd34:	8089803a 	cmpltu	r4,r16,r2
1001cd38:	8939c83a 	sub	fp,r17,r4
1001cd3c:	e007883a 	mov	r3,fp
1001cd40:	00003b06 	br	1001ce30 <__umoddi3+0x288>
1001cd44:	3000041e 	bne	r6,zero,1001cd58 <__umoddi3+0x1b0>
1001cd48:	000b883a 	mov	r5,zero
1001cd4c:	01000044 	movi	r4,1
1001cd50:	0009bc80 	call	10009bc8 <__udivsi3>
1001cd54:	1027883a 	mov	r19,r2
1001cd58:	00bfffd4 	movui	r2,65535
1001cd5c:	14c0442e 	bgeu	r2,r19,1001ce70 <__umoddi3+0x2c8>
1001cd60:	00804034 	movhi	r2,256
1001cd64:	10bfffc4 	addi	r2,r2,-1
1001cd68:	14c0ec36 	bltu	r2,r19,1001d11c <__umoddi3+0x574>
1001cd6c:	00800404 	movi	r2,16
1001cd70:	9886d83a 	srl	r3,r19,r2
1001cd74:	010400b4 	movhi	r4,4098
1001cd78:	210b0444 	addi	r4,r4,11281
1001cd7c:	20c7883a 	add	r3,r4,r3
1001cd80:	18c00003 	ldbu	r3,0(r3)
1001cd84:	1887883a 	add	r3,r3,r2
1001cd88:	00800804 	movi	r2,32
1001cd8c:	10e5c83a 	sub	r18,r2,r3
1001cd90:	9000ab1e 	bne	r18,zero,1001d040 <__umoddi3+0x498>
1001cd94:	982cd43a 	srli	r22,r19,16
1001cd98:	8ce3c83a 	sub	r17,r17,r19
1001cd9c:	9dffffcc 	andi	r23,r19,65535
1001cda0:	b00b883a 	mov	r5,r22
1001cda4:	8809883a 	mov	r4,r17
1001cda8:	0009c2c0 	call	10009c2c <__umodsi3>
1001cdac:	b00b883a 	mov	r5,r22
1001cdb0:	8809883a 	mov	r4,r17
1001cdb4:	102b883a 	mov	r21,r2
1001cdb8:	0009bc80 	call	10009bc8 <__udivsi3>
1001cdbc:	b80b883a 	mov	r5,r23
1001cdc0:	1009883a 	mov	r4,r2
1001cdc4:	0008ef00 	call	10008ef0 <__mulsi3>
1001cdc8:	a82a943a 	slli	r21,r21,16
1001cdcc:	a006d43a 	srli	r3,r20,16
1001cdd0:	1d46b03a 	or	r3,r3,r21
1001cdd4:	1880042e 	bgeu	r3,r2,1001cde8 <__umoddi3+0x240>
1001cdd8:	1cc7883a 	add	r3,r3,r19
1001cddc:	1cc00236 	bltu	r3,r19,1001cde8 <__umoddi3+0x240>
1001cde0:	1880012e 	bgeu	r3,r2,1001cde8 <__umoddi3+0x240>
1001cde4:	1cc7883a 	add	r3,r3,r19
1001cde8:	18a1c83a 	sub	r16,r3,r2
1001cdec:	b00b883a 	mov	r5,r22
1001cdf0:	8009883a 	mov	r4,r16
1001cdf4:	0009c2c0 	call	10009c2c <__umodsi3>
1001cdf8:	1023883a 	mov	r17,r2
1001cdfc:	b00b883a 	mov	r5,r22
1001ce00:	8009883a 	mov	r4,r16
1001ce04:	0009bc80 	call	10009bc8 <__udivsi3>
1001ce08:	8822943a 	slli	r17,r17,16
1001ce0c:	b80b883a 	mov	r5,r23
1001ce10:	1009883a 	mov	r4,r2
1001ce14:	0008ef00 	call	10008ef0 <__mulsi3>
1001ce18:	a53fffcc 	andi	r20,r20,65535
1001ce1c:	a446b03a 	or	r3,r20,r17
1001ce20:	18bfac2e 	bgeu	r3,r2,1001ccd4 <__alt_data_end+0xf801ccd4>
1001ce24:	003fa706 	br	1001ccc4 <__alt_data_end+0xf801ccc4>
1001ce28:	2005883a 	mov	r2,r4
1001ce2c:	2807883a 	mov	r3,r5
1001ce30:	dfc00c17 	ldw	ra,48(sp)
1001ce34:	df000b17 	ldw	fp,44(sp)
1001ce38:	ddc00a17 	ldw	r23,40(sp)
1001ce3c:	dd800917 	ldw	r22,36(sp)
1001ce40:	dd400817 	ldw	r21,32(sp)
1001ce44:	dd000717 	ldw	r20,28(sp)
1001ce48:	dcc00617 	ldw	r19,24(sp)
1001ce4c:	dc800517 	ldw	r18,20(sp)
1001ce50:	dc400417 	ldw	r17,16(sp)
1001ce54:	dc000317 	ldw	r16,12(sp)
1001ce58:	dec00d04 	addi	sp,sp,52
1001ce5c:	f800283a 	ret
1001ce60:	04c03fc4 	movi	r19,255
1001ce64:	99c9803a 	cmpltu	r4,r19,r7
1001ce68:	200890fa 	slli	r4,r4,3
1001ce6c:	003fa406 	br	1001cd00 <__alt_data_end+0xf801cd00>
1001ce70:	00803fc4 	movi	r2,255
1001ce74:	14c5803a 	cmpltu	r2,r2,r19
1001ce78:	100490fa 	slli	r2,r2,3
1001ce7c:	003fbc06 	br	1001cd70 <__alt_data_end+0xf801cd70>
1001ce80:	00804034 	movhi	r2,256
1001ce84:	10bfffc4 	addi	r2,r2,-1
1001ce88:	1180a636 	bltu	r2,r6,1001d124 <__umoddi3+0x57c>
1001ce8c:	01000404 	movi	r4,16
1001ce90:	003f5c06 	br	1001cc04 <__alt_data_end+0xf801cc04>
1001ce94:	3d0e983a 	sll	r7,r7,r20
1001ce98:	34ead83a 	srl	r21,r6,r19
1001ce9c:	8cc6d83a 	srl	r3,r17,r19
1001cea0:	8d10983a 	sll	r8,r17,r20
1001cea4:	3d6ab03a 	or	r21,r7,r21
1001cea8:	a82cd43a 	srli	r22,r21,16
1001ceac:	84e2d83a 	srl	r17,r16,r19
1001ceb0:	1809883a 	mov	r4,r3
1001ceb4:	b00b883a 	mov	r5,r22
1001ceb8:	8a22b03a 	or	r17,r17,r8
1001cebc:	3524983a 	sll	r18,r6,r20
1001cec0:	dc400015 	stw	r17,0(sp)
1001cec4:	d8c00115 	stw	r3,4(sp)
1001cec8:	0009c2c0 	call	10009c2c <__umodsi3>
1001cecc:	d8c00117 	ldw	r3,4(sp)
1001ced0:	b00b883a 	mov	r5,r22
1001ced4:	1039883a 	mov	fp,r2
1001ced8:	1809883a 	mov	r4,r3
1001cedc:	0009bc80 	call	10009bc8 <__udivsi3>
1001cee0:	adffffcc 	andi	r23,r21,65535
1001cee4:	100b883a 	mov	r5,r2
1001cee8:	b809883a 	mov	r4,r23
1001ceec:	1023883a 	mov	r17,r2
1001cef0:	0008ef00 	call	10008ef0 <__mulsi3>
1001cef4:	d9400017 	ldw	r5,0(sp)
1001cef8:	e008943a 	slli	r4,fp,16
1001cefc:	8520983a 	sll	r16,r16,r20
1001cf00:	2806d43a 	srli	r3,r5,16
1001cf04:	1906b03a 	or	r3,r3,r4
1001cf08:	1880042e 	bgeu	r3,r2,1001cf1c <__umoddi3+0x374>
1001cf0c:	1d47883a 	add	r3,r3,r21
1001cf10:	893fffc4 	addi	r4,r17,-1
1001cf14:	1d40892e 	bgeu	r3,r21,1001d13c <__umoddi3+0x594>
1001cf18:	2023883a 	mov	r17,r4
1001cf1c:	18b9c83a 	sub	fp,r3,r2
1001cf20:	b00b883a 	mov	r5,r22
1001cf24:	e009883a 	mov	r4,fp
1001cf28:	0009c2c0 	call	10009c2c <__umodsi3>
1001cf2c:	b00b883a 	mov	r5,r22
1001cf30:	e009883a 	mov	r4,fp
1001cf34:	d8800215 	stw	r2,8(sp)
1001cf38:	0009bc80 	call	10009bc8 <__udivsi3>
1001cf3c:	100b883a 	mov	r5,r2
1001cf40:	b809883a 	mov	r4,r23
1001cf44:	102d883a 	mov	r22,r2
1001cf48:	0008ef00 	call	10008ef0 <__mulsi3>
1001cf4c:	d9800217 	ldw	r6,8(sp)
1001cf50:	d8c00017 	ldw	r3,0(sp)
1001cf54:	300c943a 	slli	r6,r6,16
1001cf58:	1a3fffcc 	andi	r8,r3,65535
1001cf5c:	4190b03a 	or	r8,r8,r6
1001cf60:	4080042e 	bgeu	r8,r2,1001cf74 <__umoddi3+0x3cc>
1001cf64:	4551883a 	add	r8,r8,r21
1001cf68:	b0ffffc4 	addi	r3,r22,-1
1001cf6c:	45406f2e 	bgeu	r8,r21,1001d12c <__umoddi3+0x584>
1001cf70:	182d883a 	mov	r22,r3
1001cf74:	880e943a 	slli	r7,r17,16
1001cf78:	9006d43a 	srli	r3,r18,16
1001cf7c:	91bfffcc 	andi	r6,r18,65535
1001cf80:	3dacb03a 	or	r22,r7,r22
1001cf84:	b02ed43a 	srli	r23,r22,16
1001cf88:	b5bfffcc 	andi	r22,r22,65535
1001cf8c:	300b883a 	mov	r5,r6
1001cf90:	b009883a 	mov	r4,r22
1001cf94:	40a3c83a 	sub	r17,r8,r2
1001cf98:	d8c00115 	stw	r3,4(sp)
1001cf9c:	d9800215 	stw	r6,8(sp)
1001cfa0:	0008ef00 	call	10008ef0 <__mulsi3>
1001cfa4:	d9800217 	ldw	r6,8(sp)
1001cfa8:	b809883a 	mov	r4,r23
1001cfac:	1039883a 	mov	fp,r2
1001cfb0:	300b883a 	mov	r5,r6
1001cfb4:	0008ef00 	call	10008ef0 <__mulsi3>
1001cfb8:	d8c00117 	ldw	r3,4(sp)
1001cfbc:	b809883a 	mov	r4,r23
1001cfc0:	d8800215 	stw	r2,8(sp)
1001cfc4:	180b883a 	mov	r5,r3
1001cfc8:	0008ef00 	call	10008ef0 <__mulsi3>
1001cfcc:	d8c00117 	ldw	r3,4(sp)
1001cfd0:	b009883a 	mov	r4,r22
1001cfd4:	102f883a 	mov	r23,r2
1001cfd8:	180b883a 	mov	r5,r3
1001cfdc:	0008ef00 	call	10008ef0 <__mulsi3>
1001cfe0:	d9800217 	ldw	r6,8(sp)
1001cfe4:	e006d43a 	srli	r3,fp,16
1001cfe8:	1185883a 	add	r2,r2,r6
1001cfec:	1885883a 	add	r2,r3,r2
1001cff0:	1180022e 	bgeu	r2,r6,1001cffc <__umoddi3+0x454>
1001cff4:	00c00074 	movhi	r3,1
1001cff8:	b8ef883a 	add	r23,r23,r3
1001cffc:	1006d43a 	srli	r3,r2,16
1001d000:	1004943a 	slli	r2,r2,16
1001d004:	e73fffcc 	andi	fp,fp,65535
1001d008:	1dc7883a 	add	r3,r3,r23
1001d00c:	1739883a 	add	fp,r2,fp
1001d010:	88c03a36 	bltu	r17,r3,1001d0fc <__umoddi3+0x554>
1001d014:	88c05126 	beq	r17,r3,1001d15c <__umoddi3+0x5b4>
1001d018:	88c9c83a 	sub	r4,r17,r3
1001d01c:	e00f883a 	mov	r7,fp
1001d020:	81cfc83a 	sub	r7,r16,r7
1001d024:	81c7803a 	cmpltu	r3,r16,r7
1001d028:	20c7c83a 	sub	r3,r4,r3
1001d02c:	1cc4983a 	sll	r2,r3,r19
1001d030:	3d0ed83a 	srl	r7,r7,r20
1001d034:	1d06d83a 	srl	r3,r3,r20
1001d038:	11c4b03a 	or	r2,r2,r7
1001d03c:	003f7c06 	br	1001ce30 <__alt_data_end+0xf801ce30>
1001d040:	9ca6983a 	sll	r19,r19,r18
1001d044:	88f8d83a 	srl	fp,r17,r3
1001d048:	80c4d83a 	srl	r2,r16,r3
1001d04c:	982cd43a 	srli	r22,r19,16
1001d050:	8ca2983a 	sll	r17,r17,r18
1001d054:	e009883a 	mov	r4,fp
1001d058:	b00b883a 	mov	r5,r22
1001d05c:	146ab03a 	or	r21,r2,r17
1001d060:	0009c2c0 	call	10009c2c <__umodsi3>
1001d064:	b00b883a 	mov	r5,r22
1001d068:	e009883a 	mov	r4,fp
1001d06c:	1029883a 	mov	r20,r2
1001d070:	9dffffcc 	andi	r23,r19,65535
1001d074:	0009bc80 	call	10009bc8 <__udivsi3>
1001d078:	b809883a 	mov	r4,r23
1001d07c:	100b883a 	mov	r5,r2
1001d080:	0008ef00 	call	10008ef0 <__mulsi3>
1001d084:	a008943a 	slli	r4,r20,16
1001d088:	a806d43a 	srli	r3,r21,16
1001d08c:	84a8983a 	sll	r20,r16,r18
1001d090:	1906b03a 	or	r3,r3,r4
1001d094:	1880042e 	bgeu	r3,r2,1001d0a8 <__umoddi3+0x500>
1001d098:	1cc7883a 	add	r3,r3,r19
1001d09c:	1cc00236 	bltu	r3,r19,1001d0a8 <__umoddi3+0x500>
1001d0a0:	1880012e 	bgeu	r3,r2,1001d0a8 <__umoddi3+0x500>
1001d0a4:	1cc7883a 	add	r3,r3,r19
1001d0a8:	18a3c83a 	sub	r17,r3,r2
1001d0ac:	b00b883a 	mov	r5,r22
1001d0b0:	8809883a 	mov	r4,r17
1001d0b4:	0009c2c0 	call	10009c2c <__umodsi3>
1001d0b8:	b00b883a 	mov	r5,r22
1001d0bc:	8809883a 	mov	r4,r17
1001d0c0:	1021883a 	mov	r16,r2
1001d0c4:	0009bc80 	call	10009bc8 <__udivsi3>
1001d0c8:	100b883a 	mov	r5,r2
1001d0cc:	b809883a 	mov	r4,r23
1001d0d0:	8020943a 	slli	r16,r16,16
1001d0d4:	0008ef00 	call	10008ef0 <__mulsi3>
1001d0d8:	a8ffffcc 	andi	r3,r21,65535
1001d0dc:	1c06b03a 	or	r3,r3,r16
1001d0e0:	1880042e 	bgeu	r3,r2,1001d0f4 <__umoddi3+0x54c>
1001d0e4:	1cc7883a 	add	r3,r3,r19
1001d0e8:	1cc00236 	bltu	r3,r19,1001d0f4 <__umoddi3+0x54c>
1001d0ec:	1880012e 	bgeu	r3,r2,1001d0f4 <__umoddi3+0x54c>
1001d0f0:	1cc7883a 	add	r3,r3,r19
1001d0f4:	18a3c83a 	sub	r17,r3,r2
1001d0f8:	003f2906 	br	1001cda0 <__alt_data_end+0xf801cda0>
1001d0fc:	e48fc83a 	sub	r7,fp,r18
1001d100:	1d49c83a 	sub	r4,r3,r21
1001d104:	e1f9803a 	cmpltu	fp,fp,r7
1001d108:	2739c83a 	sub	fp,r4,fp
1001d10c:	8f09c83a 	sub	r4,r17,fp
1001d110:	003fc306 	br	1001d020 <__alt_data_end+0xf801d020>
1001d114:	01000604 	movi	r4,24
1001d118:	003ef906 	br	1001cd00 <__alt_data_end+0xf801cd00>
1001d11c:	00800604 	movi	r2,24
1001d120:	003f1306 	br	1001cd70 <__alt_data_end+0xf801cd70>
1001d124:	01000604 	movi	r4,24
1001d128:	003eb606 	br	1001cc04 <__alt_data_end+0xf801cc04>
1001d12c:	40bf902e 	bgeu	r8,r2,1001cf70 <__alt_data_end+0xf801cf70>
1001d130:	b5bfff84 	addi	r22,r22,-2
1001d134:	4551883a 	add	r8,r8,r21
1001d138:	003f8e06 	br	1001cf74 <__alt_data_end+0xf801cf74>
1001d13c:	18bf762e 	bgeu	r3,r2,1001cf18 <__alt_data_end+0xf801cf18>
1001d140:	8c7fff84 	addi	r17,r17,-2
1001d144:	1d47883a 	add	r3,r3,r21
1001d148:	003f7406 	br	1001cf1c <__alt_data_end+0xf801cf1c>
1001d14c:	1cc7883a 	add	r3,r3,r19
1001d150:	003ecd06 	br	1001cc88 <__alt_data_end+0xf801cc88>
1001d154:	8005883a 	mov	r2,r16
1001d158:	003ef806 	br	1001cd3c <__alt_data_end+0xf801cd3c>
1001d15c:	873fe736 	bltu	r16,fp,1001d0fc <__alt_data_end+0xf801d0fc>
1001d160:	e00f883a 	mov	r7,fp
1001d164:	0009883a 	mov	r4,zero
1001d168:	003fad06 	br	1001d020 <__alt_data_end+0xf801d020>

1001d16c <__eqsf2>:
1001d16c:	2006d5fa 	srli	r3,r4,23
1001d170:	280cd5fa 	srli	r6,r5,23
1001d174:	01c02034 	movhi	r7,128
1001d178:	39ffffc4 	addi	r7,r7,-1
1001d17c:	18c03fcc 	andi	r3,r3,255
1001d180:	02003fc4 	movi	r8,255
1001d184:	3904703a 	and	r2,r7,r4
1001d188:	31803fcc 	andi	r6,r6,255
1001d18c:	394e703a 	and	r7,r7,r5
1001d190:	2008d7fa 	srli	r4,r4,31
1001d194:	280ad7fa 	srli	r5,r5,31
1001d198:	1a000d26 	beq	r3,r8,1001d1d0 <__eqsf2+0x64>
1001d19c:	02003fc4 	movi	r8,255
1001d1a0:	32000826 	beq	r6,r8,1001d1c4 <__eqsf2+0x58>
1001d1a4:	19800226 	beq	r3,r6,1001d1b0 <__eqsf2+0x44>
1001d1a8:	00800044 	movi	r2,1
1001d1ac:	f800283a 	ret
1001d1b0:	11fffd1e 	bne	r2,r7,1001d1a8 <__alt_data_end+0xf801d1a8>
1001d1b4:	21400926 	beq	r4,r5,1001d1dc <__eqsf2+0x70>
1001d1b8:	183ffb1e 	bne	r3,zero,1001d1a8 <__alt_data_end+0xf801d1a8>
1001d1bc:	1004c03a 	cmpne	r2,r2,zero
1001d1c0:	f800283a 	ret
1001d1c4:	383ff726 	beq	r7,zero,1001d1a4 <__alt_data_end+0xf801d1a4>
1001d1c8:	00800044 	movi	r2,1
1001d1cc:	f800283a 	ret
1001d1d0:	103ff226 	beq	r2,zero,1001d19c <__alt_data_end+0xf801d19c>
1001d1d4:	00800044 	movi	r2,1
1001d1d8:	f800283a 	ret
1001d1dc:	0005883a 	mov	r2,zero
1001d1e0:	f800283a 	ret

1001d1e4 <__gesf2>:
1001d1e4:	2004d5fa 	srli	r2,r4,23
1001d1e8:	2806d5fa 	srli	r3,r5,23
1001d1ec:	01802034 	movhi	r6,128
1001d1f0:	31bfffc4 	addi	r6,r6,-1
1001d1f4:	10803fcc 	andi	r2,r2,255
1001d1f8:	01c03fc4 	movi	r7,255
1001d1fc:	3110703a 	and	r8,r6,r4
1001d200:	18c03fcc 	andi	r3,r3,255
1001d204:	314c703a 	and	r6,r6,r5
1001d208:	2008d7fa 	srli	r4,r4,31
1001d20c:	280ad7fa 	srli	r5,r5,31
1001d210:	11c01926 	beq	r2,r7,1001d278 <__gesf2+0x94>
1001d214:	01c03fc4 	movi	r7,255
1001d218:	19c00f26 	beq	r3,r7,1001d258 <__gesf2+0x74>
1001d21c:	1000061e 	bne	r2,zero,1001d238 <__gesf2+0x54>
1001d220:	400f003a 	cmpeq	r7,r8,zero
1001d224:	1800071e 	bne	r3,zero,1001d244 <__gesf2+0x60>
1001d228:	3000061e 	bne	r6,zero,1001d244 <__gesf2+0x60>
1001d22c:	0005883a 	mov	r2,zero
1001d230:	40000e1e 	bne	r8,zero,1001d26c <__gesf2+0x88>
1001d234:	f800283a 	ret
1001d238:	18000a1e 	bne	r3,zero,1001d264 <__gesf2+0x80>
1001d23c:	30000b26 	beq	r6,zero,1001d26c <__gesf2+0x88>
1001d240:	000f883a 	mov	r7,zero
1001d244:	29403fcc 	andi	r5,r5,255
1001d248:	38000726 	beq	r7,zero,1001d268 <__gesf2+0x84>
1001d24c:	28000826 	beq	r5,zero,1001d270 <__gesf2+0x8c>
1001d250:	00800044 	movi	r2,1
1001d254:	f800283a 	ret
1001d258:	303ff026 	beq	r6,zero,1001d21c <__alt_data_end+0xf801d21c>
1001d25c:	00bfff84 	movi	r2,-2
1001d260:	f800283a 	ret
1001d264:	29403fcc 	andi	r5,r5,255
1001d268:	21400526 	beq	r4,r5,1001d280 <__gesf2+0x9c>
1001d26c:	203ff826 	beq	r4,zero,1001d250 <__alt_data_end+0xf801d250>
1001d270:	00bfffc4 	movi	r2,-1
1001d274:	f800283a 	ret
1001d278:	403fe626 	beq	r8,zero,1001d214 <__alt_data_end+0xf801d214>
1001d27c:	003ff706 	br	1001d25c <__alt_data_end+0xf801d25c>
1001d280:	18bffa16 	blt	r3,r2,1001d26c <__alt_data_end+0xf801d26c>
1001d284:	10c00216 	blt	r2,r3,1001d290 <__gesf2+0xac>
1001d288:	323ff836 	bltu	r6,r8,1001d26c <__alt_data_end+0xf801d26c>
1001d28c:	4180022e 	bgeu	r8,r6,1001d298 <__gesf2+0xb4>
1001d290:	203fef1e 	bne	r4,zero,1001d250 <__alt_data_end+0xf801d250>
1001d294:	003ff606 	br	1001d270 <__alt_data_end+0xf801d270>
1001d298:	0005883a 	mov	r2,zero
1001d29c:	f800283a 	ret

1001d2a0 <__lesf2>:
1001d2a0:	2004d5fa 	srli	r2,r4,23
1001d2a4:	280cd5fa 	srli	r6,r5,23
1001d2a8:	00c02034 	movhi	r3,128
1001d2ac:	18ffffc4 	addi	r3,r3,-1
1001d2b0:	10803fcc 	andi	r2,r2,255
1001d2b4:	01c03fc4 	movi	r7,255
1001d2b8:	1910703a 	and	r8,r3,r4
1001d2bc:	31803fcc 	andi	r6,r6,255
1001d2c0:	1946703a 	and	r3,r3,r5
1001d2c4:	2008d7fa 	srli	r4,r4,31
1001d2c8:	280ad7fa 	srli	r5,r5,31
1001d2cc:	11c01b26 	beq	r2,r7,1001d33c <__lesf2+0x9c>
1001d2d0:	01c03fc4 	movi	r7,255
1001d2d4:	31c01126 	beq	r6,r7,1001d31c <__lesf2+0x7c>
1001d2d8:	1000071e 	bne	r2,zero,1001d2f8 <__lesf2+0x58>
1001d2dc:	400f003a 	cmpeq	r7,r8,zero
1001d2e0:	21003fcc 	andi	r4,r4,255
1001d2e4:	3000081e 	bne	r6,zero,1001d308 <__lesf2+0x68>
1001d2e8:	1800071e 	bne	r3,zero,1001d308 <__lesf2+0x68>
1001d2ec:	0005883a 	mov	r2,zero
1001d2f0:	40000f1e 	bne	r8,zero,1001d330 <__lesf2+0x90>
1001d2f4:	f800283a 	ret
1001d2f8:	21003fcc 	andi	r4,r4,255
1001d2fc:	30000a1e 	bne	r6,zero,1001d328 <__lesf2+0x88>
1001d300:	18000b26 	beq	r3,zero,1001d330 <__lesf2+0x90>
1001d304:	000f883a 	mov	r7,zero
1001d308:	29403fcc 	andi	r5,r5,255
1001d30c:	38000726 	beq	r7,zero,1001d32c <__lesf2+0x8c>
1001d310:	28000826 	beq	r5,zero,1001d334 <__lesf2+0x94>
1001d314:	00800044 	movi	r2,1
1001d318:	f800283a 	ret
1001d31c:	183fee26 	beq	r3,zero,1001d2d8 <__alt_data_end+0xf801d2d8>
1001d320:	00800084 	movi	r2,2
1001d324:	f800283a 	ret
1001d328:	29403fcc 	andi	r5,r5,255
1001d32c:	21400626 	beq	r4,r5,1001d348 <__lesf2+0xa8>
1001d330:	203ff826 	beq	r4,zero,1001d314 <__alt_data_end+0xf801d314>
1001d334:	00bfffc4 	movi	r2,-1
1001d338:	f800283a 	ret
1001d33c:	403fe426 	beq	r8,zero,1001d2d0 <__alt_data_end+0xf801d2d0>
1001d340:	00800084 	movi	r2,2
1001d344:	f800283a 	ret
1001d348:	30bff916 	blt	r6,r2,1001d330 <__alt_data_end+0xf801d330>
1001d34c:	11800216 	blt	r2,r6,1001d358 <__lesf2+0xb8>
1001d350:	1a3ff736 	bltu	r3,r8,1001d330 <__alt_data_end+0xf801d330>
1001d354:	40c0022e 	bgeu	r8,r3,1001d360 <__lesf2+0xc0>
1001d358:	203fee1e 	bne	r4,zero,1001d314 <__alt_data_end+0xf801d314>
1001d35c:	003ff506 	br	1001d334 <__alt_data_end+0xf801d334>
1001d360:	0005883a 	mov	r2,zero
1001d364:	f800283a 	ret

1001d368 <__adddf3>:
1001d368:	02c00434 	movhi	r11,16
1001d36c:	5affffc4 	addi	r11,r11,-1
1001d370:	2806d7fa 	srli	r3,r5,31
1001d374:	2ad4703a 	and	r10,r5,r11
1001d378:	3ad2703a 	and	r9,r7,r11
1001d37c:	3804d53a 	srli	r2,r7,20
1001d380:	3018d77a 	srli	r12,r6,29
1001d384:	280ad53a 	srli	r5,r5,20
1001d388:	501490fa 	slli	r10,r10,3
1001d38c:	2010d77a 	srli	r8,r4,29
1001d390:	481290fa 	slli	r9,r9,3
1001d394:	380ed7fa 	srli	r7,r7,31
1001d398:	defffb04 	addi	sp,sp,-20
1001d39c:	dc800215 	stw	r18,8(sp)
1001d3a0:	dc400115 	stw	r17,4(sp)
1001d3a4:	dc000015 	stw	r16,0(sp)
1001d3a8:	dfc00415 	stw	ra,16(sp)
1001d3ac:	dcc00315 	stw	r19,12(sp)
1001d3b0:	1c803fcc 	andi	r18,r3,255
1001d3b4:	2c01ffcc 	andi	r16,r5,2047
1001d3b8:	5210b03a 	or	r8,r10,r8
1001d3bc:	202290fa 	slli	r17,r4,3
1001d3c0:	1081ffcc 	andi	r2,r2,2047
1001d3c4:	4b12b03a 	or	r9,r9,r12
1001d3c8:	300c90fa 	slli	r6,r6,3
1001d3cc:	91c07526 	beq	r18,r7,1001d5a4 <__adddf3+0x23c>
1001d3d0:	8087c83a 	sub	r3,r16,r2
1001d3d4:	00c0ab0e 	bge	zero,r3,1001d684 <__adddf3+0x31c>
1001d3d8:	10002a1e 	bne	r2,zero,1001d484 <__adddf3+0x11c>
1001d3dc:	4984b03a 	or	r2,r9,r6
1001d3e0:	1000961e 	bne	r2,zero,1001d63c <__adddf3+0x2d4>
1001d3e4:	888001cc 	andi	r2,r17,7
1001d3e8:	10000726 	beq	r2,zero,1001d408 <__adddf3+0xa0>
1001d3ec:	888003cc 	andi	r2,r17,15
1001d3f0:	00c00104 	movi	r3,4
1001d3f4:	10c00426 	beq	r2,r3,1001d408 <__adddf3+0xa0>
1001d3f8:	88c7883a 	add	r3,r17,r3
1001d3fc:	1c63803a 	cmpltu	r17,r3,r17
1001d400:	4451883a 	add	r8,r8,r17
1001d404:	1823883a 	mov	r17,r3
1001d408:	4080202c 	andhi	r2,r8,128
1001d40c:	10005926 	beq	r2,zero,1001d574 <__adddf3+0x20c>
1001d410:	84000044 	addi	r16,r16,1
1001d414:	0081ffc4 	movi	r2,2047
1001d418:	8080ba26 	beq	r16,r2,1001d704 <__adddf3+0x39c>
1001d41c:	00bfe034 	movhi	r2,65408
1001d420:	10bfffc4 	addi	r2,r2,-1
1001d424:	4090703a 	and	r8,r8,r2
1001d428:	4004977a 	slli	r2,r8,29
1001d42c:	4010927a 	slli	r8,r8,9
1001d430:	8822d0fa 	srli	r17,r17,3
1001d434:	8401ffcc 	andi	r16,r16,2047
1001d438:	4010d33a 	srli	r8,r8,12
1001d43c:	9007883a 	mov	r3,r18
1001d440:	1444b03a 	or	r2,r2,r17
1001d444:	8401ffcc 	andi	r16,r16,2047
1001d448:	8020953a 	slli	r16,r16,20
1001d44c:	18c03fcc 	andi	r3,r3,255
1001d450:	01000434 	movhi	r4,16
1001d454:	213fffc4 	addi	r4,r4,-1
1001d458:	180697fa 	slli	r3,r3,31
1001d45c:	4110703a 	and	r8,r8,r4
1001d460:	4410b03a 	or	r8,r8,r16
1001d464:	40c6b03a 	or	r3,r8,r3
1001d468:	dfc00417 	ldw	ra,16(sp)
1001d46c:	dcc00317 	ldw	r19,12(sp)
1001d470:	dc800217 	ldw	r18,8(sp)
1001d474:	dc400117 	ldw	r17,4(sp)
1001d478:	dc000017 	ldw	r16,0(sp)
1001d47c:	dec00504 	addi	sp,sp,20
1001d480:	f800283a 	ret
1001d484:	0081ffc4 	movi	r2,2047
1001d488:	80bfd626 	beq	r16,r2,1001d3e4 <__alt_data_end+0xf801d3e4>
1001d48c:	4a402034 	orhi	r9,r9,128
1001d490:	00800e04 	movi	r2,56
1001d494:	10c09f16 	blt	r2,r3,1001d714 <__adddf3+0x3ac>
1001d498:	008007c4 	movi	r2,31
1001d49c:	10c0c216 	blt	r2,r3,1001d7a8 <__adddf3+0x440>
1001d4a0:	00800804 	movi	r2,32
1001d4a4:	10c5c83a 	sub	r2,r2,r3
1001d4a8:	488a983a 	sll	r5,r9,r2
1001d4ac:	30c8d83a 	srl	r4,r6,r3
1001d4b0:	3084983a 	sll	r2,r6,r2
1001d4b4:	48c6d83a 	srl	r3,r9,r3
1001d4b8:	290cb03a 	or	r6,r5,r4
1001d4bc:	1004c03a 	cmpne	r2,r2,zero
1001d4c0:	308cb03a 	or	r6,r6,r2
1001d4c4:	898dc83a 	sub	r6,r17,r6
1001d4c8:	89a3803a 	cmpltu	r17,r17,r6
1001d4cc:	40d1c83a 	sub	r8,r8,r3
1001d4d0:	4451c83a 	sub	r8,r8,r17
1001d4d4:	3023883a 	mov	r17,r6
1001d4d8:	4080202c 	andhi	r2,r8,128
1001d4dc:	10002326 	beq	r2,zero,1001d56c <__adddf3+0x204>
1001d4e0:	04c02034 	movhi	r19,128
1001d4e4:	9cffffc4 	addi	r19,r19,-1
1001d4e8:	44e6703a 	and	r19,r8,r19
1001d4ec:	98007626 	beq	r19,zero,1001d6c8 <__adddf3+0x360>
1001d4f0:	9809883a 	mov	r4,r19
1001d4f4:	0009a6c0 	call	10009a6c <__clzsi2>
1001d4f8:	10fffe04 	addi	r3,r2,-8
1001d4fc:	010007c4 	movi	r4,31
1001d500:	20c07716 	blt	r4,r3,1001d6e0 <__adddf3+0x378>
1001d504:	00800804 	movi	r2,32
1001d508:	10c5c83a 	sub	r2,r2,r3
1001d50c:	8884d83a 	srl	r2,r17,r2
1001d510:	98d0983a 	sll	r8,r19,r3
1001d514:	88e2983a 	sll	r17,r17,r3
1001d518:	1204b03a 	or	r2,r2,r8
1001d51c:	1c007416 	blt	r3,r16,1001d6f0 <__adddf3+0x388>
1001d520:	1c21c83a 	sub	r16,r3,r16
1001d524:	82000044 	addi	r8,r16,1
1001d528:	00c007c4 	movi	r3,31
1001d52c:	1a009116 	blt	r3,r8,1001d774 <__adddf3+0x40c>
1001d530:	00c00804 	movi	r3,32
1001d534:	1a07c83a 	sub	r3,r3,r8
1001d538:	8a08d83a 	srl	r4,r17,r8
1001d53c:	88e2983a 	sll	r17,r17,r3
1001d540:	10c6983a 	sll	r3,r2,r3
1001d544:	1210d83a 	srl	r8,r2,r8
1001d548:	8804c03a 	cmpne	r2,r17,zero
1001d54c:	1906b03a 	or	r3,r3,r4
1001d550:	18a2b03a 	or	r17,r3,r2
1001d554:	0021883a 	mov	r16,zero
1001d558:	003fa206 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d55c:	1890b03a 	or	r8,r3,r2
1001d560:	40017d26 	beq	r8,zero,1001db58 <__adddf3+0x7f0>
1001d564:	1011883a 	mov	r8,r2
1001d568:	1823883a 	mov	r17,r3
1001d56c:	888001cc 	andi	r2,r17,7
1001d570:	103f9e1e 	bne	r2,zero,1001d3ec <__alt_data_end+0xf801d3ec>
1001d574:	4004977a 	slli	r2,r8,29
1001d578:	8822d0fa 	srli	r17,r17,3
1001d57c:	4010d0fa 	srli	r8,r8,3
1001d580:	9007883a 	mov	r3,r18
1001d584:	1444b03a 	or	r2,r2,r17
1001d588:	0101ffc4 	movi	r4,2047
1001d58c:	81002426 	beq	r16,r4,1001d620 <__adddf3+0x2b8>
1001d590:	8120703a 	and	r16,r16,r4
1001d594:	01000434 	movhi	r4,16
1001d598:	213fffc4 	addi	r4,r4,-1
1001d59c:	4110703a 	and	r8,r8,r4
1001d5a0:	003fa806 	br	1001d444 <__alt_data_end+0xf801d444>
1001d5a4:	8089c83a 	sub	r4,r16,r2
1001d5a8:	01005e0e 	bge	zero,r4,1001d724 <__adddf3+0x3bc>
1001d5ac:	10002b26 	beq	r2,zero,1001d65c <__adddf3+0x2f4>
1001d5b0:	0081ffc4 	movi	r2,2047
1001d5b4:	80bf8b26 	beq	r16,r2,1001d3e4 <__alt_data_end+0xf801d3e4>
1001d5b8:	4a402034 	orhi	r9,r9,128
1001d5bc:	00800e04 	movi	r2,56
1001d5c0:	1100a40e 	bge	r2,r4,1001d854 <__adddf3+0x4ec>
1001d5c4:	498cb03a 	or	r6,r9,r6
1001d5c8:	300ac03a 	cmpne	r5,r6,zero
1001d5cc:	0013883a 	mov	r9,zero
1001d5d0:	2c4b883a 	add	r5,r5,r17
1001d5d4:	2c63803a 	cmpltu	r17,r5,r17
1001d5d8:	4a11883a 	add	r8,r9,r8
1001d5dc:	8a11883a 	add	r8,r17,r8
1001d5e0:	2823883a 	mov	r17,r5
1001d5e4:	4080202c 	andhi	r2,r8,128
1001d5e8:	103fe026 	beq	r2,zero,1001d56c <__alt_data_end+0xf801d56c>
1001d5ec:	84000044 	addi	r16,r16,1
1001d5f0:	0081ffc4 	movi	r2,2047
1001d5f4:	8080d226 	beq	r16,r2,1001d940 <__adddf3+0x5d8>
1001d5f8:	00bfe034 	movhi	r2,65408
1001d5fc:	10bfffc4 	addi	r2,r2,-1
1001d600:	4090703a 	and	r8,r8,r2
1001d604:	880ad07a 	srli	r5,r17,1
1001d608:	400897fa 	slli	r4,r8,31
1001d60c:	88c0004c 	andi	r3,r17,1
1001d610:	28e2b03a 	or	r17,r5,r3
1001d614:	4010d07a 	srli	r8,r8,1
1001d618:	2462b03a 	or	r17,r4,r17
1001d61c:	003f7106 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d620:	4088b03a 	or	r4,r8,r2
1001d624:	20014526 	beq	r4,zero,1001db3c <__adddf3+0x7d4>
1001d628:	01000434 	movhi	r4,16
1001d62c:	42000234 	orhi	r8,r8,8
1001d630:	213fffc4 	addi	r4,r4,-1
1001d634:	4110703a 	and	r8,r8,r4
1001d638:	003f8206 	br	1001d444 <__alt_data_end+0xf801d444>
1001d63c:	18ffffc4 	addi	r3,r3,-1
1001d640:	1800491e 	bne	r3,zero,1001d768 <__adddf3+0x400>
1001d644:	898bc83a 	sub	r5,r17,r6
1001d648:	8963803a 	cmpltu	r17,r17,r5
1001d64c:	4251c83a 	sub	r8,r8,r9
1001d650:	4451c83a 	sub	r8,r8,r17
1001d654:	2823883a 	mov	r17,r5
1001d658:	003f9f06 	br	1001d4d8 <__alt_data_end+0xf801d4d8>
1001d65c:	4984b03a 	or	r2,r9,r6
1001d660:	103f6026 	beq	r2,zero,1001d3e4 <__alt_data_end+0xf801d3e4>
1001d664:	213fffc4 	addi	r4,r4,-1
1001d668:	2000931e 	bne	r4,zero,1001d8b8 <__adddf3+0x550>
1001d66c:	898d883a 	add	r6,r17,r6
1001d670:	3463803a 	cmpltu	r17,r6,r17
1001d674:	4251883a 	add	r8,r8,r9
1001d678:	8a11883a 	add	r8,r17,r8
1001d67c:	3023883a 	mov	r17,r6
1001d680:	003fd806 	br	1001d5e4 <__alt_data_end+0xf801d5e4>
1001d684:	1800541e 	bne	r3,zero,1001d7d8 <__adddf3+0x470>
1001d688:	80800044 	addi	r2,r16,1
1001d68c:	1081ffcc 	andi	r2,r2,2047
1001d690:	00c00044 	movi	r3,1
1001d694:	1880a00e 	bge	r3,r2,1001d918 <__adddf3+0x5b0>
1001d698:	8989c83a 	sub	r4,r17,r6
1001d69c:	8905803a 	cmpltu	r2,r17,r4
1001d6a0:	4267c83a 	sub	r19,r8,r9
1001d6a4:	98a7c83a 	sub	r19,r19,r2
1001d6a8:	9880202c 	andhi	r2,r19,128
1001d6ac:	10006326 	beq	r2,zero,1001d83c <__adddf3+0x4d4>
1001d6b0:	3463c83a 	sub	r17,r6,r17
1001d6b4:	4a07c83a 	sub	r3,r9,r8
1001d6b8:	344d803a 	cmpltu	r6,r6,r17
1001d6bc:	19a7c83a 	sub	r19,r3,r6
1001d6c0:	3825883a 	mov	r18,r7
1001d6c4:	983f8a1e 	bne	r19,zero,1001d4f0 <__alt_data_end+0xf801d4f0>
1001d6c8:	8809883a 	mov	r4,r17
1001d6cc:	0009a6c0 	call	10009a6c <__clzsi2>
1001d6d0:	10800804 	addi	r2,r2,32
1001d6d4:	10fffe04 	addi	r3,r2,-8
1001d6d8:	010007c4 	movi	r4,31
1001d6dc:	20ff890e 	bge	r4,r3,1001d504 <__alt_data_end+0xf801d504>
1001d6e0:	10bff604 	addi	r2,r2,-40
1001d6e4:	8884983a 	sll	r2,r17,r2
1001d6e8:	0023883a 	mov	r17,zero
1001d6ec:	1c3f8c0e 	bge	r3,r16,1001d520 <__alt_data_end+0xf801d520>
1001d6f0:	023fe034 	movhi	r8,65408
1001d6f4:	423fffc4 	addi	r8,r8,-1
1001d6f8:	80e1c83a 	sub	r16,r16,r3
1001d6fc:	1210703a 	and	r8,r2,r8
1001d700:	003f3806 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d704:	9007883a 	mov	r3,r18
1001d708:	0011883a 	mov	r8,zero
1001d70c:	0005883a 	mov	r2,zero
1001d710:	003f4c06 	br	1001d444 <__alt_data_end+0xf801d444>
1001d714:	498cb03a 	or	r6,r9,r6
1001d718:	300cc03a 	cmpne	r6,r6,zero
1001d71c:	0007883a 	mov	r3,zero
1001d720:	003f6806 	br	1001d4c4 <__alt_data_end+0xf801d4c4>
1001d724:	20009c1e 	bne	r4,zero,1001d998 <__adddf3+0x630>
1001d728:	80800044 	addi	r2,r16,1
1001d72c:	1141ffcc 	andi	r5,r2,2047
1001d730:	01000044 	movi	r4,1
1001d734:	2140670e 	bge	r4,r5,1001d8d4 <__adddf3+0x56c>
1001d738:	0101ffc4 	movi	r4,2047
1001d73c:	11007f26 	beq	r2,r4,1001d93c <__adddf3+0x5d4>
1001d740:	898d883a 	add	r6,r17,r6
1001d744:	4247883a 	add	r3,r8,r9
1001d748:	3451803a 	cmpltu	r8,r6,r17
1001d74c:	40d1883a 	add	r8,r8,r3
1001d750:	402297fa 	slli	r17,r8,31
1001d754:	300cd07a 	srli	r6,r6,1
1001d758:	4010d07a 	srli	r8,r8,1
1001d75c:	1021883a 	mov	r16,r2
1001d760:	89a2b03a 	or	r17,r17,r6
1001d764:	003f1f06 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d768:	0081ffc4 	movi	r2,2047
1001d76c:	80bf481e 	bne	r16,r2,1001d490 <__alt_data_end+0xf801d490>
1001d770:	003f1c06 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d774:	843ff844 	addi	r16,r16,-31
1001d778:	01000804 	movi	r4,32
1001d77c:	1406d83a 	srl	r3,r2,r16
1001d780:	41005026 	beq	r8,r4,1001d8c4 <__adddf3+0x55c>
1001d784:	01001004 	movi	r4,64
1001d788:	2211c83a 	sub	r8,r4,r8
1001d78c:	1204983a 	sll	r2,r2,r8
1001d790:	88a2b03a 	or	r17,r17,r2
1001d794:	8822c03a 	cmpne	r17,r17,zero
1001d798:	1c62b03a 	or	r17,r3,r17
1001d79c:	0011883a 	mov	r8,zero
1001d7a0:	0021883a 	mov	r16,zero
1001d7a4:	003f7106 	br	1001d56c <__alt_data_end+0xf801d56c>
1001d7a8:	193ff804 	addi	r4,r3,-32
1001d7ac:	00800804 	movi	r2,32
1001d7b0:	4908d83a 	srl	r4,r9,r4
1001d7b4:	18804526 	beq	r3,r2,1001d8cc <__adddf3+0x564>
1001d7b8:	00801004 	movi	r2,64
1001d7bc:	10c5c83a 	sub	r2,r2,r3
1001d7c0:	4886983a 	sll	r3,r9,r2
1001d7c4:	198cb03a 	or	r6,r3,r6
1001d7c8:	300cc03a 	cmpne	r6,r6,zero
1001d7cc:	218cb03a 	or	r6,r4,r6
1001d7d0:	0007883a 	mov	r3,zero
1001d7d4:	003f3b06 	br	1001d4c4 <__alt_data_end+0xf801d4c4>
1001d7d8:	80002a26 	beq	r16,zero,1001d884 <__adddf3+0x51c>
1001d7dc:	0101ffc4 	movi	r4,2047
1001d7e0:	11006826 	beq	r2,r4,1001d984 <__adddf3+0x61c>
1001d7e4:	00c7c83a 	sub	r3,zero,r3
1001d7e8:	42002034 	orhi	r8,r8,128
1001d7ec:	01000e04 	movi	r4,56
1001d7f0:	20c07c16 	blt	r4,r3,1001d9e4 <__adddf3+0x67c>
1001d7f4:	010007c4 	movi	r4,31
1001d7f8:	20c0da16 	blt	r4,r3,1001db64 <__adddf3+0x7fc>
1001d7fc:	01000804 	movi	r4,32
1001d800:	20c9c83a 	sub	r4,r4,r3
1001d804:	4114983a 	sll	r10,r8,r4
1001d808:	88cad83a 	srl	r5,r17,r3
1001d80c:	8908983a 	sll	r4,r17,r4
1001d810:	40c6d83a 	srl	r3,r8,r3
1001d814:	5162b03a 	or	r17,r10,r5
1001d818:	2008c03a 	cmpne	r4,r4,zero
1001d81c:	8922b03a 	or	r17,r17,r4
1001d820:	3463c83a 	sub	r17,r6,r17
1001d824:	48c7c83a 	sub	r3,r9,r3
1001d828:	344d803a 	cmpltu	r6,r6,r17
1001d82c:	1991c83a 	sub	r8,r3,r6
1001d830:	1021883a 	mov	r16,r2
1001d834:	3825883a 	mov	r18,r7
1001d838:	003f2706 	br	1001d4d8 <__alt_data_end+0xf801d4d8>
1001d83c:	24d0b03a 	or	r8,r4,r19
1001d840:	40001b1e 	bne	r8,zero,1001d8b0 <__adddf3+0x548>
1001d844:	0005883a 	mov	r2,zero
1001d848:	0007883a 	mov	r3,zero
1001d84c:	0021883a 	mov	r16,zero
1001d850:	003f4d06 	br	1001d588 <__alt_data_end+0xf801d588>
1001d854:	008007c4 	movi	r2,31
1001d858:	11003c16 	blt	r2,r4,1001d94c <__adddf3+0x5e4>
1001d85c:	00800804 	movi	r2,32
1001d860:	1105c83a 	sub	r2,r2,r4
1001d864:	488e983a 	sll	r7,r9,r2
1001d868:	310ad83a 	srl	r5,r6,r4
1001d86c:	3084983a 	sll	r2,r6,r2
1001d870:	4912d83a 	srl	r9,r9,r4
1001d874:	394ab03a 	or	r5,r7,r5
1001d878:	1004c03a 	cmpne	r2,r2,zero
1001d87c:	288ab03a 	or	r5,r5,r2
1001d880:	003f5306 	br	1001d5d0 <__alt_data_end+0xf801d5d0>
1001d884:	4448b03a 	or	r4,r8,r17
1001d888:	20003e26 	beq	r4,zero,1001d984 <__adddf3+0x61c>
1001d88c:	00c6303a 	nor	r3,zero,r3
1001d890:	18003a1e 	bne	r3,zero,1001d97c <__adddf3+0x614>
1001d894:	3463c83a 	sub	r17,r6,r17
1001d898:	4a07c83a 	sub	r3,r9,r8
1001d89c:	344d803a 	cmpltu	r6,r6,r17
1001d8a0:	1991c83a 	sub	r8,r3,r6
1001d8a4:	1021883a 	mov	r16,r2
1001d8a8:	3825883a 	mov	r18,r7
1001d8ac:	003f0a06 	br	1001d4d8 <__alt_data_end+0xf801d4d8>
1001d8b0:	2023883a 	mov	r17,r4
1001d8b4:	003f0d06 	br	1001d4ec <__alt_data_end+0xf801d4ec>
1001d8b8:	0081ffc4 	movi	r2,2047
1001d8bc:	80bf3f1e 	bne	r16,r2,1001d5bc <__alt_data_end+0xf801d5bc>
1001d8c0:	003ec806 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d8c4:	0005883a 	mov	r2,zero
1001d8c8:	003fb106 	br	1001d790 <__alt_data_end+0xf801d790>
1001d8cc:	0007883a 	mov	r3,zero
1001d8d0:	003fbc06 	br	1001d7c4 <__alt_data_end+0xf801d7c4>
1001d8d4:	4444b03a 	or	r2,r8,r17
1001d8d8:	8000871e 	bne	r16,zero,1001daf8 <__adddf3+0x790>
1001d8dc:	1000ba26 	beq	r2,zero,1001dbc8 <__adddf3+0x860>
1001d8e0:	4984b03a 	or	r2,r9,r6
1001d8e4:	103ebf26 	beq	r2,zero,1001d3e4 <__alt_data_end+0xf801d3e4>
1001d8e8:	8985883a 	add	r2,r17,r6
1001d8ec:	4247883a 	add	r3,r8,r9
1001d8f0:	1451803a 	cmpltu	r8,r2,r17
1001d8f4:	40d1883a 	add	r8,r8,r3
1001d8f8:	40c0202c 	andhi	r3,r8,128
1001d8fc:	1023883a 	mov	r17,r2
1001d900:	183f1a26 	beq	r3,zero,1001d56c <__alt_data_end+0xf801d56c>
1001d904:	00bfe034 	movhi	r2,65408
1001d908:	10bfffc4 	addi	r2,r2,-1
1001d90c:	2021883a 	mov	r16,r4
1001d910:	4090703a 	and	r8,r8,r2
1001d914:	003eb306 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d918:	4444b03a 	or	r2,r8,r17
1001d91c:	8000291e 	bne	r16,zero,1001d9c4 <__adddf3+0x65c>
1001d920:	10004b1e 	bne	r2,zero,1001da50 <__adddf3+0x6e8>
1001d924:	4990b03a 	or	r8,r9,r6
1001d928:	40008b26 	beq	r8,zero,1001db58 <__adddf3+0x7f0>
1001d92c:	4811883a 	mov	r8,r9
1001d930:	3023883a 	mov	r17,r6
1001d934:	3825883a 	mov	r18,r7
1001d938:	003eaa06 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d93c:	1021883a 	mov	r16,r2
1001d940:	0011883a 	mov	r8,zero
1001d944:	0005883a 	mov	r2,zero
1001d948:	003f0f06 	br	1001d588 <__alt_data_end+0xf801d588>
1001d94c:	217ff804 	addi	r5,r4,-32
1001d950:	00800804 	movi	r2,32
1001d954:	494ad83a 	srl	r5,r9,r5
1001d958:	20807d26 	beq	r4,r2,1001db50 <__adddf3+0x7e8>
1001d95c:	00801004 	movi	r2,64
1001d960:	1109c83a 	sub	r4,r2,r4
1001d964:	4912983a 	sll	r9,r9,r4
1001d968:	498cb03a 	or	r6,r9,r6
1001d96c:	300cc03a 	cmpne	r6,r6,zero
1001d970:	298ab03a 	or	r5,r5,r6
1001d974:	0013883a 	mov	r9,zero
1001d978:	003f1506 	br	1001d5d0 <__alt_data_end+0xf801d5d0>
1001d97c:	0101ffc4 	movi	r4,2047
1001d980:	113f9a1e 	bne	r2,r4,1001d7ec <__alt_data_end+0xf801d7ec>
1001d984:	4811883a 	mov	r8,r9
1001d988:	3023883a 	mov	r17,r6
1001d98c:	1021883a 	mov	r16,r2
1001d990:	3825883a 	mov	r18,r7
1001d994:	003e9306 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d998:	8000161e 	bne	r16,zero,1001d9f4 <__adddf3+0x68c>
1001d99c:	444ab03a 	or	r5,r8,r17
1001d9a0:	28005126 	beq	r5,zero,1001dae8 <__adddf3+0x780>
1001d9a4:	0108303a 	nor	r4,zero,r4
1001d9a8:	20004d1e 	bne	r4,zero,1001dae0 <__adddf3+0x778>
1001d9ac:	89a3883a 	add	r17,r17,r6
1001d9b0:	4253883a 	add	r9,r8,r9
1001d9b4:	898d803a 	cmpltu	r6,r17,r6
1001d9b8:	3251883a 	add	r8,r6,r9
1001d9bc:	1021883a 	mov	r16,r2
1001d9c0:	003f0806 	br	1001d5e4 <__alt_data_end+0xf801d5e4>
1001d9c4:	1000301e 	bne	r2,zero,1001da88 <__adddf3+0x720>
1001d9c8:	4984b03a 	or	r2,r9,r6
1001d9cc:	10007126 	beq	r2,zero,1001db94 <__adddf3+0x82c>
1001d9d0:	4811883a 	mov	r8,r9
1001d9d4:	3023883a 	mov	r17,r6
1001d9d8:	3825883a 	mov	r18,r7
1001d9dc:	0401ffc4 	movi	r16,2047
1001d9e0:	003e8006 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001d9e4:	4462b03a 	or	r17,r8,r17
1001d9e8:	8822c03a 	cmpne	r17,r17,zero
1001d9ec:	0007883a 	mov	r3,zero
1001d9f0:	003f8b06 	br	1001d820 <__alt_data_end+0xf801d820>
1001d9f4:	0141ffc4 	movi	r5,2047
1001d9f8:	11403b26 	beq	r2,r5,1001dae8 <__adddf3+0x780>
1001d9fc:	0109c83a 	sub	r4,zero,r4
1001da00:	42002034 	orhi	r8,r8,128
1001da04:	01400e04 	movi	r5,56
1001da08:	29006716 	blt	r5,r4,1001dba8 <__adddf3+0x840>
1001da0c:	014007c4 	movi	r5,31
1001da10:	29007016 	blt	r5,r4,1001dbd4 <__adddf3+0x86c>
1001da14:	01400804 	movi	r5,32
1001da18:	290bc83a 	sub	r5,r5,r4
1001da1c:	4154983a 	sll	r10,r8,r5
1001da20:	890ed83a 	srl	r7,r17,r4
1001da24:	894a983a 	sll	r5,r17,r5
1001da28:	4108d83a 	srl	r4,r8,r4
1001da2c:	51e2b03a 	or	r17,r10,r7
1001da30:	280ac03a 	cmpne	r5,r5,zero
1001da34:	8962b03a 	or	r17,r17,r5
1001da38:	89a3883a 	add	r17,r17,r6
1001da3c:	2253883a 	add	r9,r4,r9
1001da40:	898d803a 	cmpltu	r6,r17,r6
1001da44:	3251883a 	add	r8,r6,r9
1001da48:	1021883a 	mov	r16,r2
1001da4c:	003ee506 	br	1001d5e4 <__alt_data_end+0xf801d5e4>
1001da50:	4984b03a 	or	r2,r9,r6
1001da54:	103e6326 	beq	r2,zero,1001d3e4 <__alt_data_end+0xf801d3e4>
1001da58:	8987c83a 	sub	r3,r17,r6
1001da5c:	88c9803a 	cmpltu	r4,r17,r3
1001da60:	4245c83a 	sub	r2,r8,r9
1001da64:	1105c83a 	sub	r2,r2,r4
1001da68:	1100202c 	andhi	r4,r2,128
1001da6c:	203ebb26 	beq	r4,zero,1001d55c <__alt_data_end+0xf801d55c>
1001da70:	3463c83a 	sub	r17,r6,r17
1001da74:	4a07c83a 	sub	r3,r9,r8
1001da78:	344d803a 	cmpltu	r6,r6,r17
1001da7c:	1991c83a 	sub	r8,r3,r6
1001da80:	3825883a 	mov	r18,r7
1001da84:	003e5706 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001da88:	4984b03a 	or	r2,r9,r6
1001da8c:	10002e26 	beq	r2,zero,1001db48 <__adddf3+0x7e0>
1001da90:	4004d0fa 	srli	r2,r8,3
1001da94:	8822d0fa 	srli	r17,r17,3
1001da98:	4010977a 	slli	r8,r8,29
1001da9c:	10c0022c 	andhi	r3,r2,8
1001daa0:	4462b03a 	or	r17,r8,r17
1001daa4:	18000826 	beq	r3,zero,1001dac8 <__adddf3+0x760>
1001daa8:	4808d0fa 	srli	r4,r9,3
1001daac:	20c0022c 	andhi	r3,r4,8
1001dab0:	1800051e 	bne	r3,zero,1001dac8 <__adddf3+0x760>
1001dab4:	300cd0fa 	srli	r6,r6,3
1001dab8:	4806977a 	slli	r3,r9,29
1001dabc:	2005883a 	mov	r2,r4
1001dac0:	3825883a 	mov	r18,r7
1001dac4:	19a2b03a 	or	r17,r3,r6
1001dac8:	8810d77a 	srli	r8,r17,29
1001dacc:	100490fa 	slli	r2,r2,3
1001dad0:	882290fa 	slli	r17,r17,3
1001dad4:	0401ffc4 	movi	r16,2047
1001dad8:	4090b03a 	or	r8,r8,r2
1001dadc:	003e4106 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001dae0:	0141ffc4 	movi	r5,2047
1001dae4:	117fc71e 	bne	r2,r5,1001da04 <__alt_data_end+0xf801da04>
1001dae8:	4811883a 	mov	r8,r9
1001daec:	3023883a 	mov	r17,r6
1001daf0:	1021883a 	mov	r16,r2
1001daf4:	003e3b06 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001daf8:	10002f26 	beq	r2,zero,1001dbb8 <__adddf3+0x850>
1001dafc:	4984b03a 	or	r2,r9,r6
1001db00:	10001126 	beq	r2,zero,1001db48 <__adddf3+0x7e0>
1001db04:	4004d0fa 	srli	r2,r8,3
1001db08:	8822d0fa 	srli	r17,r17,3
1001db0c:	4010977a 	slli	r8,r8,29
1001db10:	10c0022c 	andhi	r3,r2,8
1001db14:	4462b03a 	or	r17,r8,r17
1001db18:	183feb26 	beq	r3,zero,1001dac8 <__alt_data_end+0xf801dac8>
1001db1c:	4808d0fa 	srli	r4,r9,3
1001db20:	20c0022c 	andhi	r3,r4,8
1001db24:	183fe81e 	bne	r3,zero,1001dac8 <__alt_data_end+0xf801dac8>
1001db28:	300cd0fa 	srli	r6,r6,3
1001db2c:	4806977a 	slli	r3,r9,29
1001db30:	2005883a 	mov	r2,r4
1001db34:	19a2b03a 	or	r17,r3,r6
1001db38:	003fe306 	br	1001dac8 <__alt_data_end+0xf801dac8>
1001db3c:	0011883a 	mov	r8,zero
1001db40:	0005883a 	mov	r2,zero
1001db44:	003e3f06 	br	1001d444 <__alt_data_end+0xf801d444>
1001db48:	0401ffc4 	movi	r16,2047
1001db4c:	003e2506 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001db50:	0013883a 	mov	r9,zero
1001db54:	003f8406 	br	1001d968 <__alt_data_end+0xf801d968>
1001db58:	0005883a 	mov	r2,zero
1001db5c:	0007883a 	mov	r3,zero
1001db60:	003e8906 	br	1001d588 <__alt_data_end+0xf801d588>
1001db64:	197ff804 	addi	r5,r3,-32
1001db68:	01000804 	movi	r4,32
1001db6c:	414ad83a 	srl	r5,r8,r5
1001db70:	19002426 	beq	r3,r4,1001dc04 <__adddf3+0x89c>
1001db74:	01001004 	movi	r4,64
1001db78:	20c7c83a 	sub	r3,r4,r3
1001db7c:	40c6983a 	sll	r3,r8,r3
1001db80:	1c46b03a 	or	r3,r3,r17
1001db84:	1806c03a 	cmpne	r3,r3,zero
1001db88:	28e2b03a 	or	r17,r5,r3
1001db8c:	0007883a 	mov	r3,zero
1001db90:	003f2306 	br	1001d820 <__alt_data_end+0xf801d820>
1001db94:	0007883a 	mov	r3,zero
1001db98:	5811883a 	mov	r8,r11
1001db9c:	00bfffc4 	movi	r2,-1
1001dba0:	0401ffc4 	movi	r16,2047
1001dba4:	003e7806 	br	1001d588 <__alt_data_end+0xf801d588>
1001dba8:	4462b03a 	or	r17,r8,r17
1001dbac:	8822c03a 	cmpne	r17,r17,zero
1001dbb0:	0009883a 	mov	r4,zero
1001dbb4:	003fa006 	br	1001da38 <__alt_data_end+0xf801da38>
1001dbb8:	4811883a 	mov	r8,r9
1001dbbc:	3023883a 	mov	r17,r6
1001dbc0:	0401ffc4 	movi	r16,2047
1001dbc4:	003e0706 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001dbc8:	4811883a 	mov	r8,r9
1001dbcc:	3023883a 	mov	r17,r6
1001dbd0:	003e0406 	br	1001d3e4 <__alt_data_end+0xf801d3e4>
1001dbd4:	21fff804 	addi	r7,r4,-32
1001dbd8:	01400804 	movi	r5,32
1001dbdc:	41ced83a 	srl	r7,r8,r7
1001dbe0:	21400a26 	beq	r4,r5,1001dc0c <__adddf3+0x8a4>
1001dbe4:	01401004 	movi	r5,64
1001dbe8:	2909c83a 	sub	r4,r5,r4
1001dbec:	4108983a 	sll	r4,r8,r4
1001dbf0:	2448b03a 	or	r4,r4,r17
1001dbf4:	2008c03a 	cmpne	r4,r4,zero
1001dbf8:	3922b03a 	or	r17,r7,r4
1001dbfc:	0009883a 	mov	r4,zero
1001dc00:	003f8d06 	br	1001da38 <__alt_data_end+0xf801da38>
1001dc04:	0007883a 	mov	r3,zero
1001dc08:	003fdd06 	br	1001db80 <__alt_data_end+0xf801db80>
1001dc0c:	0009883a 	mov	r4,zero
1001dc10:	003ff706 	br	1001dbf0 <__alt_data_end+0xf801dbf0>

1001dc14 <__eqdf2>:
1001dc14:	2804d53a 	srli	r2,r5,20
1001dc18:	3806d53a 	srli	r3,r7,20
1001dc1c:	02000434 	movhi	r8,16
1001dc20:	423fffc4 	addi	r8,r8,-1
1001dc24:	1081ffcc 	andi	r2,r2,2047
1001dc28:	0281ffc4 	movi	r10,2047
1001dc2c:	2a12703a 	and	r9,r5,r8
1001dc30:	18c1ffcc 	andi	r3,r3,2047
1001dc34:	3a10703a 	and	r8,r7,r8
1001dc38:	280ad7fa 	srli	r5,r5,31
1001dc3c:	380ed7fa 	srli	r7,r7,31
1001dc40:	12801026 	beq	r2,r10,1001dc84 <__eqdf2+0x70>
1001dc44:	0281ffc4 	movi	r10,2047
1001dc48:	1a800a26 	beq	r3,r10,1001dc74 <__eqdf2+0x60>
1001dc4c:	10c00226 	beq	r2,r3,1001dc58 <__eqdf2+0x44>
1001dc50:	00800044 	movi	r2,1
1001dc54:	f800283a 	ret
1001dc58:	4a3ffd1e 	bne	r9,r8,1001dc50 <__alt_data_end+0xf801dc50>
1001dc5c:	21bffc1e 	bne	r4,r6,1001dc50 <__alt_data_end+0xf801dc50>
1001dc60:	29c00c26 	beq	r5,r7,1001dc94 <__eqdf2+0x80>
1001dc64:	103ffa1e 	bne	r2,zero,1001dc50 <__alt_data_end+0xf801dc50>
1001dc68:	2244b03a 	or	r2,r4,r9
1001dc6c:	1004c03a 	cmpne	r2,r2,zero
1001dc70:	f800283a 	ret
1001dc74:	3214b03a 	or	r10,r6,r8
1001dc78:	503ff426 	beq	r10,zero,1001dc4c <__alt_data_end+0xf801dc4c>
1001dc7c:	00800044 	movi	r2,1
1001dc80:	f800283a 	ret
1001dc84:	2254b03a 	or	r10,r4,r9
1001dc88:	503fee26 	beq	r10,zero,1001dc44 <__alt_data_end+0xf801dc44>
1001dc8c:	00800044 	movi	r2,1
1001dc90:	f800283a 	ret
1001dc94:	0005883a 	mov	r2,zero
1001dc98:	f800283a 	ret

1001dc9c <__gedf2>:
1001dc9c:	2804d53a 	srli	r2,r5,20
1001dca0:	3806d53a 	srli	r3,r7,20
1001dca4:	02000434 	movhi	r8,16
1001dca8:	423fffc4 	addi	r8,r8,-1
1001dcac:	1081ffcc 	andi	r2,r2,2047
1001dcb0:	0241ffc4 	movi	r9,2047
1001dcb4:	2a14703a 	and	r10,r5,r8
1001dcb8:	18c1ffcc 	andi	r3,r3,2047
1001dcbc:	3a10703a 	and	r8,r7,r8
1001dcc0:	280ad7fa 	srli	r5,r5,31
1001dcc4:	380ed7fa 	srli	r7,r7,31
1001dcc8:	12401d26 	beq	r2,r9,1001dd40 <__gedf2+0xa4>
1001dccc:	0241ffc4 	movi	r9,2047
1001dcd0:	1a401226 	beq	r3,r9,1001dd1c <__gedf2+0x80>
1001dcd4:	1000081e 	bne	r2,zero,1001dcf8 <__gedf2+0x5c>
1001dcd8:	2296b03a 	or	r11,r4,r10
1001dcdc:	5813003a 	cmpeq	r9,r11,zero
1001dce0:	1800091e 	bne	r3,zero,1001dd08 <__gedf2+0x6c>
1001dce4:	3218b03a 	or	r12,r6,r8
1001dce8:	6000071e 	bne	r12,zero,1001dd08 <__gedf2+0x6c>
1001dcec:	0005883a 	mov	r2,zero
1001dcf0:	5800101e 	bne	r11,zero,1001dd34 <__gedf2+0x98>
1001dcf4:	f800283a 	ret
1001dcf8:	18000c1e 	bne	r3,zero,1001dd2c <__gedf2+0x90>
1001dcfc:	3212b03a 	or	r9,r6,r8
1001dd00:	48000c26 	beq	r9,zero,1001dd34 <__gedf2+0x98>
1001dd04:	0013883a 	mov	r9,zero
1001dd08:	39c03fcc 	andi	r7,r7,255
1001dd0c:	48000826 	beq	r9,zero,1001dd30 <__gedf2+0x94>
1001dd10:	38000926 	beq	r7,zero,1001dd38 <__gedf2+0x9c>
1001dd14:	00800044 	movi	r2,1
1001dd18:	f800283a 	ret
1001dd1c:	3212b03a 	or	r9,r6,r8
1001dd20:	483fec26 	beq	r9,zero,1001dcd4 <__alt_data_end+0xf801dcd4>
1001dd24:	00bfff84 	movi	r2,-2
1001dd28:	f800283a 	ret
1001dd2c:	39c03fcc 	andi	r7,r7,255
1001dd30:	29c00626 	beq	r5,r7,1001dd4c <__gedf2+0xb0>
1001dd34:	283ff726 	beq	r5,zero,1001dd14 <__alt_data_end+0xf801dd14>
1001dd38:	00bfffc4 	movi	r2,-1
1001dd3c:	f800283a 	ret
1001dd40:	2292b03a 	or	r9,r4,r10
1001dd44:	483fe126 	beq	r9,zero,1001dccc <__alt_data_end+0xf801dccc>
1001dd48:	003ff606 	br	1001dd24 <__alt_data_end+0xf801dd24>
1001dd4c:	18bff916 	blt	r3,r2,1001dd34 <__alt_data_end+0xf801dd34>
1001dd50:	10c00316 	blt	r2,r3,1001dd60 <__gedf2+0xc4>
1001dd54:	42bff736 	bltu	r8,r10,1001dd34 <__alt_data_end+0xf801dd34>
1001dd58:	52000326 	beq	r10,r8,1001dd68 <__gedf2+0xcc>
1001dd5c:	5200042e 	bgeu	r10,r8,1001dd70 <__gedf2+0xd4>
1001dd60:	283fec1e 	bne	r5,zero,1001dd14 <__alt_data_end+0xf801dd14>
1001dd64:	003ff406 	br	1001dd38 <__alt_data_end+0xf801dd38>
1001dd68:	313ff236 	bltu	r6,r4,1001dd34 <__alt_data_end+0xf801dd34>
1001dd6c:	21bffc36 	bltu	r4,r6,1001dd60 <__alt_data_end+0xf801dd60>
1001dd70:	0005883a 	mov	r2,zero
1001dd74:	f800283a 	ret

1001dd78 <__ledf2>:
1001dd78:	2804d53a 	srli	r2,r5,20
1001dd7c:	3810d53a 	srli	r8,r7,20
1001dd80:	00c00434 	movhi	r3,16
1001dd84:	18ffffc4 	addi	r3,r3,-1
1001dd88:	1081ffcc 	andi	r2,r2,2047
1001dd8c:	0241ffc4 	movi	r9,2047
1001dd90:	28d4703a 	and	r10,r5,r3
1001dd94:	4201ffcc 	andi	r8,r8,2047
1001dd98:	38c6703a 	and	r3,r7,r3
1001dd9c:	280ad7fa 	srli	r5,r5,31
1001dda0:	380ed7fa 	srli	r7,r7,31
1001dda4:	12401f26 	beq	r2,r9,1001de24 <__ledf2+0xac>
1001dda8:	0241ffc4 	movi	r9,2047
1001ddac:	42401426 	beq	r8,r9,1001de00 <__ledf2+0x88>
1001ddb0:	1000091e 	bne	r2,zero,1001ddd8 <__ledf2+0x60>
1001ddb4:	2296b03a 	or	r11,r4,r10
1001ddb8:	5813003a 	cmpeq	r9,r11,zero
1001ddbc:	29403fcc 	andi	r5,r5,255
1001ddc0:	40000a1e 	bne	r8,zero,1001ddec <__ledf2+0x74>
1001ddc4:	30d8b03a 	or	r12,r6,r3
1001ddc8:	6000081e 	bne	r12,zero,1001ddec <__ledf2+0x74>
1001ddcc:	0005883a 	mov	r2,zero
1001ddd0:	5800111e 	bne	r11,zero,1001de18 <__ledf2+0xa0>
1001ddd4:	f800283a 	ret
1001ddd8:	29403fcc 	andi	r5,r5,255
1001dddc:	40000c1e 	bne	r8,zero,1001de10 <__ledf2+0x98>
1001dde0:	30d2b03a 	or	r9,r6,r3
1001dde4:	48000c26 	beq	r9,zero,1001de18 <__ledf2+0xa0>
1001dde8:	0013883a 	mov	r9,zero
1001ddec:	39c03fcc 	andi	r7,r7,255
1001ddf0:	48000826 	beq	r9,zero,1001de14 <__ledf2+0x9c>
1001ddf4:	38001126 	beq	r7,zero,1001de3c <__ledf2+0xc4>
1001ddf8:	00800044 	movi	r2,1
1001ddfc:	f800283a 	ret
1001de00:	30d2b03a 	or	r9,r6,r3
1001de04:	483fea26 	beq	r9,zero,1001ddb0 <__alt_data_end+0xf801ddb0>
1001de08:	00800084 	movi	r2,2
1001de0c:	f800283a 	ret
1001de10:	39c03fcc 	andi	r7,r7,255
1001de14:	39400726 	beq	r7,r5,1001de34 <__ledf2+0xbc>
1001de18:	2800081e 	bne	r5,zero,1001de3c <__ledf2+0xc4>
1001de1c:	00800044 	movi	r2,1
1001de20:	f800283a 	ret
1001de24:	2292b03a 	or	r9,r4,r10
1001de28:	483fdf26 	beq	r9,zero,1001dda8 <__alt_data_end+0xf801dda8>
1001de2c:	00800084 	movi	r2,2
1001de30:	f800283a 	ret
1001de34:	4080030e 	bge	r8,r2,1001de44 <__ledf2+0xcc>
1001de38:	383fef26 	beq	r7,zero,1001ddf8 <__alt_data_end+0xf801ddf8>
1001de3c:	00bfffc4 	movi	r2,-1
1001de40:	f800283a 	ret
1001de44:	123feb16 	blt	r2,r8,1001ddf4 <__alt_data_end+0xf801ddf4>
1001de48:	1abff336 	bltu	r3,r10,1001de18 <__alt_data_end+0xf801de18>
1001de4c:	50c00326 	beq	r10,r3,1001de5c <__ledf2+0xe4>
1001de50:	50c0042e 	bgeu	r10,r3,1001de64 <__ledf2+0xec>
1001de54:	283fe81e 	bne	r5,zero,1001ddf8 <__alt_data_end+0xf801ddf8>
1001de58:	003ff806 	br	1001de3c <__alt_data_end+0xf801de3c>
1001de5c:	313fee36 	bltu	r6,r4,1001de18 <__alt_data_end+0xf801de18>
1001de60:	21bffc36 	bltu	r4,r6,1001de54 <__alt_data_end+0xf801de54>
1001de64:	0005883a 	mov	r2,zero
1001de68:	f800283a 	ret

1001de6c <__muldf3>:
1001de6c:	deffee04 	addi	sp,sp,-72
1001de70:	dd000c15 	stw	r20,48(sp)
1001de74:	2828d53a 	srli	r20,r5,20
1001de78:	ddc00f15 	stw	r23,60(sp)
1001de7c:	282ed7fa 	srli	r23,r5,31
1001de80:	dc000815 	stw	r16,32(sp)
1001de84:	04000434 	movhi	r16,16
1001de88:	dcc00b15 	stw	r19,44(sp)
1001de8c:	843fffc4 	addi	r16,r16,-1
1001de90:	dfc01115 	stw	ra,68(sp)
1001de94:	df001015 	stw	fp,64(sp)
1001de98:	dd800e15 	stw	r22,56(sp)
1001de9c:	dd400d15 	stw	r21,52(sp)
1001dea0:	dc800a15 	stw	r18,40(sp)
1001dea4:	dc400915 	stw	r17,36(sp)
1001dea8:	a501ffcc 	andi	r20,r20,2047
1001deac:	2c20703a 	and	r16,r5,r16
1001deb0:	b827883a 	mov	r19,r23
1001deb4:	ba403fcc 	andi	r9,r23,255
1001deb8:	a0006026 	beq	r20,zero,1001e03c <__muldf3+0x1d0>
1001debc:	0081ffc4 	movi	r2,2047
1001dec0:	202d883a 	mov	r22,r4
1001dec4:	a0803626 	beq	r20,r2,1001dfa0 <__muldf3+0x134>
1001dec8:	84000434 	orhi	r16,r16,16
1001decc:	200ad77a 	srli	r5,r4,29
1001ded0:	800490fa 	slli	r2,r16,3
1001ded4:	202c90fa 	slli	r22,r4,3
1001ded8:	a53f0044 	addi	r20,r20,-1023
1001dedc:	28a0b03a 	or	r16,r5,r2
1001dee0:	002b883a 	mov	r21,zero
1001dee4:	000b883a 	mov	r5,zero
1001dee8:	3804d53a 	srli	r2,r7,20
1001deec:	3838d7fa 	srli	fp,r7,31
1001def0:	04400434 	movhi	r17,16
1001def4:	8c7fffc4 	addi	r17,r17,-1
1001def8:	1081ffcc 	andi	r2,r2,2047
1001defc:	3025883a 	mov	r18,r6
1001df00:	3c62703a 	and	r17,r7,r17
1001df04:	e2803fcc 	andi	r10,fp,255
1001df08:	10006d26 	beq	r2,zero,1001e0c0 <__muldf3+0x254>
1001df0c:	00c1ffc4 	movi	r3,2047
1001df10:	10c06526 	beq	r2,r3,1001e0a8 <__muldf3+0x23c>
1001df14:	8c400434 	orhi	r17,r17,16
1001df18:	300ed77a 	srli	r7,r6,29
1001df1c:	880690fa 	slli	r3,r17,3
1001df20:	302490fa 	slli	r18,r6,3
1001df24:	10bf0044 	addi	r2,r2,-1023
1001df28:	38e2b03a 	or	r17,r7,r3
1001df2c:	000f883a 	mov	r7,zero
1001df30:	a087883a 	add	r3,r20,r2
1001df34:	010003c4 	movi	r4,15
1001df38:	3d44b03a 	or	r2,r7,r21
1001df3c:	e5ccf03a 	xor	r6,fp,r23
1001df40:	1a000044 	addi	r8,r3,1
1001df44:	20809b36 	bltu	r4,r2,1001e1b4 <__muldf3+0x348>
1001df48:	100490ba 	slli	r2,r2,2
1001df4c:	010400b4 	movhi	r4,4098
1001df50:	2137d804 	addi	r4,r4,-8352
1001df54:	1105883a 	add	r2,r2,r4
1001df58:	10800017 	ldw	r2,0(r2)
1001df5c:	1000683a 	jmp	r2
1001df60:	1001e1b4 	orhi	zero,r2,1926
1001df64:	1001dfc0 	call	11001dfc <_gp+0xfd49b0>
1001df68:	1001dfc0 	call	11001dfc <_gp+0xfd49b0>
1001df6c:	1001dfbc 	xorhi	zero,r2,1918
1001df70:	1001e190 	cmplti	zero,r2,1926
1001df74:	1001e190 	cmplti	zero,r2,1926
1001df78:	1001e178 	rdprs	zero,r2,1925
1001df7c:	1001dfbc 	xorhi	zero,r2,1918
1001df80:	1001e190 	cmplti	zero,r2,1926
1001df84:	1001e178 	rdprs	zero,r2,1925
1001df88:	1001e190 	cmplti	zero,r2,1926
1001df8c:	1001dfbc 	xorhi	zero,r2,1918
1001df90:	1001e1a0 	cmpeqi	zero,r2,1926
1001df94:	1001e1a0 	cmpeqi	zero,r2,1926
1001df98:	1001e1a0 	cmpeqi	zero,r2,1926
1001df9c:	1001e500 	call	11001e50 <_gp+0xfd4a04>
1001dfa0:	2404b03a 	or	r2,r4,r16
1001dfa4:	1000711e 	bne	r2,zero,1001e16c <__muldf3+0x300>
1001dfa8:	05400204 	movi	r21,8
1001dfac:	0021883a 	mov	r16,zero
1001dfb0:	002d883a 	mov	r22,zero
1001dfb4:	01400084 	movi	r5,2
1001dfb8:	003fcb06 	br	1001dee8 <__alt_data_end+0xf801dee8>
1001dfbc:	500d883a 	mov	r6,r10
1001dfc0:	00800084 	movi	r2,2
1001dfc4:	38805926 	beq	r7,r2,1001e12c <__muldf3+0x2c0>
1001dfc8:	008000c4 	movi	r2,3
1001dfcc:	3881bb26 	beq	r7,r2,1001e6bc <__muldf3+0x850>
1001dfd0:	00800044 	movi	r2,1
1001dfd4:	3881961e 	bne	r7,r2,1001e630 <__muldf3+0x7c4>
1001dfd8:	3027883a 	mov	r19,r6
1001dfdc:	0005883a 	mov	r2,zero
1001dfe0:	0021883a 	mov	r16,zero
1001dfe4:	002d883a 	mov	r22,zero
1001dfe8:	1004953a 	slli	r2,r2,20
1001dfec:	98c03fcc 	andi	r3,r19,255
1001dff0:	04400434 	movhi	r17,16
1001dff4:	8c7fffc4 	addi	r17,r17,-1
1001dff8:	180697fa 	slli	r3,r3,31
1001dffc:	8460703a 	and	r16,r16,r17
1001e000:	80a0b03a 	or	r16,r16,r2
1001e004:	80c6b03a 	or	r3,r16,r3
1001e008:	b005883a 	mov	r2,r22
1001e00c:	dfc01117 	ldw	ra,68(sp)
1001e010:	df001017 	ldw	fp,64(sp)
1001e014:	ddc00f17 	ldw	r23,60(sp)
1001e018:	dd800e17 	ldw	r22,56(sp)
1001e01c:	dd400d17 	ldw	r21,52(sp)
1001e020:	dd000c17 	ldw	r20,48(sp)
1001e024:	dcc00b17 	ldw	r19,44(sp)
1001e028:	dc800a17 	ldw	r18,40(sp)
1001e02c:	dc400917 	ldw	r17,36(sp)
1001e030:	dc000817 	ldw	r16,32(sp)
1001e034:	dec01204 	addi	sp,sp,72
1001e038:	f800283a 	ret
1001e03c:	2404b03a 	or	r2,r4,r16
1001e040:	202b883a 	mov	r21,r4
1001e044:	10004426 	beq	r2,zero,1001e158 <__muldf3+0x2ec>
1001e048:	80015126 	beq	r16,zero,1001e590 <__muldf3+0x724>
1001e04c:	8009883a 	mov	r4,r16
1001e050:	d9800715 	stw	r6,28(sp)
1001e054:	d9c00215 	stw	r7,8(sp)
1001e058:	da400415 	stw	r9,16(sp)
1001e05c:	0009a6c0 	call	10009a6c <__clzsi2>
1001e060:	d9800717 	ldw	r6,28(sp)
1001e064:	d9c00217 	ldw	r7,8(sp)
1001e068:	da400417 	ldw	r9,16(sp)
1001e06c:	113ffd44 	addi	r4,r2,-11
1001e070:	00c00704 	movi	r3,28
1001e074:	19014216 	blt	r3,r4,1001e580 <__muldf3+0x714>
1001e078:	00c00744 	movi	r3,29
1001e07c:	15bffe04 	addi	r22,r2,-8
1001e080:	1907c83a 	sub	r3,r3,r4
1001e084:	85a0983a 	sll	r16,r16,r22
1001e088:	a8c6d83a 	srl	r3,r21,r3
1001e08c:	adac983a 	sll	r22,r21,r22
1001e090:	1c20b03a 	or	r16,r3,r16
1001e094:	1080fcc4 	addi	r2,r2,1011
1001e098:	00a9c83a 	sub	r20,zero,r2
1001e09c:	002b883a 	mov	r21,zero
1001e0a0:	000b883a 	mov	r5,zero
1001e0a4:	003f9006 	br	1001dee8 <__alt_data_end+0xf801dee8>
1001e0a8:	3446b03a 	or	r3,r6,r17
1001e0ac:	1800281e 	bne	r3,zero,1001e150 <__muldf3+0x2e4>
1001e0b0:	0023883a 	mov	r17,zero
1001e0b4:	0025883a 	mov	r18,zero
1001e0b8:	01c00084 	movi	r7,2
1001e0bc:	003f9c06 	br	1001df30 <__alt_data_end+0xf801df30>
1001e0c0:	3446b03a 	or	r3,r6,r17
1001e0c4:	18001e26 	beq	r3,zero,1001e140 <__muldf3+0x2d4>
1001e0c8:	88012126 	beq	r17,zero,1001e550 <__muldf3+0x6e4>
1001e0cc:	8809883a 	mov	r4,r17
1001e0d0:	d9400215 	stw	r5,8(sp)
1001e0d4:	d9800715 	stw	r6,28(sp)
1001e0d8:	da400415 	stw	r9,16(sp)
1001e0dc:	da800315 	stw	r10,12(sp)
1001e0e0:	0009a6c0 	call	10009a6c <__clzsi2>
1001e0e4:	d9400217 	ldw	r5,8(sp)
1001e0e8:	d9800717 	ldw	r6,28(sp)
1001e0ec:	da400417 	ldw	r9,16(sp)
1001e0f0:	da800317 	ldw	r10,12(sp)
1001e0f4:	113ffd44 	addi	r4,r2,-11
1001e0f8:	00c00704 	movi	r3,28
1001e0fc:	19011016 	blt	r3,r4,1001e540 <__muldf3+0x6d4>
1001e100:	00c00744 	movi	r3,29
1001e104:	14bffe04 	addi	r18,r2,-8
1001e108:	1907c83a 	sub	r3,r3,r4
1001e10c:	8ca2983a 	sll	r17,r17,r18
1001e110:	30c6d83a 	srl	r3,r6,r3
1001e114:	34a4983a 	sll	r18,r6,r18
1001e118:	1c62b03a 	or	r17,r3,r17
1001e11c:	1080fcc4 	addi	r2,r2,1011
1001e120:	0085c83a 	sub	r2,zero,r2
1001e124:	000f883a 	mov	r7,zero
1001e128:	003f8106 	br	1001df30 <__alt_data_end+0xf801df30>
1001e12c:	3027883a 	mov	r19,r6
1001e130:	0081ffc4 	movi	r2,2047
1001e134:	0021883a 	mov	r16,zero
1001e138:	002d883a 	mov	r22,zero
1001e13c:	003faa06 	br	1001dfe8 <__alt_data_end+0xf801dfe8>
1001e140:	0023883a 	mov	r17,zero
1001e144:	0025883a 	mov	r18,zero
1001e148:	01c00044 	movi	r7,1
1001e14c:	003f7806 	br	1001df30 <__alt_data_end+0xf801df30>
1001e150:	01c000c4 	movi	r7,3
1001e154:	003f7606 	br	1001df30 <__alt_data_end+0xf801df30>
1001e158:	05400104 	movi	r21,4
1001e15c:	0021883a 	mov	r16,zero
1001e160:	002d883a 	mov	r22,zero
1001e164:	01400044 	movi	r5,1
1001e168:	003f5f06 	br	1001dee8 <__alt_data_end+0xf801dee8>
1001e16c:	05400304 	movi	r21,12
1001e170:	014000c4 	movi	r5,3
1001e174:	003f5c06 	br	1001dee8 <__alt_data_end+0xf801dee8>
1001e178:	04000434 	movhi	r16,16
1001e17c:	0027883a 	mov	r19,zero
1001e180:	843fffc4 	addi	r16,r16,-1
1001e184:	05bfffc4 	movi	r22,-1
1001e188:	0081ffc4 	movi	r2,2047
1001e18c:	003f9606 	br	1001dfe8 <__alt_data_end+0xf801dfe8>
1001e190:	8023883a 	mov	r17,r16
1001e194:	b025883a 	mov	r18,r22
1001e198:	280f883a 	mov	r7,r5
1001e19c:	003f8806 	br	1001dfc0 <__alt_data_end+0xf801dfc0>
1001e1a0:	8023883a 	mov	r17,r16
1001e1a4:	b025883a 	mov	r18,r22
1001e1a8:	480d883a 	mov	r6,r9
1001e1ac:	280f883a 	mov	r7,r5
1001e1b0:	003f8306 	br	1001dfc0 <__alt_data_end+0xf801dfc0>
1001e1b4:	b026d43a 	srli	r19,r22,16
1001e1b8:	902ed43a 	srli	r23,r18,16
1001e1bc:	b5bfffcc 	andi	r22,r22,65535
1001e1c0:	94bfffcc 	andi	r18,r18,65535
1001e1c4:	b00b883a 	mov	r5,r22
1001e1c8:	9009883a 	mov	r4,r18
1001e1cc:	d8c00515 	stw	r3,20(sp)
1001e1d0:	d9800715 	stw	r6,28(sp)
1001e1d4:	da000615 	stw	r8,24(sp)
1001e1d8:	0008ef00 	call	10008ef0 <__mulsi3>
1001e1dc:	980b883a 	mov	r5,r19
1001e1e0:	9009883a 	mov	r4,r18
1001e1e4:	1029883a 	mov	r20,r2
1001e1e8:	0008ef00 	call	10008ef0 <__mulsi3>
1001e1ec:	b80b883a 	mov	r5,r23
1001e1f0:	9809883a 	mov	r4,r19
1001e1f4:	102b883a 	mov	r21,r2
1001e1f8:	0008ef00 	call	10008ef0 <__mulsi3>
1001e1fc:	b809883a 	mov	r4,r23
1001e200:	b00b883a 	mov	r5,r22
1001e204:	1039883a 	mov	fp,r2
1001e208:	0008ef00 	call	10008ef0 <__mulsi3>
1001e20c:	a008d43a 	srli	r4,r20,16
1001e210:	1545883a 	add	r2,r2,r21
1001e214:	d8c00517 	ldw	r3,20(sp)
1001e218:	2085883a 	add	r2,r4,r2
1001e21c:	d9800717 	ldw	r6,28(sp)
1001e220:	da000617 	ldw	r8,24(sp)
1001e224:	1540022e 	bgeu	r2,r21,1001e230 <__muldf3+0x3c4>
1001e228:	01000074 	movhi	r4,1
1001e22c:	e139883a 	add	fp,fp,r4
1001e230:	100e943a 	slli	r7,r2,16
1001e234:	1004d43a 	srli	r2,r2,16
1001e238:	882ad43a 	srli	r21,r17,16
1001e23c:	a53fffcc 	andi	r20,r20,65535
1001e240:	8c7fffcc 	andi	r17,r17,65535
1001e244:	3d29883a 	add	r20,r7,r20
1001e248:	b00b883a 	mov	r5,r22
1001e24c:	8809883a 	mov	r4,r17
1001e250:	d8c00515 	stw	r3,20(sp)
1001e254:	d9800715 	stw	r6,28(sp)
1001e258:	da000615 	stw	r8,24(sp)
1001e25c:	dd000115 	stw	r20,4(sp)
1001e260:	d8800015 	stw	r2,0(sp)
1001e264:	0008ef00 	call	10008ef0 <__mulsi3>
1001e268:	980b883a 	mov	r5,r19
1001e26c:	8809883a 	mov	r4,r17
1001e270:	d8800215 	stw	r2,8(sp)
1001e274:	0008ef00 	call	10008ef0 <__mulsi3>
1001e278:	9809883a 	mov	r4,r19
1001e27c:	a80b883a 	mov	r5,r21
1001e280:	1029883a 	mov	r20,r2
1001e284:	0008ef00 	call	10008ef0 <__mulsi3>
1001e288:	b00b883a 	mov	r5,r22
1001e28c:	a809883a 	mov	r4,r21
1001e290:	d8800415 	stw	r2,16(sp)
1001e294:	0008ef00 	call	10008ef0 <__mulsi3>
1001e298:	d9c00217 	ldw	r7,8(sp)
1001e29c:	1505883a 	add	r2,r2,r20
1001e2a0:	d8c00517 	ldw	r3,20(sp)
1001e2a4:	3826d43a 	srli	r19,r7,16
1001e2a8:	d9800717 	ldw	r6,28(sp)
1001e2ac:	da000617 	ldw	r8,24(sp)
1001e2b0:	9885883a 	add	r2,r19,r2
1001e2b4:	da400417 	ldw	r9,16(sp)
1001e2b8:	1500022e 	bgeu	r2,r20,1001e2c4 <__muldf3+0x458>
1001e2bc:	01000074 	movhi	r4,1
1001e2c0:	4913883a 	add	r9,r9,r4
1001e2c4:	1028d43a 	srli	r20,r2,16
1001e2c8:	1004943a 	slli	r2,r2,16
1001e2cc:	802cd43a 	srli	r22,r16,16
1001e2d0:	843fffcc 	andi	r16,r16,65535
1001e2d4:	3cffffcc 	andi	r19,r7,65535
1001e2d8:	9009883a 	mov	r4,r18
1001e2dc:	800b883a 	mov	r5,r16
1001e2e0:	a269883a 	add	r20,r20,r9
1001e2e4:	d8c00515 	stw	r3,20(sp)
1001e2e8:	d9800715 	stw	r6,28(sp)
1001e2ec:	da000615 	stw	r8,24(sp)
1001e2f0:	14e7883a 	add	r19,r2,r19
1001e2f4:	0008ef00 	call	10008ef0 <__mulsi3>
1001e2f8:	9009883a 	mov	r4,r18
1001e2fc:	b00b883a 	mov	r5,r22
1001e300:	d8800315 	stw	r2,12(sp)
1001e304:	0008ef00 	call	10008ef0 <__mulsi3>
1001e308:	b809883a 	mov	r4,r23
1001e30c:	b00b883a 	mov	r5,r22
1001e310:	d8800215 	stw	r2,8(sp)
1001e314:	0008ef00 	call	10008ef0 <__mulsi3>
1001e318:	b80b883a 	mov	r5,r23
1001e31c:	8009883a 	mov	r4,r16
1001e320:	d8800415 	stw	r2,16(sp)
1001e324:	0008ef00 	call	10008ef0 <__mulsi3>
1001e328:	da800317 	ldw	r10,12(sp)
1001e32c:	d9c00217 	ldw	r7,8(sp)
1001e330:	d9000017 	ldw	r4,0(sp)
1001e334:	502ed43a 	srli	r23,r10,16
1001e338:	11c5883a 	add	r2,r2,r7
1001e33c:	24e5883a 	add	r18,r4,r19
1001e340:	b885883a 	add	r2,r23,r2
1001e344:	d8c00517 	ldw	r3,20(sp)
1001e348:	d9800717 	ldw	r6,28(sp)
1001e34c:	da000617 	ldw	r8,24(sp)
1001e350:	da400417 	ldw	r9,16(sp)
1001e354:	11c0022e 	bgeu	r2,r7,1001e360 <__muldf3+0x4f4>
1001e358:	01000074 	movhi	r4,1
1001e35c:	4913883a 	add	r9,r9,r4
1001e360:	100ed43a 	srli	r7,r2,16
1001e364:	1004943a 	slli	r2,r2,16
1001e368:	55ffffcc 	andi	r23,r10,65535
1001e36c:	3a53883a 	add	r9,r7,r9
1001e370:	8809883a 	mov	r4,r17
1001e374:	800b883a 	mov	r5,r16
1001e378:	d8c00515 	stw	r3,20(sp)
1001e37c:	d9800715 	stw	r6,28(sp)
1001e380:	da000615 	stw	r8,24(sp)
1001e384:	da400415 	stw	r9,16(sp)
1001e388:	15ef883a 	add	r23,r2,r23
1001e38c:	0008ef00 	call	10008ef0 <__mulsi3>
1001e390:	8809883a 	mov	r4,r17
1001e394:	b00b883a 	mov	r5,r22
1001e398:	d8800215 	stw	r2,8(sp)
1001e39c:	0008ef00 	call	10008ef0 <__mulsi3>
1001e3a0:	b00b883a 	mov	r5,r22
1001e3a4:	a809883a 	mov	r4,r21
1001e3a8:	d8800315 	stw	r2,12(sp)
1001e3ac:	0008ef00 	call	10008ef0 <__mulsi3>
1001e3b0:	8009883a 	mov	r4,r16
1001e3b4:	a80b883a 	mov	r5,r21
1001e3b8:	1023883a 	mov	r17,r2
1001e3bc:	0008ef00 	call	10008ef0 <__mulsi3>
1001e3c0:	d9c00217 	ldw	r7,8(sp)
1001e3c4:	da800317 	ldw	r10,12(sp)
1001e3c8:	d8c00517 	ldw	r3,20(sp)
1001e3cc:	3808d43a 	srli	r4,r7,16
1001e3d0:	1285883a 	add	r2,r2,r10
1001e3d4:	d9800717 	ldw	r6,28(sp)
1001e3d8:	2085883a 	add	r2,r4,r2
1001e3dc:	da000617 	ldw	r8,24(sp)
1001e3e0:	da400417 	ldw	r9,16(sp)
1001e3e4:	1280022e 	bgeu	r2,r10,1001e3f0 <__muldf3+0x584>
1001e3e8:	01000074 	movhi	r4,1
1001e3ec:	8923883a 	add	r17,r17,r4
1001e3f0:	1008943a 	slli	r4,r2,16
1001e3f4:	39ffffcc 	andi	r7,r7,65535
1001e3f8:	e4b9883a 	add	fp,fp,r18
1001e3fc:	21cf883a 	add	r7,r4,r7
1001e400:	e4e7803a 	cmpltu	r19,fp,r19
1001e404:	3d0f883a 	add	r7,r7,r20
1001e408:	bf39883a 	add	fp,r23,fp
1001e40c:	99c9883a 	add	r4,r19,r7
1001e410:	e5ef803a 	cmpltu	r23,fp,r23
1001e414:	490b883a 	add	r5,r9,r4
1001e418:	1004d43a 	srli	r2,r2,16
1001e41c:	b965883a 	add	r18,r23,r5
1001e420:	24c9803a 	cmpltu	r4,r4,r19
1001e424:	3d29803a 	cmpltu	r20,r7,r20
1001e428:	a128b03a 	or	r20,r20,r4
1001e42c:	95ef803a 	cmpltu	r23,r18,r23
1001e430:	2a53803a 	cmpltu	r9,r5,r9
1001e434:	a0a9883a 	add	r20,r20,r2
1001e438:	4deeb03a 	or	r23,r9,r23
1001e43c:	a5ef883a 	add	r23,r20,r23
1001e440:	bc63883a 	add	r17,r23,r17
1001e444:	e004927a 	slli	r2,fp,9
1001e448:	d9000117 	ldw	r4,4(sp)
1001e44c:	882e927a 	slli	r23,r17,9
1001e450:	9022d5fa 	srli	r17,r18,23
1001e454:	e038d5fa 	srli	fp,fp,23
1001e458:	1104b03a 	or	r2,r2,r4
1001e45c:	9024927a 	slli	r18,r18,9
1001e460:	1004c03a 	cmpne	r2,r2,zero
1001e464:	bc62b03a 	or	r17,r23,r17
1001e468:	1738b03a 	or	fp,r2,fp
1001e46c:	8880402c 	andhi	r2,r17,256
1001e470:	e4a4b03a 	or	r18,fp,r18
1001e474:	10000726 	beq	r2,zero,1001e494 <__muldf3+0x628>
1001e478:	9006d07a 	srli	r3,r18,1
1001e47c:	880497fa 	slli	r2,r17,31
1001e480:	9480004c 	andi	r18,r18,1
1001e484:	8822d07a 	srli	r17,r17,1
1001e488:	1ca4b03a 	or	r18,r3,r18
1001e48c:	14a4b03a 	or	r18,r2,r18
1001e490:	4007883a 	mov	r3,r8
1001e494:	1880ffc4 	addi	r2,r3,1023
1001e498:	0080460e 	bge	zero,r2,1001e5b4 <__muldf3+0x748>
1001e49c:	910001cc 	andi	r4,r18,7
1001e4a0:	20000726 	beq	r4,zero,1001e4c0 <__muldf3+0x654>
1001e4a4:	910003cc 	andi	r4,r18,15
1001e4a8:	01400104 	movi	r5,4
1001e4ac:	21400426 	beq	r4,r5,1001e4c0 <__muldf3+0x654>
1001e4b0:	9149883a 	add	r4,r18,r5
1001e4b4:	24a5803a 	cmpltu	r18,r4,r18
1001e4b8:	8ca3883a 	add	r17,r17,r18
1001e4bc:	2025883a 	mov	r18,r4
1001e4c0:	8900402c 	andhi	r4,r17,256
1001e4c4:	20000426 	beq	r4,zero,1001e4d8 <__muldf3+0x66c>
1001e4c8:	18810004 	addi	r2,r3,1024
1001e4cc:	00ffc034 	movhi	r3,65280
1001e4d0:	18ffffc4 	addi	r3,r3,-1
1001e4d4:	88e2703a 	and	r17,r17,r3
1001e4d8:	00c1ff84 	movi	r3,2046
1001e4dc:	18bf1316 	blt	r3,r2,1001e12c <__alt_data_end+0xf801e12c>
1001e4e0:	882c977a 	slli	r22,r17,29
1001e4e4:	9024d0fa 	srli	r18,r18,3
1001e4e8:	8822927a 	slli	r17,r17,9
1001e4ec:	1081ffcc 	andi	r2,r2,2047
1001e4f0:	b4acb03a 	or	r22,r22,r18
1001e4f4:	8820d33a 	srli	r16,r17,12
1001e4f8:	3027883a 	mov	r19,r6
1001e4fc:	003eba06 	br	1001dfe8 <__alt_data_end+0xf801dfe8>
1001e500:	8080022c 	andhi	r2,r16,8
1001e504:	10000926 	beq	r2,zero,1001e52c <__muldf3+0x6c0>
1001e508:	8880022c 	andhi	r2,r17,8
1001e50c:	1000071e 	bne	r2,zero,1001e52c <__muldf3+0x6c0>
1001e510:	00800434 	movhi	r2,16
1001e514:	8c000234 	orhi	r16,r17,8
1001e518:	10bfffc4 	addi	r2,r2,-1
1001e51c:	e027883a 	mov	r19,fp
1001e520:	80a0703a 	and	r16,r16,r2
1001e524:	902d883a 	mov	r22,r18
1001e528:	003f1706 	br	1001e188 <__alt_data_end+0xf801e188>
1001e52c:	00800434 	movhi	r2,16
1001e530:	84000234 	orhi	r16,r16,8
1001e534:	10bfffc4 	addi	r2,r2,-1
1001e538:	80a0703a 	and	r16,r16,r2
1001e53c:	003f1206 	br	1001e188 <__alt_data_end+0xf801e188>
1001e540:	147ff604 	addi	r17,r2,-40
1001e544:	3462983a 	sll	r17,r6,r17
1001e548:	0025883a 	mov	r18,zero
1001e54c:	003ef306 	br	1001e11c <__alt_data_end+0xf801e11c>
1001e550:	3009883a 	mov	r4,r6
1001e554:	d9400215 	stw	r5,8(sp)
1001e558:	d9800715 	stw	r6,28(sp)
1001e55c:	da400415 	stw	r9,16(sp)
1001e560:	da800315 	stw	r10,12(sp)
1001e564:	0009a6c0 	call	10009a6c <__clzsi2>
1001e568:	10800804 	addi	r2,r2,32
1001e56c:	da800317 	ldw	r10,12(sp)
1001e570:	da400417 	ldw	r9,16(sp)
1001e574:	d9800717 	ldw	r6,28(sp)
1001e578:	d9400217 	ldw	r5,8(sp)
1001e57c:	003edd06 	br	1001e0f4 <__alt_data_end+0xf801e0f4>
1001e580:	143ff604 	addi	r16,r2,-40
1001e584:	ac20983a 	sll	r16,r21,r16
1001e588:	002d883a 	mov	r22,zero
1001e58c:	003ec106 	br	1001e094 <__alt_data_end+0xf801e094>
1001e590:	d9800715 	stw	r6,28(sp)
1001e594:	d9c00215 	stw	r7,8(sp)
1001e598:	da400415 	stw	r9,16(sp)
1001e59c:	0009a6c0 	call	10009a6c <__clzsi2>
1001e5a0:	10800804 	addi	r2,r2,32
1001e5a4:	da400417 	ldw	r9,16(sp)
1001e5a8:	d9c00217 	ldw	r7,8(sp)
1001e5ac:	d9800717 	ldw	r6,28(sp)
1001e5b0:	003eae06 	br	1001e06c <__alt_data_end+0xf801e06c>
1001e5b4:	00c00044 	movi	r3,1
1001e5b8:	1887c83a 	sub	r3,r3,r2
1001e5bc:	01000e04 	movi	r4,56
1001e5c0:	20fe8516 	blt	r4,r3,1001dfd8 <__alt_data_end+0xf801dfd8>
1001e5c4:	010007c4 	movi	r4,31
1001e5c8:	20c01b16 	blt	r4,r3,1001e638 <__muldf3+0x7cc>
1001e5cc:	00800804 	movi	r2,32
1001e5d0:	10c5c83a 	sub	r2,r2,r3
1001e5d4:	888a983a 	sll	r5,r17,r2
1001e5d8:	90c8d83a 	srl	r4,r18,r3
1001e5dc:	9084983a 	sll	r2,r18,r2
1001e5e0:	88e2d83a 	srl	r17,r17,r3
1001e5e4:	2906b03a 	or	r3,r5,r4
1001e5e8:	1004c03a 	cmpne	r2,r2,zero
1001e5ec:	1886b03a 	or	r3,r3,r2
1001e5f0:	188001cc 	andi	r2,r3,7
1001e5f4:	10000726 	beq	r2,zero,1001e614 <__muldf3+0x7a8>
1001e5f8:	188003cc 	andi	r2,r3,15
1001e5fc:	01000104 	movi	r4,4
1001e600:	11000426 	beq	r2,r4,1001e614 <__muldf3+0x7a8>
1001e604:	1805883a 	mov	r2,r3
1001e608:	10c00104 	addi	r3,r2,4
1001e60c:	1885803a 	cmpltu	r2,r3,r2
1001e610:	88a3883a 	add	r17,r17,r2
1001e614:	8880202c 	andhi	r2,r17,128
1001e618:	10001c26 	beq	r2,zero,1001e68c <__muldf3+0x820>
1001e61c:	3027883a 	mov	r19,r6
1001e620:	00800044 	movi	r2,1
1001e624:	0021883a 	mov	r16,zero
1001e628:	002d883a 	mov	r22,zero
1001e62c:	003e6e06 	br	1001dfe8 <__alt_data_end+0xf801dfe8>
1001e630:	4007883a 	mov	r3,r8
1001e634:	003f9706 	br	1001e494 <__alt_data_end+0xf801e494>
1001e638:	017ff844 	movi	r5,-31
1001e63c:	2885c83a 	sub	r2,r5,r2
1001e640:	888ad83a 	srl	r5,r17,r2
1001e644:	00800804 	movi	r2,32
1001e648:	18801a26 	beq	r3,r2,1001e6b4 <__muldf3+0x848>
1001e64c:	01001004 	movi	r4,64
1001e650:	20c7c83a 	sub	r3,r4,r3
1001e654:	88e2983a 	sll	r17,r17,r3
1001e658:	8ca4b03a 	or	r18,r17,r18
1001e65c:	9004c03a 	cmpne	r2,r18,zero
1001e660:	2884b03a 	or	r2,r5,r2
1001e664:	144001cc 	andi	r17,r2,7
1001e668:	88000d1e 	bne	r17,zero,1001e6a0 <__muldf3+0x834>
1001e66c:	0021883a 	mov	r16,zero
1001e670:	102cd0fa 	srli	r22,r2,3
1001e674:	3027883a 	mov	r19,r6
1001e678:	0005883a 	mov	r2,zero
1001e67c:	b46cb03a 	or	r22,r22,r17
1001e680:	003e5906 	br	1001dfe8 <__alt_data_end+0xf801dfe8>
1001e684:	1007883a 	mov	r3,r2
1001e688:	0023883a 	mov	r17,zero
1001e68c:	8820927a 	slli	r16,r17,9
1001e690:	1805883a 	mov	r2,r3
1001e694:	8822977a 	slli	r17,r17,29
1001e698:	8020d33a 	srli	r16,r16,12
1001e69c:	003ff406 	br	1001e670 <__alt_data_end+0xf801e670>
1001e6a0:	10c003cc 	andi	r3,r2,15
1001e6a4:	01000104 	movi	r4,4
1001e6a8:	193ff626 	beq	r3,r4,1001e684 <__alt_data_end+0xf801e684>
1001e6ac:	0023883a 	mov	r17,zero
1001e6b0:	003fd506 	br	1001e608 <__alt_data_end+0xf801e608>
1001e6b4:	0023883a 	mov	r17,zero
1001e6b8:	003fe706 	br	1001e658 <__alt_data_end+0xf801e658>
1001e6bc:	00800434 	movhi	r2,16
1001e6c0:	8c000234 	orhi	r16,r17,8
1001e6c4:	10bfffc4 	addi	r2,r2,-1
1001e6c8:	3027883a 	mov	r19,r6
1001e6cc:	80a0703a 	and	r16,r16,r2
1001e6d0:	902d883a 	mov	r22,r18
1001e6d4:	003eac06 	br	1001e188 <__alt_data_end+0xf801e188>

1001e6d8 <__subdf3>:
1001e6d8:	02000434 	movhi	r8,16
1001e6dc:	423fffc4 	addi	r8,r8,-1
1001e6e0:	defffb04 	addi	sp,sp,-20
1001e6e4:	2a14703a 	and	r10,r5,r8
1001e6e8:	3812d53a 	srli	r9,r7,20
1001e6ec:	3a10703a 	and	r8,r7,r8
1001e6f0:	2006d77a 	srli	r3,r4,29
1001e6f4:	3004d77a 	srli	r2,r6,29
1001e6f8:	dc000015 	stw	r16,0(sp)
1001e6fc:	501490fa 	slli	r10,r10,3
1001e700:	2820d53a 	srli	r16,r5,20
1001e704:	401090fa 	slli	r8,r8,3
1001e708:	dc800215 	stw	r18,8(sp)
1001e70c:	dc400115 	stw	r17,4(sp)
1001e710:	dfc00415 	stw	ra,16(sp)
1001e714:	202290fa 	slli	r17,r4,3
1001e718:	dcc00315 	stw	r19,12(sp)
1001e71c:	4a41ffcc 	andi	r9,r9,2047
1001e720:	0101ffc4 	movi	r4,2047
1001e724:	2824d7fa 	srli	r18,r5,31
1001e728:	8401ffcc 	andi	r16,r16,2047
1001e72c:	50c6b03a 	or	r3,r10,r3
1001e730:	380ed7fa 	srli	r7,r7,31
1001e734:	408ab03a 	or	r5,r8,r2
1001e738:	300c90fa 	slli	r6,r6,3
1001e73c:	49009626 	beq	r9,r4,1001e998 <__subdf3+0x2c0>
1001e740:	39c0005c 	xori	r7,r7,1
1001e744:	8245c83a 	sub	r2,r16,r9
1001e748:	3c807426 	beq	r7,r18,1001e91c <__subdf3+0x244>
1001e74c:	0080af0e 	bge	zero,r2,1001ea0c <__subdf3+0x334>
1001e750:	48002a1e 	bne	r9,zero,1001e7fc <__subdf3+0x124>
1001e754:	2988b03a 	or	r4,r5,r6
1001e758:	20009a1e 	bne	r4,zero,1001e9c4 <__subdf3+0x2ec>
1001e75c:	888001cc 	andi	r2,r17,7
1001e760:	10000726 	beq	r2,zero,1001e780 <__subdf3+0xa8>
1001e764:	888003cc 	andi	r2,r17,15
1001e768:	01000104 	movi	r4,4
1001e76c:	11000426 	beq	r2,r4,1001e780 <__subdf3+0xa8>
1001e770:	890b883a 	add	r5,r17,r4
1001e774:	2c63803a 	cmpltu	r17,r5,r17
1001e778:	1c47883a 	add	r3,r3,r17
1001e77c:	2823883a 	mov	r17,r5
1001e780:	1880202c 	andhi	r2,r3,128
1001e784:	10005926 	beq	r2,zero,1001e8ec <__subdf3+0x214>
1001e788:	84000044 	addi	r16,r16,1
1001e78c:	0081ffc4 	movi	r2,2047
1001e790:	8080be26 	beq	r16,r2,1001ea8c <__subdf3+0x3b4>
1001e794:	017fe034 	movhi	r5,65408
1001e798:	297fffc4 	addi	r5,r5,-1
1001e79c:	1946703a 	and	r3,r3,r5
1001e7a0:	1804977a 	slli	r2,r3,29
1001e7a4:	1806927a 	slli	r3,r3,9
1001e7a8:	8822d0fa 	srli	r17,r17,3
1001e7ac:	8401ffcc 	andi	r16,r16,2047
1001e7b0:	180ad33a 	srli	r5,r3,12
1001e7b4:	9100004c 	andi	r4,r18,1
1001e7b8:	1444b03a 	or	r2,r2,r17
1001e7bc:	80c1ffcc 	andi	r3,r16,2047
1001e7c0:	1820953a 	slli	r16,r3,20
1001e7c4:	20c03fcc 	andi	r3,r4,255
1001e7c8:	180897fa 	slli	r4,r3,31
1001e7cc:	00c00434 	movhi	r3,16
1001e7d0:	18ffffc4 	addi	r3,r3,-1
1001e7d4:	28c6703a 	and	r3,r5,r3
1001e7d8:	1c06b03a 	or	r3,r3,r16
1001e7dc:	1906b03a 	or	r3,r3,r4
1001e7e0:	dfc00417 	ldw	ra,16(sp)
1001e7e4:	dcc00317 	ldw	r19,12(sp)
1001e7e8:	dc800217 	ldw	r18,8(sp)
1001e7ec:	dc400117 	ldw	r17,4(sp)
1001e7f0:	dc000017 	ldw	r16,0(sp)
1001e7f4:	dec00504 	addi	sp,sp,20
1001e7f8:	f800283a 	ret
1001e7fc:	0101ffc4 	movi	r4,2047
1001e800:	813fd626 	beq	r16,r4,1001e75c <__alt_data_end+0xf801e75c>
1001e804:	29402034 	orhi	r5,r5,128
1001e808:	01000e04 	movi	r4,56
1001e80c:	2080a316 	blt	r4,r2,1001ea9c <__subdf3+0x3c4>
1001e810:	010007c4 	movi	r4,31
1001e814:	2080c616 	blt	r4,r2,1001eb30 <__subdf3+0x458>
1001e818:	01000804 	movi	r4,32
1001e81c:	2089c83a 	sub	r4,r4,r2
1001e820:	2910983a 	sll	r8,r5,r4
1001e824:	308ed83a 	srl	r7,r6,r2
1001e828:	3108983a 	sll	r4,r6,r4
1001e82c:	2884d83a 	srl	r2,r5,r2
1001e830:	41ccb03a 	or	r6,r8,r7
1001e834:	2008c03a 	cmpne	r4,r4,zero
1001e838:	310cb03a 	or	r6,r6,r4
1001e83c:	898dc83a 	sub	r6,r17,r6
1001e840:	89a3803a 	cmpltu	r17,r17,r6
1001e844:	1887c83a 	sub	r3,r3,r2
1001e848:	1c47c83a 	sub	r3,r3,r17
1001e84c:	3023883a 	mov	r17,r6
1001e850:	1880202c 	andhi	r2,r3,128
1001e854:	10002326 	beq	r2,zero,1001e8e4 <__subdf3+0x20c>
1001e858:	04c02034 	movhi	r19,128
1001e85c:	9cffffc4 	addi	r19,r19,-1
1001e860:	1ce6703a 	and	r19,r3,r19
1001e864:	98007a26 	beq	r19,zero,1001ea50 <__subdf3+0x378>
1001e868:	9809883a 	mov	r4,r19
1001e86c:	0009a6c0 	call	10009a6c <__clzsi2>
1001e870:	113ffe04 	addi	r4,r2,-8
1001e874:	00c007c4 	movi	r3,31
1001e878:	19007b16 	blt	r3,r4,1001ea68 <__subdf3+0x390>
1001e87c:	00800804 	movi	r2,32
1001e880:	1105c83a 	sub	r2,r2,r4
1001e884:	8884d83a 	srl	r2,r17,r2
1001e888:	9906983a 	sll	r3,r19,r4
1001e88c:	8922983a 	sll	r17,r17,r4
1001e890:	10c4b03a 	or	r2,r2,r3
1001e894:	24007816 	blt	r4,r16,1001ea78 <__subdf3+0x3a0>
1001e898:	2421c83a 	sub	r16,r4,r16
1001e89c:	80c00044 	addi	r3,r16,1
1001e8a0:	010007c4 	movi	r4,31
1001e8a4:	20c09516 	blt	r4,r3,1001eafc <__subdf3+0x424>
1001e8a8:	01400804 	movi	r5,32
1001e8ac:	28cbc83a 	sub	r5,r5,r3
1001e8b0:	88c8d83a 	srl	r4,r17,r3
1001e8b4:	8962983a 	sll	r17,r17,r5
1001e8b8:	114a983a 	sll	r5,r2,r5
1001e8bc:	10c6d83a 	srl	r3,r2,r3
1001e8c0:	8804c03a 	cmpne	r2,r17,zero
1001e8c4:	290ab03a 	or	r5,r5,r4
1001e8c8:	28a2b03a 	or	r17,r5,r2
1001e8cc:	0021883a 	mov	r16,zero
1001e8d0:	003fa206 	br	1001e75c <__alt_data_end+0xf801e75c>
1001e8d4:	2090b03a 	or	r8,r4,r2
1001e8d8:	40018e26 	beq	r8,zero,1001ef14 <__subdf3+0x83c>
1001e8dc:	1007883a 	mov	r3,r2
1001e8e0:	2023883a 	mov	r17,r4
1001e8e4:	888001cc 	andi	r2,r17,7
1001e8e8:	103f9e1e 	bne	r2,zero,1001e764 <__alt_data_end+0xf801e764>
1001e8ec:	1804977a 	slli	r2,r3,29
1001e8f0:	8822d0fa 	srli	r17,r17,3
1001e8f4:	1810d0fa 	srli	r8,r3,3
1001e8f8:	9100004c 	andi	r4,r18,1
1001e8fc:	1444b03a 	or	r2,r2,r17
1001e900:	00c1ffc4 	movi	r3,2047
1001e904:	80c02826 	beq	r16,r3,1001e9a8 <__subdf3+0x2d0>
1001e908:	01400434 	movhi	r5,16
1001e90c:	297fffc4 	addi	r5,r5,-1
1001e910:	80e0703a 	and	r16,r16,r3
1001e914:	414a703a 	and	r5,r8,r5
1001e918:	003fa806 	br	1001e7bc <__alt_data_end+0xf801e7bc>
1001e91c:	0080630e 	bge	zero,r2,1001eaac <__subdf3+0x3d4>
1001e920:	48003026 	beq	r9,zero,1001e9e4 <__subdf3+0x30c>
1001e924:	0101ffc4 	movi	r4,2047
1001e928:	813f8c26 	beq	r16,r4,1001e75c <__alt_data_end+0xf801e75c>
1001e92c:	29402034 	orhi	r5,r5,128
1001e930:	01000e04 	movi	r4,56
1001e934:	2080a90e 	bge	r4,r2,1001ebdc <__subdf3+0x504>
1001e938:	298cb03a 	or	r6,r5,r6
1001e93c:	3012c03a 	cmpne	r9,r6,zero
1001e940:	0005883a 	mov	r2,zero
1001e944:	4c53883a 	add	r9,r9,r17
1001e948:	4c63803a 	cmpltu	r17,r9,r17
1001e94c:	10c7883a 	add	r3,r2,r3
1001e950:	88c7883a 	add	r3,r17,r3
1001e954:	4823883a 	mov	r17,r9
1001e958:	1880202c 	andhi	r2,r3,128
1001e95c:	1000d026 	beq	r2,zero,1001eca0 <__subdf3+0x5c8>
1001e960:	84000044 	addi	r16,r16,1
1001e964:	0081ffc4 	movi	r2,2047
1001e968:	8080fe26 	beq	r16,r2,1001ed64 <__subdf3+0x68c>
1001e96c:	00bfe034 	movhi	r2,65408
1001e970:	10bfffc4 	addi	r2,r2,-1
1001e974:	1886703a 	and	r3,r3,r2
1001e978:	880ad07a 	srli	r5,r17,1
1001e97c:	180497fa 	slli	r2,r3,31
1001e980:	8900004c 	andi	r4,r17,1
1001e984:	2922b03a 	or	r17,r5,r4
1001e988:	1806d07a 	srli	r3,r3,1
1001e98c:	1462b03a 	or	r17,r2,r17
1001e990:	3825883a 	mov	r18,r7
1001e994:	003f7106 	br	1001e75c <__alt_data_end+0xf801e75c>
1001e998:	2984b03a 	or	r2,r5,r6
1001e99c:	103f6826 	beq	r2,zero,1001e740 <__alt_data_end+0xf801e740>
1001e9a0:	39c03fcc 	andi	r7,r7,255
1001e9a4:	003f6706 	br	1001e744 <__alt_data_end+0xf801e744>
1001e9a8:	4086b03a 	or	r3,r8,r2
1001e9ac:	18015226 	beq	r3,zero,1001eef8 <__subdf3+0x820>
1001e9b0:	00c00434 	movhi	r3,16
1001e9b4:	41400234 	orhi	r5,r8,8
1001e9b8:	18ffffc4 	addi	r3,r3,-1
1001e9bc:	28ca703a 	and	r5,r5,r3
1001e9c0:	003f7e06 	br	1001e7bc <__alt_data_end+0xf801e7bc>
1001e9c4:	10bfffc4 	addi	r2,r2,-1
1001e9c8:	1000491e 	bne	r2,zero,1001eaf0 <__subdf3+0x418>
1001e9cc:	898fc83a 	sub	r7,r17,r6
1001e9d0:	89e3803a 	cmpltu	r17,r17,r7
1001e9d4:	1947c83a 	sub	r3,r3,r5
1001e9d8:	1c47c83a 	sub	r3,r3,r17
1001e9dc:	3823883a 	mov	r17,r7
1001e9e0:	003f9b06 	br	1001e850 <__alt_data_end+0xf801e850>
1001e9e4:	2988b03a 	or	r4,r5,r6
1001e9e8:	203f5c26 	beq	r4,zero,1001e75c <__alt_data_end+0xf801e75c>
1001e9ec:	10bfffc4 	addi	r2,r2,-1
1001e9f0:	1000931e 	bne	r2,zero,1001ec40 <__subdf3+0x568>
1001e9f4:	898d883a 	add	r6,r17,r6
1001e9f8:	3463803a 	cmpltu	r17,r6,r17
1001e9fc:	1947883a 	add	r3,r3,r5
1001ea00:	88c7883a 	add	r3,r17,r3
1001ea04:	3023883a 	mov	r17,r6
1001ea08:	003fd306 	br	1001e958 <__alt_data_end+0xf801e958>
1001ea0c:	1000541e 	bne	r2,zero,1001eb60 <__subdf3+0x488>
1001ea10:	80800044 	addi	r2,r16,1
1001ea14:	1081ffcc 	andi	r2,r2,2047
1001ea18:	01000044 	movi	r4,1
1001ea1c:	2080a20e 	bge	r4,r2,1001eca8 <__subdf3+0x5d0>
1001ea20:	8989c83a 	sub	r4,r17,r6
1001ea24:	8905803a 	cmpltu	r2,r17,r4
1001ea28:	1967c83a 	sub	r19,r3,r5
1001ea2c:	98a7c83a 	sub	r19,r19,r2
1001ea30:	9880202c 	andhi	r2,r19,128
1001ea34:	10006326 	beq	r2,zero,1001ebc4 <__subdf3+0x4ec>
1001ea38:	3463c83a 	sub	r17,r6,r17
1001ea3c:	28c7c83a 	sub	r3,r5,r3
1001ea40:	344d803a 	cmpltu	r6,r6,r17
1001ea44:	19a7c83a 	sub	r19,r3,r6
1001ea48:	3825883a 	mov	r18,r7
1001ea4c:	983f861e 	bne	r19,zero,1001e868 <__alt_data_end+0xf801e868>
1001ea50:	8809883a 	mov	r4,r17
1001ea54:	0009a6c0 	call	10009a6c <__clzsi2>
1001ea58:	10800804 	addi	r2,r2,32
1001ea5c:	113ffe04 	addi	r4,r2,-8
1001ea60:	00c007c4 	movi	r3,31
1001ea64:	193f850e 	bge	r3,r4,1001e87c <__alt_data_end+0xf801e87c>
1001ea68:	10bff604 	addi	r2,r2,-40
1001ea6c:	8884983a 	sll	r2,r17,r2
1001ea70:	0023883a 	mov	r17,zero
1001ea74:	243f880e 	bge	r4,r16,1001e898 <__alt_data_end+0xf801e898>
1001ea78:	00ffe034 	movhi	r3,65408
1001ea7c:	18ffffc4 	addi	r3,r3,-1
1001ea80:	8121c83a 	sub	r16,r16,r4
1001ea84:	10c6703a 	and	r3,r2,r3
1001ea88:	003f3406 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ea8c:	9100004c 	andi	r4,r18,1
1001ea90:	000b883a 	mov	r5,zero
1001ea94:	0005883a 	mov	r2,zero
1001ea98:	003f4806 	br	1001e7bc <__alt_data_end+0xf801e7bc>
1001ea9c:	298cb03a 	or	r6,r5,r6
1001eaa0:	300cc03a 	cmpne	r6,r6,zero
1001eaa4:	0005883a 	mov	r2,zero
1001eaa8:	003f6406 	br	1001e83c <__alt_data_end+0xf801e83c>
1001eaac:	10009a1e 	bne	r2,zero,1001ed18 <__subdf3+0x640>
1001eab0:	82400044 	addi	r9,r16,1
1001eab4:	4881ffcc 	andi	r2,r9,2047
1001eab8:	02800044 	movi	r10,1
1001eabc:	5080670e 	bge	r10,r2,1001ec5c <__subdf3+0x584>
1001eac0:	0081ffc4 	movi	r2,2047
1001eac4:	4880af26 	beq	r9,r2,1001ed84 <__subdf3+0x6ac>
1001eac8:	898d883a 	add	r6,r17,r6
1001eacc:	1945883a 	add	r2,r3,r5
1001ead0:	3447803a 	cmpltu	r3,r6,r17
1001ead4:	1887883a 	add	r3,r3,r2
1001ead8:	182297fa 	slli	r17,r3,31
1001eadc:	300cd07a 	srli	r6,r6,1
1001eae0:	1806d07a 	srli	r3,r3,1
1001eae4:	4821883a 	mov	r16,r9
1001eae8:	89a2b03a 	or	r17,r17,r6
1001eaec:	003f1b06 	br	1001e75c <__alt_data_end+0xf801e75c>
1001eaf0:	0101ffc4 	movi	r4,2047
1001eaf4:	813f441e 	bne	r16,r4,1001e808 <__alt_data_end+0xf801e808>
1001eaf8:	003f1806 	br	1001e75c <__alt_data_end+0xf801e75c>
1001eafc:	843ff844 	addi	r16,r16,-31
1001eb00:	01400804 	movi	r5,32
1001eb04:	1408d83a 	srl	r4,r2,r16
1001eb08:	19405026 	beq	r3,r5,1001ec4c <__subdf3+0x574>
1001eb0c:	01401004 	movi	r5,64
1001eb10:	28c7c83a 	sub	r3,r5,r3
1001eb14:	10c4983a 	sll	r2,r2,r3
1001eb18:	88a2b03a 	or	r17,r17,r2
1001eb1c:	8822c03a 	cmpne	r17,r17,zero
1001eb20:	2462b03a 	or	r17,r4,r17
1001eb24:	0007883a 	mov	r3,zero
1001eb28:	0021883a 	mov	r16,zero
1001eb2c:	003f6d06 	br	1001e8e4 <__alt_data_end+0xf801e8e4>
1001eb30:	11fff804 	addi	r7,r2,-32
1001eb34:	01000804 	movi	r4,32
1001eb38:	29ced83a 	srl	r7,r5,r7
1001eb3c:	11004526 	beq	r2,r4,1001ec54 <__subdf3+0x57c>
1001eb40:	01001004 	movi	r4,64
1001eb44:	2089c83a 	sub	r4,r4,r2
1001eb48:	2904983a 	sll	r2,r5,r4
1001eb4c:	118cb03a 	or	r6,r2,r6
1001eb50:	300cc03a 	cmpne	r6,r6,zero
1001eb54:	398cb03a 	or	r6,r7,r6
1001eb58:	0005883a 	mov	r2,zero
1001eb5c:	003f3706 	br	1001e83c <__alt_data_end+0xf801e83c>
1001eb60:	80002a26 	beq	r16,zero,1001ec0c <__subdf3+0x534>
1001eb64:	0101ffc4 	movi	r4,2047
1001eb68:	49006626 	beq	r9,r4,1001ed04 <__subdf3+0x62c>
1001eb6c:	0085c83a 	sub	r2,zero,r2
1001eb70:	18c02034 	orhi	r3,r3,128
1001eb74:	01000e04 	movi	r4,56
1001eb78:	20807e16 	blt	r4,r2,1001ed74 <__subdf3+0x69c>
1001eb7c:	010007c4 	movi	r4,31
1001eb80:	2080e716 	blt	r4,r2,1001ef20 <__subdf3+0x848>
1001eb84:	01000804 	movi	r4,32
1001eb88:	2089c83a 	sub	r4,r4,r2
1001eb8c:	1914983a 	sll	r10,r3,r4
1001eb90:	8890d83a 	srl	r8,r17,r2
1001eb94:	8908983a 	sll	r4,r17,r4
1001eb98:	1884d83a 	srl	r2,r3,r2
1001eb9c:	5222b03a 	or	r17,r10,r8
1001eba0:	2006c03a 	cmpne	r3,r4,zero
1001eba4:	88e2b03a 	or	r17,r17,r3
1001eba8:	3463c83a 	sub	r17,r6,r17
1001ebac:	2885c83a 	sub	r2,r5,r2
1001ebb0:	344d803a 	cmpltu	r6,r6,r17
1001ebb4:	1187c83a 	sub	r3,r2,r6
1001ebb8:	4821883a 	mov	r16,r9
1001ebbc:	3825883a 	mov	r18,r7
1001ebc0:	003f2306 	br	1001e850 <__alt_data_end+0xf801e850>
1001ebc4:	24d0b03a 	or	r8,r4,r19
1001ebc8:	40001b1e 	bne	r8,zero,1001ec38 <__subdf3+0x560>
1001ebcc:	0005883a 	mov	r2,zero
1001ebd0:	0009883a 	mov	r4,zero
1001ebd4:	0021883a 	mov	r16,zero
1001ebd8:	003f4906 	br	1001e900 <__alt_data_end+0xf801e900>
1001ebdc:	010007c4 	movi	r4,31
1001ebe0:	20803a16 	blt	r4,r2,1001eccc <__subdf3+0x5f4>
1001ebe4:	01000804 	movi	r4,32
1001ebe8:	2089c83a 	sub	r4,r4,r2
1001ebec:	2912983a 	sll	r9,r5,r4
1001ebf0:	3090d83a 	srl	r8,r6,r2
1001ebf4:	3108983a 	sll	r4,r6,r4
1001ebf8:	2884d83a 	srl	r2,r5,r2
1001ebfc:	4a12b03a 	or	r9,r9,r8
1001ec00:	2008c03a 	cmpne	r4,r4,zero
1001ec04:	4912b03a 	or	r9,r9,r4
1001ec08:	003f4e06 	br	1001e944 <__alt_data_end+0xf801e944>
1001ec0c:	1c48b03a 	or	r4,r3,r17
1001ec10:	20003c26 	beq	r4,zero,1001ed04 <__subdf3+0x62c>
1001ec14:	0084303a 	nor	r2,zero,r2
1001ec18:	1000381e 	bne	r2,zero,1001ecfc <__subdf3+0x624>
1001ec1c:	3463c83a 	sub	r17,r6,r17
1001ec20:	28c5c83a 	sub	r2,r5,r3
1001ec24:	344d803a 	cmpltu	r6,r6,r17
1001ec28:	1187c83a 	sub	r3,r2,r6
1001ec2c:	4821883a 	mov	r16,r9
1001ec30:	3825883a 	mov	r18,r7
1001ec34:	003f0606 	br	1001e850 <__alt_data_end+0xf801e850>
1001ec38:	2023883a 	mov	r17,r4
1001ec3c:	003f0906 	br	1001e864 <__alt_data_end+0xf801e864>
1001ec40:	0101ffc4 	movi	r4,2047
1001ec44:	813f3a1e 	bne	r16,r4,1001e930 <__alt_data_end+0xf801e930>
1001ec48:	003ec406 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ec4c:	0005883a 	mov	r2,zero
1001ec50:	003fb106 	br	1001eb18 <__alt_data_end+0xf801eb18>
1001ec54:	0005883a 	mov	r2,zero
1001ec58:	003fbc06 	br	1001eb4c <__alt_data_end+0xf801eb4c>
1001ec5c:	1c44b03a 	or	r2,r3,r17
1001ec60:	80008e1e 	bne	r16,zero,1001ee9c <__subdf3+0x7c4>
1001ec64:	1000c826 	beq	r2,zero,1001ef88 <__subdf3+0x8b0>
1001ec68:	2984b03a 	or	r2,r5,r6
1001ec6c:	103ebb26 	beq	r2,zero,1001e75c <__alt_data_end+0xf801e75c>
1001ec70:	8989883a 	add	r4,r17,r6
1001ec74:	1945883a 	add	r2,r3,r5
1001ec78:	2447803a 	cmpltu	r3,r4,r17
1001ec7c:	1887883a 	add	r3,r3,r2
1001ec80:	1880202c 	andhi	r2,r3,128
1001ec84:	2023883a 	mov	r17,r4
1001ec88:	103f1626 	beq	r2,zero,1001e8e4 <__alt_data_end+0xf801e8e4>
1001ec8c:	00bfe034 	movhi	r2,65408
1001ec90:	10bfffc4 	addi	r2,r2,-1
1001ec94:	5021883a 	mov	r16,r10
1001ec98:	1886703a 	and	r3,r3,r2
1001ec9c:	003eaf06 	br	1001e75c <__alt_data_end+0xf801e75c>
1001eca0:	3825883a 	mov	r18,r7
1001eca4:	003f0f06 	br	1001e8e4 <__alt_data_end+0xf801e8e4>
1001eca8:	1c44b03a 	or	r2,r3,r17
1001ecac:	8000251e 	bne	r16,zero,1001ed44 <__subdf3+0x66c>
1001ecb0:	1000661e 	bne	r2,zero,1001ee4c <__subdf3+0x774>
1001ecb4:	2990b03a 	or	r8,r5,r6
1001ecb8:	40009626 	beq	r8,zero,1001ef14 <__subdf3+0x83c>
1001ecbc:	2807883a 	mov	r3,r5
1001ecc0:	3023883a 	mov	r17,r6
1001ecc4:	3825883a 	mov	r18,r7
1001ecc8:	003ea406 	br	1001e75c <__alt_data_end+0xf801e75c>
1001eccc:	127ff804 	addi	r9,r2,-32
1001ecd0:	01000804 	movi	r4,32
1001ecd4:	2a52d83a 	srl	r9,r5,r9
1001ecd8:	11008c26 	beq	r2,r4,1001ef0c <__subdf3+0x834>
1001ecdc:	01001004 	movi	r4,64
1001ece0:	2085c83a 	sub	r2,r4,r2
1001ece4:	2884983a 	sll	r2,r5,r2
1001ece8:	118cb03a 	or	r6,r2,r6
1001ecec:	300cc03a 	cmpne	r6,r6,zero
1001ecf0:	4992b03a 	or	r9,r9,r6
1001ecf4:	0005883a 	mov	r2,zero
1001ecf8:	003f1206 	br	1001e944 <__alt_data_end+0xf801e944>
1001ecfc:	0101ffc4 	movi	r4,2047
1001ed00:	493f9c1e 	bne	r9,r4,1001eb74 <__alt_data_end+0xf801eb74>
1001ed04:	2807883a 	mov	r3,r5
1001ed08:	3023883a 	mov	r17,r6
1001ed0c:	4821883a 	mov	r16,r9
1001ed10:	3825883a 	mov	r18,r7
1001ed14:	003e9106 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ed18:	80001f1e 	bne	r16,zero,1001ed98 <__subdf3+0x6c0>
1001ed1c:	1c48b03a 	or	r4,r3,r17
1001ed20:	20005a26 	beq	r4,zero,1001ee8c <__subdf3+0x7b4>
1001ed24:	0084303a 	nor	r2,zero,r2
1001ed28:	1000561e 	bne	r2,zero,1001ee84 <__subdf3+0x7ac>
1001ed2c:	89a3883a 	add	r17,r17,r6
1001ed30:	1945883a 	add	r2,r3,r5
1001ed34:	898d803a 	cmpltu	r6,r17,r6
1001ed38:	3087883a 	add	r3,r6,r2
1001ed3c:	4821883a 	mov	r16,r9
1001ed40:	003f0506 	br	1001e958 <__alt_data_end+0xf801e958>
1001ed44:	10002b1e 	bne	r2,zero,1001edf4 <__subdf3+0x71c>
1001ed48:	2984b03a 	or	r2,r5,r6
1001ed4c:	10008026 	beq	r2,zero,1001ef50 <__subdf3+0x878>
1001ed50:	2807883a 	mov	r3,r5
1001ed54:	3023883a 	mov	r17,r6
1001ed58:	3825883a 	mov	r18,r7
1001ed5c:	0401ffc4 	movi	r16,2047
1001ed60:	003e7e06 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ed64:	3809883a 	mov	r4,r7
1001ed68:	0011883a 	mov	r8,zero
1001ed6c:	0005883a 	mov	r2,zero
1001ed70:	003ee306 	br	1001e900 <__alt_data_end+0xf801e900>
1001ed74:	1c62b03a 	or	r17,r3,r17
1001ed78:	8822c03a 	cmpne	r17,r17,zero
1001ed7c:	0005883a 	mov	r2,zero
1001ed80:	003f8906 	br	1001eba8 <__alt_data_end+0xf801eba8>
1001ed84:	3809883a 	mov	r4,r7
1001ed88:	4821883a 	mov	r16,r9
1001ed8c:	0011883a 	mov	r8,zero
1001ed90:	0005883a 	mov	r2,zero
1001ed94:	003eda06 	br	1001e900 <__alt_data_end+0xf801e900>
1001ed98:	0101ffc4 	movi	r4,2047
1001ed9c:	49003b26 	beq	r9,r4,1001ee8c <__subdf3+0x7b4>
1001eda0:	0085c83a 	sub	r2,zero,r2
1001eda4:	18c02034 	orhi	r3,r3,128
1001eda8:	01000e04 	movi	r4,56
1001edac:	20806e16 	blt	r4,r2,1001ef68 <__subdf3+0x890>
1001edb0:	010007c4 	movi	r4,31
1001edb4:	20807716 	blt	r4,r2,1001ef94 <__subdf3+0x8bc>
1001edb8:	01000804 	movi	r4,32
1001edbc:	2089c83a 	sub	r4,r4,r2
1001edc0:	1914983a 	sll	r10,r3,r4
1001edc4:	8890d83a 	srl	r8,r17,r2
1001edc8:	8908983a 	sll	r4,r17,r4
1001edcc:	1884d83a 	srl	r2,r3,r2
1001edd0:	5222b03a 	or	r17,r10,r8
1001edd4:	2006c03a 	cmpne	r3,r4,zero
1001edd8:	88e2b03a 	or	r17,r17,r3
1001eddc:	89a3883a 	add	r17,r17,r6
1001ede0:	1145883a 	add	r2,r2,r5
1001ede4:	898d803a 	cmpltu	r6,r17,r6
1001ede8:	3087883a 	add	r3,r6,r2
1001edec:	4821883a 	mov	r16,r9
1001edf0:	003ed906 	br	1001e958 <__alt_data_end+0xf801e958>
1001edf4:	2984b03a 	or	r2,r5,r6
1001edf8:	10004226 	beq	r2,zero,1001ef04 <__subdf3+0x82c>
1001edfc:	1808d0fa 	srli	r4,r3,3
1001ee00:	8822d0fa 	srli	r17,r17,3
1001ee04:	1806977a 	slli	r3,r3,29
1001ee08:	2080022c 	andhi	r2,r4,8
1001ee0c:	1c62b03a 	or	r17,r3,r17
1001ee10:	10000826 	beq	r2,zero,1001ee34 <__subdf3+0x75c>
1001ee14:	2812d0fa 	srli	r9,r5,3
1001ee18:	4880022c 	andhi	r2,r9,8
1001ee1c:	1000051e 	bne	r2,zero,1001ee34 <__subdf3+0x75c>
1001ee20:	300cd0fa 	srli	r6,r6,3
1001ee24:	2804977a 	slli	r2,r5,29
1001ee28:	4809883a 	mov	r4,r9
1001ee2c:	3825883a 	mov	r18,r7
1001ee30:	11a2b03a 	or	r17,r2,r6
1001ee34:	8806d77a 	srli	r3,r17,29
1001ee38:	200890fa 	slli	r4,r4,3
1001ee3c:	882290fa 	slli	r17,r17,3
1001ee40:	0401ffc4 	movi	r16,2047
1001ee44:	1906b03a 	or	r3,r3,r4
1001ee48:	003e4406 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ee4c:	2984b03a 	or	r2,r5,r6
1001ee50:	103e4226 	beq	r2,zero,1001e75c <__alt_data_end+0xf801e75c>
1001ee54:	8989c83a 	sub	r4,r17,r6
1001ee58:	8911803a 	cmpltu	r8,r17,r4
1001ee5c:	1945c83a 	sub	r2,r3,r5
1001ee60:	1205c83a 	sub	r2,r2,r8
1001ee64:	1200202c 	andhi	r8,r2,128
1001ee68:	403e9a26 	beq	r8,zero,1001e8d4 <__alt_data_end+0xf801e8d4>
1001ee6c:	3463c83a 	sub	r17,r6,r17
1001ee70:	28c5c83a 	sub	r2,r5,r3
1001ee74:	344d803a 	cmpltu	r6,r6,r17
1001ee78:	1187c83a 	sub	r3,r2,r6
1001ee7c:	3825883a 	mov	r18,r7
1001ee80:	003e3606 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ee84:	0101ffc4 	movi	r4,2047
1001ee88:	493fc71e 	bne	r9,r4,1001eda8 <__alt_data_end+0xf801eda8>
1001ee8c:	2807883a 	mov	r3,r5
1001ee90:	3023883a 	mov	r17,r6
1001ee94:	4821883a 	mov	r16,r9
1001ee98:	003e3006 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ee9c:	10003626 	beq	r2,zero,1001ef78 <__subdf3+0x8a0>
1001eea0:	2984b03a 	or	r2,r5,r6
1001eea4:	10001726 	beq	r2,zero,1001ef04 <__subdf3+0x82c>
1001eea8:	1808d0fa 	srli	r4,r3,3
1001eeac:	8822d0fa 	srli	r17,r17,3
1001eeb0:	1806977a 	slli	r3,r3,29
1001eeb4:	2080022c 	andhi	r2,r4,8
1001eeb8:	1c62b03a 	or	r17,r3,r17
1001eebc:	10000726 	beq	r2,zero,1001eedc <__subdf3+0x804>
1001eec0:	2812d0fa 	srli	r9,r5,3
1001eec4:	4880022c 	andhi	r2,r9,8
1001eec8:	1000041e 	bne	r2,zero,1001eedc <__subdf3+0x804>
1001eecc:	300cd0fa 	srli	r6,r6,3
1001eed0:	2804977a 	slli	r2,r5,29
1001eed4:	4809883a 	mov	r4,r9
1001eed8:	11a2b03a 	or	r17,r2,r6
1001eedc:	8806d77a 	srli	r3,r17,29
1001eee0:	200890fa 	slli	r4,r4,3
1001eee4:	882290fa 	slli	r17,r17,3
1001eee8:	3825883a 	mov	r18,r7
1001eeec:	1906b03a 	or	r3,r3,r4
1001eef0:	0401ffc4 	movi	r16,2047
1001eef4:	003e1906 	br	1001e75c <__alt_data_end+0xf801e75c>
1001eef8:	000b883a 	mov	r5,zero
1001eefc:	0005883a 	mov	r2,zero
1001ef00:	003e2e06 	br	1001e7bc <__alt_data_end+0xf801e7bc>
1001ef04:	0401ffc4 	movi	r16,2047
1001ef08:	003e1406 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ef0c:	0005883a 	mov	r2,zero
1001ef10:	003f7506 	br	1001ece8 <__alt_data_end+0xf801ece8>
1001ef14:	0005883a 	mov	r2,zero
1001ef18:	0009883a 	mov	r4,zero
1001ef1c:	003e7806 	br	1001e900 <__alt_data_end+0xf801e900>
1001ef20:	123ff804 	addi	r8,r2,-32
1001ef24:	01000804 	movi	r4,32
1001ef28:	1a10d83a 	srl	r8,r3,r8
1001ef2c:	11002526 	beq	r2,r4,1001efc4 <__subdf3+0x8ec>
1001ef30:	01001004 	movi	r4,64
1001ef34:	2085c83a 	sub	r2,r4,r2
1001ef38:	1884983a 	sll	r2,r3,r2
1001ef3c:	1444b03a 	or	r2,r2,r17
1001ef40:	1004c03a 	cmpne	r2,r2,zero
1001ef44:	40a2b03a 	or	r17,r8,r2
1001ef48:	0005883a 	mov	r2,zero
1001ef4c:	003f1606 	br	1001eba8 <__alt_data_end+0xf801eba8>
1001ef50:	02000434 	movhi	r8,16
1001ef54:	0009883a 	mov	r4,zero
1001ef58:	423fffc4 	addi	r8,r8,-1
1001ef5c:	00bfffc4 	movi	r2,-1
1001ef60:	0401ffc4 	movi	r16,2047
1001ef64:	003e6606 	br	1001e900 <__alt_data_end+0xf801e900>
1001ef68:	1c62b03a 	or	r17,r3,r17
1001ef6c:	8822c03a 	cmpne	r17,r17,zero
1001ef70:	0005883a 	mov	r2,zero
1001ef74:	003f9906 	br	1001eddc <__alt_data_end+0xf801eddc>
1001ef78:	2807883a 	mov	r3,r5
1001ef7c:	3023883a 	mov	r17,r6
1001ef80:	0401ffc4 	movi	r16,2047
1001ef84:	003df506 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ef88:	2807883a 	mov	r3,r5
1001ef8c:	3023883a 	mov	r17,r6
1001ef90:	003df206 	br	1001e75c <__alt_data_end+0xf801e75c>
1001ef94:	123ff804 	addi	r8,r2,-32
1001ef98:	01000804 	movi	r4,32
1001ef9c:	1a10d83a 	srl	r8,r3,r8
1001efa0:	11000a26 	beq	r2,r4,1001efcc <__subdf3+0x8f4>
1001efa4:	01001004 	movi	r4,64
1001efa8:	2085c83a 	sub	r2,r4,r2
1001efac:	1884983a 	sll	r2,r3,r2
1001efb0:	1444b03a 	or	r2,r2,r17
1001efb4:	1004c03a 	cmpne	r2,r2,zero
1001efb8:	40a2b03a 	or	r17,r8,r2
1001efbc:	0005883a 	mov	r2,zero
1001efc0:	003f8606 	br	1001eddc <__alt_data_end+0xf801eddc>
1001efc4:	0005883a 	mov	r2,zero
1001efc8:	003fdc06 	br	1001ef3c <__alt_data_end+0xf801ef3c>
1001efcc:	0005883a 	mov	r2,zero
1001efd0:	003ff706 	br	1001efb0 <__alt_data_end+0xf801efb0>

1001efd4 <__fixdfsi>:
1001efd4:	280cd53a 	srli	r6,r5,20
1001efd8:	00c00434 	movhi	r3,16
1001efdc:	18ffffc4 	addi	r3,r3,-1
1001efe0:	3181ffcc 	andi	r6,r6,2047
1001efe4:	01c0ff84 	movi	r7,1022
1001efe8:	28c6703a 	and	r3,r5,r3
1001efec:	280ad7fa 	srli	r5,r5,31
1001eff0:	3980120e 	bge	r7,r6,1001f03c <__fixdfsi+0x68>
1001eff4:	00810744 	movi	r2,1053
1001eff8:	11800c16 	blt	r2,r6,1001f02c <__fixdfsi+0x58>
1001effc:	00810cc4 	movi	r2,1075
1001f000:	1185c83a 	sub	r2,r2,r6
1001f004:	01c007c4 	movi	r7,31
1001f008:	18c00434 	orhi	r3,r3,16
1001f00c:	38800d16 	blt	r7,r2,1001f044 <__fixdfsi+0x70>
1001f010:	31befb44 	addi	r6,r6,-1043
1001f014:	2084d83a 	srl	r2,r4,r2
1001f018:	1986983a 	sll	r3,r3,r6
1001f01c:	1884b03a 	or	r2,r3,r2
1001f020:	28000726 	beq	r5,zero,1001f040 <__fixdfsi+0x6c>
1001f024:	0085c83a 	sub	r2,zero,r2
1001f028:	f800283a 	ret
1001f02c:	00a00034 	movhi	r2,32768
1001f030:	10bfffc4 	addi	r2,r2,-1
1001f034:	2885883a 	add	r2,r5,r2
1001f038:	f800283a 	ret
1001f03c:	0005883a 	mov	r2,zero
1001f040:	f800283a 	ret
1001f044:	008104c4 	movi	r2,1043
1001f048:	1185c83a 	sub	r2,r2,r6
1001f04c:	1884d83a 	srl	r2,r3,r2
1001f050:	003ff306 	br	1001f020 <__alt_data_end+0xf801f020>

1001f054 <__truncdfsf2>:
1001f054:	2810d53a 	srli	r8,r5,20
1001f058:	01c00434 	movhi	r7,16
1001f05c:	39ffffc4 	addi	r7,r7,-1
1001f060:	29ce703a 	and	r7,r5,r7
1001f064:	4201ffcc 	andi	r8,r8,2047
1001f068:	380e90fa 	slli	r7,r7,3
1001f06c:	200cd77a 	srli	r6,r4,29
1001f070:	42400044 	addi	r9,r8,1
1001f074:	4a41ffcc 	andi	r9,r9,2047
1001f078:	00c00044 	movi	r3,1
1001f07c:	280ad7fa 	srli	r5,r5,31
1001f080:	31ceb03a 	or	r7,r6,r7
1001f084:	200490fa 	slli	r2,r4,3
1001f088:	1a40230e 	bge	r3,r9,1001f118 <__truncdfsf2+0xc4>
1001f08c:	40ff2004 	addi	r3,r8,-896
1001f090:	01803f84 	movi	r6,254
1001f094:	30c01516 	blt	r6,r3,1001f0ec <__truncdfsf2+0x98>
1001f098:	00c0380e 	bge	zero,r3,1001f17c <__truncdfsf2+0x128>
1001f09c:	200c91ba 	slli	r6,r4,6
1001f0a0:	380e90fa 	slli	r7,r7,3
1001f0a4:	1004d77a 	srli	r2,r2,29
1001f0a8:	300cc03a 	cmpne	r6,r6,zero
1001f0ac:	31ccb03a 	or	r6,r6,r7
1001f0b0:	308cb03a 	or	r6,r6,r2
1001f0b4:	308001cc 	andi	r2,r6,7
1001f0b8:	10000426 	beq	r2,zero,1001f0cc <__truncdfsf2+0x78>
1001f0bc:	308003cc 	andi	r2,r6,15
1001f0c0:	01000104 	movi	r4,4
1001f0c4:	11000126 	beq	r2,r4,1001f0cc <__truncdfsf2+0x78>
1001f0c8:	31800104 	addi	r6,r6,4
1001f0cc:	3081002c 	andhi	r2,r6,1024
1001f0d0:	10001626 	beq	r2,zero,1001f12c <__truncdfsf2+0xd8>
1001f0d4:	18c00044 	addi	r3,r3,1
1001f0d8:	00803fc4 	movi	r2,255
1001f0dc:	18800326 	beq	r3,r2,1001f0ec <__truncdfsf2+0x98>
1001f0e0:	300c91ba 	slli	r6,r6,6
1001f0e4:	300cd27a 	srli	r6,r6,9
1001f0e8:	00000206 	br	1001f0f4 <__truncdfsf2+0xa0>
1001f0ec:	00ffffc4 	movi	r3,-1
1001f0f0:	000d883a 	mov	r6,zero
1001f0f4:	18c03fcc 	andi	r3,r3,255
1001f0f8:	180895fa 	slli	r4,r3,23
1001f0fc:	00c02034 	movhi	r3,128
1001f100:	280a97fa 	slli	r5,r5,31
1001f104:	18ffffc4 	addi	r3,r3,-1
1001f108:	30c6703a 	and	r3,r6,r3
1001f10c:	1906b03a 	or	r3,r3,r4
1001f110:	1944b03a 	or	r2,r3,r5
1001f114:	f800283a 	ret
1001f118:	40000b1e 	bne	r8,zero,1001f148 <__truncdfsf2+0xf4>
1001f11c:	388cb03a 	or	r6,r7,r2
1001f120:	0007883a 	mov	r3,zero
1001f124:	30000426 	beq	r6,zero,1001f138 <__truncdfsf2+0xe4>
1001f128:	01800144 	movi	r6,5
1001f12c:	00803fc4 	movi	r2,255
1001f130:	300cd0fa 	srli	r6,r6,3
1001f134:	18800a26 	beq	r3,r2,1001f160 <__truncdfsf2+0x10c>
1001f138:	00802034 	movhi	r2,128
1001f13c:	10bfffc4 	addi	r2,r2,-1
1001f140:	308c703a 	and	r6,r6,r2
1001f144:	003feb06 	br	1001f0f4 <__alt_data_end+0xf801f0f4>
1001f148:	3888b03a 	or	r4,r7,r2
1001f14c:	203fe726 	beq	r4,zero,1001f0ec <__alt_data_end+0xf801f0ec>
1001f150:	380c90fa 	slli	r6,r7,3
1001f154:	00c03fc4 	movi	r3,255
1001f158:	31808034 	orhi	r6,r6,512
1001f15c:	003fd506 	br	1001f0b4 <__alt_data_end+0xf801f0b4>
1001f160:	303fe226 	beq	r6,zero,1001f0ec <__alt_data_end+0xf801f0ec>
1001f164:	00802034 	movhi	r2,128
1001f168:	31801034 	orhi	r6,r6,64
1001f16c:	10bfffc4 	addi	r2,r2,-1
1001f170:	00ffffc4 	movi	r3,-1
1001f174:	308c703a 	and	r6,r6,r2
1001f178:	003fde06 	br	1001f0f4 <__alt_data_end+0xf801f0f4>
1001f17c:	013ffa44 	movi	r4,-23
1001f180:	19000e16 	blt	r3,r4,1001f1bc <__truncdfsf2+0x168>
1001f184:	01000784 	movi	r4,30
1001f188:	20c9c83a 	sub	r4,r4,r3
1001f18c:	018007c4 	movi	r6,31
1001f190:	39c02034 	orhi	r7,r7,128
1001f194:	31000b16 	blt	r6,r4,1001f1c4 <__truncdfsf2+0x170>
1001f198:	423f2084 	addi	r8,r8,-894
1001f19c:	120c983a 	sll	r6,r2,r8
1001f1a0:	3a0e983a 	sll	r7,r7,r8
1001f1a4:	1104d83a 	srl	r2,r2,r4
1001f1a8:	300cc03a 	cmpne	r6,r6,zero
1001f1ac:	31ceb03a 	or	r7,r6,r7
1001f1b0:	388cb03a 	or	r6,r7,r2
1001f1b4:	0007883a 	mov	r3,zero
1001f1b8:	003fbe06 	br	1001f0b4 <__alt_data_end+0xf801f0b4>
1001f1bc:	0007883a 	mov	r3,zero
1001f1c0:	003fd906 	br	1001f128 <__alt_data_end+0xf801f128>
1001f1c4:	01bfff84 	movi	r6,-2
1001f1c8:	30cdc83a 	sub	r6,r6,r3
1001f1cc:	00c00804 	movi	r3,32
1001f1d0:	398cd83a 	srl	r6,r7,r6
1001f1d4:	20c00726 	beq	r4,r3,1001f1f4 <__truncdfsf2+0x1a0>
1001f1d8:	423f2884 	addi	r8,r8,-862
1001f1dc:	3a0e983a 	sll	r7,r7,r8
1001f1e0:	3884b03a 	or	r2,r7,r2
1001f1e4:	1004c03a 	cmpne	r2,r2,zero
1001f1e8:	118cb03a 	or	r6,r2,r6
1001f1ec:	0007883a 	mov	r3,zero
1001f1f0:	003fb006 	br	1001f0b4 <__alt_data_end+0xf801f0b4>
1001f1f4:	000f883a 	mov	r7,zero
1001f1f8:	003ff906 	br	1001f1e0 <__alt_data_end+0xf801f1e0>

1001f1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001f1fc:	defffe04 	addi	sp,sp,-8
1001f200:	dfc00115 	stw	ra,4(sp)
1001f204:	df000015 	stw	fp,0(sp)
1001f208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001f20c:	d0a00f17 	ldw	r2,-32708(gp)
1001f210:	10000326 	beq	r2,zero,1001f220 <alt_get_errno+0x24>
1001f214:	d0a00f17 	ldw	r2,-32708(gp)
1001f218:	103ee83a 	callr	r2
1001f21c:	00000106 	br	1001f224 <alt_get_errno+0x28>
1001f220:	d0a86d04 	addi	r2,gp,-24140
}
1001f224:	e037883a 	mov	sp,fp
1001f228:	dfc00117 	ldw	ra,4(sp)
1001f22c:	df000017 	ldw	fp,0(sp)
1001f230:	dec00204 	addi	sp,sp,8
1001f234:	f800283a 	ret

1001f238 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001f238:	defffb04 	addi	sp,sp,-20
1001f23c:	dfc00415 	stw	ra,16(sp)
1001f240:	df000315 	stw	fp,12(sp)
1001f244:	df000304 	addi	fp,sp,12
1001f248:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1001f24c:	e0bfff17 	ldw	r2,-4(fp)
1001f250:	10000816 	blt	r2,zero,1001f274 <close+0x3c>
1001f254:	01400304 	movi	r5,12
1001f258:	e13fff17 	ldw	r4,-4(fp)
1001f25c:	0008ef00 	call	10008ef0 <__mulsi3>
1001f260:	1007883a 	mov	r3,r2
1001f264:	008400b4 	movhi	r2,4098
1001f268:	10909b04 	addi	r2,r2,17004
1001f26c:	1885883a 	add	r2,r3,r2
1001f270:	00000106 	br	1001f278 <close+0x40>
1001f274:	0005883a 	mov	r2,zero
1001f278:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1001f27c:	e0bffd17 	ldw	r2,-12(fp)
1001f280:	10001926 	beq	r2,zero,1001f2e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1001f284:	e0bffd17 	ldw	r2,-12(fp)
1001f288:	10800017 	ldw	r2,0(r2)
1001f28c:	10800417 	ldw	r2,16(r2)
1001f290:	10000626 	beq	r2,zero,1001f2ac <close+0x74>
1001f294:	e0bffd17 	ldw	r2,-12(fp)
1001f298:	10800017 	ldw	r2,0(r2)
1001f29c:	10800417 	ldw	r2,16(r2)
1001f2a0:	e13ffd17 	ldw	r4,-12(fp)
1001f2a4:	103ee83a 	callr	r2
1001f2a8:	00000106 	br	1001f2b0 <close+0x78>
1001f2ac:	0005883a 	mov	r2,zero
1001f2b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1001f2b4:	e13fff17 	ldw	r4,-4(fp)
1001f2b8:	001f9200 	call	1001f920 <alt_release_fd>
    if (rval < 0)
1001f2bc:	e0bffe17 	ldw	r2,-8(fp)
1001f2c0:	1000070e 	bge	r2,zero,1001f2e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1001f2c4:	001f1fc0 	call	1001f1fc <alt_get_errno>
1001f2c8:	1007883a 	mov	r3,r2
1001f2cc:	e0bffe17 	ldw	r2,-8(fp)
1001f2d0:	0085c83a 	sub	r2,zero,r2
1001f2d4:	18800015 	stw	r2,0(r3)
      return -1;
1001f2d8:	00bfffc4 	movi	r2,-1
1001f2dc:	00000706 	br	1001f2fc <close+0xc4>
    }
    return 0;
1001f2e0:	0005883a 	mov	r2,zero
1001f2e4:	00000506 	br	1001f2fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001f2e8:	001f1fc0 	call	1001f1fc <alt_get_errno>
1001f2ec:	1007883a 	mov	r3,r2
1001f2f0:	00801444 	movi	r2,81
1001f2f4:	18800015 	stw	r2,0(r3)
    return -1;
1001f2f8:	00bfffc4 	movi	r2,-1
  }
}
1001f2fc:	e037883a 	mov	sp,fp
1001f300:	dfc00117 	ldw	ra,4(sp)
1001f304:	df000017 	ldw	fp,0(sp)
1001f308:	dec00204 	addi	sp,sp,8
1001f30c:	f800283a 	ret

1001f310 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001f310:	defffc04 	addi	sp,sp,-16
1001f314:	df000315 	stw	fp,12(sp)
1001f318:	df000304 	addi	fp,sp,12
1001f31c:	e13ffd15 	stw	r4,-12(fp)
1001f320:	e17ffe15 	stw	r5,-8(fp)
1001f324:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001f328:	e0bfff17 	ldw	r2,-4(fp)
}
1001f32c:	e037883a 	mov	sp,fp
1001f330:	df000017 	ldw	fp,0(sp)
1001f334:	dec00104 	addi	sp,sp,4
1001f338:	f800283a 	ret

1001f33c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001f33c:	defffe04 	addi	sp,sp,-8
1001f340:	dfc00115 	stw	ra,4(sp)
1001f344:	df000015 	stw	fp,0(sp)
1001f348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001f34c:	d0a00f17 	ldw	r2,-32708(gp)
1001f350:	10000326 	beq	r2,zero,1001f360 <alt_get_errno+0x24>
1001f354:	d0a00f17 	ldw	r2,-32708(gp)
1001f358:	103ee83a 	callr	r2
1001f35c:	00000106 	br	1001f364 <alt_get_errno+0x28>
1001f360:	d0a86d04 	addi	r2,gp,-24140
}
1001f364:	e037883a 	mov	sp,fp
1001f368:	dfc00117 	ldw	ra,4(sp)
1001f36c:	df000017 	ldw	fp,0(sp)
1001f370:	dec00204 	addi	sp,sp,8
1001f374:	f800283a 	ret

1001f378 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1001f378:	defffb04 	addi	sp,sp,-20
1001f37c:	dfc00415 	stw	ra,16(sp)
1001f380:	df000315 	stw	fp,12(sp)
1001f384:	df000304 	addi	fp,sp,12
1001f388:	e13ffe15 	stw	r4,-8(fp)
1001f38c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001f390:	e0bffe17 	ldw	r2,-8(fp)
1001f394:	10000816 	blt	r2,zero,1001f3b8 <fstat+0x40>
1001f398:	01400304 	movi	r5,12
1001f39c:	e13ffe17 	ldw	r4,-8(fp)
1001f3a0:	0008ef00 	call	10008ef0 <__mulsi3>
1001f3a4:	1007883a 	mov	r3,r2
1001f3a8:	008400b4 	movhi	r2,4098
1001f3ac:	10909b04 	addi	r2,r2,17004
1001f3b0:	1885883a 	add	r2,r3,r2
1001f3b4:	00000106 	br	1001f3bc <fstat+0x44>
1001f3b8:	0005883a 	mov	r2,zero
1001f3bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001f3c0:	e0bffd17 	ldw	r2,-12(fp)
1001f3c4:	10001026 	beq	r2,zero,1001f408 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1001f3c8:	e0bffd17 	ldw	r2,-12(fp)
1001f3cc:	10800017 	ldw	r2,0(r2)
1001f3d0:	10800817 	ldw	r2,32(r2)
1001f3d4:	10000726 	beq	r2,zero,1001f3f4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1001f3d8:	e0bffd17 	ldw	r2,-12(fp)
1001f3dc:	10800017 	ldw	r2,0(r2)
1001f3e0:	10800817 	ldw	r2,32(r2)
1001f3e4:	e17fff17 	ldw	r5,-4(fp)
1001f3e8:	e13ffd17 	ldw	r4,-12(fp)
1001f3ec:	103ee83a 	callr	r2
1001f3f0:	00000a06 	br	1001f41c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1001f3f4:	e0bfff17 	ldw	r2,-4(fp)
1001f3f8:	00c80004 	movi	r3,8192
1001f3fc:	10c00115 	stw	r3,4(r2)
      return 0;
1001f400:	0005883a 	mov	r2,zero
1001f404:	00000506 	br	1001f41c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001f408:	001f33c0 	call	1001f33c <alt_get_errno>
1001f40c:	1007883a 	mov	r3,r2
1001f410:	00801444 	movi	r2,81
1001f414:	18800015 	stw	r2,0(r3)
    return -1;
1001f418:	00bfffc4 	movi	r2,-1
  }
}
1001f41c:	e037883a 	mov	sp,fp
1001f420:	dfc00117 	ldw	ra,4(sp)
1001f424:	df000017 	ldw	fp,0(sp)
1001f428:	dec00204 	addi	sp,sp,8
1001f42c:	f800283a 	ret

1001f430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001f430:	defffe04 	addi	sp,sp,-8
1001f434:	dfc00115 	stw	ra,4(sp)
1001f438:	df000015 	stw	fp,0(sp)
1001f43c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001f440:	d0a00f17 	ldw	r2,-32708(gp)
1001f444:	10000326 	beq	r2,zero,1001f454 <alt_get_errno+0x24>
1001f448:	d0a00f17 	ldw	r2,-32708(gp)
1001f44c:	103ee83a 	callr	r2
1001f450:	00000106 	br	1001f458 <alt_get_errno+0x28>
1001f454:	d0a86d04 	addi	r2,gp,-24140
}
1001f458:	e037883a 	mov	sp,fp
1001f45c:	dfc00117 	ldw	ra,4(sp)
1001f460:	df000017 	ldw	fp,0(sp)
1001f464:	dec00204 	addi	sp,sp,8
1001f468:	f800283a 	ret

1001f46c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1001f46c:	deffed04 	addi	sp,sp,-76
1001f470:	dfc01215 	stw	ra,72(sp)
1001f474:	df001115 	stw	fp,68(sp)
1001f478:	df001104 	addi	fp,sp,68
1001f47c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001f480:	e0bfff17 	ldw	r2,-4(fp)
1001f484:	10000816 	blt	r2,zero,1001f4a8 <isatty+0x3c>
1001f488:	01400304 	movi	r5,12
1001f48c:	e13fff17 	ldw	r4,-4(fp)
1001f490:	0008ef00 	call	10008ef0 <__mulsi3>
1001f494:	1007883a 	mov	r3,r2
1001f498:	008400b4 	movhi	r2,4098
1001f49c:	10909b04 	addi	r2,r2,17004
1001f4a0:	1885883a 	add	r2,r3,r2
1001f4a4:	00000106 	br	1001f4ac <isatty+0x40>
1001f4a8:	0005883a 	mov	r2,zero
1001f4ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1001f4b0:	e0bfef17 	ldw	r2,-68(fp)
1001f4b4:	10000e26 	beq	r2,zero,1001f4f0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001f4b8:	e0bfef17 	ldw	r2,-68(fp)
1001f4bc:	10800017 	ldw	r2,0(r2)
1001f4c0:	10800817 	ldw	r2,32(r2)
1001f4c4:	1000021e 	bne	r2,zero,1001f4d0 <isatty+0x64>
    {
      return 1;
1001f4c8:	00800044 	movi	r2,1
1001f4cc:	00000d06 	br	1001f504 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1001f4d0:	e0bff004 	addi	r2,fp,-64
1001f4d4:	100b883a 	mov	r5,r2
1001f4d8:	e13fff17 	ldw	r4,-4(fp)
1001f4dc:	001f3780 	call	1001f378 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1001f4e0:	e0bff117 	ldw	r2,-60(fp)
1001f4e4:	10880020 	cmpeqi	r2,r2,8192
1001f4e8:	10803fcc 	andi	r2,r2,255
1001f4ec:	00000506 	br	1001f504 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001f4f0:	001f4300 	call	1001f430 <alt_get_errno>
1001f4f4:	1007883a 	mov	r3,r2
1001f4f8:	00801444 	movi	r2,81
1001f4fc:	18800015 	stw	r2,0(r3)
    return 0;
1001f500:	0005883a 	mov	r2,zero
  }
}
1001f504:	e037883a 	mov	sp,fp
1001f508:	dfc00117 	ldw	ra,4(sp)
1001f50c:	df000017 	ldw	fp,0(sp)
1001f510:	dec00204 	addi	sp,sp,8
1001f514:	f800283a 	ret

1001f518 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1001f518:	defffc04 	addi	sp,sp,-16
1001f51c:	df000315 	stw	fp,12(sp)
1001f520:	df000304 	addi	fp,sp,12
1001f524:	e13ffd15 	stw	r4,-12(fp)
1001f528:	e17ffe15 	stw	r5,-8(fp)
1001f52c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1001f530:	e0fffe17 	ldw	r3,-8(fp)
1001f534:	e0bffd17 	ldw	r2,-12(fp)
1001f538:	18800c26 	beq	r3,r2,1001f56c <alt_load_section+0x54>
  {
    while( to != end )
1001f53c:	00000806 	br	1001f560 <alt_load_section+0x48>
    {
      *to++ = *from++;
1001f540:	e0bffe17 	ldw	r2,-8(fp)
1001f544:	10c00104 	addi	r3,r2,4
1001f548:	e0fffe15 	stw	r3,-8(fp)
1001f54c:	e0fffd17 	ldw	r3,-12(fp)
1001f550:	19000104 	addi	r4,r3,4
1001f554:	e13ffd15 	stw	r4,-12(fp)
1001f558:	18c00017 	ldw	r3,0(r3)
1001f55c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1001f560:	e0fffe17 	ldw	r3,-8(fp)
1001f564:	e0bfff17 	ldw	r2,-4(fp)
1001f568:	18bff51e 	bne	r3,r2,1001f540 <__alt_data_end+0xf801f540>
    {
      *to++ = *from++;
    }
  }
}
1001f56c:	0001883a 	nop
1001f570:	e037883a 	mov	sp,fp
1001f574:	df000017 	ldw	fp,0(sp)
1001f578:	dec00104 	addi	sp,sp,4
1001f57c:	f800283a 	ret

1001f580 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1001f580:	defffe04 	addi	sp,sp,-8
1001f584:	dfc00115 	stw	ra,4(sp)
1001f588:	df000015 	stw	fp,0(sp)
1001f58c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1001f590:	018400b4 	movhi	r6,4098
1001f594:	31952704 	addi	r6,r6,21660
1001f598:	014400b4 	movhi	r5,4098
1001f59c:	294cd804 	addi	r5,r5,13152
1001f5a0:	010400b4 	movhi	r4,4098
1001f5a4:	21152704 	addi	r4,r4,21660
1001f5a8:	001f5180 	call	1001f518 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1001f5ac:	01840034 	movhi	r6,4096
1001f5b0:	31808c04 	addi	r6,r6,560
1001f5b4:	01440034 	movhi	r5,4096
1001f5b8:	29400804 	addi	r5,r5,32
1001f5bc:	01040034 	movhi	r4,4096
1001f5c0:	21000804 	addi	r4,r4,32
1001f5c4:	001f5180 	call	1001f518 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1001f5c8:	018400b4 	movhi	r6,4098
1001f5cc:	318cd804 	addi	r6,r6,13152
1001f5d0:	014400b4 	movhi	r5,4098
1001f5d4:	2946b404 	addi	r5,r5,6864
1001f5d8:	010400b4 	movhi	r4,4098
1001f5dc:	2106b404 	addi	r4,r4,6864
1001f5e0:	001f5180 	call	1001f518 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1001f5e4:	0020a180 	call	10020a18 <alt_dcache_flush_all>
  alt_icache_flush_all();
1001f5e8:	0020bd80 	call	10020bd8 <alt_icache_flush_all>
}
1001f5ec:	0001883a 	nop
1001f5f0:	e037883a 	mov	sp,fp
1001f5f4:	dfc00117 	ldw	ra,4(sp)
1001f5f8:	df000017 	ldw	fp,0(sp)
1001f5fc:	dec00204 	addi	sp,sp,8
1001f600:	f800283a 	ret

1001f604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001f604:	defffe04 	addi	sp,sp,-8
1001f608:	dfc00115 	stw	ra,4(sp)
1001f60c:	df000015 	stw	fp,0(sp)
1001f610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001f614:	d0a00f17 	ldw	r2,-32708(gp)
1001f618:	10000326 	beq	r2,zero,1001f628 <alt_get_errno+0x24>
1001f61c:	d0a00f17 	ldw	r2,-32708(gp)
1001f620:	103ee83a 	callr	r2
1001f624:	00000106 	br	1001f62c <alt_get_errno+0x28>
1001f628:	d0a86d04 	addi	r2,gp,-24140
}
1001f62c:	e037883a 	mov	sp,fp
1001f630:	dfc00117 	ldw	ra,4(sp)
1001f634:	df000017 	ldw	fp,0(sp)
1001f638:	dec00204 	addi	sp,sp,8
1001f63c:	f800283a 	ret

1001f640 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1001f640:	defff904 	addi	sp,sp,-28
1001f644:	dfc00615 	stw	ra,24(sp)
1001f648:	df000515 	stw	fp,20(sp)
1001f64c:	df000504 	addi	fp,sp,20
1001f650:	e13ffd15 	stw	r4,-12(fp)
1001f654:	e17ffe15 	stw	r5,-8(fp)
1001f658:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1001f65c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001f660:	e0bffd17 	ldw	r2,-12(fp)
1001f664:	10000816 	blt	r2,zero,1001f688 <lseek+0x48>
1001f668:	01400304 	movi	r5,12
1001f66c:	e13ffd17 	ldw	r4,-12(fp)
1001f670:	0008ef00 	call	10008ef0 <__mulsi3>
1001f674:	1007883a 	mov	r3,r2
1001f678:	008400b4 	movhi	r2,4098
1001f67c:	10909b04 	addi	r2,r2,17004
1001f680:	1885883a 	add	r2,r3,r2
1001f684:	00000106 	br	1001f68c <lseek+0x4c>
1001f688:	0005883a 	mov	r2,zero
1001f68c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1001f690:	e0bffc17 	ldw	r2,-16(fp)
1001f694:	10001026 	beq	r2,zero,1001f6d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1001f698:	e0bffc17 	ldw	r2,-16(fp)
1001f69c:	10800017 	ldw	r2,0(r2)
1001f6a0:	10800717 	ldw	r2,28(r2)
1001f6a4:	10000926 	beq	r2,zero,1001f6cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1001f6a8:	e0bffc17 	ldw	r2,-16(fp)
1001f6ac:	10800017 	ldw	r2,0(r2)
1001f6b0:	10800717 	ldw	r2,28(r2)
1001f6b4:	e1bfff17 	ldw	r6,-4(fp)
1001f6b8:	e17ffe17 	ldw	r5,-8(fp)
1001f6bc:	e13ffc17 	ldw	r4,-16(fp)
1001f6c0:	103ee83a 	callr	r2
1001f6c4:	e0bffb15 	stw	r2,-20(fp)
1001f6c8:	00000506 	br	1001f6e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001f6cc:	00bfde84 	movi	r2,-134
1001f6d0:	e0bffb15 	stw	r2,-20(fp)
1001f6d4:	00000206 	br	1001f6e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1001f6d8:	00bfebc4 	movi	r2,-81
1001f6dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1001f6e0:	e0bffb17 	ldw	r2,-20(fp)
1001f6e4:	1000070e 	bge	r2,zero,1001f704 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1001f6e8:	001f6040 	call	1001f604 <alt_get_errno>
1001f6ec:	1007883a 	mov	r3,r2
1001f6f0:	e0bffb17 	ldw	r2,-20(fp)
1001f6f4:	0085c83a 	sub	r2,zero,r2
1001f6f8:	18800015 	stw	r2,0(r3)
    rc = -1;
1001f6fc:	00bfffc4 	movi	r2,-1
1001f700:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1001f704:	e0bffb17 	ldw	r2,-20(fp)
}
1001f708:	e037883a 	mov	sp,fp
1001f70c:	dfc00117 	ldw	ra,4(sp)
1001f710:	df000017 	ldw	fp,0(sp)
1001f714:	dec00204 	addi	sp,sp,8
1001f718:	f800283a 	ret

1001f71c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001f71c:	defffd04 	addi	sp,sp,-12
1001f720:	dfc00215 	stw	ra,8(sp)
1001f724:	df000115 	stw	fp,4(sp)
1001f728:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001f72c:	0009883a 	mov	r4,zero
1001f730:	001fca80 	call	1001fca8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1001f734:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001f738:	001fce00 	call	1001fce0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1001f73c:	018400b4 	movhi	r6,4098
1001f740:	318cce04 	addi	r6,r6,13112
1001f744:	014400b4 	movhi	r5,4098
1001f748:	294cce04 	addi	r5,r5,13112
1001f74c:	010400b4 	movhi	r4,4098
1001f750:	210cce04 	addi	r4,r4,13112
1001f754:	0020f7c0 	call	10020f7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1001f758:	0020b180 	call	10020b18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1001f75c:	010400b4 	movhi	r4,4098
1001f760:	2102de04 	addi	r4,r4,2936
1001f764:	002173c0 	call	1002173c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001f768:	d0a86e17 	ldw	r2,-24136(gp)
1001f76c:	d0e86f17 	ldw	r3,-24132(gp)
1001f770:	d1287017 	ldw	r4,-24128(gp)
1001f774:	200d883a 	mov	r6,r4
1001f778:	180b883a 	mov	r5,r3
1001f77c:	1009883a 	mov	r4,r2
1001f780:	00011f80 	call	100011f8 <main>
1001f784:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001f788:	01000044 	movi	r4,1
1001f78c:	001f2380 	call	1001f238 <close>
  exit (result);
1001f790:	e13fff17 	ldw	r4,-4(fp)
1001f794:	00217500 	call	10021750 <exit>

1001f798 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1001f798:	defffe04 	addi	sp,sp,-8
1001f79c:	df000115 	stw	fp,4(sp)
1001f7a0:	df000104 	addi	fp,sp,4
1001f7a4:	e13fff15 	stw	r4,-4(fp)
}
1001f7a8:	0001883a 	nop
1001f7ac:	e037883a 	mov	sp,fp
1001f7b0:	df000017 	ldw	fp,0(sp)
1001f7b4:	dec00104 	addi	sp,sp,4
1001f7b8:	f800283a 	ret

1001f7bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1001f7bc:	defffe04 	addi	sp,sp,-8
1001f7c0:	df000115 	stw	fp,4(sp)
1001f7c4:	df000104 	addi	fp,sp,4
1001f7c8:	e13fff15 	stw	r4,-4(fp)
}
1001f7cc:	0001883a 	nop
1001f7d0:	e037883a 	mov	sp,fp
1001f7d4:	df000017 	ldw	fp,0(sp)
1001f7d8:	dec00104 	addi	sp,sp,4
1001f7dc:	f800283a 	ret

1001f7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001f7e0:	defffe04 	addi	sp,sp,-8
1001f7e4:	dfc00115 	stw	ra,4(sp)
1001f7e8:	df000015 	stw	fp,0(sp)
1001f7ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001f7f0:	d0a00f17 	ldw	r2,-32708(gp)
1001f7f4:	10000326 	beq	r2,zero,1001f804 <alt_get_errno+0x24>
1001f7f8:	d0a00f17 	ldw	r2,-32708(gp)
1001f7fc:	103ee83a 	callr	r2
1001f800:	00000106 	br	1001f808 <alt_get_errno+0x28>
1001f804:	d0a86d04 	addi	r2,gp,-24140
}
1001f808:	e037883a 	mov	sp,fp
1001f80c:	dfc00117 	ldw	ra,4(sp)
1001f810:	df000017 	ldw	fp,0(sp)
1001f814:	dec00204 	addi	sp,sp,8
1001f818:	f800283a 	ret

1001f81c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1001f81c:	defff904 	addi	sp,sp,-28
1001f820:	dfc00615 	stw	ra,24(sp)
1001f824:	df000515 	stw	fp,20(sp)
1001f828:	df000504 	addi	fp,sp,20
1001f82c:	e13ffd15 	stw	r4,-12(fp)
1001f830:	e17ffe15 	stw	r5,-8(fp)
1001f834:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001f838:	e0bffd17 	ldw	r2,-12(fp)
1001f83c:	10000816 	blt	r2,zero,1001f860 <read+0x44>
1001f840:	01400304 	movi	r5,12
1001f844:	e13ffd17 	ldw	r4,-12(fp)
1001f848:	0008ef00 	call	10008ef0 <__mulsi3>
1001f84c:	1007883a 	mov	r3,r2
1001f850:	008400b4 	movhi	r2,4098
1001f854:	10909b04 	addi	r2,r2,17004
1001f858:	1885883a 	add	r2,r3,r2
1001f85c:	00000106 	br	1001f864 <read+0x48>
1001f860:	0005883a 	mov	r2,zero
1001f864:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001f868:	e0bffb17 	ldw	r2,-20(fp)
1001f86c:	10002226 	beq	r2,zero,1001f8f8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001f870:	e0bffb17 	ldw	r2,-20(fp)
1001f874:	10800217 	ldw	r2,8(r2)
1001f878:	108000cc 	andi	r2,r2,3
1001f87c:	10800060 	cmpeqi	r2,r2,1
1001f880:	1000181e 	bne	r2,zero,1001f8e4 <read+0xc8>
        (fd->dev->read))
1001f884:	e0bffb17 	ldw	r2,-20(fp)
1001f888:	10800017 	ldw	r2,0(r2)
1001f88c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001f890:	10001426 	beq	r2,zero,1001f8e4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1001f894:	e0bffb17 	ldw	r2,-20(fp)
1001f898:	10800017 	ldw	r2,0(r2)
1001f89c:	10800517 	ldw	r2,20(r2)
1001f8a0:	e0ffff17 	ldw	r3,-4(fp)
1001f8a4:	180d883a 	mov	r6,r3
1001f8a8:	e17ffe17 	ldw	r5,-8(fp)
1001f8ac:	e13ffb17 	ldw	r4,-20(fp)
1001f8b0:	103ee83a 	callr	r2
1001f8b4:	e0bffc15 	stw	r2,-16(fp)
1001f8b8:	e0bffc17 	ldw	r2,-16(fp)
1001f8bc:	1000070e 	bge	r2,zero,1001f8dc <read+0xc0>
        {
          ALT_ERRNO = -rval;
1001f8c0:	001f7e00 	call	1001f7e0 <alt_get_errno>
1001f8c4:	1007883a 	mov	r3,r2
1001f8c8:	e0bffc17 	ldw	r2,-16(fp)
1001f8cc:	0085c83a 	sub	r2,zero,r2
1001f8d0:	18800015 	stw	r2,0(r3)
          return -1;
1001f8d4:	00bfffc4 	movi	r2,-1
1001f8d8:	00000c06 	br	1001f90c <read+0xf0>
        }
        return rval;
1001f8dc:	e0bffc17 	ldw	r2,-16(fp)
1001f8e0:	00000a06 	br	1001f90c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001f8e4:	001f7e00 	call	1001f7e0 <alt_get_errno>
1001f8e8:	1007883a 	mov	r3,r2
1001f8ec:	00800344 	movi	r2,13
1001f8f0:	18800015 	stw	r2,0(r3)
1001f8f4:	00000406 	br	1001f908 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1001f8f8:	001f7e00 	call	1001f7e0 <alt_get_errno>
1001f8fc:	1007883a 	mov	r3,r2
1001f900:	00801444 	movi	r2,81
1001f904:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001f908:	00bfffc4 	movi	r2,-1
}
1001f90c:	e037883a 	mov	sp,fp
1001f910:	dfc00117 	ldw	ra,4(sp)
1001f914:	df000017 	ldw	fp,0(sp)
1001f918:	dec00204 	addi	sp,sp,8
1001f91c:	f800283a 	ret

1001f920 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001f920:	defffc04 	addi	sp,sp,-16
1001f924:	dfc00315 	stw	ra,12(sp)
1001f928:	df000215 	stw	fp,8(sp)
1001f92c:	dc000115 	stw	r16,4(sp)
1001f930:	df000204 	addi	fp,sp,8
1001f934:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1001f938:	e0bffe17 	ldw	r2,-8(fp)
1001f93c:	108000d0 	cmplti	r2,r2,3
1001f940:	1000111e 	bne	r2,zero,1001f988 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1001f944:	040400b4 	movhi	r16,4098
1001f948:	84109b04 	addi	r16,r16,17004
1001f94c:	e0bffe17 	ldw	r2,-8(fp)
1001f950:	01400304 	movi	r5,12
1001f954:	1009883a 	mov	r4,r2
1001f958:	0008ef00 	call	10008ef0 <__mulsi3>
1001f95c:	8085883a 	add	r2,r16,r2
1001f960:	10800204 	addi	r2,r2,8
1001f964:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1001f968:	040400b4 	movhi	r16,4098
1001f96c:	84109b04 	addi	r16,r16,17004
1001f970:	e0bffe17 	ldw	r2,-8(fp)
1001f974:	01400304 	movi	r5,12
1001f978:	1009883a 	mov	r4,r2
1001f97c:	0008ef00 	call	10008ef0 <__mulsi3>
1001f980:	8085883a 	add	r2,r16,r2
1001f984:	10000015 	stw	zero,0(r2)
  }
}
1001f988:	0001883a 	nop
1001f98c:	e6ffff04 	addi	sp,fp,-4
1001f990:	dfc00217 	ldw	ra,8(sp)
1001f994:	df000117 	ldw	fp,4(sp)
1001f998:	dc000017 	ldw	r16,0(sp)
1001f99c:	dec00304 	addi	sp,sp,12
1001f9a0:	f800283a 	ret

1001f9a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1001f9a4:	defff904 	addi	sp,sp,-28
1001f9a8:	df000615 	stw	fp,24(sp)
1001f9ac:	df000604 	addi	fp,sp,24
1001f9b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001f9b4:	0005303a 	rdctl	r2,status
1001f9b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001f9bc:	e0fffe17 	ldw	r3,-8(fp)
1001f9c0:	00bfff84 	movi	r2,-2
1001f9c4:	1884703a 	and	r2,r3,r2
1001f9c8:	1001703a 	wrctl	status,r2
  
  return context;
1001f9cc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1001f9d0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1001f9d4:	d0a01017 	ldw	r2,-32704(gp)
1001f9d8:	10c000c4 	addi	r3,r2,3
1001f9dc:	00bfff04 	movi	r2,-4
1001f9e0:	1884703a 	and	r2,r3,r2
1001f9e4:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1001f9e8:	d0e01017 	ldw	r3,-32704(gp)
1001f9ec:	e0bfff17 	ldw	r2,-4(fp)
1001f9f0:	1887883a 	add	r3,r3,r2
1001f9f4:	00860034 	movhi	r2,6144
1001f9f8:	10800004 	addi	r2,r2,0
1001f9fc:	10c0062e 	bgeu	r2,r3,1001fa18 <sbrk+0x74>
1001fa00:	e0bffb17 	ldw	r2,-20(fp)
1001fa04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001fa08:	e0bffa17 	ldw	r2,-24(fp)
1001fa0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001fa10:	00bfffc4 	movi	r2,-1
1001fa14:	00000b06 	br	1001fa44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001fa18:	d0a01017 	ldw	r2,-32704(gp)
1001fa1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001fa20:	d0e01017 	ldw	r3,-32704(gp)
1001fa24:	e0bfff17 	ldw	r2,-4(fp)
1001fa28:	1885883a 	add	r2,r3,r2
1001fa2c:	d0a01015 	stw	r2,-32704(gp)
1001fa30:	e0bffb17 	ldw	r2,-20(fp)
1001fa34:	e0bffc15 	stw	r2,-16(fp)
1001fa38:	e0bffc17 	ldw	r2,-16(fp)
1001fa3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001fa40:	e0bffd17 	ldw	r2,-12(fp)
} 
1001fa44:	e037883a 	mov	sp,fp
1001fa48:	df000017 	ldw	fp,0(sp)
1001fa4c:	dec00104 	addi	sp,sp,4
1001fa50:	f800283a 	ret

1001fa54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001fa54:	defffe04 	addi	sp,sp,-8
1001fa58:	dfc00115 	stw	ra,4(sp)
1001fa5c:	df000015 	stw	fp,0(sp)
1001fa60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001fa64:	d0a00f17 	ldw	r2,-32708(gp)
1001fa68:	10000326 	beq	r2,zero,1001fa78 <alt_get_errno+0x24>
1001fa6c:	d0a00f17 	ldw	r2,-32708(gp)
1001fa70:	103ee83a 	callr	r2
1001fa74:	00000106 	br	1001fa7c <alt_get_errno+0x28>
1001fa78:	d0a86d04 	addi	r2,gp,-24140
}
1001fa7c:	e037883a 	mov	sp,fp
1001fa80:	dfc00117 	ldw	ra,4(sp)
1001fa84:	df000017 	ldw	fp,0(sp)
1001fa88:	dec00204 	addi	sp,sp,8
1001fa8c:	f800283a 	ret

1001fa90 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
1001fa90:	defffc04 	addi	sp,sp,-16
1001fa94:	dfc00315 	stw	ra,12(sp)
1001fa98:	df000215 	stw	fp,8(sp)
1001fa9c:	df000204 	addi	fp,sp,8
1001faa0:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1001faa4:	d0a87317 	ldw	r2,-24116(gp)
  clock_t ticks = alt_nticks(); 
1001faa8:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1001faac:	d0a87217 	ldw	r2,-24120(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
1001fab0:	1000061e 	bne	r2,zero,1001facc <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
1001fab4:	001fa540 	call	1001fa54 <alt_get_errno>
1001fab8:	1007883a 	mov	r3,r2
1001fabc:	00801604 	movi	r2,88
1001fac0:	18800015 	stw	r2,0(r3)
    return 0;
1001fac4:	0005883a 	mov	r2,zero
1001fac8:	00000a06 	br	1001faf4 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
1001facc:	e0bfff17 	ldw	r2,-4(fp)
1001fad0:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
1001fad4:	e0bfff17 	ldw	r2,-4(fp)
1001fad8:	e0fffe17 	ldw	r3,-8(fp)
1001fadc:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
1001fae0:	e0bfff17 	ldw	r2,-4(fp)
1001fae4:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
1001fae8:	e0bfff17 	ldw	r2,-4(fp)
1001faec:	10000315 	stw	zero,12(r2)

  return ticks;
1001faf0:	e0bffe17 	ldw	r2,-8(fp)
}
1001faf4:	e037883a 	mov	sp,fp
1001faf8:	dfc00117 	ldw	ra,4(sp)
1001fafc:	df000017 	ldw	fp,0(sp)
1001fb00:	dec00204 	addi	sp,sp,8
1001fb04:	f800283a 	ret

1001fb08 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1001fb08:	defffd04 	addi	sp,sp,-12
1001fb0c:	dfc00215 	stw	ra,8(sp)
1001fb10:	df000115 	stw	fp,4(sp)
1001fb14:	df000104 	addi	fp,sp,4
1001fb18:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1001fb1c:	e13fff17 	ldw	r4,-4(fp)
1001fb20:	00208c00 	call	100208c0 <alt_busy_sleep>
}
1001fb24:	e037883a 	mov	sp,fp
1001fb28:	dfc00117 	ldw	ra,4(sp)
1001fb2c:	df000017 	ldw	fp,0(sp)
1001fb30:	dec00204 	addi	sp,sp,8
1001fb34:	f800283a 	ret

1001fb38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001fb38:	defffe04 	addi	sp,sp,-8
1001fb3c:	dfc00115 	stw	ra,4(sp)
1001fb40:	df000015 	stw	fp,0(sp)
1001fb44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001fb48:	d0a00f17 	ldw	r2,-32708(gp)
1001fb4c:	10000326 	beq	r2,zero,1001fb5c <alt_get_errno+0x24>
1001fb50:	d0a00f17 	ldw	r2,-32708(gp)
1001fb54:	103ee83a 	callr	r2
1001fb58:	00000106 	br	1001fb60 <alt_get_errno+0x28>
1001fb5c:	d0a86d04 	addi	r2,gp,-24140
}
1001fb60:	e037883a 	mov	sp,fp
1001fb64:	dfc00117 	ldw	ra,4(sp)
1001fb68:	df000017 	ldw	fp,0(sp)
1001fb6c:	dec00204 	addi	sp,sp,8
1001fb70:	f800283a 	ret

1001fb74 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1001fb74:	defff904 	addi	sp,sp,-28
1001fb78:	dfc00615 	stw	ra,24(sp)
1001fb7c:	df000515 	stw	fp,20(sp)
1001fb80:	df000504 	addi	fp,sp,20
1001fb84:	e13ffd15 	stw	r4,-12(fp)
1001fb88:	e17ffe15 	stw	r5,-8(fp)
1001fb8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001fb90:	e0bffd17 	ldw	r2,-12(fp)
1001fb94:	10000816 	blt	r2,zero,1001fbb8 <write+0x44>
1001fb98:	01400304 	movi	r5,12
1001fb9c:	e13ffd17 	ldw	r4,-12(fp)
1001fba0:	0008ef00 	call	10008ef0 <__mulsi3>
1001fba4:	1007883a 	mov	r3,r2
1001fba8:	008400b4 	movhi	r2,4098
1001fbac:	10909b04 	addi	r2,r2,17004
1001fbb0:	1885883a 	add	r2,r3,r2
1001fbb4:	00000106 	br	1001fbbc <write+0x48>
1001fbb8:	0005883a 	mov	r2,zero
1001fbbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001fbc0:	e0bffb17 	ldw	r2,-20(fp)
1001fbc4:	10002126 	beq	r2,zero,1001fc4c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1001fbc8:	e0bffb17 	ldw	r2,-20(fp)
1001fbcc:	10800217 	ldw	r2,8(r2)
1001fbd0:	108000cc 	andi	r2,r2,3
1001fbd4:	10001826 	beq	r2,zero,1001fc38 <write+0xc4>
1001fbd8:	e0bffb17 	ldw	r2,-20(fp)
1001fbdc:	10800017 	ldw	r2,0(r2)
1001fbe0:	10800617 	ldw	r2,24(r2)
1001fbe4:	10001426 	beq	r2,zero,1001fc38 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1001fbe8:	e0bffb17 	ldw	r2,-20(fp)
1001fbec:	10800017 	ldw	r2,0(r2)
1001fbf0:	10800617 	ldw	r2,24(r2)
1001fbf4:	e0ffff17 	ldw	r3,-4(fp)
1001fbf8:	180d883a 	mov	r6,r3
1001fbfc:	e17ffe17 	ldw	r5,-8(fp)
1001fc00:	e13ffb17 	ldw	r4,-20(fp)
1001fc04:	103ee83a 	callr	r2
1001fc08:	e0bffc15 	stw	r2,-16(fp)
1001fc0c:	e0bffc17 	ldw	r2,-16(fp)
1001fc10:	1000070e 	bge	r2,zero,1001fc30 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001fc14:	001fb380 	call	1001fb38 <alt_get_errno>
1001fc18:	1007883a 	mov	r3,r2
1001fc1c:	e0bffc17 	ldw	r2,-16(fp)
1001fc20:	0085c83a 	sub	r2,zero,r2
1001fc24:	18800015 	stw	r2,0(r3)
        return -1;
1001fc28:	00bfffc4 	movi	r2,-1
1001fc2c:	00000c06 	br	1001fc60 <write+0xec>
      }
      return rval;
1001fc30:	e0bffc17 	ldw	r2,-16(fp)
1001fc34:	00000a06 	br	1001fc60 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1001fc38:	001fb380 	call	1001fb38 <alt_get_errno>
1001fc3c:	1007883a 	mov	r3,r2
1001fc40:	00800344 	movi	r2,13
1001fc44:	18800015 	stw	r2,0(r3)
1001fc48:	00000406 	br	1001fc5c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001fc4c:	001fb380 	call	1001fb38 <alt_get_errno>
1001fc50:	1007883a 	mov	r3,r2
1001fc54:	00801444 	movi	r2,81
1001fc58:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001fc5c:	00bfffc4 	movi	r2,-1
}
1001fc60:	e037883a 	mov	sp,fp
1001fc64:	dfc00117 	ldw	ra,4(sp)
1001fc68:	df000017 	ldw	fp,0(sp)
1001fc6c:	dec00204 	addi	sp,sp,8
1001fc70:	f800283a 	ret

1001fc74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1001fc74:	defffd04 	addi	sp,sp,-12
1001fc78:	dfc00215 	stw	ra,8(sp)
1001fc7c:	df000115 	stw	fp,4(sp)
1001fc80:	df000104 	addi	fp,sp,4
1001fc84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001fc88:	d1600c04 	addi	r5,gp,-32720
1001fc8c:	e13fff17 	ldw	r4,-4(fp)
1001fc90:	0020a740 	call	10020a74 <alt_dev_llist_insert>
}
1001fc94:	e037883a 	mov	sp,fp
1001fc98:	dfc00117 	ldw	ra,4(sp)
1001fc9c:	df000017 	ldw	fp,0(sp)
1001fca0:	dec00204 	addi	sp,sp,8
1001fca4:	f800283a 	ret

1001fca8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001fca8:	defffd04 	addi	sp,sp,-12
1001fcac:	dfc00215 	stw	ra,8(sp)
1001fcb0:	df000115 	stw	fp,4(sp)
1001fcb4:	df000104 	addi	fp,sp,4
1001fcb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1001fcbc:	00214200 	call	10021420 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1001fcc0:	00800044 	movi	r2,1
1001fcc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1001fcc8:	0001883a 	nop
1001fccc:	e037883a 	mov	sp,fp
1001fcd0:	dfc00117 	ldw	ra,4(sp)
1001fcd4:	df000017 	ldw	fp,0(sp)
1001fcd8:	dec00204 	addi	sp,sp,8
1001fcdc:	f800283a 	ret

1001fce0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1001fce0:	defffe04 	addi	sp,sp,-8
1001fce4:	dfc00115 	stw	ra,4(sp)
1001fce8:	df000015 	stw	fp,0(sp)
1001fcec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1001fcf0:	01800144 	movi	r6,5
1001fcf4:	000b883a 	mov	r5,zero
1001fcf8:	010400b4 	movhi	r4,4098
1001fcfc:	21110504 	addi	r4,r4,17428
1001fd00:	001fe900 	call	1001fe90 <altera_avalon_jtag_uart_init>
1001fd04:	010400b4 	movhi	r4,4098
1001fd08:	2110fb04 	addi	r4,r4,17388
1001fd0c:	001fc740 	call	1001fc74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1001fd10:	0001883a 	nop
}
1001fd14:	0001883a 	nop
1001fd18:	e037883a 	mov	sp,fp
1001fd1c:	dfc00117 	ldw	ra,4(sp)
1001fd20:	df000017 	ldw	fp,0(sp)
1001fd24:	dec00204 	addi	sp,sp,8
1001fd28:	f800283a 	ret

1001fd2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001fd2c:	defffa04 	addi	sp,sp,-24
1001fd30:	dfc00515 	stw	ra,20(sp)
1001fd34:	df000415 	stw	fp,16(sp)
1001fd38:	df000404 	addi	fp,sp,16
1001fd3c:	e13ffd15 	stw	r4,-12(fp)
1001fd40:	e17ffe15 	stw	r5,-8(fp)
1001fd44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001fd48:	e0bffd17 	ldw	r2,-12(fp)
1001fd4c:	10800017 	ldw	r2,0(r2)
1001fd50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001fd54:	e0bffc17 	ldw	r2,-16(fp)
1001fd58:	10c00a04 	addi	r3,r2,40
1001fd5c:	e0bffd17 	ldw	r2,-12(fp)
1001fd60:	10800217 	ldw	r2,8(r2)
1001fd64:	100f883a 	mov	r7,r2
1001fd68:	e1bfff17 	ldw	r6,-4(fp)
1001fd6c:	e17ffe17 	ldw	r5,-8(fp)
1001fd70:	1809883a 	mov	r4,r3
1001fd74:	00203540 	call	10020354 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1001fd78:	e037883a 	mov	sp,fp
1001fd7c:	dfc00117 	ldw	ra,4(sp)
1001fd80:	df000017 	ldw	fp,0(sp)
1001fd84:	dec00204 	addi	sp,sp,8
1001fd88:	f800283a 	ret

1001fd8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001fd8c:	defffa04 	addi	sp,sp,-24
1001fd90:	dfc00515 	stw	ra,20(sp)
1001fd94:	df000415 	stw	fp,16(sp)
1001fd98:	df000404 	addi	fp,sp,16
1001fd9c:	e13ffd15 	stw	r4,-12(fp)
1001fda0:	e17ffe15 	stw	r5,-8(fp)
1001fda4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001fda8:	e0bffd17 	ldw	r2,-12(fp)
1001fdac:	10800017 	ldw	r2,0(r2)
1001fdb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001fdb4:	e0bffc17 	ldw	r2,-16(fp)
1001fdb8:	10c00a04 	addi	r3,r2,40
1001fdbc:	e0bffd17 	ldw	r2,-12(fp)
1001fdc0:	10800217 	ldw	r2,8(r2)
1001fdc4:	100f883a 	mov	r7,r2
1001fdc8:	e1bfff17 	ldw	r6,-4(fp)
1001fdcc:	e17ffe17 	ldw	r5,-8(fp)
1001fdd0:	1809883a 	mov	r4,r3
1001fdd4:	00205700 	call	10020570 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1001fdd8:	e037883a 	mov	sp,fp
1001fddc:	dfc00117 	ldw	ra,4(sp)
1001fde0:	df000017 	ldw	fp,0(sp)
1001fde4:	dec00204 	addi	sp,sp,8
1001fde8:	f800283a 	ret

1001fdec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001fdec:	defffc04 	addi	sp,sp,-16
1001fdf0:	dfc00315 	stw	ra,12(sp)
1001fdf4:	df000215 	stw	fp,8(sp)
1001fdf8:	df000204 	addi	fp,sp,8
1001fdfc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001fe00:	e0bfff17 	ldw	r2,-4(fp)
1001fe04:	10800017 	ldw	r2,0(r2)
1001fe08:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001fe0c:	e0bffe17 	ldw	r2,-8(fp)
1001fe10:	10c00a04 	addi	r3,r2,40
1001fe14:	e0bfff17 	ldw	r2,-4(fp)
1001fe18:	10800217 	ldw	r2,8(r2)
1001fe1c:	100b883a 	mov	r5,r2
1001fe20:	1809883a 	mov	r4,r3
1001fe24:	00201fc0 	call	100201fc <altera_avalon_jtag_uart_close>
}
1001fe28:	e037883a 	mov	sp,fp
1001fe2c:	dfc00117 	ldw	ra,4(sp)
1001fe30:	df000017 	ldw	fp,0(sp)
1001fe34:	dec00204 	addi	sp,sp,8
1001fe38:	f800283a 	ret

1001fe3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001fe3c:	defffa04 	addi	sp,sp,-24
1001fe40:	dfc00515 	stw	ra,20(sp)
1001fe44:	df000415 	stw	fp,16(sp)
1001fe48:	df000404 	addi	fp,sp,16
1001fe4c:	e13ffd15 	stw	r4,-12(fp)
1001fe50:	e17ffe15 	stw	r5,-8(fp)
1001fe54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1001fe58:	e0bffd17 	ldw	r2,-12(fp)
1001fe5c:	10800017 	ldw	r2,0(r2)
1001fe60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001fe64:	e0bffc17 	ldw	r2,-16(fp)
1001fe68:	10800a04 	addi	r2,r2,40
1001fe6c:	e1bfff17 	ldw	r6,-4(fp)
1001fe70:	e17ffe17 	ldw	r5,-8(fp)
1001fe74:	1009883a 	mov	r4,r2
1001fe78:	00202640 	call	10020264 <altera_avalon_jtag_uart_ioctl>
}
1001fe7c:	e037883a 	mov	sp,fp
1001fe80:	dfc00117 	ldw	ra,4(sp)
1001fe84:	df000017 	ldw	fp,0(sp)
1001fe88:	dec00204 	addi	sp,sp,8
1001fe8c:	f800283a 	ret

1001fe90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1001fe90:	defffa04 	addi	sp,sp,-24
1001fe94:	dfc00515 	stw	ra,20(sp)
1001fe98:	df000415 	stw	fp,16(sp)
1001fe9c:	df000404 	addi	fp,sp,16
1001fea0:	e13ffd15 	stw	r4,-12(fp)
1001fea4:	e17ffe15 	stw	r5,-8(fp)
1001fea8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001feac:	e0bffd17 	ldw	r2,-12(fp)
1001feb0:	00c00044 	movi	r3,1
1001feb4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1001feb8:	e0bffd17 	ldw	r2,-12(fp)
1001febc:	10800017 	ldw	r2,0(r2)
1001fec0:	10800104 	addi	r2,r2,4
1001fec4:	1007883a 	mov	r3,r2
1001fec8:	e0bffd17 	ldw	r2,-12(fp)
1001fecc:	10800817 	ldw	r2,32(r2)
1001fed0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001fed4:	e0bffe17 	ldw	r2,-8(fp)
1001fed8:	e0ffff17 	ldw	r3,-4(fp)
1001fedc:	d8000015 	stw	zero,0(sp)
1001fee0:	e1fffd17 	ldw	r7,-12(fp)
1001fee4:	018400b4 	movhi	r6,4098
1001fee8:	31bfd404 	addi	r6,r6,-176
1001feec:	180b883a 	mov	r5,r3
1001fef0:	1009883a 	mov	r4,r2
1001fef4:	0020bf80 	call	10020bf8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1001fef8:	e0bffd17 	ldw	r2,-12(fp)
1001fefc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1001ff00:	e0bffd17 	ldw	r2,-12(fp)
1001ff04:	10800204 	addi	r2,r2,8
1001ff08:	d0e87217 	ldw	r3,-24120(gp)
1001ff0c:	e1fffd17 	ldw	r7,-12(fp)
1001ff10:	018400b4 	movhi	r6,4098
1001ff14:	31805704 	addi	r6,r6,348
1001ff18:	180b883a 	mov	r5,r3
1001ff1c:	1009883a 	mov	r4,r2
1001ff20:	00207940 	call	10020794 <alt_alarm_start>
1001ff24:	1000040e 	bge	r2,zero,1001ff38 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1001ff28:	e0fffd17 	ldw	r3,-12(fp)
1001ff2c:	00a00034 	movhi	r2,32768
1001ff30:	10bfffc4 	addi	r2,r2,-1
1001ff34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1001ff38:	0001883a 	nop
1001ff3c:	e037883a 	mov	sp,fp
1001ff40:	dfc00117 	ldw	ra,4(sp)
1001ff44:	df000017 	ldw	fp,0(sp)
1001ff48:	dec00204 	addi	sp,sp,8
1001ff4c:	f800283a 	ret

1001ff50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1001ff50:	defff804 	addi	sp,sp,-32
1001ff54:	df000715 	stw	fp,28(sp)
1001ff58:	df000704 	addi	fp,sp,28
1001ff5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1001ff60:	e0bfff17 	ldw	r2,-4(fp)
1001ff64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1001ff68:	e0bffb17 	ldw	r2,-20(fp)
1001ff6c:	10800017 	ldw	r2,0(r2)
1001ff70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001ff74:	e0bffc17 	ldw	r2,-16(fp)
1001ff78:	10800104 	addi	r2,r2,4
1001ff7c:	10800037 	ldwio	r2,0(r2)
1001ff80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001ff84:	e0bffd17 	ldw	r2,-12(fp)
1001ff88:	1080c00c 	andi	r2,r2,768
1001ff8c:	10006d26 	beq	r2,zero,10020144 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1001ff90:	e0bffd17 	ldw	r2,-12(fp)
1001ff94:	1080400c 	andi	r2,r2,256
1001ff98:	10003526 	beq	r2,zero,10020070 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001ff9c:	00800074 	movhi	r2,1
1001ffa0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001ffa4:	e0bffb17 	ldw	r2,-20(fp)
1001ffa8:	10800a17 	ldw	r2,40(r2)
1001ffac:	10800044 	addi	r2,r2,1
1001ffb0:	1081ffcc 	andi	r2,r2,2047
1001ffb4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1001ffb8:	e0bffb17 	ldw	r2,-20(fp)
1001ffbc:	10c00b17 	ldw	r3,44(r2)
1001ffc0:	e0bffe17 	ldw	r2,-8(fp)
1001ffc4:	18801526 	beq	r3,r2,1002001c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1001ffc8:	e0bffc17 	ldw	r2,-16(fp)
1001ffcc:	10800037 	ldwio	r2,0(r2)
1001ffd0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001ffd4:	e0bff917 	ldw	r2,-28(fp)
1001ffd8:	10a0000c 	andi	r2,r2,32768
1001ffdc:	10001126 	beq	r2,zero,10020024 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1001ffe0:	e0bffb17 	ldw	r2,-20(fp)
1001ffe4:	10800a17 	ldw	r2,40(r2)
1001ffe8:	e0fff917 	ldw	r3,-28(fp)
1001ffec:	1809883a 	mov	r4,r3
1001fff0:	e0fffb17 	ldw	r3,-20(fp)
1001fff4:	1885883a 	add	r2,r3,r2
1001fff8:	10800e04 	addi	r2,r2,56
1001fffc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10020000:	e0bffb17 	ldw	r2,-20(fp)
10020004:	10800a17 	ldw	r2,40(r2)
10020008:	10800044 	addi	r2,r2,1
1002000c:	10c1ffcc 	andi	r3,r2,2047
10020010:	e0bffb17 	ldw	r2,-20(fp)
10020014:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10020018:	003fe206 	br	1001ffa4 <__alt_data_end+0xf801ffa4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1002001c:	0001883a 	nop
10020020:	00000106 	br	10020028 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10020024:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10020028:	e0bff917 	ldw	r2,-28(fp)
1002002c:	10bfffec 	andhi	r2,r2,65535
10020030:	10000f26 	beq	r2,zero,10020070 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10020034:	e0bffb17 	ldw	r2,-20(fp)
10020038:	10c00817 	ldw	r3,32(r2)
1002003c:	00bfff84 	movi	r2,-2
10020040:	1886703a 	and	r3,r3,r2
10020044:	e0bffb17 	ldw	r2,-20(fp)
10020048:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1002004c:	e0bffc17 	ldw	r2,-16(fp)
10020050:	10800104 	addi	r2,r2,4
10020054:	1007883a 	mov	r3,r2
10020058:	e0bffb17 	ldw	r2,-20(fp)
1002005c:	10800817 	ldw	r2,32(r2)
10020060:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10020064:	e0bffc17 	ldw	r2,-16(fp)
10020068:	10800104 	addi	r2,r2,4
1002006c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10020070:	e0bffd17 	ldw	r2,-12(fp)
10020074:	1080800c 	andi	r2,r2,512
10020078:	103fbe26 	beq	r2,zero,1001ff74 <__alt_data_end+0xf801ff74>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1002007c:	e0bffd17 	ldw	r2,-12(fp)
10020080:	1004d43a 	srli	r2,r2,16
10020084:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10020088:	00001406 	br	100200dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1002008c:	e0bffc17 	ldw	r2,-16(fp)
10020090:	e0fffb17 	ldw	r3,-20(fp)
10020094:	18c00d17 	ldw	r3,52(r3)
10020098:	e13ffb17 	ldw	r4,-20(fp)
1002009c:	20c7883a 	add	r3,r4,r3
100200a0:	18c20e04 	addi	r3,r3,2104
100200a4:	18c00003 	ldbu	r3,0(r3)
100200a8:	18c03fcc 	andi	r3,r3,255
100200ac:	18c0201c 	xori	r3,r3,128
100200b0:	18ffe004 	addi	r3,r3,-128
100200b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100200b8:	e0bffb17 	ldw	r2,-20(fp)
100200bc:	10800d17 	ldw	r2,52(r2)
100200c0:	10800044 	addi	r2,r2,1
100200c4:	10c1ffcc 	andi	r3,r2,2047
100200c8:	e0bffb17 	ldw	r2,-20(fp)
100200cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100200d0:	e0bffa17 	ldw	r2,-24(fp)
100200d4:	10bfffc4 	addi	r2,r2,-1
100200d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100200dc:	e0bffa17 	ldw	r2,-24(fp)
100200e0:	10000526 	beq	r2,zero,100200f8 <altera_avalon_jtag_uart_irq+0x1a8>
100200e4:	e0bffb17 	ldw	r2,-20(fp)
100200e8:	10c00d17 	ldw	r3,52(r2)
100200ec:	e0bffb17 	ldw	r2,-20(fp)
100200f0:	10800c17 	ldw	r2,48(r2)
100200f4:	18bfe51e 	bne	r3,r2,1002008c <__alt_data_end+0xf802008c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100200f8:	e0bffa17 	ldw	r2,-24(fp)
100200fc:	103f9d26 	beq	r2,zero,1001ff74 <__alt_data_end+0xf801ff74>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10020100:	e0bffb17 	ldw	r2,-20(fp)
10020104:	10c00817 	ldw	r3,32(r2)
10020108:	00bfff44 	movi	r2,-3
1002010c:	1886703a 	and	r3,r3,r2
10020110:	e0bffb17 	ldw	r2,-20(fp)
10020114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10020118:	e0bffb17 	ldw	r2,-20(fp)
1002011c:	10800017 	ldw	r2,0(r2)
10020120:	10800104 	addi	r2,r2,4
10020124:	1007883a 	mov	r3,r2
10020128:	e0bffb17 	ldw	r2,-20(fp)
1002012c:	10800817 	ldw	r2,32(r2)
10020130:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10020134:	e0bffc17 	ldw	r2,-16(fp)
10020138:	10800104 	addi	r2,r2,4
1002013c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10020140:	003f8c06 	br	1001ff74 <__alt_data_end+0xf801ff74>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10020144:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10020148:	0001883a 	nop
1002014c:	e037883a 	mov	sp,fp
10020150:	df000017 	ldw	fp,0(sp)
10020154:	dec00104 	addi	sp,sp,4
10020158:	f800283a 	ret

1002015c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1002015c:	defff804 	addi	sp,sp,-32
10020160:	df000715 	stw	fp,28(sp)
10020164:	df000704 	addi	fp,sp,28
10020168:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1002016c:	e0bffb17 	ldw	r2,-20(fp)
10020170:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10020174:	e0bff917 	ldw	r2,-28(fp)
10020178:	10800017 	ldw	r2,0(r2)
1002017c:	10800104 	addi	r2,r2,4
10020180:	10800037 	ldwio	r2,0(r2)
10020184:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10020188:	e0bffa17 	ldw	r2,-24(fp)
1002018c:	1081000c 	andi	r2,r2,1024
10020190:	10000b26 	beq	r2,zero,100201c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10020194:	e0bff917 	ldw	r2,-28(fp)
10020198:	10800017 	ldw	r2,0(r2)
1002019c:	10800104 	addi	r2,r2,4
100201a0:	1007883a 	mov	r3,r2
100201a4:	e0bff917 	ldw	r2,-28(fp)
100201a8:	10800817 	ldw	r2,32(r2)
100201ac:	10810014 	ori	r2,r2,1024
100201b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100201b4:	e0bff917 	ldw	r2,-28(fp)
100201b8:	10000915 	stw	zero,36(r2)
100201bc:	00000a06 	br	100201e8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100201c0:	e0bff917 	ldw	r2,-28(fp)
100201c4:	10c00917 	ldw	r3,36(r2)
100201c8:	00a00034 	movhi	r2,32768
100201cc:	10bfff04 	addi	r2,r2,-4
100201d0:	10c00536 	bltu	r2,r3,100201e8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100201d4:	e0bff917 	ldw	r2,-28(fp)
100201d8:	10800917 	ldw	r2,36(r2)
100201dc:	10c00044 	addi	r3,r2,1
100201e0:	e0bff917 	ldw	r2,-28(fp)
100201e4:	10c00915 	stw	r3,36(r2)
100201e8:	d0a87217 	ldw	r2,-24120(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100201ec:	e037883a 	mov	sp,fp
100201f0:	df000017 	ldw	fp,0(sp)
100201f4:	dec00104 	addi	sp,sp,4
100201f8:	f800283a 	ret

100201fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100201fc:	defffd04 	addi	sp,sp,-12
10020200:	df000215 	stw	fp,8(sp)
10020204:	df000204 	addi	fp,sp,8
10020208:	e13ffe15 	stw	r4,-8(fp)
1002020c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10020210:	00000506 	br	10020228 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10020214:	e0bfff17 	ldw	r2,-4(fp)
10020218:	1090000c 	andi	r2,r2,16384
1002021c:	10000226 	beq	r2,zero,10020228 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10020220:	00bffd44 	movi	r2,-11
10020224:	00000b06 	br	10020254 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10020228:	e0bffe17 	ldw	r2,-8(fp)
1002022c:	10c00d17 	ldw	r3,52(r2)
10020230:	e0bffe17 	ldw	r2,-8(fp)
10020234:	10800c17 	ldw	r2,48(r2)
10020238:	18800526 	beq	r3,r2,10020250 <altera_avalon_jtag_uart_close+0x54>
1002023c:	e0bffe17 	ldw	r2,-8(fp)
10020240:	10c00917 	ldw	r3,36(r2)
10020244:	e0bffe17 	ldw	r2,-8(fp)
10020248:	10800117 	ldw	r2,4(r2)
1002024c:	18bff136 	bltu	r3,r2,10020214 <__alt_data_end+0xf8020214>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10020250:	0005883a 	mov	r2,zero
}
10020254:	e037883a 	mov	sp,fp
10020258:	df000017 	ldw	fp,0(sp)
1002025c:	dec00104 	addi	sp,sp,4
10020260:	f800283a 	ret

10020264 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10020264:	defffa04 	addi	sp,sp,-24
10020268:	df000515 	stw	fp,20(sp)
1002026c:	df000504 	addi	fp,sp,20
10020270:	e13ffd15 	stw	r4,-12(fp)
10020274:	e17ffe15 	stw	r5,-8(fp)
10020278:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1002027c:	00bff9c4 	movi	r2,-25
10020280:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10020284:	e0bffe17 	ldw	r2,-8(fp)
10020288:	10da8060 	cmpeqi	r3,r2,27137
1002028c:	1800031e 	bne	r3,zero,1002029c <altera_avalon_jtag_uart_ioctl+0x38>
10020290:	109a80a0 	cmpeqi	r2,r2,27138
10020294:	1000181e 	bne	r2,zero,100202f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10020298:	00002906 	br	10020340 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1002029c:	e0bffd17 	ldw	r2,-12(fp)
100202a0:	10c00117 	ldw	r3,4(r2)
100202a4:	00a00034 	movhi	r2,32768
100202a8:	10bfffc4 	addi	r2,r2,-1
100202ac:	18802126 	beq	r3,r2,10020334 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100202b0:	e0bfff17 	ldw	r2,-4(fp)
100202b4:	10800017 	ldw	r2,0(r2)
100202b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100202bc:	e0bffc17 	ldw	r2,-16(fp)
100202c0:	10800090 	cmplti	r2,r2,2
100202c4:	1000061e 	bne	r2,zero,100202e0 <altera_avalon_jtag_uart_ioctl+0x7c>
100202c8:	e0fffc17 	ldw	r3,-16(fp)
100202cc:	00a00034 	movhi	r2,32768
100202d0:	10bfffc4 	addi	r2,r2,-1
100202d4:	18800226 	beq	r3,r2,100202e0 <altera_avalon_jtag_uart_ioctl+0x7c>
100202d8:	e0bffc17 	ldw	r2,-16(fp)
100202dc:	00000206 	br	100202e8 <altera_avalon_jtag_uart_ioctl+0x84>
100202e0:	00a00034 	movhi	r2,32768
100202e4:	10bfff84 	addi	r2,r2,-2
100202e8:	e0fffd17 	ldw	r3,-12(fp)
100202ec:	18800115 	stw	r2,4(r3)
      rc = 0;
100202f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100202f4:	00000f06 	br	10020334 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100202f8:	e0bffd17 	ldw	r2,-12(fp)
100202fc:	10c00117 	ldw	r3,4(r2)
10020300:	00a00034 	movhi	r2,32768
10020304:	10bfffc4 	addi	r2,r2,-1
10020308:	18800c26 	beq	r3,r2,1002033c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1002030c:	e0bffd17 	ldw	r2,-12(fp)
10020310:	10c00917 	ldw	r3,36(r2)
10020314:	e0bffd17 	ldw	r2,-12(fp)
10020318:	10800117 	ldw	r2,4(r2)
1002031c:	1885803a 	cmpltu	r2,r3,r2
10020320:	10c03fcc 	andi	r3,r2,255
10020324:	e0bfff17 	ldw	r2,-4(fp)
10020328:	10c00015 	stw	r3,0(r2)
      rc = 0;
1002032c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10020330:	00000206 	br	1002033c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10020334:	0001883a 	nop
10020338:	00000106 	br	10020340 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1002033c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10020340:	e0bffb17 	ldw	r2,-20(fp)
}
10020344:	e037883a 	mov	sp,fp
10020348:	df000017 	ldw	fp,0(sp)
1002034c:	dec00104 	addi	sp,sp,4
10020350:	f800283a 	ret

10020354 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10020354:	defff304 	addi	sp,sp,-52
10020358:	dfc00c15 	stw	ra,48(sp)
1002035c:	df000b15 	stw	fp,44(sp)
10020360:	df000b04 	addi	fp,sp,44
10020364:	e13ffc15 	stw	r4,-16(fp)
10020368:	e17ffd15 	stw	r5,-12(fp)
1002036c:	e1bffe15 	stw	r6,-8(fp)
10020370:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10020374:	e0bffd17 	ldw	r2,-12(fp)
10020378:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1002037c:	00004706 	br	1002049c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10020380:	e0bffc17 	ldw	r2,-16(fp)
10020384:	10800a17 	ldw	r2,40(r2)
10020388:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1002038c:	e0bffc17 	ldw	r2,-16(fp)
10020390:	10800b17 	ldw	r2,44(r2)
10020394:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10020398:	e0fff717 	ldw	r3,-36(fp)
1002039c:	e0bff817 	ldw	r2,-32(fp)
100203a0:	18800536 	bltu	r3,r2,100203b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100203a4:	e0fff717 	ldw	r3,-36(fp)
100203a8:	e0bff817 	ldw	r2,-32(fp)
100203ac:	1885c83a 	sub	r2,r3,r2
100203b0:	e0bff615 	stw	r2,-40(fp)
100203b4:	00000406 	br	100203c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100203b8:	00c20004 	movi	r3,2048
100203bc:	e0bff817 	ldw	r2,-32(fp)
100203c0:	1885c83a 	sub	r2,r3,r2
100203c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100203c8:	e0bff617 	ldw	r2,-40(fp)
100203cc:	10001e26 	beq	r2,zero,10020448 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100203d0:	e0fffe17 	ldw	r3,-8(fp)
100203d4:	e0bff617 	ldw	r2,-40(fp)
100203d8:	1880022e 	bgeu	r3,r2,100203e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100203dc:	e0bffe17 	ldw	r2,-8(fp)
100203e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100203e4:	e0bffc17 	ldw	r2,-16(fp)
100203e8:	10c00e04 	addi	r3,r2,56
100203ec:	e0bff817 	ldw	r2,-32(fp)
100203f0:	1885883a 	add	r2,r3,r2
100203f4:	e1bff617 	ldw	r6,-40(fp)
100203f8:	100b883a 	mov	r5,r2
100203fc:	e13ff517 	ldw	r4,-44(fp)
10020400:	0009cd00 	call	10009cd0 <memcpy>
      ptr   += n;
10020404:	e0fff517 	ldw	r3,-44(fp)
10020408:	e0bff617 	ldw	r2,-40(fp)
1002040c:	1885883a 	add	r2,r3,r2
10020410:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10020414:	e0fffe17 	ldw	r3,-8(fp)
10020418:	e0bff617 	ldw	r2,-40(fp)
1002041c:	1885c83a 	sub	r2,r3,r2
10020420:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10020424:	e0fff817 	ldw	r3,-32(fp)
10020428:	e0bff617 	ldw	r2,-40(fp)
1002042c:	1885883a 	add	r2,r3,r2
10020430:	10c1ffcc 	andi	r3,r2,2047
10020434:	e0bffc17 	ldw	r2,-16(fp)
10020438:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1002043c:	e0bffe17 	ldw	r2,-8(fp)
10020440:	00bfcf16 	blt	zero,r2,10020380 <__alt_data_end+0xf8020380>
10020444:	00000106 	br	1002044c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10020448:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1002044c:	e0fff517 	ldw	r3,-44(fp)
10020450:	e0bffd17 	ldw	r2,-12(fp)
10020454:	1880141e 	bne	r3,r2,100204a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10020458:	e0bfff17 	ldw	r2,-4(fp)
1002045c:	1090000c 	andi	r2,r2,16384
10020460:	1000131e 	bne	r2,zero,100204b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10020464:	0001883a 	nop
10020468:	e0bffc17 	ldw	r2,-16(fp)
1002046c:	10c00a17 	ldw	r3,40(r2)
10020470:	e0bff717 	ldw	r2,-36(fp)
10020474:	1880051e 	bne	r3,r2,1002048c <altera_avalon_jtag_uart_read+0x138>
10020478:	e0bffc17 	ldw	r2,-16(fp)
1002047c:	10c00917 	ldw	r3,36(r2)
10020480:	e0bffc17 	ldw	r2,-16(fp)
10020484:	10800117 	ldw	r2,4(r2)
10020488:	18bff736 	bltu	r3,r2,10020468 <__alt_data_end+0xf8020468>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1002048c:	e0bffc17 	ldw	r2,-16(fp)
10020490:	10c00a17 	ldw	r3,40(r2)
10020494:	e0bff717 	ldw	r2,-36(fp)
10020498:	18800726 	beq	r3,r2,100204b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1002049c:	e0bffe17 	ldw	r2,-8(fp)
100204a0:	00bfb716 	blt	zero,r2,10020380 <__alt_data_end+0xf8020380>
100204a4:	00000506 	br	100204bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100204a8:	0001883a 	nop
100204ac:	00000306 	br	100204bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100204b0:	0001883a 	nop
100204b4:	00000106 	br	100204bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100204b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100204bc:	e0fff517 	ldw	r3,-44(fp)
100204c0:	e0bffd17 	ldw	r2,-12(fp)
100204c4:	18801826 	beq	r3,r2,10020528 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100204c8:	0005303a 	rdctl	r2,status
100204cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100204d0:	e0fffb17 	ldw	r3,-20(fp)
100204d4:	00bfff84 	movi	r2,-2
100204d8:	1884703a 	and	r2,r3,r2
100204dc:	1001703a 	wrctl	status,r2
  
  return context;
100204e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100204e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100204e8:	e0bffc17 	ldw	r2,-16(fp)
100204ec:	10800817 	ldw	r2,32(r2)
100204f0:	10c00054 	ori	r3,r2,1
100204f4:	e0bffc17 	ldw	r2,-16(fp)
100204f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100204fc:	e0bffc17 	ldw	r2,-16(fp)
10020500:	10800017 	ldw	r2,0(r2)
10020504:	10800104 	addi	r2,r2,4
10020508:	1007883a 	mov	r3,r2
1002050c:	e0bffc17 	ldw	r2,-16(fp)
10020510:	10800817 	ldw	r2,32(r2)
10020514:	18800035 	stwio	r2,0(r3)
10020518:	e0bffa17 	ldw	r2,-24(fp)
1002051c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10020520:	e0bff917 	ldw	r2,-28(fp)
10020524:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10020528:	e0fff517 	ldw	r3,-44(fp)
1002052c:	e0bffd17 	ldw	r2,-12(fp)
10020530:	18800426 	beq	r3,r2,10020544 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10020534:	e0fff517 	ldw	r3,-44(fp)
10020538:	e0bffd17 	ldw	r2,-12(fp)
1002053c:	1885c83a 	sub	r2,r3,r2
10020540:	00000606 	br	1002055c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10020544:	e0bfff17 	ldw	r2,-4(fp)
10020548:	1090000c 	andi	r2,r2,16384
1002054c:	10000226 	beq	r2,zero,10020558 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10020550:	00bffd44 	movi	r2,-11
10020554:	00000106 	br	1002055c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10020558:	00bffec4 	movi	r2,-5
}
1002055c:	e037883a 	mov	sp,fp
10020560:	dfc00117 	ldw	ra,4(sp)
10020564:	df000017 	ldw	fp,0(sp)
10020568:	dec00204 	addi	sp,sp,8
1002056c:	f800283a 	ret

10020570 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10020570:	defff304 	addi	sp,sp,-52
10020574:	dfc00c15 	stw	ra,48(sp)
10020578:	df000b15 	stw	fp,44(sp)
1002057c:	df000b04 	addi	fp,sp,44
10020580:	e13ffc15 	stw	r4,-16(fp)
10020584:	e17ffd15 	stw	r5,-12(fp)
10020588:	e1bffe15 	stw	r6,-8(fp)
1002058c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10020590:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10020594:	e0bffd17 	ldw	r2,-12(fp)
10020598:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1002059c:	00003706 	br	1002067c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100205a0:	e0bffc17 	ldw	r2,-16(fp)
100205a4:	10800c17 	ldw	r2,48(r2)
100205a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100205ac:	e0bffc17 	ldw	r2,-16(fp)
100205b0:	10800d17 	ldw	r2,52(r2)
100205b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100205b8:	e0fff917 	ldw	r3,-28(fp)
100205bc:	e0bff517 	ldw	r2,-44(fp)
100205c0:	1880062e 	bgeu	r3,r2,100205dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100205c4:	e0fff517 	ldw	r3,-44(fp)
100205c8:	e0bff917 	ldw	r2,-28(fp)
100205cc:	1885c83a 	sub	r2,r3,r2
100205d0:	10bfffc4 	addi	r2,r2,-1
100205d4:	e0bff615 	stw	r2,-40(fp)
100205d8:	00000b06 	br	10020608 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100205dc:	e0bff517 	ldw	r2,-44(fp)
100205e0:	10000526 	beq	r2,zero,100205f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100205e4:	00c20004 	movi	r3,2048
100205e8:	e0bff917 	ldw	r2,-28(fp)
100205ec:	1885c83a 	sub	r2,r3,r2
100205f0:	e0bff615 	stw	r2,-40(fp)
100205f4:	00000406 	br	10020608 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100205f8:	00c1ffc4 	movi	r3,2047
100205fc:	e0bff917 	ldw	r2,-28(fp)
10020600:	1885c83a 	sub	r2,r3,r2
10020604:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10020608:	e0bff617 	ldw	r2,-40(fp)
1002060c:	10001e26 	beq	r2,zero,10020688 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10020610:	e0fffe17 	ldw	r3,-8(fp)
10020614:	e0bff617 	ldw	r2,-40(fp)
10020618:	1880022e 	bgeu	r3,r2,10020624 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1002061c:	e0bffe17 	ldw	r2,-8(fp)
10020620:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10020624:	e0bffc17 	ldw	r2,-16(fp)
10020628:	10c20e04 	addi	r3,r2,2104
1002062c:	e0bff917 	ldw	r2,-28(fp)
10020630:	1885883a 	add	r2,r3,r2
10020634:	e1bff617 	ldw	r6,-40(fp)
10020638:	e17ffd17 	ldw	r5,-12(fp)
1002063c:	1009883a 	mov	r4,r2
10020640:	0009cd00 	call	10009cd0 <memcpy>
      ptr   += n;
10020644:	e0fffd17 	ldw	r3,-12(fp)
10020648:	e0bff617 	ldw	r2,-40(fp)
1002064c:	1885883a 	add	r2,r3,r2
10020650:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10020654:	e0fffe17 	ldw	r3,-8(fp)
10020658:	e0bff617 	ldw	r2,-40(fp)
1002065c:	1885c83a 	sub	r2,r3,r2
10020660:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10020664:	e0fff917 	ldw	r3,-28(fp)
10020668:	e0bff617 	ldw	r2,-40(fp)
1002066c:	1885883a 	add	r2,r3,r2
10020670:	10c1ffcc 	andi	r3,r2,2047
10020674:	e0bffc17 	ldw	r2,-16(fp)
10020678:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1002067c:	e0bffe17 	ldw	r2,-8(fp)
10020680:	00bfc716 	blt	zero,r2,100205a0 <__alt_data_end+0xf80205a0>
10020684:	00000106 	br	1002068c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10020688:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1002068c:	0005303a 	rdctl	r2,status
10020690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10020694:	e0fffb17 	ldw	r3,-20(fp)
10020698:	00bfff84 	movi	r2,-2
1002069c:	1884703a 	and	r2,r3,r2
100206a0:	1001703a 	wrctl	status,r2
  
  return context;
100206a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100206a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100206ac:	e0bffc17 	ldw	r2,-16(fp)
100206b0:	10800817 	ldw	r2,32(r2)
100206b4:	10c00094 	ori	r3,r2,2
100206b8:	e0bffc17 	ldw	r2,-16(fp)
100206bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100206c0:	e0bffc17 	ldw	r2,-16(fp)
100206c4:	10800017 	ldw	r2,0(r2)
100206c8:	10800104 	addi	r2,r2,4
100206cc:	1007883a 	mov	r3,r2
100206d0:	e0bffc17 	ldw	r2,-16(fp)
100206d4:	10800817 	ldw	r2,32(r2)
100206d8:	18800035 	stwio	r2,0(r3)
100206dc:	e0bffa17 	ldw	r2,-24(fp)
100206e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100206e4:	e0bff817 	ldw	r2,-32(fp)
100206e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100206ec:	e0bffe17 	ldw	r2,-8(fp)
100206f0:	0080100e 	bge	zero,r2,10020734 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100206f4:	e0bfff17 	ldw	r2,-4(fp)
100206f8:	1090000c 	andi	r2,r2,16384
100206fc:	1000101e 	bne	r2,zero,10020740 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10020700:	0001883a 	nop
10020704:	e0bffc17 	ldw	r2,-16(fp)
10020708:	10c00d17 	ldw	r3,52(r2)
1002070c:	e0bff517 	ldw	r2,-44(fp)
10020710:	1880051e 	bne	r3,r2,10020728 <altera_avalon_jtag_uart_write+0x1b8>
10020714:	e0bffc17 	ldw	r2,-16(fp)
10020718:	10c00917 	ldw	r3,36(r2)
1002071c:	e0bffc17 	ldw	r2,-16(fp)
10020720:	10800117 	ldw	r2,4(r2)
10020724:	18bff736 	bltu	r3,r2,10020704 <__alt_data_end+0xf8020704>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10020728:	e0bffc17 	ldw	r2,-16(fp)
1002072c:	10800917 	ldw	r2,36(r2)
10020730:	1000051e 	bne	r2,zero,10020748 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10020734:	e0bffe17 	ldw	r2,-8(fp)
10020738:	00bfd016 	blt	zero,r2,1002067c <__alt_data_end+0xf802067c>
1002073c:	00000306 	br	1002074c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10020740:	0001883a 	nop
10020744:	00000106 	br	1002074c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10020748:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1002074c:	e0fffd17 	ldw	r3,-12(fp)
10020750:	e0bff717 	ldw	r2,-36(fp)
10020754:	18800426 	beq	r3,r2,10020768 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10020758:	e0fffd17 	ldw	r3,-12(fp)
1002075c:	e0bff717 	ldw	r2,-36(fp)
10020760:	1885c83a 	sub	r2,r3,r2
10020764:	00000606 	br	10020780 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10020768:	e0bfff17 	ldw	r2,-4(fp)
1002076c:	1090000c 	andi	r2,r2,16384
10020770:	10000226 	beq	r2,zero,1002077c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10020774:	00bffd44 	movi	r2,-11
10020778:	00000106 	br	10020780 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1002077c:	00bffec4 	movi	r2,-5
}
10020780:	e037883a 	mov	sp,fp
10020784:	dfc00117 	ldw	ra,4(sp)
10020788:	df000017 	ldw	fp,0(sp)
1002078c:	dec00204 	addi	sp,sp,8
10020790:	f800283a 	ret

10020794 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10020794:	defff504 	addi	sp,sp,-44
10020798:	df000a15 	stw	fp,40(sp)
1002079c:	df000a04 	addi	fp,sp,40
100207a0:	e13ffc15 	stw	r4,-16(fp)
100207a4:	e17ffd15 	stw	r5,-12(fp)
100207a8:	e1bffe15 	stw	r6,-8(fp)
100207ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100207b0:	e03ff615 	stw	zero,-40(fp)
100207b4:	d0a87217 	ldw	r2,-24120(gp)
  
  if (alt_ticks_per_second ())
100207b8:	10003c26 	beq	r2,zero,100208ac <alt_alarm_start+0x118>
  {
    if (alarm)
100207bc:	e0bffc17 	ldw	r2,-16(fp)
100207c0:	10003826 	beq	r2,zero,100208a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100207c4:	e0bffc17 	ldw	r2,-16(fp)
100207c8:	e0fffe17 	ldw	r3,-8(fp)
100207cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100207d0:	e0bffc17 	ldw	r2,-16(fp)
100207d4:	e0ffff17 	ldw	r3,-4(fp)
100207d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100207dc:	0005303a 	rdctl	r2,status
100207e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100207e4:	e0fff917 	ldw	r3,-28(fp)
100207e8:	00bfff84 	movi	r2,-2
100207ec:	1884703a 	and	r2,r3,r2
100207f0:	1001703a 	wrctl	status,r2
  
  return context;
100207f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100207f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100207fc:	d0a87317 	ldw	r2,-24116(gp)
      
      current_nticks = alt_nticks();
10020800:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10020804:	e0fffd17 	ldw	r3,-12(fp)
10020808:	e0bff617 	ldw	r2,-40(fp)
1002080c:	1885883a 	add	r2,r3,r2
10020810:	10c00044 	addi	r3,r2,1
10020814:	e0bffc17 	ldw	r2,-16(fp)
10020818:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1002081c:	e0bffc17 	ldw	r2,-16(fp)
10020820:	10c00217 	ldw	r3,8(r2)
10020824:	e0bff617 	ldw	r2,-40(fp)
10020828:	1880042e 	bgeu	r3,r2,1002083c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1002082c:	e0bffc17 	ldw	r2,-16(fp)
10020830:	00c00044 	movi	r3,1
10020834:	10c00405 	stb	r3,16(r2)
10020838:	00000206 	br	10020844 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1002083c:	e0bffc17 	ldw	r2,-16(fp)
10020840:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10020844:	e0bffc17 	ldw	r2,-16(fp)
10020848:	d0e01204 	addi	r3,gp,-32696
1002084c:	e0fffa15 	stw	r3,-24(fp)
10020850:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10020854:	e0bffb17 	ldw	r2,-20(fp)
10020858:	e0fffa17 	ldw	r3,-24(fp)
1002085c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10020860:	e0bffa17 	ldw	r2,-24(fp)
10020864:	10c00017 	ldw	r3,0(r2)
10020868:	e0bffb17 	ldw	r2,-20(fp)
1002086c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10020870:	e0bffa17 	ldw	r2,-24(fp)
10020874:	10800017 	ldw	r2,0(r2)
10020878:	e0fffb17 	ldw	r3,-20(fp)
1002087c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10020880:	e0bffa17 	ldw	r2,-24(fp)
10020884:	e0fffb17 	ldw	r3,-20(fp)
10020888:	10c00015 	stw	r3,0(r2)
1002088c:	e0bff817 	ldw	r2,-32(fp)
10020890:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10020894:	e0bff717 	ldw	r2,-36(fp)
10020898:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1002089c:	0005883a 	mov	r2,zero
100208a0:	00000306 	br	100208b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100208a4:	00bffa84 	movi	r2,-22
100208a8:	00000106 	br	100208b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100208ac:	00bfde84 	movi	r2,-134
  }
}
100208b0:	e037883a 	mov	sp,fp
100208b4:	df000017 	ldw	fp,0(sp)
100208b8:	dec00104 	addi	sp,sp,4
100208bc:	f800283a 	ret

100208c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100208c0:	defffa04 	addi	sp,sp,-24
100208c4:	dfc00515 	stw	ra,20(sp)
100208c8:	df000415 	stw	fp,16(sp)
100208cc:	df000404 	addi	fp,sp,16
100208d0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100208d4:	00800244 	movi	r2,9
100208d8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100208dc:	014003f4 	movhi	r5,15
100208e0:	29509004 	addi	r5,r5,16960
100208e4:	e13ffd17 	ldw	r4,-12(fp)
100208e8:	0008ef00 	call	10008ef0 <__mulsi3>
100208ec:	100b883a 	mov	r5,r2
100208f0:	0100bef4 	movhi	r4,763
100208f4:	213c2004 	addi	r4,r4,-3968
100208f8:	0009bc80 	call	10009bc8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100208fc:	100b883a 	mov	r5,r2
10020900:	01200034 	movhi	r4,32768
10020904:	213fffc4 	addi	r4,r4,-1
10020908:	0009bc80 	call	10009bc8 <__udivsi3>
1002090c:	100b883a 	mov	r5,r2
10020910:	e13fff17 	ldw	r4,-4(fp)
10020914:	0009bc80 	call	10009bc8 <__udivsi3>
10020918:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1002091c:	e0bffe17 	ldw	r2,-8(fp)
10020920:	10002a26 	beq	r2,zero,100209cc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10020924:	e03ffc15 	stw	zero,-16(fp)
10020928:	00001706 	br	10020988 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1002092c:	00a00034 	movhi	r2,32768
10020930:	10bfffc4 	addi	r2,r2,-1
10020934:	10bfffc4 	addi	r2,r2,-1
10020938:	103ffe1e 	bne	r2,zero,10020934 <__alt_data_end+0xf8020934>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1002093c:	014003f4 	movhi	r5,15
10020940:	29509004 	addi	r5,r5,16960
10020944:	e13ffd17 	ldw	r4,-12(fp)
10020948:	0008ef00 	call	10008ef0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1002094c:	100b883a 	mov	r5,r2
10020950:	0100bef4 	movhi	r4,763
10020954:	213c2004 	addi	r4,r4,-3968
10020958:	0009bc80 	call	10009bc8 <__udivsi3>
1002095c:	100b883a 	mov	r5,r2
10020960:	01200034 	movhi	r4,32768
10020964:	213fffc4 	addi	r4,r4,-1
10020968:	0009bc80 	call	10009bc8 <__udivsi3>
1002096c:	1007883a 	mov	r3,r2
10020970:	e0bfff17 	ldw	r2,-4(fp)
10020974:	10c5c83a 	sub	r2,r2,r3
10020978:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1002097c:	e0bffc17 	ldw	r2,-16(fp)
10020980:	10800044 	addi	r2,r2,1
10020984:	e0bffc15 	stw	r2,-16(fp)
10020988:	e0fffc17 	ldw	r3,-16(fp)
1002098c:	e0bffe17 	ldw	r2,-8(fp)
10020990:	18bfe616 	blt	r3,r2,1002092c <__alt_data_end+0xf802092c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10020994:	014003f4 	movhi	r5,15
10020998:	29509004 	addi	r5,r5,16960
1002099c:	e13ffd17 	ldw	r4,-12(fp)
100209a0:	0008ef00 	call	10008ef0 <__mulsi3>
100209a4:	100b883a 	mov	r5,r2
100209a8:	0100bef4 	movhi	r4,763
100209ac:	213c2004 	addi	r4,r4,-3968
100209b0:	0009bc80 	call	10009bc8 <__udivsi3>
100209b4:	e17fff17 	ldw	r5,-4(fp)
100209b8:	1009883a 	mov	r4,r2
100209bc:	0008ef00 	call	10008ef0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100209c0:	10bfffc4 	addi	r2,r2,-1
100209c4:	103ffe1e 	bne	r2,zero,100209c0 <__alt_data_end+0xf80209c0>
100209c8:	00000d06 	br	10020a00 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100209cc:	014003f4 	movhi	r5,15
100209d0:	29509004 	addi	r5,r5,16960
100209d4:	e13ffd17 	ldw	r4,-12(fp)
100209d8:	0008ef00 	call	10008ef0 <__mulsi3>
100209dc:	100b883a 	mov	r5,r2
100209e0:	0100bef4 	movhi	r4,763
100209e4:	213c2004 	addi	r4,r4,-3968
100209e8:	0009bc80 	call	10009bc8 <__udivsi3>
100209ec:	e17fff17 	ldw	r5,-4(fp)
100209f0:	1009883a 	mov	r4,r2
100209f4:	0008ef00 	call	10008ef0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100209f8:	10bfffc4 	addi	r2,r2,-1
100209fc:	00bffe16 	blt	zero,r2,100209f8 <__alt_data_end+0xf80209f8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10020a00:	0005883a 	mov	r2,zero
}
10020a04:	e037883a 	mov	sp,fp
10020a08:	dfc00117 	ldw	ra,4(sp)
10020a0c:	df000017 	ldw	fp,0(sp)
10020a10:	dec00204 	addi	sp,sp,8
10020a14:	f800283a 	ret

10020a18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10020a18:	deffff04 	addi	sp,sp,-4
10020a1c:	df000015 	stw	fp,0(sp)
10020a20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10020a24:	0001883a 	nop
10020a28:	e037883a 	mov	sp,fp
10020a2c:	df000017 	ldw	fp,0(sp)
10020a30:	dec00104 	addi	sp,sp,4
10020a34:	f800283a 	ret

10020a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10020a38:	defffe04 	addi	sp,sp,-8
10020a3c:	dfc00115 	stw	ra,4(sp)
10020a40:	df000015 	stw	fp,0(sp)
10020a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10020a48:	d0a00f17 	ldw	r2,-32708(gp)
10020a4c:	10000326 	beq	r2,zero,10020a5c <alt_get_errno+0x24>
10020a50:	d0a00f17 	ldw	r2,-32708(gp)
10020a54:	103ee83a 	callr	r2
10020a58:	00000106 	br	10020a60 <alt_get_errno+0x28>
10020a5c:	d0a86d04 	addi	r2,gp,-24140
}
10020a60:	e037883a 	mov	sp,fp
10020a64:	dfc00117 	ldw	ra,4(sp)
10020a68:	df000017 	ldw	fp,0(sp)
10020a6c:	dec00204 	addi	sp,sp,8
10020a70:	f800283a 	ret

10020a74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10020a74:	defffa04 	addi	sp,sp,-24
10020a78:	dfc00515 	stw	ra,20(sp)
10020a7c:	df000415 	stw	fp,16(sp)
10020a80:	df000404 	addi	fp,sp,16
10020a84:	e13ffe15 	stw	r4,-8(fp)
10020a88:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10020a8c:	e0bffe17 	ldw	r2,-8(fp)
10020a90:	10000326 	beq	r2,zero,10020aa0 <alt_dev_llist_insert+0x2c>
10020a94:	e0bffe17 	ldw	r2,-8(fp)
10020a98:	10800217 	ldw	r2,8(r2)
10020a9c:	1000061e 	bne	r2,zero,10020ab8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10020aa0:	0020a380 	call	10020a38 <alt_get_errno>
10020aa4:	1007883a 	mov	r3,r2
10020aa8:	00800584 	movi	r2,22
10020aac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10020ab0:	00bffa84 	movi	r2,-22
10020ab4:	00001306 	br	10020b04 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10020ab8:	e0bffe17 	ldw	r2,-8(fp)
10020abc:	e0ffff17 	ldw	r3,-4(fp)
10020ac0:	e0fffc15 	stw	r3,-16(fp)
10020ac4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10020ac8:	e0bffd17 	ldw	r2,-12(fp)
10020acc:	e0fffc17 	ldw	r3,-16(fp)
10020ad0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10020ad4:	e0bffc17 	ldw	r2,-16(fp)
10020ad8:	10c00017 	ldw	r3,0(r2)
10020adc:	e0bffd17 	ldw	r2,-12(fp)
10020ae0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10020ae4:	e0bffc17 	ldw	r2,-16(fp)
10020ae8:	10800017 	ldw	r2,0(r2)
10020aec:	e0fffd17 	ldw	r3,-12(fp)
10020af0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10020af4:	e0bffc17 	ldw	r2,-16(fp)
10020af8:	e0fffd17 	ldw	r3,-12(fp)
10020afc:	10c00015 	stw	r3,0(r2)

  return 0;  
10020b00:	0005883a 	mov	r2,zero
}
10020b04:	e037883a 	mov	sp,fp
10020b08:	dfc00117 	ldw	ra,4(sp)
10020b0c:	df000017 	ldw	fp,0(sp)
10020b10:	dec00204 	addi	sp,sp,8
10020b14:	f800283a 	ret

10020b18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10020b18:	defffd04 	addi	sp,sp,-12
10020b1c:	dfc00215 	stw	ra,8(sp)
10020b20:	df000115 	stw	fp,4(sp)
10020b24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10020b28:	008400b4 	movhi	r2,4098
10020b2c:	1086b304 	addi	r2,r2,6860
10020b30:	e0bfff15 	stw	r2,-4(fp)
10020b34:	00000606 	br	10020b50 <_do_ctors+0x38>
        (*ctor) (); 
10020b38:	e0bfff17 	ldw	r2,-4(fp)
10020b3c:	10800017 	ldw	r2,0(r2)
10020b40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10020b44:	e0bfff17 	ldw	r2,-4(fp)
10020b48:	10bfff04 	addi	r2,r2,-4
10020b4c:	e0bfff15 	stw	r2,-4(fp)
10020b50:	e0ffff17 	ldw	r3,-4(fp)
10020b54:	008400b4 	movhi	r2,4098
10020b58:	1086b404 	addi	r2,r2,6864
10020b5c:	18bff62e 	bgeu	r3,r2,10020b38 <__alt_data_end+0xf8020b38>
        (*ctor) (); 
}
10020b60:	0001883a 	nop
10020b64:	e037883a 	mov	sp,fp
10020b68:	dfc00117 	ldw	ra,4(sp)
10020b6c:	df000017 	ldw	fp,0(sp)
10020b70:	dec00204 	addi	sp,sp,8
10020b74:	f800283a 	ret

10020b78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10020b78:	defffd04 	addi	sp,sp,-12
10020b7c:	dfc00215 	stw	ra,8(sp)
10020b80:	df000115 	stw	fp,4(sp)
10020b84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10020b88:	008400b4 	movhi	r2,4098
10020b8c:	1086b304 	addi	r2,r2,6860
10020b90:	e0bfff15 	stw	r2,-4(fp)
10020b94:	00000606 	br	10020bb0 <_do_dtors+0x38>
        (*dtor) (); 
10020b98:	e0bfff17 	ldw	r2,-4(fp)
10020b9c:	10800017 	ldw	r2,0(r2)
10020ba0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10020ba4:	e0bfff17 	ldw	r2,-4(fp)
10020ba8:	10bfff04 	addi	r2,r2,-4
10020bac:	e0bfff15 	stw	r2,-4(fp)
10020bb0:	e0ffff17 	ldw	r3,-4(fp)
10020bb4:	008400b4 	movhi	r2,4098
10020bb8:	1086b404 	addi	r2,r2,6864
10020bbc:	18bff62e 	bgeu	r3,r2,10020b98 <__alt_data_end+0xf8020b98>
        (*dtor) (); 
}
10020bc0:	0001883a 	nop
10020bc4:	e037883a 	mov	sp,fp
10020bc8:	dfc00117 	ldw	ra,4(sp)
10020bcc:	df000017 	ldw	fp,0(sp)
10020bd0:	dec00204 	addi	sp,sp,8
10020bd4:	f800283a 	ret

10020bd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10020bd8:	deffff04 	addi	sp,sp,-4
10020bdc:	df000015 	stw	fp,0(sp)
10020be0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10020be4:	0001883a 	nop
10020be8:	e037883a 	mov	sp,fp
10020bec:	df000017 	ldw	fp,0(sp)
10020bf0:	dec00104 	addi	sp,sp,4
10020bf4:	f800283a 	ret

10020bf8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10020bf8:	defff904 	addi	sp,sp,-28
10020bfc:	dfc00615 	stw	ra,24(sp)
10020c00:	df000515 	stw	fp,20(sp)
10020c04:	df000504 	addi	fp,sp,20
10020c08:	e13ffc15 	stw	r4,-16(fp)
10020c0c:	e17ffd15 	stw	r5,-12(fp)
10020c10:	e1bffe15 	stw	r6,-8(fp)
10020c14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10020c18:	e0800217 	ldw	r2,8(fp)
10020c1c:	d8800015 	stw	r2,0(sp)
10020c20:	e1ffff17 	ldw	r7,-4(fp)
10020c24:	e1bffe17 	ldw	r6,-8(fp)
10020c28:	e17ffd17 	ldw	r5,-12(fp)
10020c2c:	e13ffc17 	ldw	r4,-16(fp)
10020c30:	0020da80 	call	10020da8 <alt_iic_isr_register>
}  
10020c34:	e037883a 	mov	sp,fp
10020c38:	dfc00117 	ldw	ra,4(sp)
10020c3c:	df000017 	ldw	fp,0(sp)
10020c40:	dec00204 	addi	sp,sp,8
10020c44:	f800283a 	ret

10020c48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10020c48:	defff904 	addi	sp,sp,-28
10020c4c:	df000615 	stw	fp,24(sp)
10020c50:	df000604 	addi	fp,sp,24
10020c54:	e13ffe15 	stw	r4,-8(fp)
10020c58:	e17fff15 	stw	r5,-4(fp)
10020c5c:	e0bfff17 	ldw	r2,-4(fp)
10020c60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10020c64:	0005303a 	rdctl	r2,status
10020c68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10020c6c:	e0fffb17 	ldw	r3,-20(fp)
10020c70:	00bfff84 	movi	r2,-2
10020c74:	1884703a 	and	r2,r3,r2
10020c78:	1001703a 	wrctl	status,r2
  
  return context;
10020c7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10020c80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10020c84:	00c00044 	movi	r3,1
10020c88:	e0bffa17 	ldw	r2,-24(fp)
10020c8c:	1884983a 	sll	r2,r3,r2
10020c90:	1007883a 	mov	r3,r2
10020c94:	d0a87117 	ldw	r2,-24124(gp)
10020c98:	1884b03a 	or	r2,r3,r2
10020c9c:	d0a87115 	stw	r2,-24124(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10020ca0:	d0a87117 	ldw	r2,-24124(gp)
10020ca4:	100170fa 	wrctl	ienable,r2
10020ca8:	e0bffc17 	ldw	r2,-16(fp)
10020cac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10020cb0:	e0bffd17 	ldw	r2,-12(fp)
10020cb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10020cb8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10020cbc:	0001883a 	nop
}
10020cc0:	e037883a 	mov	sp,fp
10020cc4:	df000017 	ldw	fp,0(sp)
10020cc8:	dec00104 	addi	sp,sp,4
10020ccc:	f800283a 	ret

10020cd0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10020cd0:	defff904 	addi	sp,sp,-28
10020cd4:	df000615 	stw	fp,24(sp)
10020cd8:	df000604 	addi	fp,sp,24
10020cdc:	e13ffe15 	stw	r4,-8(fp)
10020ce0:	e17fff15 	stw	r5,-4(fp)
10020ce4:	e0bfff17 	ldw	r2,-4(fp)
10020ce8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10020cec:	0005303a 	rdctl	r2,status
10020cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10020cf4:	e0fffb17 	ldw	r3,-20(fp)
10020cf8:	00bfff84 	movi	r2,-2
10020cfc:	1884703a 	and	r2,r3,r2
10020d00:	1001703a 	wrctl	status,r2
  
  return context;
10020d04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10020d08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10020d0c:	00c00044 	movi	r3,1
10020d10:	e0bffa17 	ldw	r2,-24(fp)
10020d14:	1884983a 	sll	r2,r3,r2
10020d18:	0084303a 	nor	r2,zero,r2
10020d1c:	1007883a 	mov	r3,r2
10020d20:	d0a87117 	ldw	r2,-24124(gp)
10020d24:	1884703a 	and	r2,r3,r2
10020d28:	d0a87115 	stw	r2,-24124(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10020d2c:	d0a87117 	ldw	r2,-24124(gp)
10020d30:	100170fa 	wrctl	ienable,r2
10020d34:	e0bffc17 	ldw	r2,-16(fp)
10020d38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10020d3c:	e0bffd17 	ldw	r2,-12(fp)
10020d40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10020d44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10020d48:	0001883a 	nop
}
10020d4c:	e037883a 	mov	sp,fp
10020d50:	df000017 	ldw	fp,0(sp)
10020d54:	dec00104 	addi	sp,sp,4
10020d58:	f800283a 	ret

10020d5c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10020d5c:	defffc04 	addi	sp,sp,-16
10020d60:	df000315 	stw	fp,12(sp)
10020d64:	df000304 	addi	fp,sp,12
10020d68:	e13ffe15 	stw	r4,-8(fp)
10020d6c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10020d70:	000530fa 	rdctl	r2,ienable
10020d74:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10020d78:	00c00044 	movi	r3,1
10020d7c:	e0bfff17 	ldw	r2,-4(fp)
10020d80:	1884983a 	sll	r2,r3,r2
10020d84:	1007883a 	mov	r3,r2
10020d88:	e0bffd17 	ldw	r2,-12(fp)
10020d8c:	1884703a 	and	r2,r3,r2
10020d90:	1004c03a 	cmpne	r2,r2,zero
10020d94:	10803fcc 	andi	r2,r2,255
}
10020d98:	e037883a 	mov	sp,fp
10020d9c:	df000017 	ldw	fp,0(sp)
10020da0:	dec00104 	addi	sp,sp,4
10020da4:	f800283a 	ret

10020da8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10020da8:	defff504 	addi	sp,sp,-44
10020dac:	dfc00a15 	stw	ra,40(sp)
10020db0:	df000915 	stw	fp,36(sp)
10020db4:	df000904 	addi	fp,sp,36
10020db8:	e13ffc15 	stw	r4,-16(fp)
10020dbc:	e17ffd15 	stw	r5,-12(fp)
10020dc0:	e1bffe15 	stw	r6,-8(fp)
10020dc4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10020dc8:	00bffa84 	movi	r2,-22
10020dcc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10020dd0:	e0bffd17 	ldw	r2,-12(fp)
10020dd4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10020dd8:	e0bff817 	ldw	r2,-32(fp)
10020ddc:	10800808 	cmpgei	r2,r2,32
10020de0:	1000271e 	bne	r2,zero,10020e80 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10020de4:	0005303a 	rdctl	r2,status
10020de8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10020dec:	e0fffb17 	ldw	r3,-20(fp)
10020df0:	00bfff84 	movi	r2,-2
10020df4:	1884703a 	and	r2,r3,r2
10020df8:	1001703a 	wrctl	status,r2
  
  return context;
10020dfc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10020e00:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10020e04:	008400b4 	movhi	r2,4098
10020e08:	109d9204 	addi	r2,r2,30280
10020e0c:	e0fff817 	ldw	r3,-32(fp)
10020e10:	180690fa 	slli	r3,r3,3
10020e14:	10c5883a 	add	r2,r2,r3
10020e18:	e0fffe17 	ldw	r3,-8(fp)
10020e1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10020e20:	008400b4 	movhi	r2,4098
10020e24:	109d9204 	addi	r2,r2,30280
10020e28:	e0fff817 	ldw	r3,-32(fp)
10020e2c:	180690fa 	slli	r3,r3,3
10020e30:	10c5883a 	add	r2,r2,r3
10020e34:	10800104 	addi	r2,r2,4
10020e38:	e0ffff17 	ldw	r3,-4(fp)
10020e3c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10020e40:	e0bffe17 	ldw	r2,-8(fp)
10020e44:	10000526 	beq	r2,zero,10020e5c <alt_iic_isr_register+0xb4>
10020e48:	e0bff817 	ldw	r2,-32(fp)
10020e4c:	100b883a 	mov	r5,r2
10020e50:	e13ffc17 	ldw	r4,-16(fp)
10020e54:	0020c480 	call	10020c48 <alt_ic_irq_enable>
10020e58:	00000406 	br	10020e6c <alt_iic_isr_register+0xc4>
10020e5c:	e0bff817 	ldw	r2,-32(fp)
10020e60:	100b883a 	mov	r5,r2
10020e64:	e13ffc17 	ldw	r4,-16(fp)
10020e68:	0020cd00 	call	10020cd0 <alt_ic_irq_disable>
10020e6c:	e0bff715 	stw	r2,-36(fp)
10020e70:	e0bffa17 	ldw	r2,-24(fp)
10020e74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10020e78:	e0bff917 	ldw	r2,-28(fp)
10020e7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10020e80:	e0bff717 	ldw	r2,-36(fp)
}
10020e84:	e037883a 	mov	sp,fp
10020e88:	dfc00117 	ldw	ra,4(sp)
10020e8c:	df000017 	ldw	fp,0(sp)
10020e90:	dec00204 	addi	sp,sp,8
10020e94:	f800283a 	ret

10020e98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10020e98:	defff804 	addi	sp,sp,-32
10020e9c:	dfc00715 	stw	ra,28(sp)
10020ea0:	df000615 	stw	fp,24(sp)
10020ea4:	dc000515 	stw	r16,20(sp)
10020ea8:	df000604 	addi	fp,sp,24
10020eac:	e13ffb15 	stw	r4,-20(fp)
10020eb0:	e17ffc15 	stw	r5,-16(fp)
10020eb4:	e1bffd15 	stw	r6,-12(fp)
10020eb8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10020ebc:	e1bffe17 	ldw	r6,-8(fp)
10020ec0:	e17ffd17 	ldw	r5,-12(fp)
10020ec4:	e13ffc17 	ldw	r4,-16(fp)
10020ec8:	00211200 	call	10021120 <open>
10020ecc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10020ed0:	e0bffa17 	ldw	r2,-24(fp)
10020ed4:	10002216 	blt	r2,zero,10020f60 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10020ed8:	040400b4 	movhi	r16,4098
10020edc:	84109b04 	addi	r16,r16,17004
10020ee0:	e0bffa17 	ldw	r2,-24(fp)
10020ee4:	01400304 	movi	r5,12
10020ee8:	1009883a 	mov	r4,r2
10020eec:	0008ef00 	call	10008ef0 <__mulsi3>
10020ef0:	8085883a 	add	r2,r16,r2
10020ef4:	10c00017 	ldw	r3,0(r2)
10020ef8:	e0bffb17 	ldw	r2,-20(fp)
10020efc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10020f00:	040400b4 	movhi	r16,4098
10020f04:	84109b04 	addi	r16,r16,17004
10020f08:	e0bffa17 	ldw	r2,-24(fp)
10020f0c:	01400304 	movi	r5,12
10020f10:	1009883a 	mov	r4,r2
10020f14:	0008ef00 	call	10008ef0 <__mulsi3>
10020f18:	8085883a 	add	r2,r16,r2
10020f1c:	10800104 	addi	r2,r2,4
10020f20:	10c00017 	ldw	r3,0(r2)
10020f24:	e0bffb17 	ldw	r2,-20(fp)
10020f28:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10020f2c:	040400b4 	movhi	r16,4098
10020f30:	84109b04 	addi	r16,r16,17004
10020f34:	e0bffa17 	ldw	r2,-24(fp)
10020f38:	01400304 	movi	r5,12
10020f3c:	1009883a 	mov	r4,r2
10020f40:	0008ef00 	call	10008ef0 <__mulsi3>
10020f44:	8085883a 	add	r2,r16,r2
10020f48:	10800204 	addi	r2,r2,8
10020f4c:	10c00017 	ldw	r3,0(r2)
10020f50:	e0bffb17 	ldw	r2,-20(fp)
10020f54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10020f58:	e13ffa17 	ldw	r4,-24(fp)
10020f5c:	001f9200 	call	1001f920 <alt_release_fd>
  }
} 
10020f60:	0001883a 	nop
10020f64:	e6ffff04 	addi	sp,fp,-4
10020f68:	dfc00217 	ldw	ra,8(sp)
10020f6c:	df000117 	ldw	fp,4(sp)
10020f70:	dc000017 	ldw	r16,0(sp)
10020f74:	dec00304 	addi	sp,sp,12
10020f78:	f800283a 	ret

10020f7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10020f7c:	defffb04 	addi	sp,sp,-20
10020f80:	dfc00415 	stw	ra,16(sp)
10020f84:	df000315 	stw	fp,12(sp)
10020f88:	df000304 	addi	fp,sp,12
10020f8c:	e13ffd15 	stw	r4,-12(fp)
10020f90:	e17ffe15 	stw	r5,-8(fp)
10020f94:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10020f98:	01c07fc4 	movi	r7,511
10020f9c:	01800044 	movi	r6,1
10020fa0:	e17ffd17 	ldw	r5,-12(fp)
10020fa4:	010400b4 	movhi	r4,4098
10020fa8:	21109e04 	addi	r4,r4,17016
10020fac:	0020e980 	call	10020e98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10020fb0:	01c07fc4 	movi	r7,511
10020fb4:	000d883a 	mov	r6,zero
10020fb8:	e17ffe17 	ldw	r5,-8(fp)
10020fbc:	010400b4 	movhi	r4,4098
10020fc0:	21109b04 	addi	r4,r4,17004
10020fc4:	0020e980 	call	10020e98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10020fc8:	01c07fc4 	movi	r7,511
10020fcc:	01800044 	movi	r6,1
10020fd0:	e17fff17 	ldw	r5,-4(fp)
10020fd4:	010400b4 	movhi	r4,4098
10020fd8:	2110a104 	addi	r4,r4,17028
10020fdc:	0020e980 	call	10020e98 <alt_open_fd>
}  
10020fe0:	0001883a 	nop
10020fe4:	e037883a 	mov	sp,fp
10020fe8:	dfc00117 	ldw	ra,4(sp)
10020fec:	df000017 	ldw	fp,0(sp)
10020ff0:	dec00204 	addi	sp,sp,8
10020ff4:	f800283a 	ret

10020ff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10020ff8:	defffe04 	addi	sp,sp,-8
10020ffc:	dfc00115 	stw	ra,4(sp)
10021000:	df000015 	stw	fp,0(sp)
10021004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10021008:	d0a00f17 	ldw	r2,-32708(gp)
1002100c:	10000326 	beq	r2,zero,1002101c <alt_get_errno+0x24>
10021010:	d0a00f17 	ldw	r2,-32708(gp)
10021014:	103ee83a 	callr	r2
10021018:	00000106 	br	10021020 <alt_get_errno+0x28>
1002101c:	d0a86d04 	addi	r2,gp,-24140
}
10021020:	e037883a 	mov	sp,fp
10021024:	dfc00117 	ldw	ra,4(sp)
10021028:	df000017 	ldw	fp,0(sp)
1002102c:	dec00204 	addi	sp,sp,8
10021030:	f800283a 	ret

10021034 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10021034:	defffb04 	addi	sp,sp,-20
10021038:	dfc00415 	stw	ra,16(sp)
1002103c:	df000315 	stw	fp,12(sp)
10021040:	dc000215 	stw	r16,8(sp)
10021044:	df000304 	addi	fp,sp,12
10021048:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1002104c:	e0bffe17 	ldw	r2,-8(fp)
10021050:	10800217 	ldw	r2,8(r2)
10021054:	10d00034 	orhi	r3,r2,16384
10021058:	e0bffe17 	ldw	r2,-8(fp)
1002105c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10021060:	e03ffd15 	stw	zero,-12(fp)
10021064:	00002306 	br	100210f4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10021068:	040400b4 	movhi	r16,4098
1002106c:	84109b04 	addi	r16,r16,17004
10021070:	e0bffd17 	ldw	r2,-12(fp)
10021074:	01400304 	movi	r5,12
10021078:	1009883a 	mov	r4,r2
1002107c:	0008ef00 	call	10008ef0 <__mulsi3>
10021080:	8085883a 	add	r2,r16,r2
10021084:	10c00017 	ldw	r3,0(r2)
10021088:	e0bffe17 	ldw	r2,-8(fp)
1002108c:	10800017 	ldw	r2,0(r2)
10021090:	1880151e 	bne	r3,r2,100210e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10021094:	040400b4 	movhi	r16,4098
10021098:	84109b04 	addi	r16,r16,17004
1002109c:	e0bffd17 	ldw	r2,-12(fp)
100210a0:	01400304 	movi	r5,12
100210a4:	1009883a 	mov	r4,r2
100210a8:	0008ef00 	call	10008ef0 <__mulsi3>
100210ac:	8085883a 	add	r2,r16,r2
100210b0:	10800204 	addi	r2,r2,8
100210b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100210b8:	10000b0e 	bge	r2,zero,100210e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100210bc:	01400304 	movi	r5,12
100210c0:	e13ffd17 	ldw	r4,-12(fp)
100210c4:	0008ef00 	call	10008ef0 <__mulsi3>
100210c8:	1007883a 	mov	r3,r2
100210cc:	008400b4 	movhi	r2,4098
100210d0:	10909b04 	addi	r2,r2,17004
100210d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100210d8:	e0bffe17 	ldw	r2,-8(fp)
100210dc:	18800226 	beq	r3,r2,100210e8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100210e0:	00bffcc4 	movi	r2,-13
100210e4:	00000806 	br	10021108 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100210e8:	e0bffd17 	ldw	r2,-12(fp)
100210ec:	10800044 	addi	r2,r2,1
100210f0:	e0bffd15 	stw	r2,-12(fp)
100210f4:	d0a00e17 	ldw	r2,-32712(gp)
100210f8:	1007883a 	mov	r3,r2
100210fc:	e0bffd17 	ldw	r2,-12(fp)
10021100:	18bfd92e 	bgeu	r3,r2,10021068 <__alt_data_end+0xf8021068>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10021104:	0005883a 	mov	r2,zero
}
10021108:	e6ffff04 	addi	sp,fp,-4
1002110c:	dfc00217 	ldw	ra,8(sp)
10021110:	df000117 	ldw	fp,4(sp)
10021114:	dc000017 	ldw	r16,0(sp)
10021118:	dec00304 	addi	sp,sp,12
1002111c:	f800283a 	ret

10021120 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10021120:	defff604 	addi	sp,sp,-40
10021124:	dfc00915 	stw	ra,36(sp)
10021128:	df000815 	stw	fp,32(sp)
1002112c:	df000804 	addi	fp,sp,32
10021130:	e13ffd15 	stw	r4,-12(fp)
10021134:	e17ffe15 	stw	r5,-8(fp)
10021138:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1002113c:	00bfffc4 	movi	r2,-1
10021140:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10021144:	00bffb44 	movi	r2,-19
10021148:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1002114c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10021150:	d1600c04 	addi	r5,gp,-32720
10021154:	e13ffd17 	ldw	r4,-12(fp)
10021158:	00214440 	call	10021444 <alt_find_dev>
1002115c:	e0bff815 	stw	r2,-32(fp)
10021160:	e0bff817 	ldw	r2,-32(fp)
10021164:	1000051e 	bne	r2,zero,1002117c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10021168:	e13ffd17 	ldw	r4,-12(fp)
1002116c:	00214d40 	call	100214d4 <alt_find_file>
10021170:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10021174:	00800044 	movi	r2,1
10021178:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1002117c:	e0bff817 	ldw	r2,-32(fp)
10021180:	10002b26 	beq	r2,zero,10021230 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10021184:	e13ff817 	ldw	r4,-32(fp)
10021188:	00215dc0 	call	100215dc <alt_get_fd>
1002118c:	e0bff915 	stw	r2,-28(fp)
10021190:	e0bff917 	ldw	r2,-28(fp)
10021194:	1000030e 	bge	r2,zero,100211a4 <open+0x84>
    {
      status = index;
10021198:	e0bff917 	ldw	r2,-28(fp)
1002119c:	e0bffa15 	stw	r2,-24(fp)
100211a0:	00002506 	br	10021238 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100211a4:	01400304 	movi	r5,12
100211a8:	e13ff917 	ldw	r4,-28(fp)
100211ac:	0008ef00 	call	10008ef0 <__mulsi3>
100211b0:	1007883a 	mov	r3,r2
100211b4:	008400b4 	movhi	r2,4098
100211b8:	10909b04 	addi	r2,r2,17004
100211bc:	1885883a 	add	r2,r3,r2
100211c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100211c4:	e0fffe17 	ldw	r3,-8(fp)
100211c8:	00900034 	movhi	r2,16384
100211cc:	10bfffc4 	addi	r2,r2,-1
100211d0:	1886703a 	and	r3,r3,r2
100211d4:	e0bffc17 	ldw	r2,-16(fp)
100211d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100211dc:	e0bffb17 	ldw	r2,-20(fp)
100211e0:	1000051e 	bne	r2,zero,100211f8 <open+0xd8>
100211e4:	e13ffc17 	ldw	r4,-16(fp)
100211e8:	00210340 	call	10021034 <alt_file_locked>
100211ec:	e0bffa15 	stw	r2,-24(fp)
100211f0:	e0bffa17 	ldw	r2,-24(fp)
100211f4:	10001016 	blt	r2,zero,10021238 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100211f8:	e0bff817 	ldw	r2,-32(fp)
100211fc:	10800317 	ldw	r2,12(r2)
10021200:	10000826 	beq	r2,zero,10021224 <open+0x104>
10021204:	e0bff817 	ldw	r2,-32(fp)
10021208:	10800317 	ldw	r2,12(r2)
1002120c:	e1ffff17 	ldw	r7,-4(fp)
10021210:	e1bffe17 	ldw	r6,-8(fp)
10021214:	e17ffd17 	ldw	r5,-12(fp)
10021218:	e13ffc17 	ldw	r4,-16(fp)
1002121c:	103ee83a 	callr	r2
10021220:	00000106 	br	10021228 <open+0x108>
10021224:	0005883a 	mov	r2,zero
10021228:	e0bffa15 	stw	r2,-24(fp)
1002122c:	00000206 	br	10021238 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10021230:	00bffb44 	movi	r2,-19
10021234:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10021238:	e0bffa17 	ldw	r2,-24(fp)
1002123c:	1000090e 	bge	r2,zero,10021264 <open+0x144>
  {
    alt_release_fd (index);  
10021240:	e13ff917 	ldw	r4,-28(fp)
10021244:	001f9200 	call	1001f920 <alt_release_fd>
    ALT_ERRNO = -status;
10021248:	0020ff80 	call	10020ff8 <alt_get_errno>
1002124c:	1007883a 	mov	r3,r2
10021250:	e0bffa17 	ldw	r2,-24(fp)
10021254:	0085c83a 	sub	r2,zero,r2
10021258:	18800015 	stw	r2,0(r3)
    return -1;
1002125c:	00bfffc4 	movi	r2,-1
10021260:	00000106 	br	10021268 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10021264:	e0bff917 	ldw	r2,-28(fp)
}
10021268:	e037883a 	mov	sp,fp
1002126c:	dfc00117 	ldw	ra,4(sp)
10021270:	df000017 	ldw	fp,0(sp)
10021274:	dec00204 	addi	sp,sp,8
10021278:	f800283a 	ret

1002127c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1002127c:	defffa04 	addi	sp,sp,-24
10021280:	df000515 	stw	fp,20(sp)
10021284:	df000504 	addi	fp,sp,20
10021288:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1002128c:	0005303a 	rdctl	r2,status
10021290:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021294:	e0fffc17 	ldw	r3,-16(fp)
10021298:	00bfff84 	movi	r2,-2
1002129c:	1884703a 	and	r2,r3,r2
100212a0:	1001703a 	wrctl	status,r2
  
  return context;
100212a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100212a8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100212ac:	e0bfff17 	ldw	r2,-4(fp)
100212b0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100212b4:	e0bffd17 	ldw	r2,-12(fp)
100212b8:	10800017 	ldw	r2,0(r2)
100212bc:	e0fffd17 	ldw	r3,-12(fp)
100212c0:	18c00117 	ldw	r3,4(r3)
100212c4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100212c8:	e0bffd17 	ldw	r2,-12(fp)
100212cc:	10800117 	ldw	r2,4(r2)
100212d0:	e0fffd17 	ldw	r3,-12(fp)
100212d4:	18c00017 	ldw	r3,0(r3)
100212d8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100212dc:	e0bffd17 	ldw	r2,-12(fp)
100212e0:	e0fffd17 	ldw	r3,-12(fp)
100212e4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100212e8:	e0bffd17 	ldw	r2,-12(fp)
100212ec:	e0fffd17 	ldw	r3,-12(fp)
100212f0:	10c00015 	stw	r3,0(r2)
100212f4:	e0bffb17 	ldw	r2,-20(fp)
100212f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100212fc:	e0bffe17 	ldw	r2,-8(fp)
10021300:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10021304:	0001883a 	nop
10021308:	e037883a 	mov	sp,fp
1002130c:	df000017 	ldw	fp,0(sp)
10021310:	dec00104 	addi	sp,sp,4
10021314:	f800283a 	ret

10021318 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10021318:	defffb04 	addi	sp,sp,-20
1002131c:	dfc00415 	stw	ra,16(sp)
10021320:	df000315 	stw	fp,12(sp)
10021324:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10021328:	d0a01217 	ldw	r2,-32696(gp)
1002132c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10021330:	d0a87317 	ldw	r2,-24116(gp)
10021334:	10800044 	addi	r2,r2,1
10021338:	d0a87315 	stw	r2,-24116(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1002133c:	00002e06 	br	100213f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10021340:	e0bffd17 	ldw	r2,-12(fp)
10021344:	10800017 	ldw	r2,0(r2)
10021348:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1002134c:	e0bffd17 	ldw	r2,-12(fp)
10021350:	10800403 	ldbu	r2,16(r2)
10021354:	10803fcc 	andi	r2,r2,255
10021358:	10000426 	beq	r2,zero,1002136c <alt_tick+0x54>
1002135c:	d0a87317 	ldw	r2,-24116(gp)
10021360:	1000021e 	bne	r2,zero,1002136c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10021364:	e0bffd17 	ldw	r2,-12(fp)
10021368:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1002136c:	e0bffd17 	ldw	r2,-12(fp)
10021370:	10800217 	ldw	r2,8(r2)
10021374:	d0e87317 	ldw	r3,-24116(gp)
10021378:	18801d36 	bltu	r3,r2,100213f0 <alt_tick+0xd8>
1002137c:	e0bffd17 	ldw	r2,-12(fp)
10021380:	10800403 	ldbu	r2,16(r2)
10021384:	10803fcc 	andi	r2,r2,255
10021388:	1000191e 	bne	r2,zero,100213f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1002138c:	e0bffd17 	ldw	r2,-12(fp)
10021390:	10800317 	ldw	r2,12(r2)
10021394:	e0fffd17 	ldw	r3,-12(fp)
10021398:	18c00517 	ldw	r3,20(r3)
1002139c:	1809883a 	mov	r4,r3
100213a0:	103ee83a 	callr	r2
100213a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100213a8:	e0bfff17 	ldw	r2,-4(fp)
100213ac:	1000031e 	bne	r2,zero,100213bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100213b0:	e13ffd17 	ldw	r4,-12(fp)
100213b4:	002127c0 	call	1002127c <alt_alarm_stop>
100213b8:	00000d06 	br	100213f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100213bc:	e0bffd17 	ldw	r2,-12(fp)
100213c0:	10c00217 	ldw	r3,8(r2)
100213c4:	e0bfff17 	ldw	r2,-4(fp)
100213c8:	1887883a 	add	r3,r3,r2
100213cc:	e0bffd17 	ldw	r2,-12(fp)
100213d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100213d4:	e0bffd17 	ldw	r2,-12(fp)
100213d8:	10c00217 	ldw	r3,8(r2)
100213dc:	d0a87317 	ldw	r2,-24116(gp)
100213e0:	1880032e 	bgeu	r3,r2,100213f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100213e4:	e0bffd17 	ldw	r2,-12(fp)
100213e8:	00c00044 	movi	r3,1
100213ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100213f0:	e0bffe17 	ldw	r2,-8(fp)
100213f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100213f8:	e0fffd17 	ldw	r3,-12(fp)
100213fc:	d0a01204 	addi	r2,gp,-32696
10021400:	18bfcf1e 	bne	r3,r2,10021340 <__alt_data_end+0xf8021340>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10021404:	0001883a 	nop
}
10021408:	0001883a 	nop
1002140c:	e037883a 	mov	sp,fp
10021410:	dfc00117 	ldw	ra,4(sp)
10021414:	df000017 	ldw	fp,0(sp)
10021418:	dec00204 	addi	sp,sp,8
1002141c:	f800283a 	ret

10021420 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10021420:	deffff04 	addi	sp,sp,-4
10021424:	df000015 	stw	fp,0(sp)
10021428:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1002142c:	000170fa 	wrctl	ienable,zero
}
10021430:	0001883a 	nop
10021434:	e037883a 	mov	sp,fp
10021438:	df000017 	ldw	fp,0(sp)
1002143c:	dec00104 	addi	sp,sp,4
10021440:	f800283a 	ret

10021444 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10021444:	defffa04 	addi	sp,sp,-24
10021448:	dfc00515 	stw	ra,20(sp)
1002144c:	df000415 	stw	fp,16(sp)
10021450:	df000404 	addi	fp,sp,16
10021454:	e13ffe15 	stw	r4,-8(fp)
10021458:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1002145c:	e0bfff17 	ldw	r2,-4(fp)
10021460:	10800017 	ldw	r2,0(r2)
10021464:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10021468:	e13ffe17 	ldw	r4,-8(fp)
1002146c:	0009fe40 	call	10009fe4 <strlen>
10021470:	10800044 	addi	r2,r2,1
10021474:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10021478:	00000d06 	br	100214b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1002147c:	e0bffc17 	ldw	r2,-16(fp)
10021480:	10800217 	ldw	r2,8(r2)
10021484:	e0fffd17 	ldw	r3,-12(fp)
10021488:	180d883a 	mov	r6,r3
1002148c:	e17ffe17 	ldw	r5,-8(fp)
10021490:	1009883a 	mov	r4,r2
10021494:	00217880 	call	10021788 <memcmp>
10021498:	1000021e 	bne	r2,zero,100214a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1002149c:	e0bffc17 	ldw	r2,-16(fp)
100214a0:	00000706 	br	100214c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100214a4:	e0bffc17 	ldw	r2,-16(fp)
100214a8:	10800017 	ldw	r2,0(r2)
100214ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100214b0:	e0fffc17 	ldw	r3,-16(fp)
100214b4:	e0bfff17 	ldw	r2,-4(fp)
100214b8:	18bff01e 	bne	r3,r2,1002147c <__alt_data_end+0xf802147c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100214bc:	0005883a 	mov	r2,zero
}
100214c0:	e037883a 	mov	sp,fp
100214c4:	dfc00117 	ldw	ra,4(sp)
100214c8:	df000017 	ldw	fp,0(sp)
100214cc:	dec00204 	addi	sp,sp,8
100214d0:	f800283a 	ret

100214d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100214d4:	defffb04 	addi	sp,sp,-20
100214d8:	dfc00415 	stw	ra,16(sp)
100214dc:	df000315 	stw	fp,12(sp)
100214e0:	df000304 	addi	fp,sp,12
100214e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100214e8:	d0a00a17 	ldw	r2,-32728(gp)
100214ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100214f0:	00003106 	br	100215b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100214f4:	e0bffd17 	ldw	r2,-12(fp)
100214f8:	10800217 	ldw	r2,8(r2)
100214fc:	1009883a 	mov	r4,r2
10021500:	0009fe40 	call	10009fe4 <strlen>
10021504:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10021508:	e0bffd17 	ldw	r2,-12(fp)
1002150c:	10c00217 	ldw	r3,8(r2)
10021510:	e0bffe17 	ldw	r2,-8(fp)
10021514:	10bfffc4 	addi	r2,r2,-1
10021518:	1885883a 	add	r2,r3,r2
1002151c:	10800003 	ldbu	r2,0(r2)
10021520:	10803fcc 	andi	r2,r2,255
10021524:	1080201c 	xori	r2,r2,128
10021528:	10bfe004 	addi	r2,r2,-128
1002152c:	10800bd8 	cmpnei	r2,r2,47
10021530:	1000031e 	bne	r2,zero,10021540 <alt_find_file+0x6c>
    {
      len -= 1;
10021534:	e0bffe17 	ldw	r2,-8(fp)
10021538:	10bfffc4 	addi	r2,r2,-1
1002153c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10021540:	e0bffe17 	ldw	r2,-8(fp)
10021544:	e0ffff17 	ldw	r3,-4(fp)
10021548:	1885883a 	add	r2,r3,r2
1002154c:	10800003 	ldbu	r2,0(r2)
10021550:	10803fcc 	andi	r2,r2,255
10021554:	1080201c 	xori	r2,r2,128
10021558:	10bfe004 	addi	r2,r2,-128
1002155c:	10800be0 	cmpeqi	r2,r2,47
10021560:	1000081e 	bne	r2,zero,10021584 <alt_find_file+0xb0>
10021564:	e0bffe17 	ldw	r2,-8(fp)
10021568:	e0ffff17 	ldw	r3,-4(fp)
1002156c:	1885883a 	add	r2,r3,r2
10021570:	10800003 	ldbu	r2,0(r2)
10021574:	10803fcc 	andi	r2,r2,255
10021578:	1080201c 	xori	r2,r2,128
1002157c:	10bfe004 	addi	r2,r2,-128
10021580:	10000a1e 	bne	r2,zero,100215ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10021584:	e0bffd17 	ldw	r2,-12(fp)
10021588:	10800217 	ldw	r2,8(r2)
1002158c:	e0fffe17 	ldw	r3,-8(fp)
10021590:	180d883a 	mov	r6,r3
10021594:	e17fff17 	ldw	r5,-4(fp)
10021598:	1009883a 	mov	r4,r2
1002159c:	00217880 	call	10021788 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100215a0:	1000021e 	bne	r2,zero,100215ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100215a4:	e0bffd17 	ldw	r2,-12(fp)
100215a8:	00000706 	br	100215c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100215ac:	e0bffd17 	ldw	r2,-12(fp)
100215b0:	10800017 	ldw	r2,0(r2)
100215b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100215b8:	e0fffd17 	ldw	r3,-12(fp)
100215bc:	d0a00a04 	addi	r2,gp,-32728
100215c0:	18bfcc1e 	bne	r3,r2,100214f4 <__alt_data_end+0xf80214f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100215c4:	0005883a 	mov	r2,zero
}
100215c8:	e037883a 	mov	sp,fp
100215cc:	dfc00117 	ldw	ra,4(sp)
100215d0:	df000017 	ldw	fp,0(sp)
100215d4:	dec00204 	addi	sp,sp,8
100215d8:	f800283a 	ret

100215dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100215dc:	defffa04 	addi	sp,sp,-24
100215e0:	dfc00515 	stw	ra,20(sp)
100215e4:	df000415 	stw	fp,16(sp)
100215e8:	dc000315 	stw	r16,12(sp)
100215ec:	df000404 	addi	fp,sp,16
100215f0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100215f4:	00bffa04 	movi	r2,-24
100215f8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100215fc:	e03ffc15 	stw	zero,-16(fp)
10021600:	00001d06 	br	10021678 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10021604:	040400b4 	movhi	r16,4098
10021608:	84109b04 	addi	r16,r16,17004
1002160c:	e0bffc17 	ldw	r2,-16(fp)
10021610:	01400304 	movi	r5,12
10021614:	1009883a 	mov	r4,r2
10021618:	0008ef00 	call	10008ef0 <__mulsi3>
1002161c:	8085883a 	add	r2,r16,r2
10021620:	10800017 	ldw	r2,0(r2)
10021624:	1000111e 	bne	r2,zero,1002166c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10021628:	040400b4 	movhi	r16,4098
1002162c:	84109b04 	addi	r16,r16,17004
10021630:	e0bffc17 	ldw	r2,-16(fp)
10021634:	01400304 	movi	r5,12
10021638:	1009883a 	mov	r4,r2
1002163c:	0008ef00 	call	10008ef0 <__mulsi3>
10021640:	8085883a 	add	r2,r16,r2
10021644:	e0fffe17 	ldw	r3,-8(fp)
10021648:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1002164c:	d0e00e17 	ldw	r3,-32712(gp)
10021650:	e0bffc17 	ldw	r2,-16(fp)
10021654:	1880020e 	bge	r3,r2,10021660 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10021658:	e0bffc17 	ldw	r2,-16(fp)
1002165c:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
10021660:	e0bffc17 	ldw	r2,-16(fp)
10021664:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10021668:	00000606 	br	10021684 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1002166c:	e0bffc17 	ldw	r2,-16(fp)
10021670:	10800044 	addi	r2,r2,1
10021674:	e0bffc15 	stw	r2,-16(fp)
10021678:	e0bffc17 	ldw	r2,-16(fp)
1002167c:	10800810 	cmplti	r2,r2,32
10021680:	103fe01e 	bne	r2,zero,10021604 <__alt_data_end+0xf8021604>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10021684:	e0bffd17 	ldw	r2,-12(fp)
}
10021688:	e6ffff04 	addi	sp,fp,-4
1002168c:	dfc00217 	ldw	ra,8(sp)
10021690:	df000117 	ldw	fp,4(sp)
10021694:	dc000017 	ldw	r16,0(sp)
10021698:	dec00304 	addi	sp,sp,12
1002169c:	f800283a 	ret

100216a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100216a0:	defffe04 	addi	sp,sp,-8
100216a4:	df000115 	stw	fp,4(sp)
100216a8:	df000104 	addi	fp,sp,4
100216ac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100216b0:	e0bfff17 	ldw	r2,-4(fp)
100216b4:	10bffe84 	addi	r2,r2,-6
100216b8:	10c00428 	cmpgeui	r3,r2,16
100216bc:	18001a1e 	bne	r3,zero,10021728 <alt_exception_cause_generated_bad_addr+0x88>
100216c0:	100690ba 	slli	r3,r2,2
100216c4:	008400b4 	movhi	r2,4098
100216c8:	1085b604 	addi	r2,r2,5848
100216cc:	1885883a 	add	r2,r3,r2
100216d0:	10800017 	ldw	r2,0(r2)
100216d4:	1000683a 	jmp	r2
100216d8:	10021718 	cmpnei	zero,r2,2140
100216dc:	10021718 	cmpnei	zero,r2,2140
100216e0:	10021728 	cmpgeui	zero,r2,2140
100216e4:	10021728 	cmpgeui	zero,r2,2140
100216e8:	10021728 	cmpgeui	zero,r2,2140
100216ec:	10021718 	cmpnei	zero,r2,2140
100216f0:	10021720 	cmpeqi	zero,r2,2140
100216f4:	10021728 	cmpgeui	zero,r2,2140
100216f8:	10021718 	cmpnei	zero,r2,2140
100216fc:	10021718 	cmpnei	zero,r2,2140
10021700:	10021728 	cmpgeui	zero,r2,2140
10021704:	10021718 	cmpnei	zero,r2,2140
10021708:	10021720 	cmpeqi	zero,r2,2140
1002170c:	10021728 	cmpgeui	zero,r2,2140
10021710:	10021728 	cmpgeui	zero,r2,2140
10021714:	10021718 	cmpnei	zero,r2,2140
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10021718:	00800044 	movi	r2,1
1002171c:	00000306 	br	1002172c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10021720:	0005883a 	mov	r2,zero
10021724:	00000106 	br	1002172c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10021728:	0005883a 	mov	r2,zero
  }
}
1002172c:	e037883a 	mov	sp,fp
10021730:	df000017 	ldw	fp,0(sp)
10021734:	dec00104 	addi	sp,sp,4
10021738:	f800283a 	ret

1002173c <atexit>:
1002173c:	200b883a 	mov	r5,r4
10021740:	000f883a 	mov	r7,zero
10021744:	000d883a 	mov	r6,zero
10021748:	0009883a 	mov	r4,zero
1002174c:	00218041 	jmpi	10021804 <__register_exitproc>

10021750 <exit>:
10021750:	defffe04 	addi	sp,sp,-8
10021754:	000b883a 	mov	r5,zero
10021758:	dc000015 	stw	r16,0(sp)
1002175c:	dfc00115 	stw	ra,4(sp)
10021760:	2021883a 	mov	r16,r4
10021764:	002191c0 	call	1002191c <__call_exitprocs>
10021768:	008400b4 	movhi	r2,4098
1002176c:	10951504 	addi	r2,r2,21588
10021770:	11000017 	ldw	r4,0(r2)
10021774:	20800f17 	ldw	r2,60(r4)
10021778:	10000126 	beq	r2,zero,10021780 <exit+0x30>
1002177c:	103ee83a 	callr	r2
10021780:	8009883a 	mov	r4,r16
10021784:	0021a9c0 	call	10021a9c <_exit>

10021788 <memcmp>:
10021788:	01c000c4 	movi	r7,3
1002178c:	3980192e 	bgeu	r7,r6,100217f4 <memcmp+0x6c>
10021790:	2144b03a 	or	r2,r4,r5
10021794:	11c4703a 	and	r2,r2,r7
10021798:	10000f26 	beq	r2,zero,100217d8 <memcmp+0x50>
1002179c:	20800003 	ldbu	r2,0(r4)
100217a0:	28c00003 	ldbu	r3,0(r5)
100217a4:	10c0151e 	bne	r2,r3,100217fc <memcmp+0x74>
100217a8:	31bfff84 	addi	r6,r6,-2
100217ac:	01ffffc4 	movi	r7,-1
100217b0:	00000406 	br	100217c4 <memcmp+0x3c>
100217b4:	20800003 	ldbu	r2,0(r4)
100217b8:	28c00003 	ldbu	r3,0(r5)
100217bc:	31bfffc4 	addi	r6,r6,-1
100217c0:	10c00e1e 	bne	r2,r3,100217fc <memcmp+0x74>
100217c4:	21000044 	addi	r4,r4,1
100217c8:	29400044 	addi	r5,r5,1
100217cc:	31fff91e 	bne	r6,r7,100217b4 <__alt_data_end+0xf80217b4>
100217d0:	0005883a 	mov	r2,zero
100217d4:	f800283a 	ret
100217d8:	20c00017 	ldw	r3,0(r4)
100217dc:	28800017 	ldw	r2,0(r5)
100217e0:	18bfee1e 	bne	r3,r2,1002179c <__alt_data_end+0xf802179c>
100217e4:	31bfff04 	addi	r6,r6,-4
100217e8:	21000104 	addi	r4,r4,4
100217ec:	29400104 	addi	r5,r5,4
100217f0:	39bff936 	bltu	r7,r6,100217d8 <__alt_data_end+0xf80217d8>
100217f4:	303fe91e 	bne	r6,zero,1002179c <__alt_data_end+0xf802179c>
100217f8:	003ff506 	br	100217d0 <__alt_data_end+0xf80217d0>
100217fc:	10c5c83a 	sub	r2,r2,r3
10021800:	f800283a 	ret

10021804 <__register_exitproc>:
10021804:	defffa04 	addi	sp,sp,-24
10021808:	dc000315 	stw	r16,12(sp)
1002180c:	040400b4 	movhi	r16,4098
10021810:	84151504 	addi	r16,r16,21588
10021814:	80c00017 	ldw	r3,0(r16)
10021818:	dc400415 	stw	r17,16(sp)
1002181c:	dfc00515 	stw	ra,20(sp)
10021820:	18805217 	ldw	r2,328(r3)
10021824:	2023883a 	mov	r17,r4
10021828:	10003726 	beq	r2,zero,10021908 <__register_exitproc+0x104>
1002182c:	10c00117 	ldw	r3,4(r2)
10021830:	010007c4 	movi	r4,31
10021834:	20c00e16 	blt	r4,r3,10021870 <__register_exitproc+0x6c>
10021838:	1a000044 	addi	r8,r3,1
1002183c:	8800221e 	bne	r17,zero,100218c8 <__register_exitproc+0xc4>
10021840:	18c00084 	addi	r3,r3,2
10021844:	18c7883a 	add	r3,r3,r3
10021848:	18c7883a 	add	r3,r3,r3
1002184c:	12000115 	stw	r8,4(r2)
10021850:	10c7883a 	add	r3,r2,r3
10021854:	19400015 	stw	r5,0(r3)
10021858:	0005883a 	mov	r2,zero
1002185c:	dfc00517 	ldw	ra,20(sp)
10021860:	dc400417 	ldw	r17,16(sp)
10021864:	dc000317 	ldw	r16,12(sp)
10021868:	dec00604 	addi	sp,sp,24
1002186c:	f800283a 	ret
10021870:	00800034 	movhi	r2,0
10021874:	10800004 	addi	r2,r2,0
10021878:	10002626 	beq	r2,zero,10021914 <__register_exitproc+0x110>
1002187c:	01006404 	movi	r4,400
10021880:	d9400015 	stw	r5,0(sp)
10021884:	d9800115 	stw	r6,4(sp)
10021888:	d9c00215 	stw	r7,8(sp)
1002188c:	00000000 	call	10000000 <__reset>
10021890:	d9400017 	ldw	r5,0(sp)
10021894:	d9800117 	ldw	r6,4(sp)
10021898:	d9c00217 	ldw	r7,8(sp)
1002189c:	10001d26 	beq	r2,zero,10021914 <__register_exitproc+0x110>
100218a0:	81000017 	ldw	r4,0(r16)
100218a4:	10000115 	stw	zero,4(r2)
100218a8:	02000044 	movi	r8,1
100218ac:	22405217 	ldw	r9,328(r4)
100218b0:	0007883a 	mov	r3,zero
100218b4:	12400015 	stw	r9,0(r2)
100218b8:	20805215 	stw	r2,328(r4)
100218bc:	10006215 	stw	zero,392(r2)
100218c0:	10006315 	stw	zero,396(r2)
100218c4:	883fde26 	beq	r17,zero,10021840 <__alt_data_end+0xf8021840>
100218c8:	18c9883a 	add	r4,r3,r3
100218cc:	2109883a 	add	r4,r4,r4
100218d0:	1109883a 	add	r4,r2,r4
100218d4:	21802215 	stw	r6,136(r4)
100218d8:	01800044 	movi	r6,1
100218dc:	12406217 	ldw	r9,392(r2)
100218e0:	30cc983a 	sll	r6,r6,r3
100218e4:	4992b03a 	or	r9,r9,r6
100218e8:	12406215 	stw	r9,392(r2)
100218ec:	21c04215 	stw	r7,264(r4)
100218f0:	01000084 	movi	r4,2
100218f4:	893fd21e 	bne	r17,r4,10021840 <__alt_data_end+0xf8021840>
100218f8:	11006317 	ldw	r4,396(r2)
100218fc:	218cb03a 	or	r6,r4,r6
10021900:	11806315 	stw	r6,396(r2)
10021904:	003fce06 	br	10021840 <__alt_data_end+0xf8021840>
10021908:	18805304 	addi	r2,r3,332
1002190c:	18805215 	stw	r2,328(r3)
10021910:	003fc606 	br	1002182c <__alt_data_end+0xf802182c>
10021914:	00bfffc4 	movi	r2,-1
10021918:	003fd006 	br	1002185c <__alt_data_end+0xf802185c>

1002191c <__call_exitprocs>:
1002191c:	defff504 	addi	sp,sp,-44
10021920:	df000915 	stw	fp,36(sp)
10021924:	dd400615 	stw	r21,24(sp)
10021928:	dc800315 	stw	r18,12(sp)
1002192c:	dfc00a15 	stw	ra,40(sp)
10021930:	ddc00815 	stw	r23,32(sp)
10021934:	dd800715 	stw	r22,28(sp)
10021938:	dd000515 	stw	r20,20(sp)
1002193c:	dcc00415 	stw	r19,16(sp)
10021940:	dc400215 	stw	r17,8(sp)
10021944:	dc000115 	stw	r16,4(sp)
10021948:	d9000015 	stw	r4,0(sp)
1002194c:	2839883a 	mov	fp,r5
10021950:	04800044 	movi	r18,1
10021954:	057fffc4 	movi	r21,-1
10021958:	008400b4 	movhi	r2,4098
1002195c:	10951504 	addi	r2,r2,21588
10021960:	12000017 	ldw	r8,0(r2)
10021964:	45005217 	ldw	r20,328(r8)
10021968:	44c05204 	addi	r19,r8,328
1002196c:	a0001c26 	beq	r20,zero,100219e0 <__call_exitprocs+0xc4>
10021970:	a0800117 	ldw	r2,4(r20)
10021974:	15ffffc4 	addi	r23,r2,-1
10021978:	b8000d16 	blt	r23,zero,100219b0 <__call_exitprocs+0x94>
1002197c:	14000044 	addi	r16,r2,1
10021980:	8421883a 	add	r16,r16,r16
10021984:	8421883a 	add	r16,r16,r16
10021988:	84402004 	addi	r17,r16,128
1002198c:	a463883a 	add	r17,r20,r17
10021990:	a421883a 	add	r16,r20,r16
10021994:	e0001e26 	beq	fp,zero,10021a10 <__call_exitprocs+0xf4>
10021998:	80804017 	ldw	r2,256(r16)
1002199c:	e0801c26 	beq	fp,r2,10021a10 <__call_exitprocs+0xf4>
100219a0:	bdffffc4 	addi	r23,r23,-1
100219a4:	843fff04 	addi	r16,r16,-4
100219a8:	8c7fff04 	addi	r17,r17,-4
100219ac:	bd7ff91e 	bne	r23,r21,10021994 <__alt_data_end+0xf8021994>
100219b0:	00800034 	movhi	r2,0
100219b4:	10800004 	addi	r2,r2,0
100219b8:	10000926 	beq	r2,zero,100219e0 <__call_exitprocs+0xc4>
100219bc:	a0800117 	ldw	r2,4(r20)
100219c0:	1000301e 	bne	r2,zero,10021a84 <__call_exitprocs+0x168>
100219c4:	a0800017 	ldw	r2,0(r20)
100219c8:	10003226 	beq	r2,zero,10021a94 <__call_exitprocs+0x178>
100219cc:	a009883a 	mov	r4,r20
100219d0:	98800015 	stw	r2,0(r19)
100219d4:	00000000 	call	10000000 <__reset>
100219d8:	9d000017 	ldw	r20,0(r19)
100219dc:	a03fe41e 	bne	r20,zero,10021970 <__alt_data_end+0xf8021970>
100219e0:	dfc00a17 	ldw	ra,40(sp)
100219e4:	df000917 	ldw	fp,36(sp)
100219e8:	ddc00817 	ldw	r23,32(sp)
100219ec:	dd800717 	ldw	r22,28(sp)
100219f0:	dd400617 	ldw	r21,24(sp)
100219f4:	dd000517 	ldw	r20,20(sp)
100219f8:	dcc00417 	ldw	r19,16(sp)
100219fc:	dc800317 	ldw	r18,12(sp)
10021a00:	dc400217 	ldw	r17,8(sp)
10021a04:	dc000117 	ldw	r16,4(sp)
10021a08:	dec00b04 	addi	sp,sp,44
10021a0c:	f800283a 	ret
10021a10:	a0800117 	ldw	r2,4(r20)
10021a14:	80c00017 	ldw	r3,0(r16)
10021a18:	10bfffc4 	addi	r2,r2,-1
10021a1c:	15c01426 	beq	r2,r23,10021a70 <__call_exitprocs+0x154>
10021a20:	80000015 	stw	zero,0(r16)
10021a24:	183fde26 	beq	r3,zero,100219a0 <__alt_data_end+0xf80219a0>
10021a28:	95c8983a 	sll	r4,r18,r23
10021a2c:	a0806217 	ldw	r2,392(r20)
10021a30:	a5800117 	ldw	r22,4(r20)
10021a34:	2084703a 	and	r2,r4,r2
10021a38:	10000b26 	beq	r2,zero,10021a68 <__call_exitprocs+0x14c>
10021a3c:	a0806317 	ldw	r2,396(r20)
10021a40:	2088703a 	and	r4,r4,r2
10021a44:	20000c1e 	bne	r4,zero,10021a78 <__call_exitprocs+0x15c>
10021a48:	89400017 	ldw	r5,0(r17)
10021a4c:	d9000017 	ldw	r4,0(sp)
10021a50:	183ee83a 	callr	r3
10021a54:	a0800117 	ldw	r2,4(r20)
10021a58:	15bfbf1e 	bne	r2,r22,10021958 <__alt_data_end+0xf8021958>
10021a5c:	98800017 	ldw	r2,0(r19)
10021a60:	153fcf26 	beq	r2,r20,100219a0 <__alt_data_end+0xf80219a0>
10021a64:	003fbc06 	br	10021958 <__alt_data_end+0xf8021958>
10021a68:	183ee83a 	callr	r3
10021a6c:	003ff906 	br	10021a54 <__alt_data_end+0xf8021a54>
10021a70:	a5c00115 	stw	r23,4(r20)
10021a74:	003feb06 	br	10021a24 <__alt_data_end+0xf8021a24>
10021a78:	89000017 	ldw	r4,0(r17)
10021a7c:	183ee83a 	callr	r3
10021a80:	003ff406 	br	10021a54 <__alt_data_end+0xf8021a54>
10021a84:	a0800017 	ldw	r2,0(r20)
10021a88:	a027883a 	mov	r19,r20
10021a8c:	1029883a 	mov	r20,r2
10021a90:	003fb606 	br	1002196c <__alt_data_end+0xf802196c>
10021a94:	0005883a 	mov	r2,zero
10021a98:	003ffb06 	br	10021a88 <__alt_data_end+0xf8021a88>

10021a9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10021a9c:	defffd04 	addi	sp,sp,-12
10021aa0:	df000215 	stw	fp,8(sp)
10021aa4:	df000204 	addi	fp,sp,8
10021aa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10021aac:	0001883a 	nop
10021ab0:	e0bfff17 	ldw	r2,-4(fp)
10021ab4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10021ab8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10021abc:	10000226 	beq	r2,zero,10021ac8 <_exit+0x2c>
    ALT_SIM_FAIL();
10021ac0:	002af070 	cmpltui	zero,zero,43969
10021ac4:	00000106 	br	10021acc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10021ac8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10021acc:	003fff06 	br	10021acc <__alt_data_end+0xf8021acc>
