/*
 * main.c
 *
 *  Created on: 2020Äê12ÔÂ8ÈÕ
 *      Author: 45242
 */


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <io.h>
#include <fcntl.h>

#include "system.h"
#include "alt_types.h"
#include <unistd.h>  // usleep
#include "sys/alt_irq.h"
#include "io_handler.h"

#include "cy7c67200.h"
#include "usb.h"
#include "lcp_cmd.h"
#include "lcp_data.h"

#include "keycall.h"

volatile unsigned int * reg_ptr = (unsigned int *) 0x00000100;
//----------------------------------------------------------------------------------------//
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
	unsigned int clock;
	short int keycodes[3];
	int x, y;
	int v_x, v_y;
	unsigned int vel_x = 15;
	unsigned int vel_x2 = 25;
	unsigned int vel_y = 2;
	unsigned int v_jump1 = 45;
	unsigned int v_jump2 = 60;
	unsigned int v_jump3 = 20;
	unsigned int status_ninja;
	short int spin, spin_cd;
	int hurt_counter;
	int air_counter;

	int life, energy;
	unsigned int life_energy_status;

	int x_dart[4], y_dart[4];
	int v_x_dart[4];
	char cnt_dart[4], cd_dart;
	unsigned int status_dart[4];
	unsigned int vel_dart = 40;
	short int idx_dart, i_dart;

	int x_lady[4];
	//y_lady[4];
	int v_x_lady[4];
	short int live_lady[4];
	unsigned int status_lady[4];
	short int idx_lady;

	int x_zombie[4];
	//y_zombie[4];
	int v_x_zombie[4];
	short int live_zombie[4];
	unsigned int status_zombie[4];
	short int idx_zombie;

	int x_swampt[4];
	//y_swampt[4];
	int v_x_swampt[4];
	short int live_swampt[4];
	unsigned int status_swampt[4];
	short int idx_swampt;

	int x_skull[2];
	int y_skull[2];
	int v_x_skull[2];
	int v_y_skull[2];
	short int cnt_skull[2];
	short int live_skull[2];
	unsigned int status_skull[2];
	short int idx_skull;





	unsigned int ground = 1440;
	unsigned int v_enemy1 = 3;
	unsigned int v_enemy2 = 5;
	unsigned int v_enemy3 = 7;
	unsigned int v_enemy4 = 25;
	int mapX;
	unsigned int map_bound = 20480;
	unsigned int left_bound = 640;
	unsigned int right_bound = 1920;

	char on_gnd;
	keycall_init();
	printf("\nKeycall end.\n");

	int i;
	for(i = 0; i < 3; i++){
		keycodes[i] = 0;
	}

	char key_char;

	Start_label:
	while (1){
		key_char = getkeys(keycodes);
		//printf("key_char;%x\n", key_char);
		if(key_char & 0x40) break;
	}
	clock = 0;
	x = 480;
	y = ground;
	v_x = 0;
	v_y = 0;
	on_gnd = 1;
	hurt_counter = 0;
	air_counter = 0;
	status_ninja = 0xc0000000;
	life_energy_status = 0;
	mapX = 0;
	cd_dart = 0;

	idx_dart = 0;
	idx_lady = 0;
	idx_zombie = 0;
	idx_skull = 0;

	spin = 0;
	spin_cd = 0;
	life = 100;
	energy = 1;
	for (i_dart = 0; i_dart < 4; i_dart++){
		status_dart[i_dart] = 0;
		x_dart[i_dart] = 0;
		y_dart[i_dart] = 0;
		v_x_dart[i_dart] = 0;
		cnt_dart[i_dart] = 0;

		status_lady[i_dart] = 0;
		x_lady[i_dart] = 0;
		//y_lady[i_dart] = 0;
		v_x_lady[i_dart] = 0;
		live_lady[i_dart] = 0;

		status_zombie[i_dart] = 0;
		x_zombie[i_dart] = 0;
		//y_zombie[i_dart] = 0;
		v_x_zombie[i_dart] = 0;
		live_zombie[i_dart] = 0;

		status_swampt[i_dart] = 0;
		x_swampt[i_dart] = 0;
		//y_swampt[i_dart] = 0;
		v_x_swampt[i_dart] = 0;
		live_swampt[i_dart] = 0;

	}
	for (i_dart = 0; i_dart < 2; i_dart++){
		status_skull[i_dart] = 0;
		x_skull[i_dart] = 0;
		y_skull[i_dart] = 0;
		v_x_skull[i_dart] = 0;
		v_y_skull[i_dart] = 0;
		live_skull[i_dart] = 0;
		cnt_skull[i_dart] = 0;
	}

	printf("Start!\n");
	while(1){
		//goto Boss_label_pre;
		clock += 1;
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = mapX >> 3;
		reg_ptr[1] = (life ^ (energy << 8)) | life_energy_status;
		reg_ptr[2] = (((y_dart[0]>>3) << 16) ^ (x_dart[0]>>3)) | status_dart[0];
		reg_ptr[3] = (((y_dart[1]>>3) << 16) ^ (x_dart[1]>>3)) | status_dart[1];
		reg_ptr[4] = (((y_dart[2]>>3) << 16) ^ (x_dart[2]>>3)) | status_dart[2];
		reg_ptr[5] = (((y_dart[3]>>3) << 16) ^ (x_dart[3]>>3)) | status_dart[3];
		reg_ptr[18] = ((((y_skull[0]>>3) << 16) ^ (x_skull[0]>>3)) & 0x01ffffff) | status_skull[0];
		reg_ptr[19] = ((((y_skull[1]>>3) << 16) ^ (x_skull[1]>>3)) & 0x01ffffff) | status_skull[1];
		reg_ptr[20] = ((0x00b40000 ^ (x_lady[0]>>3)) & 0x01ffffff) | status_lady[0];
		reg_ptr[21] = ((0x00b40000 ^ (x_lady[1]>>3)) & 0x01ffffff) | status_lady[1];
		reg_ptr[22] = ((0x00b40000 ^ (x_lady[2]>>3)) & 0x01ffffff) | status_lady[2];
		reg_ptr[23] = ((0x00b40000 ^ (x_lady[3]>>3)) & 0x01ffffff) | status_lady[3];
		reg_ptr[37] = (0x00b40000 ^ (x_zombie[0]>>3)) | status_zombie[0];
		reg_ptr[38] = (0x00b40000 ^ (x_zombie[1]>>3)) | status_zombie[1];
		reg_ptr[39] = (0x00b40000 ^ (x_zombie[2]>>3)) | status_zombie[2];
		reg_ptr[40] = (0x00b40000 ^ (x_zombie[3]>>3)) | status_zombie[3];
		reg_ptr[33] = (0x00b40000 ^ (x_swampt[0]>>3)) | status_swampt[0];
		reg_ptr[34] = (0x00b40000 ^ (x_swampt[1]>>3)) | status_swampt[1];
		reg_ptr[35] = (0x00b40000 ^ (x_swampt[2]>>3)) | status_swampt[2];
		reg_ptr[36] = (0x00b40000 ^ (x_swampt[3]>>3)) | status_swampt[3];
		reg_ptr[32] = (((y>>3) << 16) ^ (x >> 3)) | status_ninja;
		reg_ptr[41] = (0x00b00000 ^ 100) | 0x80000000;
		reg_ptr[42] = (0x00c40000 ^ 90) | 0x80000000;
		reg_ptr[62] = 1;
		if(! spin){
			v_x = 0;
		}

		key_char = air_counter ? 0 : getkeys(keycodes);
		reg_ptr[62] = 0;
		// W 01
		if ((key_char & 0x01) && energy == 80){
			status_ninja |= 0x02000000;
		}
		// D 08
		if(!spin){
			if (key_char & 0x08){
				v_x += vel_x;
				status_ninja |= 0x40000000;
			}
			// A 02
			if (key_char & 0x02){
				v_x -= vel_x;
				status_ninja &= 0xbfffffff;
			}
		}
		// K
		if ((key_char & 0x20) && on_gnd){
			v_y = (status_ninja & 0x02000000) ? -v_jump2 : -v_jump1;
			on_gnd = 0;
		}

		//J
		if ((key_char & 0x10) && !cd_dart){
			if(status_ninja & 0x02000000){
				if(!spin_cd){
					spin = 30;
					spin_cd = 60;
					v_x = (status_ninja & 0x40000000) ? vel_x2 : -vel_x2;
				}
			} else {
				cnt_dart[idx_dart] = 60;
				cd_dart = 20;
				x_dart[idx_dart] = x;
				y_dart[idx_dart] = y;
				status_dart[idx_dart] |= 0x80000000;
				if (status_ninja & 0x40000000){
					v_x_dart[idx_dart] = vel_dart;
					status_dart[idx_dart] |= 0x40000000;
				} else{
					v_x_dart[idx_dart] = -vel_dart;
					status_dart[idx_dart] &= 0xbfffffff;
				}
				if(idx_dart++ == 3){
					idx_dart = 0;
				}
			}
		}

		if ((clock & 0x000000ff) == 0){
			live_lady[idx_lady] = 2;
			x_lady[idx_lady] = mapX + 2500;
			//y_lady[idx_lady] = ground;
			status_lady[idx_lady] |= 0x90000000;
			v_x_lady[idx_lady] = -v_enemy1;
			if(idx_lady++ >= 3){
				idx_lady = 0;
			}
		}

		if ((clock & 0x000000ff) == 0x00000080){
			live_zombie[idx_zombie] = 3;
			x_zombie[idx_zombie] = mapX + 2500;
			//y_zombie[idx_zombie] = ground;
			status_zombie[idx_zombie] = 0x80000000;
			v_x_zombie[idx_zombie] = -v_enemy2;
			if(idx_zombie++ >= 3){
				idx_zombie = 0;
			}
		}
		if ((clock & 0x000001ff) == 0x00000100){
			live_swampt[idx_swampt] = 3;
			x_swampt[idx_swampt] = mapX + 2500;
			//y_swampt[idx_swampt] = ground;
			status_swampt[idx_swampt] = 0x80000000;
			v_x_swampt[idx_swampt] = -v_enemy2;
			if(idx_swampt++ >= 3){
				idx_swampt = 0;
			}
		}





		/////////////////dart/////////////////
		for(i_dart = 0; i_dart < 4; i_dart++){
			if(cnt_dart[i_dart] > 0){
				cnt_dart[i_dart]--;
				x_dart[i_dart] += v_x_dart[i_dart];
			}
			else{
				status_dart[i_dart] = 0;
			}

			if(live_lady[i_dart]){
				if (x_lady[i_dart] <= 0){
					status_lady[i_dart] = 0;
					live_lady[i_dart] = 0;
					goto Zombie_label;
				}
				if (x_lady[i_dart] > mapX + 2560|| (x_lady[i_dart] + 200) < mapX){
					status_lady[i_dart] &= 0x7fffffff;
				} else {
					status_lady[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
					if(status_dart[j_dart]){
						if ((x_lady[i_dart] + 200 > x_dart[j_dart]) && (x_lady[i_dart] < x_dart[j_dart] + 48) && (1440 < y_dart[j_dart] + 48)){
							live_lady[i_dart] -= 1;
							status_dart[j_dart] = 0;
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
					if ((x_lady[i_dart] + 100 > x) && (x_lady[i_dart] < x + 160) && (1440 < y + 240)){
						if (status_ninja & 0x02000000){
							if(spin){
								live_lady[i_dart] -= 3;
								life += 5;
							}
						} else {
							hurt_counter = 60;
							air_counter = 30;
							v_y = -v_jump3;
							on_gnd = 0;
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
							life_energy_status |= 0x00000080;
							life -= 10;
							energy += 5;
						}
					}
				}

				if ((v_x_lady[i_dart] < 0 && x_lady[i_dart] < x - 800) || (v_x_lady[i_dart] > 0 && x_lady[i_dart] > x + 800)){
					v_x_lady[i_dart] = -v_x_lady[i_dart];
					status_lady[i_dart] = (status_lady[i_dart] ^ 0x40000000) &  0xefffffff;
				}
				x_lady[i_dart] += v_x_lady[i_dart];
				if(live_lady[i_dart] <= 0){
					live_lady[i_dart] = 0;
					status_lady[i_dart] = 0;

					live_skull[idx_skull] = 1;
					x_skull[idx_skull] = x_lady[i_dart];
					y_skull[idx_skull] = ground;
					status_skull[idx_skull] = 0x80000000;
					if(idx_skull++ >= 2){
						idx_skull = 0;
					}
				}
			}
			Zombie_label: ;
			if(live_zombie[i_dart]){
				if (x_zombie[i_dart] <= 0){
					status_zombie[i_dart] = 0;
					live_zombie[i_dart] = 0;
					goto x1;
				}
				if (x_zombie[i_dart] > mapX + 2560|| (x_zombie[i_dart] + 200) < mapX){
					status_zombie[i_dart] &= 0x7fffffff;
				} else {
					status_zombie[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
					if(status_dart[j_dart]){
						if ((x_zombie[i_dart] + 100 > x_dart[j_dart]) && (x_zombie[i_dart] < x_dart[j_dart] + 48) && (1440 < y_dart[j_dart] + 48)){
							live_zombie[i_dart] -= 1;
							status_dart[j_dart] = 0;
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
					if ((x_zombie[i_dart] + 100 > x) && (x_zombie[i_dart] < x + 160) && (1440 < y + 240)){
						if (status_ninja & 0x02000000){
							if(spin){
								live_zombie[i_dart] -= 3;
								life += 5;
							}
						} else {
							hurt_counter = 60;
							air_counter = 30;
							v_y = -v_jump3;
							on_gnd = 0;
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
							life_energy_status |= 0x00000080;
							life -= 10;
							energy += 5;
						}
					}
				}

				if ((v_x_zombie[i_dart] < 0 && x_zombie[i_dart] < x - 400) || (v_x_zombie[i_dart] > 0 && x_zombie[i_dart] > x + 800)){
					v_x_zombie[i_dart] = -v_x_zombie[i_dart];
					status_zombie[i_dart] = status_zombie[i_dart] ^ 0x40000000;
				}
				x_zombie[i_dart] += v_x_zombie[i_dart];
				if(live_zombie[i_dart] <= 0){
					live_zombie[i_dart] = 0;
					status_zombie[i_dart] = 0;
				}
			}
			x1:
			if(live_swampt[i_dart]){
				if (x_swampt[i_dart] <= 0){
					status_swampt[i_dart] = 0;
					live_swampt[i_dart] = 0;
					goto x_label;
				}
				if (x_swampt[i_dart] > mapX + 2560|| (x_swampt[i_dart] + 200) < mapX){
					status_swampt[i_dart] &= 0x7fffffff;
				} else {
					status_swampt[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
					if(status_dart[j_dart]){
						if ((x_swampt[i_dart] + 100 > x_dart[j_dart]) && (x_swampt[i_dart] < x_dart[j_dart] + 48) && (1440 < y_dart[j_dart] + 48)){
							live_swampt[i_dart] -= 1;
							status_swampt[i_dart] ^= 0x10000000;
							status_dart[j_dart] = 0;
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
					if ((x_swampt[i_dart] + 100 > x) && (x_swampt[i_dart] < x + 160) && (1440 < y + 240)){
						if (status_ninja & 0x02000000){
							if(spin){
								live_swampt[i_dart] -= 3;
								life += 5;
							}
						} else {
							hurt_counter = 60;
							air_counter = 30;
							v_y = -v_jump3;
							on_gnd = 0;
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
							life_energy_status |= 0x00000080;
							life -= 10;
							energy += 5;
						}
					}
				}

				if ((v_x_swampt[i_dart] < 0 && x_swampt[i_dart] < x - 400) || (v_x_swampt[i_dart] > 0 && x_swampt[i_dart] > x + 800)){
					v_x_swampt[i_dart] = -v_x_swampt[i_dart];
					status_swampt[i_dart] = status_swampt[i_dart] ^ 0x40000000;
				}
				x_swampt[i_dart] += v_x_swampt[i_dart];
				if(live_swampt[i_dart] <= 0){
					live_swampt[i_dart] = 0;
					status_swampt[i_dart] = 0;
				}
			}
			x_label:;

		}
		for(i_dart = 0; i_dart < 2; i_dart++){
			if(live_skull[i_dart]){
				if (x_skull[i_dart] <= 0){
					status_skull[i_dart] = 0;
					live_skull[i_dart] = 0;
					goto y_label0;
				}
				if (x_skull[i_dart] > mapX + 2560|| (x_lady[i_dart] + 200) < mapX){
					status_skull[i_dart] &= 0x7fffffff;
				} else {
					status_skull[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
					if(status_dart[j_dart]){
						if ((x_skull[i_dart] + 100 > x_dart[j_dart]) && (x_skull[i_dart] < x_dart[j_dart] + 48) && (y_skull[i_dart] < y_dart[j_dart] + 48)){
							live_skull[i_dart] = -1;
							status_dart[j_dart] = 0;
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
					if ((x_skull[i_dart] + 100 > x) && (x_skull[i_dart] < x + 160) && (y_skull[i_dart] < y + 240)){
						live_skull[i_dart] = -1;
						if (status_ninja & 0x02000000){
							if(spin){
								life += 5;
							}
						} else {
							hurt_counter = 60;
							air_counter = 30;
							v_y = -v_jump3;
							on_gnd = 0;
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
							life_energy_status |= 0x00000080;
							life -= 10;
							energy += 5;
						}
					}
				}
				if (x > x_skull[i_dart]){
					v_x_skull[i_dart] = v_enemy1;
					status_skull[i_dart] |= 0x40000000;
				} else{
					v_x_skull[i_dart] = -v_enemy1;
					status_skull[i_dart] &= 0xbfffffff;
				}

				if (y > y_skull[i_dart]){
					v_y_skull[i_dart] = v_enemy1;
				} else{
					v_y_skull[i_dart] = -v_enemy1;
				}
				x_skull[i_dart] += v_x_skull[i_dart];
				y_skull[i_dart] += v_y_skull[i_dart];
				if(live_skull[i_dart] <= 0){
					live_skull[i_dart] = 0;
					status_skull[i_dart] = 0;
				}
			}
			y_label0:;
		}
		if (life >= 100){
			life = 100;
		}
		if (life<= 1){
			life = 1;
			goto Dead_label;
		}
		if(cd_dart > 0){
			cd_dart--;
		}
		//////////////////////////////////////
		if (!on_gnd){
			if (y > ground){
				if (v_y > 0){
					v_y = 0;
				}
				y = ground;
				on_gnd = 1;
			}
			else{
				v_y += vel_y;
			}
		}
		if (spin){
			v_y = 0;
		}
		if(air_counter == 0){
			if (v_x == 0){
				status_ninja &= 0xe3ffffff;
			} else {
				status_ninja |= 0x9c000000;
			}
		}
		y += v_y;
		x += v_x;
		if (y < 0){
			y = 0;
		}
		if (x < 0){
			x = 0;
		}
		if (x >= map_bound){
			x = map_bound;
			goto Boss_label_pre;
		}
		if (mapX + left_bound > x){
			mapX = x - left_bound;
			if (mapX < 0){
				mapX = 0;
			}
		} else if(mapX + right_bound < x){
			mapX = x - right_bound;
			if (mapX > map_bound){
				mapX = map_bound;
			}
		}

		if (status_ninja & 0x02000000){
			if (energy <= 1){
				energy = 1;
				life_energy_status &= 0xffff7fff;
				status_ninja &= 0xfdffffff;
			} else if((clock & 0x00000003) == 0){
				energy -= 1;
			}
		} else if(energy < 80){
			if((clock & 0x0000000f) == 0){
				energy += 1;
			}
		} else if(energy >= 80){
			energy = 80;
			life_energy_status |= 0x00008000;
		}

		if (hurt_counter > 0){
			hurt_counter -= 1;
		} else {
			hurt_counter = 0;
			life_energy_status &= 0xffffff7f;
		}
		if (air_counter > 0){
			air_counter -= 1;
		}
		if(spin <= 0){
			spin = 0;
		} else {
			spin -= 1;
			status_ninja = (status_ninja | 0x04000000) & 0xe7ffffff;
		}
		if(spin_cd <= 0){
			spin_cd = 0;
		} else {
			spin_cd -= 1;
		}

	}
	Boss_label_pre:;
	int x_fireball[4];
	int y_fireball[4];
	unsigned int status_fireball[4];
	unsigned int live_fireball[4];
	int x_iceball[2];
	int y_iceball[2];
	int v_x_iceball[2];
	int v_y_iceball[2];
	short int live_iceball[2];
	unsigned int status_iceball[2];

	int x_icear[2];
	int y_icear[2];
	int v_x_icear[2];
	short int live_icear[2];
	unsigned int status_icear[2];
	for (int i = 0; i < 2; i++){
		status_iceball[i] = 0;
		status_icear[i] = 0;
	}
	for (int i = 0; i < 4; i++){
		status_fireball[i] = 0;
	}
	mapX = map_bound;
	reg_ptr[18] = 0;
	reg_ptr[19] = 0;
	reg_ptr[20] = 0;
	reg_ptr[21] = 0;
	reg_ptr[22] = 0;
	reg_ptr[23] = 0;
	reg_ptr[37] = 0;
	reg_ptr[38] = 0;
	reg_ptr[39] = 0;
	reg_ptr[40] = 0;
	reg_ptr[33] = 0;
	reg_ptr[34] = 0;
	reg_ptr[35] = 0;
	reg_ptr[36] = 0;
	reg_ptr[10] = 0;
	reg_ptr[11] = 0;
	reg_ptr[12] = 0;
	reg_ptr[13] = 0;
	reg_ptr[25] = 0;
	reg_ptr[26] = 0;
	reg_ptr[27] = 0;
	reg_ptr[28] = 0;

	y = ground;
	x = map_bound + 40;
	status_ninja = 0xd0000000;
	unsigned int campfire_status = 0;
	int boss_countdown = 270;
	int x_boss = 2560 + 320 - 1;
	int status_boss = 0;
	while(1){
		clock += 1;
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");

		reg_ptr[0] = 2560 | 0x00020000;
		reg_ptr[1] = (life + (energy << 8)) | life_energy_status;
		reg_ptr[2] = (((y_dart[0]>>3) << 16) + (x_dart[0]>>3)) | status_dart[0];
		reg_ptr[3] = (((y_dart[1]>>3) << 16) + (x_dart[1]>>3)) | status_dart[1];
		reg_ptr[4] = (((y_dart[2]>>3) << 16) + (x_dart[2]>>3)) | status_dart[2];
		reg_ptr[5] = (((y_dart[3]>>3) << 16) + (x_dart[3]>>3)) | status_dart[3];
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
		reg_ptr[41] = (0x00b00000 ^ 2660) | campfire_status;
		reg_ptr[42] = (0x00c40000 ^ 2650) | 0x80000000;
		reg_ptr[47] = x_boss | status_boss;
		reg_ptr[62] = 1;
		key_char = getkeys(keycodes);
		reg_ptr[62] = 0;
		if ((key_char & 0x04) && campfire_status != 0x80000000){
			campfire_status = 0x80000000;
			boss_countdown = 540;
			status_boss = 0x80000000;
			life = 100;
			energy = 60;
		}
		if (boss_countdown > 0){
			boss_countdown -= 1;
			x_boss = boss_countdown / 2 + 50 + 2560;
		}
		if (boss_countdown <= 0){
			x_boss = 2610;
			status_boss = 0x80000000;
			goto Boss_label;
		}
	}

	Boss_label : ;
	hurt_counter = 0;
	air_counter = 0;
	x_boss = 2610;
	status_boss = 0x80000000;
	int boss_life = 20;
	clock = 0;
	mapX = 20480;
	x = 20480 + 320;
	while(1){
		clock += 1;
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = 2560 | 0x00020000;
		reg_ptr[1] = (life + (energy << 8)) | life_energy_status;
		reg_ptr[2] = (((y_dart[0]>>3) << 16) + (x_dart[0]>>3)) | status_dart[0];
		reg_ptr[3] = (((y_dart[1]>>3) << 16) + (x_dart[1]>>3)) | status_dart[1];
		reg_ptr[4] = (((y_dart[2]>>3) << 16) + (x_dart[2]>>3)) | status_dart[2];
		reg_ptr[5] = (((y_dart[3]>>3) << 16) + (x_dart[3]>>3)) | status_dart[3];
		reg_ptr[10] = (((y_iceball[0]>>3) << 16) + (x_iceball[0]>>3)) | status_iceball[0];
		reg_ptr[11] = (((y_iceball[1]>>3) << 16) + (x_iceball[1]>>3)) | status_iceball[1];
		reg_ptr[12] = (((y_icear[0]>>3) << 16) + (x_icear[0]>>3)) | status_icear[0];
		reg_ptr[13] = (((y_icear[1]>>3) << 16) + (x_icear[1]>>3)) | status_icear[1];

		reg_ptr[25] = (((y_fireball[0]>>3) << 16) + (x_fireball[0]>>3)) | status_fireball[0];
		reg_ptr[26] = (((y_fireball[1]>>3) << 16) + (x_fireball[1]>>3)) | status_fireball[1];
		reg_ptr[27] = (((y_fireball[2]>>3) << 16) + (x_fireball[2]>>3)) | status_fireball[2];
		reg_ptr[28] = (((y_fireball[3]>>3) << 16) + (x_fireball[3]>>3)) | status_fireball[3];

		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
		reg_ptr[41] = (0x00b00000 ^ 2660) | 0x80000000;
		reg_ptr[42] = (0x00c40000 ^ 2650) | 0x80000000;
		reg_ptr[47] = x_boss | status_boss;
		reg_ptr[62] = 1;

		if(! spin){
			v_x = 0;
		}
		key_char = air_counter ? 0 : getkeys(keycodes);
		reg_ptr[62] = 0;
		// W 01
		if ((key_char & 0x01) && energy == 80){
			status_ninja |= 0x02000000;
		}
		// D 08
		if(!spin){
			if (key_char & 0x08){
				v_x += vel_x;
				status_ninja |= 0x40000000;
			}
			// A 02
			if (key_char & 0x02){
				v_x -= vel_x;
				status_ninja &= 0xbfffffff;
			}
		}
		// K
		if ((key_char & 0x20) && on_gnd){
			v_y = (status_ninja & 0x02000000) ? -v_jump2 : -v_jump1;
			on_gnd = 0;
		}

		//J
		if ((key_char & 0x10) && !cd_dart){
			if(status_ninja & 0x02000000){
				if(!spin_cd){
					spin = 30;
					spin_cd = 60;
					v_x = (status_ninja & 0x40000000) ? vel_x2 : -vel_x2;
				}
			} else {
				cnt_dart[idx_dart] = 60;
				cd_dart = 20;
				x_dart[idx_dart] = x;
				y_dart[idx_dart] = y;
				status_dart[idx_dart] |= 0x80000000;
				if (status_ninja & 0x40000000){
					v_x_dart[idx_dart] = vel_dart;
					status_dart[idx_dart] |= 0x40000000;
				} else{
					v_x_dart[idx_dart] = -vel_dart;
					status_dart[idx_dart] &= 0xbfffffff;
				}
				if(idx_dart++ == 3){
					idx_dart = 0;
				}
			}
		}

		if ((clock & 0x000000ff) == 0){
			status_boss = 0x90000000;
			x_iceball[0] = mapX + 1120;
			y_iceball[0] = mapX + 1200;
			v_x_iceball[0] = 0;
			v_y_iceball[0] = 0;
			live_iceball[0] = 1;
			status_iceball[0] = 0x80000000;
			x_iceball[1] = mapX + 1440;
			y_iceball[1] = mapX + 1520;
			v_x_iceball[1] = 0;
			v_y_iceball[1] = 0;
			live_iceball[1] = 1;
			status_iceball[1] = 0x80000000;
		}

		if ((clock & 0x000000ff) == 0x80){
			status_boss = 0x80000000;
			x_fireball[0] = mapX + 1280;
			y_fireball[0] = 0;
			status_fireball[0] = 0x80000000;
			live_fireball[0] = 0x80000000;
			x_fireball[1] = mapX + 1920;
			y_fireball[1] = 0;
			status_fireball[1] = 0x80000000;
			live_fireball[1] = 0x80000000;
			x_fireball[2] = mapX + 2560;
			y_fireball[2] = 0;
			status_fireball[2] = 0x80000000;
			live_fireball[2] = 0x80000000;
			x_fireball[3] = mapX + 2560;
			y_fireball[3] = 640;
			status_fireball[3] = 0x80000000;
			live_fireball[3] = 0x80000000;
		}




		/////////////////dart/////////////////
		for(i_dart = 0; i_dart < 4; i_dart++){
			if(cnt_dart[i_dart] > 0){
				cnt_dart[i_dart]--;
				x_dart[i_dart] += v_x_dart[i_dart];
			}
			else{
				status_dart[i_dart] = 0;
			}

			if(live_fireball[i_dart]){
				if (y_fireball[i_dart] >= 1920){
					status_fireball[i_dart] = 0;
					live_fireball[i_dart] = 0;
					goto fire_out;
				}
				if (x_fireball[i_dart] > mapX + 2560|| (x_fireball[i_dart] + 200) < mapX){
					status_fireball[i_dart] &= 0x7fffffff;
				} else {
					status_fireball[i_dart] |= 0x80000000;
				}
				for(int j_dart = 0; j_dart < 4; j_dart++){
					if(status_dart[j_dart]){
						if ((x_fireball[i_dart] + 100 > x_dart[j_dart]) && (x_fireball[i_dart] < x_dart[j_dart] + 48)
								&& (y_fireball[i_dart] + 190 < y_dart[j_dart]) && (y_fireball[i_dart] >  y_dart[j_dart] + 48)){
							status_dart[j_dart] = 0;
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
					if ((x_fireball[i_dart] + 100 > x) && (x_fireball[i_dart] < x + 160) && (y_fireball[i_dart] < y + 160)
							&& (y_fireball[i_dart] + 160 < y)){
						if (status_ninja & 0x02000000){
							if(spin){
								life += 5;
							}
						} else {
							hurt_counter = 60;
							air_counter = 30;
							v_y = -v_jump3;
							on_gnd = 0;
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
							life_energy_status |= 0x00000080;
							life -= 10;
							energy += 5;
						}
					}
				}

				x_fireball[i_dart] -= v_enemy3;
				y_fireball[i_dart] += v_enemy3;
				if(live_fireball[i_dart] <= 0){
					live_fireball[i_dart] = 0;
					status_fireball[i_dart] = 0;
				}
			}
			fire_out: ;
		}
		for(i_dart = 0; i_dart < 2; i_dart++){
			if (y_iceball[i_dart] >= 1920){
					status_iceball[i_dart] = 0;
					live_iceball[i_dart] = 0;
					goto ice_out;
				}
				if (x_iceball[i_dart] > mapX + 2560|| (x_iceball[i_dart] + 200) < mapX){
					status_iceball[i_dart] &= 0x7fffffff;
				} else {
					status_iceball[i_dart] |= 0x80000000;
				}
			if(live_iceball[i_dart]){
				for(int j_dart = 0; j_dart < 4; j_dart++){
					if(status_dart[j_dart]){
						if ((x_iceball[i_dart] + 100 > x_dart[j_dart]) && (x_iceball[i_dart] < x_dart[j_dart] + 48) && (y_iceball[i_dart] < y_dart[j_dart] + 48)
										&& (y_iceball[i_dart] + 100 > y_dart[j_dart])){
							live_skull[i_dart] = 0;
							status_dart[j_dart] = 0;
							cnt_dart[j_dart] = 0;
							energy += 10;
						}
					}
				}
				if(hurt_counter == 0){
					if ((x_iceball[i_dart] + 100 > x) && (x_iceball[i_dart] < x + 160) && (y_iceball[i_dart] < y + 240)&& (y_iceball[i_dart] + 100 > y)){
						live_iceball[i_dart] = 0;
						if (status_ninja & 0x02000000){
							if(spin){
								life += 5;
							}
						} else {
							hurt_counter = 60;
							air_counter = 30;
							v_y = -v_jump3;
							on_gnd = 0;
							status_ninja = (status_ninja | 0x08000000) & 0xebffffff;
							life_energy_status |= 0x00000080;
							life -= 10;
							energy += 5;
						}
					}
				}
				if (x > x_iceball[i_dart]){
					v_x_iceball[i_dart] = v_enemy1;
					status_iceball[i_dart] |= 0x40000000;
				} else{
					v_x_iceball[i_dart] = -v_enemy1;
					status_iceball[i_dart] &= 0xbfffffff;
				}

				if (y > y_iceball[i_dart]){
					v_y_iceball[i_dart] = v_enemy1;
				} else{
					v_y_iceball[i_dart] = -v_enemy1;
				}
				x_iceball[i_dart] += v_x_iceball[i_dart];
				y_iceball[i_dart] += v_y_iceball[i_dart];
				if(live_iceball[i_dart] <= 0){
					live_iceball[i_dart] = 0;
					status_iceball[i_dart] = 0;
				}
			}
			ice_out:;
		}
		//*/
		for(int j_dart = 0; j_dart < 4; j_dart++){
			if(status_dart[j_dart]){
				if (2000 + mapX< x_dart[j_dart]){
					boss_life -= 1;
					status_dart[j_dart] = 0;
					cnt_dart[j_dart] = 0;
					energy += 10;
				}
			}
		}
		if(hurt_counter == 0){
			if (200 + mapX < x){
				if (status_ninja & 0x02000000){
					if(spin){
						life += 5;
						boss_life -= 3;
					}
				}

			}
		}
		if (boss_life <= 0){
			status_boss = 0;
			goto win;
		}
		if (life<= 1){
			life = 1;
			goto Dead_label;
		}
		if(cd_dart > 0){
			cd_dart--;
		}
		//////////////////////////////////////
		if (!on_gnd){
			if (y > ground){
				if (v_y > 0){
					v_y = 0;
				}
				y = ground;
				on_gnd = 1;
			}
			else{
				v_y += vel_y;
			}
		}
		if (spin){
			v_y = 0;
		}
		if(air_counter == 0){
			if (v_x == 0){
				status_ninja &= 0xe3ffffff;
			} else {
				status_ninja |= 0x9c000000;
			}
		}
		y += v_y;
		x += v_x;
		if (y < 0){
			y = 0;
		}
		if (x < 0){
			x = 0;
		}
		if (x >= mapX + 2559){
			x = mapX + 2559;
		}
		if (mapX > x){
			x = mapX;
		}

		if (status_ninja & 0x02000000){
			if (energy <= 1){
				energy = 1;
				life_energy_status &= 0xffff7fff;
				status_ninja &= 0xfdffffff;
			} else if((clock & 0x00000003) == 0){
				energy -= 1;
			}
		} else if(energy < 80){
			if((clock & 0x0000000f) == 0){
				energy += 1;
			}
		} else if(energy >= 80){
			energy = 80;
			life_energy_status |= 0x00008000;
		}

		if (hurt_counter > 0){
			hurt_counter -= 1;
		} else {
			hurt_counter = 0;
			life_energy_status &= 0xffffff7f;
		}
		if (air_counter > 0){
			air_counter -= 1;
		}
		if(spin <= 0){
			spin = 0;
		} else {
			spin -= 1;
			status_ninja = (status_ninja | 0x04000000) & 0xe7ffffff;
		}
		if(spin_cd <= 0){
			spin_cd = 0;
		} else {
			spin_cd -= 1;
		}
	}
	Dead_label: ;
	status_ninja = (status_ninja | 0x14000000) & 0xf7ffffff;
	while(1){
		clock += 1;
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = (mapX >> 3) | 0x00010000;
		reg_ptr[1] = (life + (energy << 8)) | life_energy_status;
		reg_ptr[2] = (((y_dart[0]>>3) << 16) + (x_dart[0]>>3)) | status_dart[0];
		reg_ptr[3] = (((y_dart[1]>>3) << 16) + (x_dart[1]>>3)) | status_dart[1];
		reg_ptr[4] = (((y_dart[2]>>3) << 16) + (x_dart[2]>>3)) | status_dart[2];
		reg_ptr[5] = (((y_dart[3]>>3) << 16) + (x_dart[3]>>3)) | status_dart[3];
		reg_ptr[20] = (0x00b40000 + (x_lady[0]>>3)) | status_lady[0];
		reg_ptr[21] = (0x00b40000 + (x_lady[1]>>3)) | status_lady[1];
		reg_ptr[22] = (0x00b40000+ (x_lady[2]>>3)) | status_lady[2];
		reg_ptr[23] = (0x00b40000 + (x_lady[3]>>3)) | status_lady[3];
		reg_ptr[37] = (0x00b40000 + (x_zombie[0]>>3)) | status_zombie[0];
		reg_ptr[38] = (0x00b40000 + (x_zombie[1]>>3)) | status_zombie[1];
		reg_ptr[39] = (0x00b40000 + (x_zombie[2]>>3)) | status_zombie[2];
		reg_ptr[40] = (0x00b40000 + (x_zombie[3]>>3)) | status_zombie[3];
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
		reg_ptr[62] = 1;
		key_char = getkeys(keycodes);
		reg_ptr[62] = 0;
		if (key_char & 0x40){
			goto Start_label;
		}
	}

	win :;
	status_ninja = 0;
	while(1){
		clock += 1;
		//printf("\nWaiting\n");
		while(!reg_ptr[63]){
			//printf("%x\n", reg_ptr[22]);
		}
		//printf("a Cycle\n");
		reg_ptr[0] = (mapX >> 3) | 0x00040000;
		for (int i = 2; i < 41; i++){
			reg_ptr[i] = 0;
		}
		reg_ptr[32] = (((y>>3) << 16) + (x >> 3)) | status_ninja;
		reg_ptr[62] = 1;
		key_char = getkeys(keycodes);
		reg_ptr[62] = 0;
		if (key_char & 0x40){
			goto Start_label;
		}
	}
	return 0;
}



