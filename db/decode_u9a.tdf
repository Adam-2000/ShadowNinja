--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_u9a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode607w[3..0]	: WIRE;
	w_anode624w[3..0]	: WIRE;
	w_anode634w[3..0]	: WIRE;
	w_anode644w[3..0]	: WIRE;
	w_anode654w[3..0]	: WIRE;
	w_anode664w[3..0]	: WIRE;
	w_anode674w[3..0]	: WIRE;
	w_anode684w[3..0]	: WIRE;
	w_anode694w[3..0]	: WIRE;
	w_anode705w[3..0]	: WIRE;
	w_anode715w[3..0]	: WIRE;
	w_anode725w[3..0]	: WIRE;
	w_anode735w[3..0]	: WIRE;
	w_anode745w[3..0]	: WIRE;
	w_anode755w[3..0]	: WIRE;
	w_anode765w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode684w[3..3], w_anode674w[3..3], w_anode664w[3..3], w_anode654w[3..3], w_anode644w[3..3], w_anode634w[3..3], w_anode624w[3..3], w_anode607w[3..3]);
	eq_wire2w[] = ( w_anode765w[3..3], w_anode755w[3..3], w_anode745w[3..3], w_anode735w[3..3], w_anode725w[3..3], w_anode715w[3..3], w_anode705w[3..3], w_anode694w[3..3]);
	w_anode607w[] = ( (w_anode607w[2..2] & (! data_wire[2..2])), (w_anode607w[1..1] & (! data_wire[1..1])), (w_anode607w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode624w[] = ( (w_anode624w[2..2] & (! data_wire[2..2])), (w_anode624w[1..1] & (! data_wire[1..1])), (w_anode624w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode634w[] = ( (w_anode634w[2..2] & (! data_wire[2..2])), (w_anode634w[1..1] & data_wire[1..1]), (w_anode634w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode644w[] = ( (w_anode644w[2..2] & (! data_wire[2..2])), (w_anode644w[1..1] & data_wire[1..1]), (w_anode644w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode654w[] = ( (w_anode654w[2..2] & data_wire[2..2]), (w_anode654w[1..1] & (! data_wire[1..1])), (w_anode654w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode664w[] = ( (w_anode664w[2..2] & data_wire[2..2]), (w_anode664w[1..1] & (! data_wire[1..1])), (w_anode664w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode674w[] = ( (w_anode674w[2..2] & data_wire[2..2]), (w_anode674w[1..1] & data_wire[1..1]), (w_anode674w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode684w[] = ( (w_anode684w[2..2] & data_wire[2..2]), (w_anode684w[1..1] & data_wire[1..1]), (w_anode684w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode694w[] = ( (w_anode694w[2..2] & (! data_wire[2..2])), (w_anode694w[1..1] & (! data_wire[1..1])), (w_anode694w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode705w[] = ( (w_anode705w[2..2] & (! data_wire[2..2])), (w_anode705w[1..1] & (! data_wire[1..1])), (w_anode705w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode715w[] = ( (w_anode715w[2..2] & (! data_wire[2..2])), (w_anode715w[1..1] & data_wire[1..1]), (w_anode715w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode725w[] = ( (w_anode725w[2..2] & (! data_wire[2..2])), (w_anode725w[1..1] & data_wire[1..1]), (w_anode725w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode735w[] = ( (w_anode735w[2..2] & data_wire[2..2]), (w_anode735w[1..1] & (! data_wire[1..1])), (w_anode735w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode745w[] = ( (w_anode745w[2..2] & data_wire[2..2]), (w_anode745w[1..1] & (! data_wire[1..1])), (w_anode745w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode755w[] = ( (w_anode755w[2..2] & data_wire[2..2]), (w_anode755w[1..1] & data_wire[1..1]), (w_anode755w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode765w[] = ( (w_anode765w[2..2] & data_wire[2..2]), (w_anode765w[1..1] & data_wire[1..1]), (w_anode765w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
